/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include "FreeRTOS.h"
#include <stdio.h>
#include "task.h"

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
#warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

#define STACK_SIZE 200;

void vTaskOne(void *pvParameters);
void vTaskTwo(void *pvParameters);

/*Definici√≥n de variables del sistema*/

uint32_t SystemCoreClock = 16E6;

int main(void) {

	BaseType_t xReturned;
	TaskHandle_t HandleTask1 = NULL;
	TaskHandle_t HandleTask2 = NULL;

	xReturned = xTaskCreate(vTaskOne, /* Function that implements the task. */
	"Task-1", /* Text name for the task. */
	512, /* Stack size in words, not bytes. */
	"Hola Mundo desde la Tarea-1", /* Parameter passed into the task. */
	2,/* Priority at which the task is created. */
	&HandleTask1); /* Used to pass out the created task's handle. */

	configASSERT(xReturned == pdPASS);

	xReturned = xTaskCreate(vTaskTwo, /* Function that implements the task. */
	"Task-2", /* Text name for the task. */
	512, /* Stack size in words, not bytes. */
	"Hola Mundo desde la Tarea-1", /* Parameter passed into the task. */
	2,/* Priority at which the task is created. */
	&HandleTask2); /* Used to pass out the created task's handle. */

	configASSERT(xReturned == pdPASS);

	//Start the created task running.

	vTaskStartScheduler();

	/* Loop forever */
	while (1) {
		/* SI llegamos es que algo salio mal... */
	}
}

/* Fncin que gobierna la tarea 1 */
void vTaskOne(void *pvParameters) {

	while (1) {
		printf("%s\n", (char*) pvParameters);
		taskYIELD();
	}
}

/* Fncin que gobierna la tarea 2 */
void vTaskTwo(void *pvParameters) {

	while (1) {
		printf("%s\n", (char*) pvParameters);
		taskYIELD();
	}
}
