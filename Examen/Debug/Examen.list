
Examen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092d0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000058c  08009470  08009470  00019470  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099fc  080099fc  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  080099fc  080099fc  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080099fc  080099fc  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099fc  080099fc  000199fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a00  08009a00  00019a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08009a04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000450  200001e8  08009bec  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000638  08009bec  00020638  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000498d  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001029  00000000  00000000  00024ba5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000480  00000000  00000000  00025bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003e8  00000000  00000000  00026050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010947  00000000  00000000  00026438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000053a2  00000000  00000000  00036d7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00057d45  00000000  00000000  0003c121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00093e66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002894  00000000  00000000  00093eb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009458 	.word	0x08009458

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	08009458 	.word	0x08009458

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff23 	bl	8000b0c <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc99 	bl	8000628 <__aeabi_dmul>
 8000cf6:	f7ff ff6f 	bl	8000bd8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc1a 	bl	8000534 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc90 	bl	8000628 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff fad2 	bl	80002b8 <__aeabi_dsub>
 8000d14:	f7ff ff60 	bl	8000bd8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <main>:
float wheelsize = 5.7;
float rotate = M_PI / 2;

void updatePosition(void);

int main(void) {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
	//yellow 0, blue 1

	configPeripherals();
 8000d2a:	f000 f869 	bl	8000e00 <configPeripherals>

	/* Loop forever */
	while (1) {
		/* SI llegamos es que algo salio mal... */
		/* El caracter '@' nos indica que es el final de la cadena*/
		if (rxData2 != '\0') {
 8000d2e:	4b2c      	ldr	r3, [pc, #176]	; (8000de0 <main+0xbc>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d037      	beq.n	8000da6 <main+0x82>
//			writeChar(&handlerConexion, rxData2);
			bufferReception[counterReception] = rxData2;
 8000d36:	4b2b      	ldr	r3, [pc, #172]	; (8000de4 <main+0xc0>)
 8000d38:	881b      	ldrh	r3, [r3, #0]
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	4b28      	ldr	r3, [pc, #160]	; (8000de0 <main+0xbc>)
 8000d3e:	7819      	ldrb	r1, [r3, #0]
 8000d40:	4b29      	ldr	r3, [pc, #164]	; (8000de8 <main+0xc4>)
 8000d42:	5499      	strb	r1, [r3, r2]
			counterReception++;
 8000d44:	4b27      	ldr	r3, [pc, #156]	; (8000de4 <main+0xc0>)
 8000d46:	881b      	ldrh	r3, [r3, #0]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	b29a      	uxth	r2, r3
 8000d4c:	4b25      	ldr	r3, [pc, #148]	; (8000de4 <main+0xc0>)
 8000d4e:	801a      	strh	r2, [r3, #0]

			// If the incoming character is a newline, set a flag
			// so the main loop can do something about it
			if (rxData2 == '@') {
 8000d50:	4b23      	ldr	r3, [pc, #140]	; (8000de0 <main+0xbc>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b40      	cmp	r3, #64	; 0x40
 8000d56:	d113      	bne.n	8000d80 <main+0x5c>
				stringComplete = 1;
 8000d58:	4b24      	ldr	r3, [pc, #144]	; (8000dec <main+0xc8>)
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	701a      	strb	r2, [r3, #0]
				sprintf(bufferData, "\n");
 8000d5e:	4924      	ldr	r1, [pc, #144]	; (8000df0 <main+0xcc>)
 8000d60:	4824      	ldr	r0, [pc, #144]	; (8000df4 <main+0xd0>)
 8000d62:	f004 f90b 	bl	8004f7c <siprintf>
				writeString(&handlerTerminal, bufferData);
 8000d66:	4923      	ldr	r1, [pc, #140]	; (8000df4 <main+0xd0>)
 8000d68:	4823      	ldr	r0, [pc, #140]	; (8000df8 <main+0xd4>)
 8000d6a:	f003 fa36 	bl	80041da <writeString>
				//Agrego esta linea para crear el string con el null al final
				bufferReception[counterReception] = '\0';
 8000d6e:	4b1d      	ldr	r3, [pc, #116]	; (8000de4 <main+0xc0>)
 8000d70:	881b      	ldrh	r3, [r3, #0]
 8000d72:	461a      	mov	r2, r3
 8000d74:	4b1c      	ldr	r3, [pc, #112]	; (8000de8 <main+0xc4>)
 8000d76:	2100      	movs	r1, #0
 8000d78:	5499      	strb	r1, [r3, r2]
				counterReception = 0;
 8000d7a:	4b1a      	ldr	r3, [pc, #104]	; (8000de4 <main+0xc0>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	801a      	strh	r2, [r3, #0]
			}
			if (rxData2 == '\b') {
 8000d80:	4b17      	ldr	r3, [pc, #92]	; (8000de0 <main+0xbc>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	2b08      	cmp	r3, #8
 8000d86:	d10b      	bne.n	8000da0 <main+0x7c>
				counterReception--;
 8000d88:	4b16      	ldr	r3, [pc, #88]	; (8000de4 <main+0xc0>)
 8000d8a:	881b      	ldrh	r3, [r3, #0]
 8000d8c:	3b01      	subs	r3, #1
 8000d8e:	b29a      	uxth	r2, r3
 8000d90:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <main+0xc0>)
 8000d92:	801a      	strh	r2, [r3, #0]
				counterReception--;
 8000d94:	4b13      	ldr	r3, [pc, #76]	; (8000de4 <main+0xc0>)
 8000d96:	881b      	ldrh	r3, [r3, #0]
 8000d98:	3b01      	subs	r3, #1
 8000d9a:	b29a      	uxth	r2, r3
 8000d9c:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <main+0xc0>)
 8000d9e:	801a      	strh	r2, [r3, #0]
			}
			//Para que no vuelva entrar. Solo cambia debido a la interrupcion
			rxData2 = '\0';
 8000da0:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <main+0xbc>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	701a      	strb	r2, [r3, #0]
		}

		//Hacemos un analisis de la cadena de datos obtenida
		if (stringComplete) {
 8000da6:	4b11      	ldr	r3, [pc, #68]	; (8000dec <main+0xc8>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d0bf      	beq.n	8000d2e <main+0xa>
			parseCommands(bufferReception);
 8000dae:	480e      	ldr	r0, [pc, #56]	; (8000de8 <main+0xc4>)
 8000db0:	f000 fa1a 	bl	80011e8 <parseCommands>
			writeChar(&handlerConexion, '\n');
 8000db4:	210a      	movs	r1, #10
 8000db6:	4811      	ldr	r0, [pc, #68]	; (8000dfc <main+0xd8>)
 8000db8:	f003 f9f6 	bl	80041a8 <writeChar>
			stringComplete = 0;
 8000dbc:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <main+0xc8>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	701a      	strb	r2, [r3, #0]
			for (int i = 0;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	607b      	str	r3, [r7, #4]
 8000dc6:	e007      	b.n	8000dd8 <main+0xb4>
					i < sizeof(bufferReception) / sizeof(bufferReception[0]);
					i++) {
				bufferReception[i] = 0;
 8000dc8:	4a07      	ldr	r2, [pc, #28]	; (8000de8 <main+0xc4>)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4413      	add	r3, r2
 8000dce:	2200      	movs	r2, #0
 8000dd0:	701a      	strb	r2, [r3, #0]
					i++) {
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	607b      	str	r3, [r7, #4]
					i < sizeof(bufferReception) / sizeof(bufferReception[0]);
 8000dd8:	687b      	ldr	r3, [r7, #4]
			for (int i = 0;
 8000dda:	2b13      	cmp	r3, #19
 8000ddc:	d9f4      	bls.n	8000dc8 <main+0xa4>
		if (rxData2 != '\0') {
 8000dde:	e7a6      	b.n	8000d2e <main+0xa>
 8000de0:	20000334 	.word	0x20000334
 8000de4:	20000350 	.word	0x20000350
 8000de8:	20000354 	.word	0x20000354
 8000dec:	200004b0 	.word	0x200004b0
 8000df0:	08009470 	.word	0x08009470
 8000df4:	200003a8 	.word	0x200003a8
 8000df8:	20000204 	.word	0x20000204
 8000dfc:	2000029c 	.word	0x2000029c

08000e00 <configPeripherals>:
			}
		}
	}
}

void configPeripherals(void) {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0

	//Activacion cooprocesador matematico(importante para esta tarea)
	SCB->CPACR |= (0xF << 20);
 8000e04:	4bab      	ldr	r3, [pc, #684]	; (80010b4 <configPeripherals+0x2b4>)
 8000e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e0a:	4aaa      	ldr	r2, [pc, #680]	; (80010b4 <configPeripherals+0x2b4>)
 8000e0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	configPLL(100);
 8000e14:	2064      	movs	r0, #100	; 0x64
 8000e16:	f002 faa1 	bl	800335c <configPLL>

	ledUsuario.pGPIOx = GPIOC;
 8000e1a:	4ba7      	ldr	r3, [pc, #668]	; (80010b8 <configPeripherals+0x2b8>)
 8000e1c:	4aa7      	ldr	r2, [pc, #668]	; (80010bc <configPeripherals+0x2bc>)
 8000e1e:	601a      	str	r2, [r3, #0]
	ledUsuario.GPIO_PinConfig_t.GPIO_PinMode = GPIO_MODE_OUT;
 8000e20:	4ba5      	ldr	r3, [pc, #660]	; (80010b8 <configPeripherals+0x2b8>)
 8000e22:	2201      	movs	r2, #1
 8000e24:	715a      	strb	r2, [r3, #5]
	ledUsuario.GPIO_PinConfig_t.GPIO_PinNumber = PIN_5;
 8000e26:	4ba4      	ldr	r3, [pc, #656]	; (80010b8 <configPeripherals+0x2b8>)
 8000e28:	2205      	movs	r2, #5
 8000e2a:	711a      	strb	r2, [r3, #4]
	GPIO_Config(&ledUsuario);
 8000e2c:	48a2      	ldr	r0, [pc, #648]	; (80010b8 <configPeripherals+0x2b8>)
 8000e2e:	f002 f90d 	bl	800304c <GPIO_Config>

	dirPinYw.pGPIOx = GPIOD;
 8000e32:	4ba3      	ldr	r3, [pc, #652]	; (80010c0 <configPeripherals+0x2c0>)
 8000e34:	4aa3      	ldr	r2, [pc, #652]	; (80010c4 <configPeripherals+0x2c4>)
 8000e36:	601a      	str	r2, [r3, #0]
	dirPinYw.GPIO_PinConfig_t.GPIO_PinMode = GPIO_MODE_OUT;
 8000e38:	4ba1      	ldr	r3, [pc, #644]	; (80010c0 <configPeripherals+0x2c0>)
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	715a      	strb	r2, [r3, #5]
	dirPinYw.GPIO_PinConfig_t.GPIO_PinNumber = PIN_2;
 8000e3e:	4ba0      	ldr	r3, [pc, #640]	; (80010c0 <configPeripherals+0x2c0>)
 8000e40:	2202      	movs	r2, #2
 8000e42:	711a      	strb	r2, [r3, #4]
	GPIO_Config(&dirPinYw);
 8000e44:	489e      	ldr	r0, [pc, #632]	; (80010c0 <configPeripherals+0x2c0>)
 8000e46:	f002 f901 	bl	800304c <GPIO_Config>
	GPIO_WritePin(&dirPinYw, dirYellowVal);
 8000e4a:	4b9f      	ldr	r3, [pc, #636]	; (80010c8 <configPeripherals+0x2c8>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	4619      	mov	r1, r3
 8000e50:	489b      	ldr	r0, [pc, #620]	; (80010c0 <configPeripherals+0x2c0>)
 8000e52:	f002 fa25 	bl	80032a0 <GPIO_WritePin>

	dirPinBlue.pGPIOx = GPIOC;
 8000e56:	4b9d      	ldr	r3, [pc, #628]	; (80010cc <configPeripherals+0x2cc>)
 8000e58:	4a98      	ldr	r2, [pc, #608]	; (80010bc <configPeripherals+0x2bc>)
 8000e5a:	601a      	str	r2, [r3, #0]
	dirPinBlue.GPIO_PinConfig_t.GPIO_PinMode = GPIO_MODE_OUT;
 8000e5c:	4b9b      	ldr	r3, [pc, #620]	; (80010cc <configPeripherals+0x2cc>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	715a      	strb	r2, [r3, #5]
	dirPinBlue.GPIO_PinConfig_t.GPIO_PinNumber = PIN_12;
 8000e62:	4b9a      	ldr	r3, [pc, #616]	; (80010cc <configPeripherals+0x2cc>)
 8000e64:	220c      	movs	r2, #12
 8000e66:	711a      	strb	r2, [r3, #4]
	GPIO_Config(&dirPinBlue);
 8000e68:	4898      	ldr	r0, [pc, #608]	; (80010cc <configPeripherals+0x2cc>)
 8000e6a:	f002 f8ef 	bl	800304c <GPIO_Config>
	GPIO_WritePin(&dirPinBlue, dirBlueVal);
 8000e6e:	4b98      	ldr	r3, [pc, #608]	; (80010d0 <configPeripherals+0x2d0>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	4619      	mov	r1, r3
 8000e74:	4895      	ldr	r0, [pc, #596]	; (80010cc <configPeripherals+0x2cc>)
 8000e76:	f002 fa13 	bl	80032a0 <GPIO_WritePin>

	//Pines necesarios para el uso del USART2
	tx2pin.pGPIOx = GPIOA;
 8000e7a:	4b96      	ldr	r3, [pc, #600]	; (80010d4 <configPeripherals+0x2d4>)
 8000e7c:	4a96      	ldr	r2, [pc, #600]	; (80010d8 <configPeripherals+0x2d8>)
 8000e7e:	601a      	str	r2, [r3, #0]
	tx2pin.GPIO_PinConfig_t.GPIO_PinNumber = PIN_2;
 8000e80:	4b94      	ldr	r3, [pc, #592]	; (80010d4 <configPeripherals+0x2d4>)
 8000e82:	2202      	movs	r2, #2
 8000e84:	711a      	strb	r2, [r3, #4]
	tx2pin.GPIO_PinConfig_t.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000e86:	4b93      	ldr	r3, [pc, #588]	; (80010d4 <configPeripherals+0x2d4>)
 8000e88:	2202      	movs	r2, #2
 8000e8a:	715a      	strb	r2, [r3, #5]
	tx2pin.GPIO_PinConfig_t.GPIO_PinPuPdControl = GPIO_PUPDR_PULLUP;
 8000e8c:	4b91      	ldr	r3, [pc, #580]	; (80010d4 <configPeripherals+0x2d4>)
 8000e8e:	2201      	movs	r2, #1
 8000e90:	71da      	strb	r2, [r3, #7]
	tx2pin.GPIO_PinConfig_t.GPIO_PinSpeed = GPIO_OSPEED_FAST; //Se usa en velocidad rapida
 8000e92:	4b90      	ldr	r3, [pc, #576]	; (80010d4 <configPeripherals+0x2d4>)
 8000e94:	2202      	movs	r2, #2
 8000e96:	719a      	strb	r2, [r3, #6]
	tx2pin.GPIO_PinConfig_t.GPIO_PinAltFunMode = 7;
 8000e98:	4b8e      	ldr	r3, [pc, #568]	; (80010d4 <configPeripherals+0x2d4>)
 8000e9a:	2207      	movs	r2, #7
 8000e9c:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&tx2pin);
 8000e9e:	488d      	ldr	r0, [pc, #564]	; (80010d4 <configPeripherals+0x2d4>)
 8000ea0:	f002 f8d4 	bl	800304c <GPIO_Config>

	rx2pin.pGPIOx = GPIOA;
 8000ea4:	4b8d      	ldr	r3, [pc, #564]	; (80010dc <configPeripherals+0x2dc>)
 8000ea6:	4a8c      	ldr	r2, [pc, #560]	; (80010d8 <configPeripherals+0x2d8>)
 8000ea8:	601a      	str	r2, [r3, #0]
	rx2pin.GPIO_PinConfig_t.GPIO_PinNumber = PIN_3;
 8000eaa:	4b8c      	ldr	r3, [pc, #560]	; (80010dc <configPeripherals+0x2dc>)
 8000eac:	2203      	movs	r2, #3
 8000eae:	711a      	strb	r2, [r3, #4]
	rx2pin.GPIO_PinConfig_t.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000eb0:	4b8a      	ldr	r3, [pc, #552]	; (80010dc <configPeripherals+0x2dc>)
 8000eb2:	2202      	movs	r2, #2
 8000eb4:	715a      	strb	r2, [r3, #5]
	rx2pin.GPIO_PinConfig_t.GPIO_PinPuPdControl = GPIO_PUPDR_PULLUP;
 8000eb6:	4b89      	ldr	r3, [pc, #548]	; (80010dc <configPeripherals+0x2dc>)
 8000eb8:	2201      	movs	r2, #1
 8000eba:	71da      	strb	r2, [r3, #7]
	rx2pin.GPIO_PinConfig_t.GPIO_PinSpeed = GPIO_OSPEED_FAST;
 8000ebc:	4b87      	ldr	r3, [pc, #540]	; (80010dc <configPeripherals+0x2dc>)
 8000ebe:	2202      	movs	r2, #2
 8000ec0:	719a      	strb	r2, [r3, #6]
	rx2pin.GPIO_PinConfig_t.GPIO_PinAltFunMode = 7;
 8000ec2:	4b86      	ldr	r3, [pc, #536]	; (80010dc <configPeripherals+0x2dc>)
 8000ec4:	2207      	movs	r2, #7
 8000ec6:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&rx2pin);
 8000ec8:	4884      	ldr	r0, [pc, #528]	; (80010dc <configPeripherals+0x2dc>)
 8000eca:	f002 f8bf 	bl	800304c <GPIO_Config>

	handlerTerminal.ptrUSARTx = USART2;
 8000ece:	4b84      	ldr	r3, [pc, #528]	; (80010e0 <configPeripherals+0x2e0>)
 8000ed0:	4a84      	ldr	r2, [pc, #528]	; (80010e4 <configPeripherals+0x2e4>)
 8000ed2:	601a      	str	r2, [r3, #0]
	handlerTerminal.USART_Config.USART_baudrate = 115200;
 8000ed4:	4b82      	ldr	r3, [pc, #520]	; (80010e0 <configPeripherals+0x2e0>)
 8000ed6:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000eda:	609a      	str	r2, [r3, #8]
	handlerTerminal.USART_Config.USART_datasize = USART_DATASIZE_8BIT;
 8000edc:	4b80      	ldr	r3, [pc, #512]	; (80010e0 <configPeripherals+0x2e0>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	731a      	strb	r2, [r3, #12]
	handlerTerminal.USART_Config.USART_mode = USART_MODE_RXTX;
 8000ee2:	4b7f      	ldr	r3, [pc, #508]	; (80010e0 <configPeripherals+0x2e0>)
 8000ee4:	2202      	movs	r2, #2
 8000ee6:	711a      	strb	r2, [r3, #4]
	handlerTerminal.USART_Config.USART_parity = USART_PARITY_NONE;
 8000ee8:	4b7d      	ldr	r3, [pc, #500]	; (80010e0 <configPeripherals+0x2e0>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	735a      	strb	r2, [r3, #13]
	handlerTerminal.USART_Config.USART_stopbits = USART_STOPBIT_1;
 8000eee:	4b7c      	ldr	r3, [pc, #496]	; (80010e0 <configPeripherals+0x2e0>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	739a      	strb	r2, [r3, #14]
	handlerTerminal.USART_Config.USART_RX_Int_Ena = ENABLE;
 8000ef4:	4b7a      	ldr	r3, [pc, #488]	; (80010e0 <configPeripherals+0x2e0>)
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	73da      	strb	r2, [r3, #15]

	USART_Config(&handlerTerminal);
 8000efa:	4879      	ldr	r0, [pc, #484]	; (80010e0 <configPeripherals+0x2e0>)
 8000efc:	f002 fd90 	bl	8003a20 <USART_Config>

	tx2pin.pGPIOx = GPIOA;
 8000f00:	4b74      	ldr	r3, [pc, #464]	; (80010d4 <configPeripherals+0x2d4>)
 8000f02:	4a75      	ldr	r2, [pc, #468]	; (80010d8 <configPeripherals+0x2d8>)
 8000f04:	601a      	str	r2, [r3, #0]
	tx2pin.GPIO_PinConfig_t.GPIO_PinNumber = PIN_9;
 8000f06:	4b73      	ldr	r3, [pc, #460]	; (80010d4 <configPeripherals+0x2d4>)
 8000f08:	2209      	movs	r2, #9
 8000f0a:	711a      	strb	r2, [r3, #4]
	tx2pin.GPIO_PinConfig_t.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000f0c:	4b71      	ldr	r3, [pc, #452]	; (80010d4 <configPeripherals+0x2d4>)
 8000f0e:	2202      	movs	r2, #2
 8000f10:	715a      	strb	r2, [r3, #5]
	tx2pin.GPIO_PinConfig_t.GPIO_PinPuPdControl = GPIO_PUPDR_PULLUP;
 8000f12:	4b70      	ldr	r3, [pc, #448]	; (80010d4 <configPeripherals+0x2d4>)
 8000f14:	2201      	movs	r2, #1
 8000f16:	71da      	strb	r2, [r3, #7]
	tx2pin.GPIO_PinConfig_t.GPIO_PinSpeed = GPIO_OSPEED_FAST; //Se usa en velocidad rapida
 8000f18:	4b6e      	ldr	r3, [pc, #440]	; (80010d4 <configPeripherals+0x2d4>)
 8000f1a:	2202      	movs	r2, #2
 8000f1c:	719a      	strb	r2, [r3, #6]
	tx2pin.GPIO_PinConfig_t.GPIO_PinAltFunMode = 7;
 8000f1e:	4b6d      	ldr	r3, [pc, #436]	; (80010d4 <configPeripherals+0x2d4>)
 8000f20:	2207      	movs	r2, #7
 8000f22:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&tx2pin);
 8000f24:	486b      	ldr	r0, [pc, #428]	; (80010d4 <configPeripherals+0x2d4>)
 8000f26:	f002 f891 	bl	800304c <GPIO_Config>

	rx2pin.pGPIOx = GPIOA;
 8000f2a:	4b6c      	ldr	r3, [pc, #432]	; (80010dc <configPeripherals+0x2dc>)
 8000f2c:	4a6a      	ldr	r2, [pc, #424]	; (80010d8 <configPeripherals+0x2d8>)
 8000f2e:	601a      	str	r2, [r3, #0]
	rx2pin.GPIO_PinConfig_t.GPIO_PinNumber = PIN_10;
 8000f30:	4b6a      	ldr	r3, [pc, #424]	; (80010dc <configPeripherals+0x2dc>)
 8000f32:	220a      	movs	r2, #10
 8000f34:	711a      	strb	r2, [r3, #4]
	rx2pin.GPIO_PinConfig_t.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000f36:	4b69      	ldr	r3, [pc, #420]	; (80010dc <configPeripherals+0x2dc>)
 8000f38:	2202      	movs	r2, #2
 8000f3a:	715a      	strb	r2, [r3, #5]
	rx2pin.GPIO_PinConfig_t.GPIO_PinPuPdControl = GPIO_PUPDR_PULLUP;
 8000f3c:	4b67      	ldr	r3, [pc, #412]	; (80010dc <configPeripherals+0x2dc>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	71da      	strb	r2, [r3, #7]
	rx2pin.GPIO_PinConfig_t.GPIO_PinSpeed = GPIO_OSPEED_FAST;
 8000f42:	4b66      	ldr	r3, [pc, #408]	; (80010dc <configPeripherals+0x2dc>)
 8000f44:	2202      	movs	r2, #2
 8000f46:	719a      	strb	r2, [r3, #6]
	rx2pin.GPIO_PinConfig_t.GPIO_PinAltFunMode = 7;
 8000f48:	4b64      	ldr	r3, [pc, #400]	; (80010dc <configPeripherals+0x2dc>)
 8000f4a:	2207      	movs	r2, #7
 8000f4c:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&rx2pin);
 8000f4e:	4863      	ldr	r0, [pc, #396]	; (80010dc <configPeripherals+0x2dc>)
 8000f50:	f002 f87c 	bl	800304c <GPIO_Config>

	handlerConexion.ptrUSARTx = USART1;
 8000f54:	4b64      	ldr	r3, [pc, #400]	; (80010e8 <configPeripherals+0x2e8>)
 8000f56:	4a65      	ldr	r2, [pc, #404]	; (80010ec <configPeripherals+0x2ec>)
 8000f58:	601a      	str	r2, [r3, #0]
	handlerConexion.USART_Config.USART_baudrate = 19200;
 8000f5a:	4b63      	ldr	r3, [pc, #396]	; (80010e8 <configPeripherals+0x2e8>)
 8000f5c:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000f60:	609a      	str	r2, [r3, #8]
	handlerConexion.USART_Config.USART_datasize = USART_DATASIZE_8BIT;
 8000f62:	4b61      	ldr	r3, [pc, #388]	; (80010e8 <configPeripherals+0x2e8>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	731a      	strb	r2, [r3, #12]
	handlerConexion.USART_Config.USART_mode = USART_MODE_RXTX;
 8000f68:	4b5f      	ldr	r3, [pc, #380]	; (80010e8 <configPeripherals+0x2e8>)
 8000f6a:	2202      	movs	r2, #2
 8000f6c:	711a      	strb	r2, [r3, #4]
	handlerConexion.USART_Config.USART_parity = USART_PARITY_NONE;
 8000f6e:	4b5e      	ldr	r3, [pc, #376]	; (80010e8 <configPeripherals+0x2e8>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	735a      	strb	r2, [r3, #13]
	handlerConexion.USART_Config.USART_stopbits = USART_STOPBIT_1;
 8000f74:	4b5c      	ldr	r3, [pc, #368]	; (80010e8 <configPeripherals+0x2e8>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	739a      	strb	r2, [r3, #14]
	handlerConexion.USART_Config.USART_RX_Int_Ena = ENABLE;
 8000f7a:	4b5b      	ldr	r3, [pc, #364]	; (80010e8 <configPeripherals+0x2e8>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	73da      	strb	r2, [r3, #15]

	USART_Config(&handlerConexion);
 8000f80:	4859      	ldr	r0, [pc, #356]	; (80010e8 <configPeripherals+0x2e8>)
 8000f82:	f002 fd4d 	bl	8003a20 <USART_Config>

	PC7.pGPIOx = GPIOC;
 8000f86:	4b5a      	ldr	r3, [pc, #360]	; (80010f0 <configPeripherals+0x2f0>)
 8000f88:	4a4c      	ldr	r2, [pc, #304]	; (80010bc <configPeripherals+0x2bc>)
 8000f8a:	601a      	str	r2, [r3, #0]
	PC7.GPIO_PinConfig_t.GPIO_PinNumber = PIN_7;
 8000f8c:	4b58      	ldr	r3, [pc, #352]	; (80010f0 <configPeripherals+0x2f0>)
 8000f8e:	2207      	movs	r2, #7
 8000f90:	711a      	strb	r2, [r3, #4]
	PC7.GPIO_PinConfig_t.GPIO_PinMode = GPIO_MODE_IN;
 8000f92:	4b57      	ldr	r3, [pc, #348]	; (80010f0 <configPeripherals+0x2f0>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	715a      	strb	r2, [r3, #5]

	PC7E.pGPIOHandler = &PC7;
 8000f98:	4b56      	ldr	r3, [pc, #344]	; (80010f4 <configPeripherals+0x2f4>)
 8000f9a:	4a55      	ldr	r2, [pc, #340]	; (80010f0 <configPeripherals+0x2f0>)
 8000f9c:	601a      	str	r2, [r3, #0]
	PC7E.edgeType = EXTERNAL_INTERRUPT_RISING_EDGE;
 8000f9e:	4b55      	ldr	r3, [pc, #340]	; (80010f4 <configPeripherals+0x2f4>)
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	711a      	strb	r2, [r3, #4]

	extInt_Config(&PC7E);
 8000fa4:	4853      	ldr	r0, [pc, #332]	; (80010f4 <configPeripherals+0x2f4>)
 8000fa6:	f001 f85f 	bl	8002068 <extInt_Config>

	counterYellow.pGPIOx = GPIOC;
 8000faa:	4b53      	ldr	r3, [pc, #332]	; (80010f8 <configPeripherals+0x2f8>)
 8000fac:	4a43      	ldr	r2, [pc, #268]	; (80010bc <configPeripherals+0x2bc>)
 8000fae:	601a      	str	r2, [r3, #0]
	counterYellow.GPIO_PinConfig_t.GPIO_PinNumber = PIN_1;
 8000fb0:	4b51      	ldr	r3, [pc, #324]	; (80010f8 <configPeripherals+0x2f8>)
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	711a      	strb	r2, [r3, #4]
	counterYellow.GPIO_PinConfig_t.GPIO_PinMode = GPIO_MODE_IN;
 8000fb6:	4b50      	ldr	r3, [pc, #320]	; (80010f8 <configPeripherals+0x2f8>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	715a      	strb	r2, [r3, #5]

	counterYellowE.pGPIOHandler = &counterYellow;
 8000fbc:	4b4f      	ldr	r3, [pc, #316]	; (80010fc <configPeripherals+0x2fc>)
 8000fbe:	4a4e      	ldr	r2, [pc, #312]	; (80010f8 <configPeripherals+0x2f8>)
 8000fc0:	601a      	str	r2, [r3, #0]
	counterYellowE.edgeType = EXTERNAL_INTERRUPT_FALLING_EDGE;
 8000fc2:	4b4e      	ldr	r3, [pc, #312]	; (80010fc <configPeripherals+0x2fc>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	711a      	strb	r2, [r3, #4]

	extInt_Config(&counterYellowE);
 8000fc8:	484c      	ldr	r0, [pc, #304]	; (80010fc <configPeripherals+0x2fc>)
 8000fca:	f001 f84d 	bl	8002068 <extInt_Config>

	counterYwl.pGPIOx = GPIOC;
 8000fce:	4b4c      	ldr	r3, [pc, #304]	; (8001100 <configPeripherals+0x300>)
 8000fd0:	4a3a      	ldr	r2, [pc, #232]	; (80010bc <configPeripherals+0x2bc>)
 8000fd2:	601a      	str	r2, [r3, #0]
	counterYwl.GPIO_PinConfig_t.GPIO_PinNumber = PIN_3;
 8000fd4:	4b4a      	ldr	r3, [pc, #296]	; (8001100 <configPeripherals+0x300>)
 8000fd6:	2203      	movs	r2, #3
 8000fd8:	711a      	strb	r2, [r3, #4]
	counterYwl.GPIO_PinConfig_t.GPIO_PinMode = GPIO_MODE_IN;
 8000fda:	4b49      	ldr	r3, [pc, #292]	; (8001100 <configPeripherals+0x300>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	715a      	strb	r2, [r3, #5]

	counterYwlE.pGPIOHandler = &counterYwl;
 8000fe0:	4b48      	ldr	r3, [pc, #288]	; (8001104 <configPeripherals+0x304>)
 8000fe2:	4a47      	ldr	r2, [pc, #284]	; (8001100 <configPeripherals+0x300>)
 8000fe4:	601a      	str	r2, [r3, #0]
	counterYwlE.edgeType = EXTERNAL_INTERRUPT_FALLING_EDGE;
 8000fe6:	4b47      	ldr	r3, [pc, #284]	; (8001104 <configPeripherals+0x304>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	711a      	strb	r2, [r3, #4]

	extInt_Config(&counterYwlE);
 8000fec:	4845      	ldr	r0, [pc, #276]	; (8001104 <configPeripherals+0x304>)
 8000fee:	f001 f83b 	bl	8002068 <extInt_Config>

	PC0.pGPIOx = GPIOC;
 8000ff2:	4b45      	ldr	r3, [pc, #276]	; (8001108 <configPeripherals+0x308>)
 8000ff4:	4a31      	ldr	r2, [pc, #196]	; (80010bc <configPeripherals+0x2bc>)
 8000ff6:	601a      	str	r2, [r3, #0]
	PC0.GPIO_PinConfig_t.GPIO_PinNumber = PIN_0;
 8000ff8:	4b43      	ldr	r3, [pc, #268]	; (8001108 <configPeripherals+0x308>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	711a      	strb	r2, [r3, #4]
	PC0.GPIO_PinConfig_t.GPIO_PinMode = GPIO_MODE_IN;
 8000ffe:	4b42      	ldr	r3, [pc, #264]	; (8001108 <configPeripherals+0x308>)
 8001000:	2200      	movs	r2, #0
 8001002:	715a      	strb	r2, [r3, #5]

	PC0E.pGPIOHandler = &PC0;
 8001004:	4b41      	ldr	r3, [pc, #260]	; (800110c <configPeripherals+0x30c>)
 8001006:	4a40      	ldr	r2, [pc, #256]	; (8001108 <configPeripherals+0x308>)
 8001008:	601a      	str	r2, [r3, #0]
	PC0E.edgeType = EXTERNAL_INTERRUPT_FALLING_EDGE;
 800100a:	4b40      	ldr	r3, [pc, #256]	; (800110c <configPeripherals+0x30c>)
 800100c:	2200      	movs	r2, #0
 800100e:	711a      	strb	r2, [r3, #4]

	extInt_Config(&PC0E);
 8001010:	483e      	ldr	r0, [pc, #248]	; (800110c <configPeripherals+0x30c>)
 8001012:	f001 f829 	bl	8002068 <extInt_Config>

	pwprueba.pGPIOx = GPIOA;
 8001016:	4b3e      	ldr	r3, [pc, #248]	; (8001110 <configPeripherals+0x310>)
 8001018:	4a2f      	ldr	r2, [pc, #188]	; (80010d8 <configPeripherals+0x2d8>)
 800101a:	601a      	str	r2, [r3, #0]
	pwprueba.GPIO_PinConfig_t.GPIO_PinNumber = PIN_0;
 800101c:	4b3c      	ldr	r3, [pc, #240]	; (8001110 <configPeripherals+0x310>)
 800101e:	2200      	movs	r2, #0
 8001020:	711a      	strb	r2, [r3, #4]
	pwprueba.GPIO_PinConfig_t.GPIO_PinMode = GPIO_MODE_ALTFN;
 8001022:	4b3b      	ldr	r3, [pc, #236]	; (8001110 <configPeripherals+0x310>)
 8001024:	2202      	movs	r2, #2
 8001026:	715a      	strb	r2, [r3, #5]
	pwprueba.GPIO_PinConfig_t.GPIO_PinOPType = GPIO_OTYPE_PUSHPULL;
 8001028:	4b39      	ldr	r3, [pc, #228]	; (8001110 <configPeripherals+0x310>)
 800102a:	2200      	movs	r2, #0
 800102c:	721a      	strb	r2, [r3, #8]
	pwprueba.GPIO_PinConfig_t.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800102e:	4b38      	ldr	r3, [pc, #224]	; (8001110 <configPeripherals+0x310>)
 8001030:	2200      	movs	r2, #0
 8001032:	71da      	strb	r2, [r3, #7]
	pwprueba.GPIO_PinConfig_t.GPIO_PinSpeed = GPIO_OSPEED_FAST;
 8001034:	4b36      	ldr	r3, [pc, #216]	; (8001110 <configPeripherals+0x310>)
 8001036:	2202      	movs	r2, #2
 8001038:	719a      	strb	r2, [r3, #6]
	pwprueba.GPIO_PinConfig_t.GPIO_PinAltFunMode = AF2;
 800103a:	4b35      	ldr	r3, [pc, #212]	; (8001110 <configPeripherals+0x310>)
 800103c:	2202      	movs	r2, #2
 800103e:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&pwprueba);
 8001040:	4833      	ldr	r0, [pc, #204]	; (8001110 <configPeripherals+0x310>)
 8001042:	f002 f803 	bl	800304c <GPIO_Config>

	pwprueba.pGPIOx = GPIOA;
 8001046:	4b32      	ldr	r3, [pc, #200]	; (8001110 <configPeripherals+0x310>)
 8001048:	4a23      	ldr	r2, [pc, #140]	; (80010d8 <configPeripherals+0x2d8>)
 800104a:	601a      	str	r2, [r3, #0]
	pwprueba.GPIO_PinConfig_t.GPIO_PinNumber = PIN_1;
 800104c:	4b30      	ldr	r3, [pc, #192]	; (8001110 <configPeripherals+0x310>)
 800104e:	2201      	movs	r2, #1
 8001050:	711a      	strb	r2, [r3, #4]
	pwprueba.GPIO_PinConfig_t.GPIO_PinMode = GPIO_MODE_ALTFN;
 8001052:	4b2f      	ldr	r3, [pc, #188]	; (8001110 <configPeripherals+0x310>)
 8001054:	2202      	movs	r2, #2
 8001056:	715a      	strb	r2, [r3, #5]
	pwprueba.GPIO_PinConfig_t.GPIO_PinOPType = GPIO_OTYPE_PUSHPULL;
 8001058:	4b2d      	ldr	r3, [pc, #180]	; (8001110 <configPeripherals+0x310>)
 800105a:	2200      	movs	r2, #0
 800105c:	721a      	strb	r2, [r3, #8]
	pwprueba.GPIO_PinConfig_t.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800105e:	4b2c      	ldr	r3, [pc, #176]	; (8001110 <configPeripherals+0x310>)
 8001060:	2200      	movs	r2, #0
 8001062:	71da      	strb	r2, [r3, #7]
	pwprueba.GPIO_PinConfig_t.GPIO_PinSpeed = GPIO_OSPEED_FAST;
 8001064:	4b2a      	ldr	r3, [pc, #168]	; (8001110 <configPeripherals+0x310>)
 8001066:	2202      	movs	r2, #2
 8001068:	719a      	strb	r2, [r3, #6]
	pwprueba.GPIO_PinConfig_t.GPIO_PinAltFunMode = AF2;
 800106a:	4b29      	ldr	r3, [pc, #164]	; (8001110 <configPeripherals+0x310>)
 800106c:	2202      	movs	r2, #2
 800106e:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&pwprueba);
 8001070:	4827      	ldr	r0, [pc, #156]	; (8001110 <configPeripherals+0x310>)
 8001072:	f001 ffeb 	bl	800304c <GPIO_Config>

	pwmYellow.ptrTIMx = TIM5;
 8001076:	4b27      	ldr	r3, [pc, #156]	; (8001114 <configPeripherals+0x314>)
 8001078:	4a27      	ldr	r2, [pc, #156]	; (8001118 <configPeripherals+0x318>)
 800107a:	601a      	str	r2, [r3, #0]
	pwmYellow.config.channel = PWM_CHANNEL_2;
 800107c:	4b25      	ldr	r3, [pc, #148]	; (8001114 <configPeripherals+0x314>)
 800107e:	2201      	movs	r2, #1
 8001080:	711a      	strb	r2, [r3, #4]
	pwmYellow.config.duttyCicle = duttyYwl;
 8001082:	4b26      	ldr	r3, [pc, #152]	; (800111c <configPeripherals+0x31c>)
 8001084:	881a      	ldrh	r2, [r3, #0]
 8001086:	4b23      	ldr	r3, [pc, #140]	; (8001114 <configPeripherals+0x314>)
 8001088:	81da      	strh	r2, [r3, #14]
	pwmYellow.config.periodo = periodo;
 800108a:	4b25      	ldr	r3, [pc, #148]	; (8001120 <configPeripherals+0x320>)
 800108c:	881a      	ldrh	r2, [r3, #0]
 800108e:	4b21      	ldr	r3, [pc, #132]	; (8001114 <configPeripherals+0x314>)
 8001090:	819a      	strh	r2, [r3, #12]
	pwmYellow.config.prescaler = prescaler;
 8001092:	4b24      	ldr	r3, [pc, #144]	; (8001124 <configPeripherals+0x324>)
 8001094:	881b      	ldrh	r3, [r3, #0]
 8001096:	461a      	mov	r2, r3
 8001098:	4b1e      	ldr	r3, [pc, #120]	; (8001114 <configPeripherals+0x314>)
 800109a:	609a      	str	r2, [r3, #8]
	pwmYellow.config.polarity = dirYellowVal;
 800109c:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <configPeripherals+0x2c8>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	461a      	mov	r2, r3
 80010a2:	4b1c      	ldr	r3, [pc, #112]	; (8001114 <configPeripherals+0x314>)
 80010a4:	741a      	strb	r2, [r3, #16]

	pwm_Config(&pwmYellow);
 80010a6:	481b      	ldr	r0, [pc, #108]	; (8001114 <configPeripherals+0x314>)
 80010a8:	f002 fa6c 	bl	8003584 <pwm_Config>
	enableOutput(&pwmYellow);
 80010ac:	4819      	ldr	r0, [pc, #100]	; (8001114 <configPeripherals+0x314>)
 80010ae:	f002 fb91 	bl	80037d4 <enableOutput>
 80010b2:	e039      	b.n	8001128 <configPeripherals+0x328>
 80010b4:	e000ed00 	.word	0xe000ed00
 80010b8:	200004cc 	.word	0x200004cc
 80010bc:	40020800 	.word	0x40020800
 80010c0:	200005b8 	.word	0x200005b8
 80010c4:	40020c00 	.word	0x40020c00
 80010c8:	20000000 	.word	0x20000000
 80010cc:	200005c4 	.word	0x200005c4
 80010d0:	20000534 	.word	0x20000534
 80010d4:	200004b4 	.word	0x200004b4
 80010d8:	40020000 	.word	0x40020000
 80010dc:	200004c0 	.word	0x200004c0
 80010e0:	20000204 	.word	0x20000204
 80010e4:	40004400 	.word	0x40004400
 80010e8:	2000029c 	.word	0x2000029c
 80010ec:	40011000 	.word	0x40011000
 80010f0:	20000538 	.word	0x20000538
 80010f4:	20000544 	.word	0x20000544
 80010f8:	20000550 	.word	0x20000550
 80010fc:	2000055c 	.word	0x2000055c
 8001100:	20000578 	.word	0x20000578
 8001104:	20000584 	.word	0x20000584
 8001108:	20000598 	.word	0x20000598
 800110c:	200005a4 	.word	0x200005a4
 8001110:	200004d8 	.word	0x200004d8
 8001114:	20000520 	.word	0x20000520
 8001118:	40000c00 	.word	0x40000c00
 800111c:	200005b2 	.word	0x200005b2
 8001120:	20000004 	.word	0x20000004
 8001124:	20000002 	.word	0x20000002
	startPwmSignal(&pwmYellow);
 8001128:	4825      	ldr	r0, [pc, #148]	; (80011c0 <configPeripherals+0x3c0>)
 800112a:	f002 fb03 	bl	8003734 <startPwmSignal>

	pwmBlue.ptrTIMx = TIM5;
 800112e:	4b25      	ldr	r3, [pc, #148]	; (80011c4 <configPeripherals+0x3c4>)
 8001130:	4a25      	ldr	r2, [pc, #148]	; (80011c8 <configPeripherals+0x3c8>)
 8001132:	601a      	str	r2, [r3, #0]
	pwmBlue.config.channel = PWM_CHANNEL_1;
 8001134:	4b23      	ldr	r3, [pc, #140]	; (80011c4 <configPeripherals+0x3c4>)
 8001136:	2200      	movs	r2, #0
 8001138:	711a      	strb	r2, [r3, #4]
	pwmBlue.config.duttyCicle = duttyBlue;
 800113a:	4b24      	ldr	r3, [pc, #144]	; (80011cc <configPeripherals+0x3cc>)
 800113c:	881a      	ldrh	r2, [r3, #0]
 800113e:	4b21      	ldr	r3, [pc, #132]	; (80011c4 <configPeripherals+0x3c4>)
 8001140:	81da      	strh	r2, [r3, #14]
	pwmBlue.config.periodo = periodo;
 8001142:	4b23      	ldr	r3, [pc, #140]	; (80011d0 <configPeripherals+0x3d0>)
 8001144:	881a      	ldrh	r2, [r3, #0]
 8001146:	4b1f      	ldr	r3, [pc, #124]	; (80011c4 <configPeripherals+0x3c4>)
 8001148:	819a      	strh	r2, [r3, #12]
	pwmBlue.config.prescaler = prescaler;
 800114a:	4b22      	ldr	r3, [pc, #136]	; (80011d4 <configPeripherals+0x3d4>)
 800114c:	881b      	ldrh	r3, [r3, #0]
 800114e:	461a      	mov	r2, r3
 8001150:	4b1c      	ldr	r3, [pc, #112]	; (80011c4 <configPeripherals+0x3c4>)
 8001152:	609a      	str	r2, [r3, #8]
	pwmBlue.config.polarity = dirBlueVal;
 8001154:	4b20      	ldr	r3, [pc, #128]	; (80011d8 <configPeripherals+0x3d8>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	461a      	mov	r2, r3
 800115a:	4b1a      	ldr	r3, [pc, #104]	; (80011c4 <configPeripherals+0x3c4>)
 800115c:	741a      	strb	r2, [r3, #16]

	pwm_Config(&pwmBlue);
 800115e:	4819      	ldr	r0, [pc, #100]	; (80011c4 <configPeripherals+0x3c4>)
 8001160:	f002 fa10 	bl	8003584 <pwm_Config>
	enableOutput(&pwmBlue);
 8001164:	4817      	ldr	r0, [pc, #92]	; (80011c4 <configPeripherals+0x3c4>)
 8001166:	f002 fb35 	bl	80037d4 <enableOutput>
	startPwmSignal(&pwmBlue);
 800116a:	4816      	ldr	r0, [pc, #88]	; (80011c4 <configPeripherals+0x3c4>)
 800116c:	f002 fae2 	bl	8003734 <startPwmSignal>

	handlerTimer3.ptrTIMx = TIM3; //El timer que se va a usar
 8001170:	4b1a      	ldr	r3, [pc, #104]	; (80011dc <configPeripherals+0x3dc>)
 8001172:	4a1b      	ldr	r2, [pc, #108]	; (80011e0 <configPeripherals+0x3e0>)
 8001174:	601a      	str	r2, [r3, #0]
	handlerTimer3.TIMx_Config.TIMx_interruptEnable = 1; //Se habilitan las interrupciones
 8001176:	4b19      	ldr	r3, [pc, #100]	; (80011dc <configPeripherals+0x3dc>)
 8001178:	2201      	movs	r2, #1
 800117a:	741a      	strb	r2, [r3, #16]
	handlerTimer3.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; //Se usara en modo ascendente
 800117c:	4b17      	ldr	r3, [pc, #92]	; (80011dc <configPeripherals+0x3dc>)
 800117e:	2200      	movs	r2, #0
 8001180:	711a      	strb	r2, [r3, #4]
	handlerTimer3.TIMx_Config.TIMx_period = 2500; //Se define el periodo en este caso el led cambiara cada 250ms
 8001182:	4b16      	ldr	r3, [pc, #88]	; (80011dc <configPeripherals+0x3dc>)
 8001184:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001188:	60da      	str	r2, [r3, #12]
	handlerTimer3.TIMx_Config.TIMx_speed = BTIMER_SPEED_100us; //Se define la "velocidad" que se usara
 800118a:	4b14      	ldr	r3, [pc, #80]	; (80011dc <configPeripherals+0x3dc>)
 800118c:	2264      	movs	r2, #100	; 0x64
 800118e:	609a      	str	r2, [r3, #8]

	BasicTimer_Config(&handlerTimer3); //Se carga la configuración.
 8001190:	4812      	ldr	r0, [pc, #72]	; (80011dc <configPeripherals+0x3dc>)
 8001192:	f000 fe31 	bl	8001df8 <BasicTimer_Config>

	handlerTimer2.ptrTIMx = TIM2; //El timer que se va a usar
 8001196:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <configPeripherals+0x3e4>)
 8001198:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800119c:	601a      	str	r2, [r3, #0]
	handlerTimer2.TIMx_Config.TIMx_interruptEnable = 1; //Se habilitan las interrupciones
 800119e:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <configPeripherals+0x3e4>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	741a      	strb	r2, [r3, #16]
	handlerTimer2.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; //Se usara en modo ascendente
 80011a4:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <configPeripherals+0x3e4>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	711a      	strb	r2, [r3, #4]
	handlerTimer2.TIMx_Config.TIMx_period = 10; //Se define el periodo en este caso el led cambiara cada 250ms
 80011aa:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <configPeripherals+0x3e4>)
 80011ac:	220a      	movs	r2, #10
 80011ae:	60da      	str	r2, [r3, #12]
	handlerTimer2.TIMx_Config.TIMx_speed = BTIMER_SPEED_100us; //Se define la "velocidad" que se usara
 80011b0:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <configPeripherals+0x3e4>)
 80011b2:	2264      	movs	r2, #100	; 0x64
 80011b4:	609a      	str	r2, [r3, #8]

	BasicTimer_Config(&handlerTimer2); //Se carga la configuración.
 80011b6:	480b      	ldr	r0, [pc, #44]	; (80011e4 <configPeripherals+0x3e4>)
 80011b8:	f000 fe1e 	bl	8001df8 <BasicTimer_Config>

}
 80011bc:	bf00      	nop
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20000520 	.word	0x20000520
 80011c4:	2000050c 	.word	0x2000050c
 80011c8:	40000c00 	.word	0x40000c00
 80011cc:	200005b0 	.word	0x200005b0
 80011d0:	20000004 	.word	0x20000004
 80011d4:	20000002 	.word	0x20000002
 80011d8:	20000534 	.word	0x20000534
 80011dc:	200004e4 	.word	0x200004e4
 80011e0:	40000400 	.word	0x40000400
 80011e4:	200004f8 	.word	0x200004f8

080011e8 <parseCommands>:

void parseCommands(char *ptrBufferReception) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af02      	add	r7, sp, #8
 80011ee:	6078      	str	r0, [r7, #4]
	/* Lee la cadena de caracteres a la que apunta el "ptrBufferReception
	 * y almacena en tres elementos diferentes: un string llamado "cmd",
	 * y dos integer llamados "firstParameter" y "secondParameter"
	 * De esta forma podemos introducir informacion al micro desde el puerto
	 */
	sscanf(ptrBufferReception, "%s %u %u %u", cmd, &firstParameter,
 80011f0:	4b91      	ldr	r3, [pc, #580]	; (8001438 <parseCommands+0x250>)
 80011f2:	9301      	str	r3, [sp, #4]
 80011f4:	4b91      	ldr	r3, [pc, #580]	; (800143c <parseCommands+0x254>)
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	4b91      	ldr	r3, [pc, #580]	; (8001440 <parseCommands+0x258>)
 80011fa:	4a92      	ldr	r2, [pc, #584]	; (8001444 <parseCommands+0x25c>)
 80011fc:	4992      	ldr	r1, [pc, #584]	; (8001448 <parseCommands+0x260>)
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f003 fedc 	bl	8004fbc <siscanf>
			&secondParameter, &thirdParameter);
	if (strcmp(cmd, "help") == 0) {
 8001204:	4991      	ldr	r1, [pc, #580]	; (800144c <parseCommands+0x264>)
 8001206:	488f      	ldr	r0, [pc, #572]	; (8001444 <parseCommands+0x25c>)
 8001208:	f7fe ffea 	bl	80001e0 <strcmp>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d108      	bne.n	8001224 <parseCommands+0x3c>
		writeString(&handlerTerminal, "Help Menu CMDs: \n");
 8001212:	498f      	ldr	r1, [pc, #572]	; (8001450 <parseCommands+0x268>)
 8001214:	488f      	ldr	r0, [pc, #572]	; (8001454 <parseCommands+0x26c>)
 8001216:	f002 ffe0 	bl	80041da <writeString>
		writeString(&handlerTerminal, "1)  Help -> Print this menu \n");
 800121a:	498f      	ldr	r1, [pc, #572]	; (8001458 <parseCommands+0x270>)
 800121c:	488d      	ldr	r0, [pc, #564]	; (8001454 <parseCommands+0x26c>)
 800121e:	f002 ffdc 	bl	80041da <writeString>
 8001222:	e1e0      	b.n	80015e6 <parseCommands+0x3fe>

	}

	else if (strcmp(cmd, "dir") == 0) {
 8001224:	498d      	ldr	r1, [pc, #564]	; (800145c <parseCommands+0x274>)
 8001226:	4887      	ldr	r0, [pc, #540]	; (8001444 <parseCommands+0x25c>)
 8001228:	f7fe ffda 	bl	80001e0 <strcmp>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d133      	bne.n	800129a <parseCommands+0xb2>
		if (firstParameter == 0) {
 8001232:	4b83      	ldr	r3, [pc, #524]	; (8001440 <parseCommands+0x258>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d117      	bne.n	800126a <parseCommands+0x82>
			dirBlueVal = secondParameter;
 800123a:	4b80      	ldr	r3, [pc, #512]	; (800143c <parseCommands+0x254>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2b00      	cmp	r3, #0
 8001240:	bf14      	ite	ne
 8001242:	2301      	movne	r3, #1
 8001244:	2300      	moveq	r3, #0
 8001246:	b2da      	uxtb	r2, r3
 8001248:	4b85      	ldr	r3, [pc, #532]	; (8001460 <parseCommands+0x278>)
 800124a:	701a      	strb	r2, [r3, #0]
			pwmUpdatePolarity(&pwmYellow, secondParameter);
 800124c:	4b7b      	ldr	r3, [pc, #492]	; (800143c <parseCommands+0x254>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	b2db      	uxtb	r3, r3
 8001252:	4619      	mov	r1, r3
 8001254:	4883      	ldr	r0, [pc, #524]	; (8001464 <parseCommands+0x27c>)
 8001256:	f002 fbb3 	bl	80039c0 <pwmUpdatePolarity>
			GPIO_WritePin(&dirPinYw, secondParameter);
 800125a:	4b78      	ldr	r3, [pc, #480]	; (800143c <parseCommands+0x254>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	b2db      	uxtb	r3, r3
 8001260:	4619      	mov	r1, r3
 8001262:	4881      	ldr	r0, [pc, #516]	; (8001468 <parseCommands+0x280>)
 8001264:	f002 f81c 	bl	80032a0 <GPIO_WritePin>
 8001268:	e1bd      	b.n	80015e6 <parseCommands+0x3fe>
		} else {
			dirYellowVal = secondParameter;
 800126a:	4b74      	ldr	r3, [pc, #464]	; (800143c <parseCommands+0x254>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2b00      	cmp	r3, #0
 8001270:	bf14      	ite	ne
 8001272:	2301      	movne	r3, #1
 8001274:	2300      	moveq	r3, #0
 8001276:	b2da      	uxtb	r2, r3
 8001278:	4b7c      	ldr	r3, [pc, #496]	; (800146c <parseCommands+0x284>)
 800127a:	701a      	strb	r2, [r3, #0]
			pwmUpdatePolarity(&pwmBlue, secondParameter);
 800127c:	4b6f      	ldr	r3, [pc, #444]	; (800143c <parseCommands+0x254>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	b2db      	uxtb	r3, r3
 8001282:	4619      	mov	r1, r3
 8001284:	487a      	ldr	r0, [pc, #488]	; (8001470 <parseCommands+0x288>)
 8001286:	f002 fb9b 	bl	80039c0 <pwmUpdatePolarity>
			GPIO_WritePin(&dirPinBlue, secondParameter);
 800128a:	4b6c      	ldr	r3, [pc, #432]	; (800143c <parseCommands+0x254>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	b2db      	uxtb	r3, r3
 8001290:	4619      	mov	r1, r3
 8001292:	4878      	ldr	r0, [pc, #480]	; (8001474 <parseCommands+0x28c>)
 8001294:	f002 f804 	bl	80032a0 <GPIO_WritePin>
 8001298:	e1a5      	b.n	80015e6 <parseCommands+0x3fe>
		}
	}

	else if (strcmp(cmd, "pwm") == 0) {
 800129a:	4977      	ldr	r1, [pc, #476]	; (8001478 <parseCommands+0x290>)
 800129c:	4869      	ldr	r0, [pc, #420]	; (8001444 <parseCommands+0x25c>)
 800129e:	f7fe ff9f 	bl	80001e0 <strcmp>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d12a      	bne.n	80012fe <parseCommands+0x116>
		if (firstParameter == 0) {
 80012a8:	4b65      	ldr	r3, [pc, #404]	; (8001440 <parseCommands+0x258>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d108      	bne.n	80012c2 <parseCommands+0xda>
			pwmYellow.config.duttyCicle = secondParameter;
 80012b0:	4b62      	ldr	r3, [pc, #392]	; (800143c <parseCommands+0x254>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	b29a      	uxth	r2, r3
 80012b6:	4b6b      	ldr	r3, [pc, #428]	; (8001464 <parseCommands+0x27c>)
 80012b8:	81da      	strh	r2, [r3, #14]
			setDuttyCycle(&pwmYellow);
 80012ba:	486a      	ldr	r0, [pc, #424]	; (8001464 <parseCommands+0x27c>)
 80012bc:	f002 fae0 	bl	8003880 <setDuttyCycle>
 80012c0:	e191      	b.n	80015e6 <parseCommands+0x3fe>
		} else if (firstParameter == 1) {
 80012c2:	4b5f      	ldr	r3, [pc, #380]	; (8001440 <parseCommands+0x258>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d108      	bne.n	80012dc <parseCommands+0xf4>
			pwmBlue.config.duttyCicle = secondParameter;
 80012ca:	4b5c      	ldr	r3, [pc, #368]	; (800143c <parseCommands+0x254>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	b29a      	uxth	r2, r3
 80012d0:	4b67      	ldr	r3, [pc, #412]	; (8001470 <parseCommands+0x288>)
 80012d2:	81da      	strh	r2, [r3, #14]
			setDuttyCycle(&pwmBlue);
 80012d4:	4866      	ldr	r0, [pc, #408]	; (8001470 <parseCommands+0x288>)
 80012d6:	f002 fad3 	bl	8003880 <setDuttyCycle>
 80012da:	e184      	b.n	80015e6 <parseCommands+0x3fe>
		} else {
			pwmYellow.config.duttyCicle = secondParameter;
 80012dc:	4b57      	ldr	r3, [pc, #348]	; (800143c <parseCommands+0x254>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	b29a      	uxth	r2, r3
 80012e2:	4b60      	ldr	r3, [pc, #384]	; (8001464 <parseCommands+0x27c>)
 80012e4:	81da      	strh	r2, [r3, #14]
			pwmBlue.config.duttyCicle = secondParameter;
 80012e6:	4b55      	ldr	r3, [pc, #340]	; (800143c <parseCommands+0x254>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	b29a      	uxth	r2, r3
 80012ec:	4b60      	ldr	r3, [pc, #384]	; (8001470 <parseCommands+0x288>)
 80012ee:	81da      	strh	r2, [r3, #14]
			setDuttyCycle(&pwmYellow);
 80012f0:	485c      	ldr	r0, [pc, #368]	; (8001464 <parseCommands+0x27c>)
 80012f2:	f002 fac5 	bl	8003880 <setDuttyCycle>
			setDuttyCycle(&pwmBlue);
 80012f6:	485e      	ldr	r0, [pc, #376]	; (8001470 <parseCommands+0x288>)
 80012f8:	f002 fac2 	bl	8003880 <setDuttyCycle>
 80012fc:	e173      	b.n	80015e6 <parseCommands+0x3fe>
		}

	} else if (strcmp(cmd, "upMode") == 0) {
 80012fe:	495f      	ldr	r1, [pc, #380]	; (800147c <parseCommands+0x294>)
 8001300:	4850      	ldr	r0, [pc, #320]	; (8001444 <parseCommands+0x25c>)
 8001302:	f7fe ff6d 	bl	80001e0 <strcmp>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d109      	bne.n	8001320 <parseCommands+0x138>
		upMode = firstParameter;
 800130c:	4b4c      	ldr	r3, [pc, #304]	; (8001440 <parseCommands+0x258>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	bf14      	ite	ne
 8001314:	2301      	movne	r3, #1
 8001316:	2300      	moveq	r3, #0
 8001318:	b2da      	uxtb	r2, r3
 800131a:	4b59      	ldr	r3, [pc, #356]	; (8001480 <parseCommands+0x298>)
 800131c:	701a      	strb	r2, [r3, #0]
 800131e:	e162      	b.n	80015e6 <parseCommands+0x3fe>
	} else if (strcmp(cmd, "reset") == 0) {
 8001320:	4958      	ldr	r1, [pc, #352]	; (8001484 <parseCommands+0x29c>)
 8001322:	4848      	ldr	r0, [pc, #288]	; (8001444 <parseCommands+0x25c>)
 8001324:	f7fe ff5c 	bl	80001e0 <strcmp>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d115      	bne.n	800135a <parseCommands+0x172>
		x = 0;
 800132e:	4956      	ldr	r1, [pc, #344]	; (8001488 <parseCommands+0x2a0>)
 8001330:	f04f 0200 	mov.w	r2, #0
 8001334:	f04f 0300 	mov.w	r3, #0
 8001338:	e9c1 2300 	strd	r2, r3, [r1]
		theta = 0;
 800133c:	4953      	ldr	r1, [pc, #332]	; (800148c <parseCommands+0x2a4>)
 800133e:	f04f 0200 	mov.w	r2, #0
 8001342:	f04f 0300 	mov.w	r3, #0
 8001346:	e9c1 2300 	strd	r2, r3, [r1]
		y = 0;
 800134a:	4951      	ldr	r1, [pc, #324]	; (8001490 <parseCommands+0x2a8>)
 800134c:	f04f 0200 	mov.w	r2, #0
 8001350:	f04f 0300 	mov.w	r3, #0
 8001354:	e9c1 2300 	strd	r2, r3, [r1]
 8001358:	e145      	b.n	80015e6 <parseCommands+0x3fe>
	} else if (strcmp(cmd, "rotate") == 0) {
 800135a:	494e      	ldr	r1, [pc, #312]	; (8001494 <parseCommands+0x2ac>)
 800135c:	4839      	ldr	r0, [pc, #228]	; (8001444 <parseCommands+0x25c>)
 800135e:	f7fe ff3f 	bl	80001e0 <strcmp>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	f040 809d 	bne.w	80014a4 <parseCommands+0x2bc>
		if (firstParameter != 0) {
 800136a:	4b35      	ldr	r3, [pc, #212]	; (8001440 <parseCommands+0x258>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d017      	beq.n	80013a2 <parseCommands+0x1ba>
			rotate = firstParameter / 90 * (M_PI / 2);
 8001372:	4b33      	ldr	r3, [pc, #204]	; (8001440 <parseCommands+0x258>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	085b      	lsrs	r3, r3, #1
 8001378:	4a47      	ldr	r2, [pc, #284]	; (8001498 <parseCommands+0x2b0>)
 800137a:	fba2 2303 	umull	r2, r3, r2, r3
 800137e:	095b      	lsrs	r3, r3, #5
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff f8d7 	bl	8000534 <__aeabi_ui2d>
 8001386:	a32a      	add	r3, pc, #168	; (adr r3, 8001430 <parseCommands+0x248>)
 8001388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138c:	f7ff f94c 	bl	8000628 <__aeabi_dmul>
 8001390:	4602      	mov	r2, r0
 8001392:	460b      	mov	r3, r1
 8001394:	4610      	mov	r0, r2
 8001396:	4619      	mov	r1, r3
 8001398:	f7ff fc3e 	bl	8000c18 <__aeabi_d2f>
 800139c:	4603      	mov	r3, r0
 800139e:	4a3f      	ldr	r2, [pc, #252]	; (800149c <parseCommands+0x2b4>)
 80013a0:	6013      	str	r3, [r2, #0]
		}
		move90 = 1;
 80013a2:	4b3f      	ldr	r3, [pc, #252]	; (80014a0 <parseCommands+0x2b8>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	701a      	strb	r2, [r3, #0]
		theta = 0;
 80013a8:	4938      	ldr	r1, [pc, #224]	; (800148c <parseCommands+0x2a4>)
 80013aa:	f04f 0200 	mov.w	r2, #0
 80013ae:	f04f 0300 	mov.w	r3, #0
 80013b2:	e9c1 2300 	strd	r2, r3, [r1]
		x = 0;
 80013b6:	4934      	ldr	r1, [pc, #208]	; (8001488 <parseCommands+0x2a0>)
 80013b8:	f04f 0200 	mov.w	r2, #0
 80013bc:	f04f 0300 	mov.w	r3, #0
 80013c0:	e9c1 2300 	strd	r2, r3, [r1]
		y = 0;
 80013c4:	4932      	ldr	r1, [pc, #200]	; (8001490 <parseCommands+0x2a8>)
 80013c6:	f04f 0200 	mov.w	r2, #0
 80013ca:	f04f 0300 	mov.w	r3, #0
 80013ce:	e9c1 2300 	strd	r2, r3, [r1]
		pwmBlue.config.duttyCicle = duttyInBlue;
 80013d2:	4b27      	ldr	r3, [pc, #156]	; (8001470 <parseCommands+0x288>)
 80013d4:	f640 52ac 	movw	r2, #3500	; 0xdac
 80013d8:	81da      	strh	r2, [r3, #14]
		setDuttyCycle(&pwmBlue);
 80013da:	4825      	ldr	r0, [pc, #148]	; (8001470 <parseCommands+0x288>)
 80013dc:	f002 fa50 	bl	8003880 <setDuttyCycle>
		pwmYellow.config.duttyCicle = duttyIYwl;
 80013e0:	4b20      	ldr	r3, [pc, #128]	; (8001464 <parseCommands+0x27c>)
 80013e2:	f640 5252 	movw	r2, #3410	; 0xd52
 80013e6:	81da      	strh	r2, [r3, #14]
		setDuttyCycle(&pwmYellow);
 80013e8:	481e      	ldr	r0, [pc, #120]	; (8001464 <parseCommands+0x27c>)
 80013ea:	f002 fa49 	bl	8003880 <setDuttyCycle>
		dirBlueVal = 1;
 80013ee:	4b1c      	ldr	r3, [pc, #112]	; (8001460 <parseCommands+0x278>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	701a      	strb	r2, [r3, #0]
		pwmUpdatePolarity(&pwmBlue, dirBlueVal);
 80013f4:	4b1a      	ldr	r3, [pc, #104]	; (8001460 <parseCommands+0x278>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	4619      	mov	r1, r3
 80013fa:	481d      	ldr	r0, [pc, #116]	; (8001470 <parseCommands+0x288>)
 80013fc:	f002 fae0 	bl	80039c0 <pwmUpdatePolarity>
		GPIO_WritePin(&dirPinBlue, dirBlueVal);
 8001400:	4b17      	ldr	r3, [pc, #92]	; (8001460 <parseCommands+0x278>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	4619      	mov	r1, r3
 8001406:	481b      	ldr	r0, [pc, #108]	; (8001474 <parseCommands+0x28c>)
 8001408:	f001 ff4a 	bl	80032a0 <GPIO_WritePin>
		dirYellowVal = 0;
 800140c:	4b17      	ldr	r3, [pc, #92]	; (800146c <parseCommands+0x284>)
 800140e:	2200      	movs	r2, #0
 8001410:	701a      	strb	r2, [r3, #0]
		pwmUpdatePolarity(&pwmYellow, dirYellowVal);
 8001412:	4b16      	ldr	r3, [pc, #88]	; (800146c <parseCommands+0x284>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	4619      	mov	r1, r3
 8001418:	4812      	ldr	r0, [pc, #72]	; (8001464 <parseCommands+0x27c>)
 800141a:	f002 fad1 	bl	80039c0 <pwmUpdatePolarity>
		GPIO_WritePin(&dirPinYw, dirYellowVal);
 800141e:	4b13      	ldr	r3, [pc, #76]	; (800146c <parseCommands+0x284>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	4619      	mov	r1, r3
 8001424:	4810      	ldr	r0, [pc, #64]	; (8001468 <parseCommands+0x280>)
 8001426:	f001 ff3b 	bl	80032a0 <GPIO_WritePin>
 800142a:	e0dc      	b.n	80015e6 <parseCommands+0x3fe>
 800142c:	f3af 8000 	nop.w
 8001430:	54442d18 	.word	0x54442d18
 8001434:	3ff921fb 	.word	0x3ff921fb
 8001438:	200004ac 	.word	0x200004ac
 800143c:	200004a8 	.word	0x200004a8
 8001440:	200004a4 	.word	0x200004a4
 8001444:	20000368 	.word	0x20000368
 8001448:	08009474 	.word	0x08009474
 800144c:	08009480 	.word	0x08009480
 8001450:	08009488 	.word	0x08009488
 8001454:	20000204 	.word	0x20000204
 8001458:	0800949c 	.word	0x0800949c
 800145c:	080094bc 	.word	0x080094bc
 8001460:	20000534 	.word	0x20000534
 8001464:	20000520 	.word	0x20000520
 8001468:	200005b8 	.word	0x200005b8
 800146c:	20000000 	.word	0x20000000
 8001470:	2000050c 	.word	0x2000050c
 8001474:	200005c4 	.word	0x200005c4
 8001478:	080094c0 	.word	0x080094c0
 800147c:	080094c4 	.word	0x080094c4
 8001480:	200005b4 	.word	0x200005b4
 8001484:	080094cc 	.word	0x080094cc
 8001488:	200005e0 	.word	0x200005e0
 800148c:	200005f0 	.word	0x200005f0
 8001490:	200005e8 	.word	0x200005e8
 8001494:	080094d4 	.word	0x080094d4
 8001498:	b60b60b7 	.word	0xb60b60b7
 800149c:	20000010 	.word	0x20000010
 80014a0:	200005d1 	.word	0x200005d1
	} else if (strcmp(cmd, "movex") == 0) {
 80014a4:	4953      	ldr	r1, [pc, #332]	; (80015f4 <parseCommands+0x40c>)
 80014a6:	4854      	ldr	r0, [pc, #336]	; (80015f8 <parseCommands+0x410>)
 80014a8:	f7fe fe9a 	bl	80001e0 <strcmp>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d14d      	bne.n	800154e <parseCommands+0x366>
		if (firstParameter != 0) {
 80014b2:	4b52      	ldr	r3, [pc, #328]	; (80015fc <parseCommands+0x414>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d004      	beq.n	80014c4 <parseCommands+0x2dc>
			distancia = firstParameter;
 80014ba:	4b50      	ldr	r3, [pc, #320]	; (80015fc <parseCommands+0x414>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	b29a      	uxth	r2, r3
 80014c0:	4b4f      	ldr	r3, [pc, #316]	; (8001600 <parseCommands+0x418>)
 80014c2:	801a      	strh	r2, [r3, #0]
		}
		moves = 1;
 80014c4:	4b4f      	ldr	r3, [pc, #316]	; (8001604 <parseCommands+0x41c>)
 80014c6:	2201      	movs	r2, #1
 80014c8:	701a      	strb	r2, [r3, #0]
		theta = 0;
 80014ca:	494f      	ldr	r1, [pc, #316]	; (8001608 <parseCommands+0x420>)
 80014cc:	f04f 0200 	mov.w	r2, #0
 80014d0:	f04f 0300 	mov.w	r3, #0
 80014d4:	e9c1 2300 	strd	r2, r3, [r1]
		x = 0;
 80014d8:	494c      	ldr	r1, [pc, #304]	; (800160c <parseCommands+0x424>)
 80014da:	f04f 0200 	mov.w	r2, #0
 80014de:	f04f 0300 	mov.w	r3, #0
 80014e2:	e9c1 2300 	strd	r2, r3, [r1]
		y = 0;
 80014e6:	494a      	ldr	r1, [pc, #296]	; (8001610 <parseCommands+0x428>)
 80014e8:	f04f 0200 	mov.w	r2, #0
 80014ec:	f04f 0300 	mov.w	r3, #0
 80014f0:	e9c1 2300 	strd	r2, r3, [r1]
		pwmBlue.config.duttyCicle = duttyInBlue;
 80014f4:	4b47      	ldr	r3, [pc, #284]	; (8001614 <parseCommands+0x42c>)
 80014f6:	f640 52ac 	movw	r2, #3500	; 0xdac
 80014fa:	81da      	strh	r2, [r3, #14]
		setDuttyCycle(&pwmBlue);
 80014fc:	4845      	ldr	r0, [pc, #276]	; (8001614 <parseCommands+0x42c>)
 80014fe:	f002 f9bf 	bl	8003880 <setDuttyCycle>
		pwmYellow.config.duttyCicle = duttyIYwl;
 8001502:	4b45      	ldr	r3, [pc, #276]	; (8001618 <parseCommands+0x430>)
 8001504:	f640 5252 	movw	r2, #3410	; 0xd52
 8001508:	81da      	strh	r2, [r3, #14]
		setDuttyCycle(&pwmYellow);
 800150a:	4843      	ldr	r0, [pc, #268]	; (8001618 <parseCommands+0x430>)
 800150c:	f002 f9b8 	bl	8003880 <setDuttyCycle>

		dirBlueVal = 0;
 8001510:	4b42      	ldr	r3, [pc, #264]	; (800161c <parseCommands+0x434>)
 8001512:	2200      	movs	r2, #0
 8001514:	701a      	strb	r2, [r3, #0]
		pwmUpdatePolarity(&pwmBlue, dirBlueVal);
 8001516:	4b41      	ldr	r3, [pc, #260]	; (800161c <parseCommands+0x434>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	4619      	mov	r1, r3
 800151c:	483d      	ldr	r0, [pc, #244]	; (8001614 <parseCommands+0x42c>)
 800151e:	f002 fa4f 	bl	80039c0 <pwmUpdatePolarity>
		GPIO_WritePin(&dirPinBlue, dirBlueVal);
 8001522:	4b3e      	ldr	r3, [pc, #248]	; (800161c <parseCommands+0x434>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	4619      	mov	r1, r3
 8001528:	483d      	ldr	r0, [pc, #244]	; (8001620 <parseCommands+0x438>)
 800152a:	f001 feb9 	bl	80032a0 <GPIO_WritePin>
		dirYellowVal = 0;
 800152e:	4b3d      	ldr	r3, [pc, #244]	; (8001624 <parseCommands+0x43c>)
 8001530:	2200      	movs	r2, #0
 8001532:	701a      	strb	r2, [r3, #0]
		pwmUpdatePolarity(&pwmYellow, dirYellowVal);
 8001534:	4b3b      	ldr	r3, [pc, #236]	; (8001624 <parseCommands+0x43c>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	4619      	mov	r1, r3
 800153a:	4837      	ldr	r0, [pc, #220]	; (8001618 <parseCommands+0x430>)
 800153c:	f002 fa40 	bl	80039c0 <pwmUpdatePolarity>
		GPIO_WritePin(&dirPinYw, dirYellowVal);
 8001540:	4b38      	ldr	r3, [pc, #224]	; (8001624 <parseCommands+0x43c>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	4619      	mov	r1, r3
 8001546:	4838      	ldr	r0, [pc, #224]	; (8001628 <parseCommands+0x440>)
 8001548:	f001 feaa 	bl	80032a0 <GPIO_WritePin>
 800154c:	e04b      	b.n	80015e6 <parseCommands+0x3fe>
	}

	else if (strcmp(cmd, "wheel") == 0) {
 800154e:	4937      	ldr	r1, [pc, #220]	; (800162c <parseCommands+0x444>)
 8001550:	4829      	ldr	r0, [pc, #164]	; (80015f8 <parseCommands+0x410>)
 8001552:	f7fe fe45 	bl	80001e0 <strcmp>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d11c      	bne.n	8001596 <parseCommands+0x3ae>
		wheelbase = firstParameter / 10.0f;
 800155c:	4b27      	ldr	r3, [pc, #156]	; (80015fc <parseCommands+0x414>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	ee07 3a90 	vmov	s15, r3
 8001564:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001568:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800156c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001570:	4b2f      	ldr	r3, [pc, #188]	; (8001630 <parseCommands+0x448>)
 8001572:	edc3 7a00 	vstr	s15, [r3]
		sprintf(bufferData, "Wheel = %.2f", wheelbase);
 8001576:	4b2e      	ldr	r3, [pc, #184]	; (8001630 <parseCommands+0x448>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f7fe fffc 	bl	8000578 <__aeabi_f2d>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
 8001584:	492b      	ldr	r1, [pc, #172]	; (8001634 <parseCommands+0x44c>)
 8001586:	482c      	ldr	r0, [pc, #176]	; (8001638 <parseCommands+0x450>)
 8001588:	f003 fcf8 	bl	8004f7c <siprintf>
		writeString(&handlerConexion, bufferData);
 800158c:	492a      	ldr	r1, [pc, #168]	; (8001638 <parseCommands+0x450>)
 800158e:	482b      	ldr	r0, [pc, #172]	; (800163c <parseCommands+0x454>)
 8001590:	f002 fe23 	bl	80041da <writeString>
 8001594:	e027      	b.n	80015e6 <parseCommands+0x3fe>
	}

	else if (strcmp(cmd, "wheelSize") == 0) {
 8001596:	492a      	ldr	r1, [pc, #168]	; (8001640 <parseCommands+0x458>)
 8001598:	4817      	ldr	r0, [pc, #92]	; (80015f8 <parseCommands+0x410>)
 800159a:	f7fe fe21 	bl	80001e0 <strcmp>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d11c      	bne.n	80015de <parseCommands+0x3f6>
		wheelbase = firstParameter / 100.0f;
 80015a4:	4b15      	ldr	r3, [pc, #84]	; (80015fc <parseCommands+0x414>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	ee07 3a90 	vmov	s15, r3
 80015ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015b0:	eddf 6a24 	vldr	s13, [pc, #144]	; 8001644 <parseCommands+0x45c>
 80015b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015b8:	4b1d      	ldr	r3, [pc, #116]	; (8001630 <parseCommands+0x448>)
 80015ba:	edc3 7a00 	vstr	s15, [r3]
		sprintf(bufferData, "Wheel = %.2f", wheelbase);
 80015be:	4b1c      	ldr	r3, [pc, #112]	; (8001630 <parseCommands+0x448>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7fe ffd8 	bl	8000578 <__aeabi_f2d>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	4919      	ldr	r1, [pc, #100]	; (8001634 <parseCommands+0x44c>)
 80015ce:	481a      	ldr	r0, [pc, #104]	; (8001638 <parseCommands+0x450>)
 80015d0:	f003 fcd4 	bl	8004f7c <siprintf>
		writeString(&handlerConexion, bufferData);
 80015d4:	4918      	ldr	r1, [pc, #96]	; (8001638 <parseCommands+0x450>)
 80015d6:	4819      	ldr	r0, [pc, #100]	; (800163c <parseCommands+0x454>)
 80015d8:	f002 fdff 	bl	80041da <writeString>
 80015dc:	e003      	b.n	80015e6 <parseCommands+0x3fe>
	}

	else {
		// Se imprime el mensaje "Wrong CMD" si la escritura no corresponde a los CMD implementados
		writeString(&handlerConexion, "Wrong CMD \n");
 80015de:	491a      	ldr	r1, [pc, #104]	; (8001648 <parseCommands+0x460>)
 80015e0:	4816      	ldr	r0, [pc, #88]	; (800163c <parseCommands+0x454>)
 80015e2:	f002 fdfa 	bl	80041da <writeString>
	}
	firstParameter = 0;
 80015e6:	4b05      	ldr	r3, [pc, #20]	; (80015fc <parseCommands+0x414>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]

}
 80015ec:	bf00      	nop
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	080094dc 	.word	0x080094dc
 80015f8:	20000368 	.word	0x20000368
 80015fc:	200004a4 	.word	0x200004a4
 8001600:	20000006 	.word	0x20000006
 8001604:	200005d0 	.word	0x200005d0
 8001608:	200005f0 	.word	0x200005f0
 800160c:	200005e0 	.word	0x200005e0
 8001610:	200005e8 	.word	0x200005e8
 8001614:	2000050c 	.word	0x2000050c
 8001618:	20000520 	.word	0x20000520
 800161c:	20000534 	.word	0x20000534
 8001620:	200005c4 	.word	0x200005c4
 8001624:	20000000 	.word	0x20000000
 8001628:	200005b8 	.word	0x200005b8
 800162c:	080094e4 	.word	0x080094e4
 8001630:	20000008 	.word	0x20000008
 8001634:	080094ec 	.word	0x080094ec
 8001638:	200003a8 	.word	0x200003a8
 800163c:	2000029c 	.word	0x2000029c
 8001640:	080094fc 	.word	0x080094fc
 8001644:	42c80000 	.word	0x42c80000
 8001648:	08009508 	.word	0x08009508

0800164c <BasicTimer2_Callback>:
void BasicTimer2_Callback(void) {
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0

	counterTimer2++;
 8001650:	4b06      	ldr	r3, [pc, #24]	; (800166c <BasicTimer2_Callback+0x20>)
 8001652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001656:	1c50      	adds	r0, r2, #1
 8001658:	f143 0100 	adc.w	r1, r3, #0
 800165c:	4b03      	ldr	r3, [pc, #12]	; (800166c <BasicTimer2_Callback+0x20>)
 800165e:	e9c3 0100 	strd	r0, r1, [r3]
////			pwmBlue.config.duttyCicle -= 1;
////			setDuttyCycle(&pwmBlue);
////		}
//		countTimer = 0;
//	}
}
 8001662:	bf00      	nop
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	20000338 	.word	0x20000338

08001670 <BasicTimer3_Callback>:
//Calback del timer3 para el blinking
void BasicTimer3_Callback(void) {
 8001670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001674:	b08f      	sub	sp, #60	; 0x3c
 8001676:	af0a      	add	r7, sp, #40	; 0x28
	GPIOxTooglePin(&ledUsuario);
 8001678:	483b      	ldr	r0, [pc, #236]	; (8001768 <BasicTimer3_Callback+0xf8>)
 800167a:	f001 fe5a 	bl	8003332 <GPIOxTooglePin>
	counter10seg++;
 800167e:	4b3b      	ldr	r3, [pc, #236]	; (800176c <BasicTimer3_Callback+0xfc>)
 8001680:	881b      	ldrh	r3, [r3, #0]
 8001682:	3301      	adds	r3, #1
 8001684:	b29a      	uxth	r2, r3
 8001686:	4b39      	ldr	r3, [pc, #228]	; (800176c <BasicTimer3_Callback+0xfc>)
 8001688:	801a      	strh	r2, [r3, #0]
	if (counter10seg > 4 * 1 - 1) {
 800168a:	4b38      	ldr	r3, [pc, #224]	; (800176c <BasicTimer3_Callback+0xfc>)
 800168c:	881b      	ldrh	r3, [r3, #0]
 800168e:	2b03      	cmp	r3, #3
 8001690:	d965      	bls.n	800175e <BasicTimer3_Callback+0xee>
		sprintf(bufferData, "%.4f\t%.4f\t%.4f\t%d\t%d\t%.1f\t%.1f\n", x / 100,
 8001692:	4b37      	ldr	r3, [pc, #220]	; (8001770 <BasicTimer3_Callback+0x100>)
 8001694:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001698:	f04f 0200 	mov.w	r2, #0
 800169c:	4b35      	ldr	r3, [pc, #212]	; (8001774 <BasicTimer3_Callback+0x104>)
 800169e:	f7ff f8ed 	bl	800087c <__aeabi_ddiv>
 80016a2:	4602      	mov	r2, r0
 80016a4:	460b      	mov	r3, r1
 80016a6:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80016aa:	4b33      	ldr	r3, [pc, #204]	; (8001778 <BasicTimer3_Callback+0x108>)
 80016ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016b0:	f04f 0200 	mov.w	r2, #0
 80016b4:	4b2f      	ldr	r3, [pc, #188]	; (8001774 <BasicTimer3_Callback+0x104>)
 80016b6:	f7ff f8e1 	bl	800087c <__aeabi_ddiv>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	4692      	mov	sl, r2
 80016c0:	469b      	mov	fp, r3
 80016c2:	4b2e      	ldr	r3, [pc, #184]	; (800177c <BasicTimer3_Callback+0x10c>)
 80016c4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80016c8:	4b2d      	ldr	r3, [pc, #180]	; (8001780 <BasicTimer3_Callback+0x110>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	4b2d      	ldr	r3, [pc, #180]	; (8001784 <BasicTimer3_Callback+0x114>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	1ad6      	subs	r6, r2, r3
 80016d2:	4b2d      	ldr	r3, [pc, #180]	; (8001788 <BasicTimer3_Callback+0x118>)
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	4b2d      	ldr	r3, [pc, #180]	; (800178c <BasicTimer3_Callback+0x11c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	607b      	str	r3, [r7, #4]
				y / 100, theta, (counterBlueCounterT - lastValBlue),
				(counterYwlCounterT - lastValYwl),
				pwmBlue.config.duttyCicle / 10.0f,
 80016de:	4b2c      	ldr	r3, [pc, #176]	; (8001790 <BasicTimer3_Callback+0x120>)
 80016e0:	89db      	ldrh	r3, [r3, #14]
 80016e2:	ee07 3a90 	vmov	s15, r3
 80016e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016ea:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80016ee:	eec7 6a87 	vdiv.f32	s13, s15, s14
		sprintf(bufferData, "%.4f\t%.4f\t%.4f\t%d\t%d\t%.1f\t%.1f\n", x / 100,
 80016f2:	ee16 0a90 	vmov	r0, s13
 80016f6:	f7fe ff3f 	bl	8000578 <__aeabi_f2d>
 80016fa:	4680      	mov	r8, r0
 80016fc:	4689      	mov	r9, r1
				pwmYellow.config.duttyCicle / 10.0f);
 80016fe:	4b25      	ldr	r3, [pc, #148]	; (8001794 <BasicTimer3_Callback+0x124>)
 8001700:	89db      	ldrh	r3, [r3, #14]
 8001702:	ee07 3a90 	vmov	s15, r3
 8001706:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800170a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800170e:	eec7 6a87 	vdiv.f32	s13, s15, s14
		sprintf(bufferData, "%.4f\t%.4f\t%.4f\t%d\t%d\t%.1f\t%.1f\n", x / 100,
 8001712:	ee16 0a90 	vmov	r0, s13
 8001716:	f7fe ff2f 	bl	8000578 <__aeabi_f2d>
 800171a:	4602      	mov	r2, r0
 800171c:	460b      	mov	r3, r1
 800171e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001722:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	9305      	str	r3, [sp, #20]
 800172a:	9604      	str	r6, [sp, #16]
 800172c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001730:	e9cd ab00 	strd	sl, fp, [sp]
 8001734:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001738:	4917      	ldr	r1, [pc, #92]	; (8001798 <BasicTimer3_Callback+0x128>)
 800173a:	4818      	ldr	r0, [pc, #96]	; (800179c <BasicTimer3_Callback+0x12c>)
 800173c:	f003 fc1e 	bl	8004f7c <siprintf>
		writeString(&handlerConexion, bufferData);
 8001740:	4916      	ldr	r1, [pc, #88]	; (800179c <BasicTimer3_Callback+0x12c>)
 8001742:	4817      	ldr	r0, [pc, #92]	; (80017a0 <BasicTimer3_Callback+0x130>)
 8001744:	f002 fd49 	bl	80041da <writeString>
		lastValBlue = counterBlueCounterT;
 8001748:	4b0d      	ldr	r3, [pc, #52]	; (8001780 <BasicTimer3_Callback+0x110>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a0d      	ldr	r2, [pc, #52]	; (8001784 <BasicTimer3_Callback+0x114>)
 800174e:	6013      	str	r3, [r2, #0]
		lastValYwl = counterYwlCounterT;
 8001750:	4b0d      	ldr	r3, [pc, #52]	; (8001788 <BasicTimer3_Callback+0x118>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a0d      	ldr	r2, [pc, #52]	; (800178c <BasicTimer3_Callback+0x11c>)
 8001756:	6013      	str	r3, [r2, #0]
		counter10seg = 0;
 8001758:	4b04      	ldr	r3, [pc, #16]	; (800176c <BasicTimer3_Callback+0xfc>)
 800175a:	2200      	movs	r2, #0
 800175c:	801a      	strh	r2, [r3, #0]
	}

}
 800175e:	bf00      	nop
 8001760:	3714      	adds	r7, #20
 8001762:	46bd      	mov	sp, r7
 8001764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001768:	200004cc 	.word	0x200004cc
 800176c:	200005f8 	.word	0x200005f8
 8001770:	200005e0 	.word	0x200005e0
 8001774:	40590000 	.word	0x40590000
 8001778:	200005e8 	.word	0x200005e8
 800177c:	200005f0 	.word	0x200005f0
 8001780:	20000568 	.word	0x20000568
 8001784:	20000570 	.word	0x20000570
 8001788:	20000590 	.word	0x20000590
 800178c:	20000574 	.word	0x20000574
 8001790:	2000050c 	.word	0x2000050c
 8001794:	20000520 	.word	0x20000520
 8001798:	08009514 	.word	0x08009514
 800179c:	200003a8 	.word	0x200003a8
 80017a0:	2000029c 	.word	0x2000029c

080017a4 <USART1Rx_Callback>:

void USART1Rx_Callback(void) {
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
	rxData2 = (uint8_t) USART1->DR;
 80017a8:	4b04      	ldr	r3, [pc, #16]	; (80017bc <USART1Rx_Callback+0x18>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	4b04      	ldr	r3, [pc, #16]	; (80017c0 <USART1Rx_Callback+0x1c>)
 80017b0:	701a      	strb	r2, [r3, #0]
}
 80017b2:	bf00      	nop
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	40011000 	.word	0x40011000
 80017c0:	20000334 	.word	0x20000334

080017c4 <callback_extInt0>:

void callback_extInt0(void) {
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
	PC0Counter++;
 80017c8:	4b04      	ldr	r3, [pc, #16]	; (80017dc <callback_extInt0+0x18>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	3301      	adds	r3, #1
 80017ce:	4a03      	ldr	r2, [pc, #12]	; (80017dc <callback_extInt0+0x18>)
 80017d0:	6013      	str	r3, [r2, #0]
}
 80017d2:	bf00      	nop
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	200005ac 	.word	0x200005ac

080017e0 <callback_extInt7>:

void callback_extInt7(void) {
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0

	PC7Counter++;
 80017e4:	4b04      	ldr	r3, [pc, #16]	; (80017f8 <callback_extInt7+0x18>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	3301      	adds	r3, #1
 80017ea:	4a03      	ldr	r2, [pc, #12]	; (80017f8 <callback_extInt7+0x18>)
 80017ec:	6013      	str	r3, [r2, #0]
}
 80017ee:	bf00      	nop
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	2000054c 	.word	0x2000054c

080017fc <callback_extInt1>:

void callback_extInt1(void) {
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0

	counterBlueCounter++;
 8001800:	4b0f      	ldr	r3, [pc, #60]	; (8001840 <callback_extInt1+0x44>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	3301      	adds	r3, #1
 8001806:	4a0e      	ldr	r2, [pc, #56]	; (8001840 <callback_extInt1+0x44>)
 8001808:	6013      	str	r3, [r2, #0]
	counterBlueCounterT++;
 800180a:	4b0e      	ldr	r3, [pc, #56]	; (8001844 <callback_extInt1+0x48>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	3301      	adds	r3, #1
 8001810:	4a0c      	ldr	r2, [pc, #48]	; (8001844 <callback_extInt1+0x48>)
 8001812:	6013      	str	r3, [r2, #0]
	timeBlue = counterTimer2 - lastBlue;
 8001814:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <callback_extInt1+0x4c>)
 8001816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181a:	b291      	uxth	r1, r2
 800181c:	4b0b      	ldr	r3, [pc, #44]	; (800184c <callback_extInt1+0x50>)
 800181e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001822:	b293      	uxth	r3, r2
 8001824:	1acb      	subs	r3, r1, r3
 8001826:	b29a      	uxth	r2, r3
 8001828:	4b09      	ldr	r3, [pc, #36]	; (8001850 <callback_extInt1+0x54>)
 800182a:	801a      	strh	r2, [r3, #0]
	lastBlue = counterTimer2;
 800182c:	4b06      	ldr	r3, [pc, #24]	; (8001848 <callback_extInt1+0x4c>)
 800182e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001832:	4906      	ldr	r1, [pc, #24]	; (800184c <callback_extInt1+0x50>)
 8001834:	e9c1 2300 	strd	r2, r3, [r1]
	updatePosition();
 8001838:	f000 f83a 	bl	80018b0 <updatePosition>
}
 800183c:	bf00      	nop
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20000564 	.word	0x20000564
 8001844:	20000568 	.word	0x20000568
 8001848:	20000338 	.word	0x20000338
 800184c:	20000340 	.word	0x20000340
 8001850:	2000056c 	.word	0x2000056c

08001854 <callback_extInt3>:

void callback_extInt3(void) {
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0

	counterYwlCounter++;
 8001858:	4b0f      	ldr	r3, [pc, #60]	; (8001898 <callback_extInt3+0x44>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	3301      	adds	r3, #1
 800185e:	4a0e      	ldr	r2, [pc, #56]	; (8001898 <callback_extInt3+0x44>)
 8001860:	6013      	str	r3, [r2, #0]
	counterYwlCounterT++;
 8001862:	4b0e      	ldr	r3, [pc, #56]	; (800189c <callback_extInt3+0x48>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	3301      	adds	r3, #1
 8001868:	4a0c      	ldr	r2, [pc, #48]	; (800189c <callback_extInt3+0x48>)
 800186a:	6013      	str	r3, [r2, #0]
	timeYwl = counterTimer2 - lastYlw;
 800186c:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <callback_extInt3+0x4c>)
 800186e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001872:	b291      	uxth	r1, r2
 8001874:	4b0b      	ldr	r3, [pc, #44]	; (80018a4 <callback_extInt3+0x50>)
 8001876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800187a:	b293      	uxth	r3, r2
 800187c:	1acb      	subs	r3, r1, r3
 800187e:	b29a      	uxth	r2, r3
 8001880:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <callback_extInt3+0x54>)
 8001882:	801a      	strh	r2, [r3, #0]
	lastYlw = counterTimer2;
 8001884:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <callback_extInt3+0x4c>)
 8001886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800188a:	4906      	ldr	r1, [pc, #24]	; (80018a4 <callback_extInt3+0x50>)
 800188c:	e9c1 2300 	strd	r2, r3, [r1]
	updatePosition();
 8001890:	f000 f80e 	bl	80018b0 <updatePosition>

}
 8001894:	bf00      	nop
 8001896:	bd80      	pop	{r7, pc}
 8001898:	2000058c 	.word	0x2000058c
 800189c:	20000590 	.word	0x20000590
 80018a0:	20000338 	.word	0x20000338
 80018a4:	20000348 	.word	0x20000348
 80018a8:	20000594 	.word	0x20000594
 80018ac:	00000000 	.word	0x00000000

080018b0 <updatePosition>:
	average = (double) sum / size;

	return average;
}

void updatePosition(void) {
 80018b0:	b5b0      	push	{r4, r5, r7, lr}
 80018b2:	b08e      	sub	sp, #56	; 0x38
 80018b4:	af00      	add	r7, sp, #0
	double dLeft, dRight, dCenter, deltaTheta, deltaX, deltaY;

	recorridoBlue = (M_PI / 72) * (wheelsize * counterBlueCounter);
 80018b6:	4bac      	ldr	r3, [pc, #688]	; (8001b68 <updatePosition+0x2b8>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	ee07 3a90 	vmov	s15, r3
 80018be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018c2:	4baa      	ldr	r3, [pc, #680]	; (8001b6c <updatePosition+0x2bc>)
 80018c4:	edd3 7a00 	vldr	s15, [r3]
 80018c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018cc:	ee17 0a90 	vmov	r0, s15
 80018d0:	f7fe fe52 	bl	8000578 <__aeabi_f2d>
 80018d4:	a39a      	add	r3, pc, #616	; (adr r3, 8001b40 <updatePosition+0x290>)
 80018d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018da:	f7fe fea5 	bl	8000628 <__aeabi_dmul>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	4610      	mov	r0, r2
 80018e4:	4619      	mov	r1, r3
 80018e6:	f7ff f997 	bl	8000c18 <__aeabi_d2f>
 80018ea:	4603      	mov	r3, r0
 80018ec:	4aa0      	ldr	r2, [pc, #640]	; (8001b70 <updatePosition+0x2c0>)
 80018ee:	6013      	str	r3, [r2, #0]
	recorridoYellow = (M_PI / 72) * (wheelsize * counterYwlCounter);
 80018f0:	4ba0      	ldr	r3, [pc, #640]	; (8001b74 <updatePosition+0x2c4>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	ee07 3a90 	vmov	s15, r3
 80018f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018fc:	4b9b      	ldr	r3, [pc, #620]	; (8001b6c <updatePosition+0x2bc>)
 80018fe:	edd3 7a00 	vldr	s15, [r3]
 8001902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001906:	ee17 0a90 	vmov	r0, s15
 800190a:	f7fe fe35 	bl	8000578 <__aeabi_f2d>
 800190e:	a38c      	add	r3, pc, #560	; (adr r3, 8001b40 <updatePosition+0x290>)
 8001910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001914:	f7fe fe88 	bl	8000628 <__aeabi_dmul>
 8001918:	4602      	mov	r2, r0
 800191a:	460b      	mov	r3, r1
 800191c:	4610      	mov	r0, r2
 800191e:	4619      	mov	r1, r3
 8001920:	f7ff f97a 	bl	8000c18 <__aeabi_d2f>
 8001924:	4603      	mov	r3, r0
 8001926:	4a94      	ldr	r2, [pc, #592]	; (8001b78 <updatePosition+0x2c8>)
 8001928:	6013      	str	r3, [r2, #0]
	counterBlueCounter = 0;
 800192a:	4b8f      	ldr	r3, [pc, #572]	; (8001b68 <updatePosition+0x2b8>)
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
	counterYwlCounter = 0;
 8001930:	4b90      	ldr	r3, [pc, #576]	; (8001b74 <updatePosition+0x2c4>)
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
	// Convert directions into forward (1) or backward (-1) multipliers
	int multiplierBlue = (dirBlueVal == 0) ? 1 : -1;
 8001936:	4b91      	ldr	r3, [pc, #580]	; (8001b7c <updatePosition+0x2cc>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	f083 0301 	eor.w	r3, r3, #1
 800193e:	b2db      	uxtb	r3, r3
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <updatePosition+0x98>
 8001944:	2301      	movs	r3, #1
 8001946:	e001      	b.n	800194c <updatePosition+0x9c>
 8001948:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800194c:	637b      	str	r3, [r7, #52]	; 0x34
	int multiplierYellow = (dirYellowVal == 0) ? 1 : -1;
 800194e:	4b8c      	ldr	r3, [pc, #560]	; (8001b80 <updatePosition+0x2d0>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	f083 0301 	eor.w	r3, r3, #1
 8001956:	b2db      	uxtb	r3, r3
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <updatePosition+0xb0>
 800195c:	2301      	movs	r3, #1
 800195e:	e001      	b.n	8001964 <updatePosition+0xb4>
 8001960:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001964:	633b      	str	r3, [r7, #48]	; 0x30

	// Calculate distances traveled by each wheel, adjusted by direction
	dLeft = recorridoBlue * multiplierBlue;
 8001966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001968:	ee07 3a90 	vmov	s15, r3
 800196c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001970:	4b7f      	ldr	r3, [pc, #508]	; (8001b70 <updatePosition+0x2c0>)
 8001972:	edd3 7a00 	vldr	s15, [r3]
 8001976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800197a:	ee17 0a90 	vmov	r0, s15
 800197e:	f7fe fdfb 	bl	8000578 <__aeabi_f2d>
 8001982:	4602      	mov	r2, r0
 8001984:	460b      	mov	r3, r1
 8001986:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	dRight = recorridoYellow * multiplierYellow;
 800198a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800198c:	ee07 3a90 	vmov	s15, r3
 8001990:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001994:	4b78      	ldr	r3, [pc, #480]	; (8001b78 <updatePosition+0x2c8>)
 8001996:	edd3 7a00 	vldr	s15, [r3]
 800199a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800199e:	ee17 0a90 	vmov	r0, s15
 80019a2:	f7fe fde9 	bl	8000578 <__aeabi_f2d>
 80019a6:	4602      	mov	r2, r0
 80019a8:	460b      	mov	r3, r1
 80019aa:	e9c7 2308 	strd	r2, r3, [r7, #32]

	// Average distance traveled by the robot
	dCenter = (dLeft + dRight) / 2.0;
 80019ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80019b2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80019b6:	f7fe fc81 	bl	80002bc <__adddf3>
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	4610      	mov	r0, r2
 80019c0:	4619      	mov	r1, r3
 80019c2:	f04f 0200 	mov.w	r2, #0
 80019c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019ca:	f7fe ff57 	bl	800087c <__aeabi_ddiv>
 80019ce:	4602      	mov	r2, r0
 80019d0:	460b      	mov	r3, r1
 80019d2:	e9c7 2306 	strd	r2, r3, [r7, #24]

	// Calculate change in orientation
	deltaTheta = (dRight - dLeft) / wheelbase;
 80019d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80019da:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80019de:	f7fe fc6b 	bl	80002b8 <__aeabi_dsub>
 80019e2:	4602      	mov	r2, r0
 80019e4:	460b      	mov	r3, r1
 80019e6:	4614      	mov	r4, r2
 80019e8:	461d      	mov	r5, r3
 80019ea:	4b66      	ldr	r3, [pc, #408]	; (8001b84 <updatePosition+0x2d4>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7fe fdc2 	bl	8000578 <__aeabi_f2d>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	4620      	mov	r0, r4
 80019fa:	4629      	mov	r1, r5
 80019fc:	f7fe ff3e 	bl	800087c <__aeabi_ddiv>
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Update theta
	theta += deltaTheta;
 8001a08:	4b5f      	ldr	r3, [pc, #380]	; (8001b88 <updatePosition+0x2d8>)
 8001a0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a0e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a12:	f7fe fc53 	bl	80002bc <__adddf3>
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	495b      	ldr	r1, [pc, #364]	; (8001b88 <updatePosition+0x2d8>)
 8001a1c:	e9c1 2300 	strd	r2, r3, [r1]

	if ((theta >= rotate - (0.025 * 8.0f)) && move90 == 1) {
 8001a20:	4b5a      	ldr	r3, [pc, #360]	; (8001b8c <updatePosition+0x2dc>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7fe fda7 	bl	8000578 <__aeabi_f2d>
 8001a2a:	a347      	add	r3, pc, #284	; (adr r3, 8001b48 <updatePosition+0x298>)
 8001a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a30:	f7fe fc42 	bl	80002b8 <__aeabi_dsub>
 8001a34:	4602      	mov	r2, r0
 8001a36:	460b      	mov	r3, r1
 8001a38:	4610      	mov	r0, r2
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4b52      	ldr	r3, [pc, #328]	; (8001b88 <updatePosition+0x2d8>)
 8001a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a42:	f7ff f86d 	bl	8000b20 <__aeabi_dcmple>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d012      	beq.n	8001a72 <updatePosition+0x1c2>
 8001a4c:	4b50      	ldr	r3, [pc, #320]	; (8001b90 <updatePosition+0x2e0>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d00e      	beq.n	8001a72 <updatePosition+0x1c2>
		pwmYellow.config.duttyCicle = 5;
 8001a54:	4b4f      	ldr	r3, [pc, #316]	; (8001b94 <updatePosition+0x2e4>)
 8001a56:	2205      	movs	r2, #5
 8001a58:	81da      	strh	r2, [r3, #14]
		pwmBlue.config.duttyCicle = 5;
 8001a5a:	4b4f      	ldr	r3, [pc, #316]	; (8001b98 <updatePosition+0x2e8>)
 8001a5c:	2205      	movs	r2, #5
 8001a5e:	81da      	strh	r2, [r3, #14]
		setDuttyCycle(&pwmYellow);
 8001a60:	484c      	ldr	r0, [pc, #304]	; (8001b94 <updatePosition+0x2e4>)
 8001a62:	f001 ff0d 	bl	8003880 <setDuttyCycle>
		setDuttyCycle(&pwmBlue);
 8001a66:	484c      	ldr	r0, [pc, #304]	; (8001b98 <updatePosition+0x2e8>)
 8001a68:	f001 ff0a 	bl	8003880 <setDuttyCycle>
		move90 = 0;
 8001a6c:	4b48      	ldr	r3, [pc, #288]	; (8001b90 <updatePosition+0x2e0>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	701a      	strb	r2, [r3, #0]
	}

	// Ensure theta stays within [-pi, pi]
	if (theta > M_PI)
 8001a72:	4b45      	ldr	r3, [pc, #276]	; (8001b88 <updatePosition+0x2d8>)
 8001a74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a78:	a335      	add	r3, pc, #212	; (adr r3, 8001b50 <updatePosition+0x2a0>)
 8001a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7e:	f7ff f863 	bl	8000b48 <__aeabi_dcmpgt>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d00d      	beq.n	8001aa4 <updatePosition+0x1f4>
		theta -= 2 * M_PI;
 8001a88:	4b3f      	ldr	r3, [pc, #252]	; (8001b88 <updatePosition+0x2d8>)
 8001a8a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a8e:	a332      	add	r3, pc, #200	; (adr r3, 8001b58 <updatePosition+0x2a8>)
 8001a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a94:	f7fe fc10 	bl	80002b8 <__aeabi_dsub>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	493a      	ldr	r1, [pc, #232]	; (8001b88 <updatePosition+0x2d8>)
 8001a9e:	e9c1 2300 	strd	r2, r3, [r1]
 8001aa2:	e017      	b.n	8001ad4 <updatePosition+0x224>
	else if (theta < -M_PI)
 8001aa4:	4b38      	ldr	r3, [pc, #224]	; (8001b88 <updatePosition+0x2d8>)
 8001aa6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001aaa:	a32d      	add	r3, pc, #180	; (adr r3, 8001b60 <updatePosition+0x2b0>)
 8001aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab0:	f7ff f82c 	bl	8000b0c <__aeabi_dcmplt>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d00c      	beq.n	8001ad4 <updatePosition+0x224>
		theta += 2 * M_PI;
 8001aba:	4b33      	ldr	r3, [pc, #204]	; (8001b88 <updatePosition+0x2d8>)
 8001abc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ac0:	a325      	add	r3, pc, #148	; (adr r3, 8001b58 <updatePosition+0x2a8>)
 8001ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac6:	f7fe fbf9 	bl	80002bc <__adddf3>
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	492e      	ldr	r1, [pc, #184]	; (8001b88 <updatePosition+0x2d8>)
 8001ad0:	e9c1 2300 	strd	r2, r3, [r1]

	// Calculate change in position
	deltaX = dCenter * cos(0);
 8001ad4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ad8:	e9c7 2302 	strd	r2, r3, [r7, #8]
	deltaY = dCenter * sin(0);
 8001adc:	f04f 0200 	mov.w	r2, #0
 8001ae0:	f04f 0300 	mov.w	r3, #0
 8001ae4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ae8:	f7fe fd9e 	bl	8000628 <__aeabi_dmul>
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	e9c7 2300 	strd	r2, r3, [r7]

	// Update position
	x += deltaX;
 8001af4:	4b29      	ldr	r3, [pc, #164]	; (8001b9c <updatePosition+0x2ec>)
 8001af6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001afa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001afe:	f7fe fbdd 	bl	80002bc <__adddf3>
 8001b02:	4602      	mov	r2, r0
 8001b04:	460b      	mov	r3, r1
 8001b06:	4925      	ldr	r1, [pc, #148]	; (8001b9c <updatePosition+0x2ec>)
 8001b08:	e9c1 2300 	strd	r2, r3, [r1]
	y += deltaY;
 8001b0c:	4b24      	ldr	r3, [pc, #144]	; (8001ba0 <updatePosition+0x2f0>)
 8001b0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b16:	f7fe fbd1 	bl	80002bc <__adddf3>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	4920      	ldr	r1, [pc, #128]	; (8001ba0 <updatePosition+0x2f0>)
 8001b20:	e9c1 2300 	strd	r2, r3, [r1]

	if ((x > distancia) && moves == 1) {
 8001b24:	4b1f      	ldr	r3, [pc, #124]	; (8001ba4 <updatePosition+0x2f4>)
 8001b26:	881b      	ldrh	r3, [r3, #0]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7fe fd13 	bl	8000554 <__aeabi_i2d>
 8001b2e:	4b1b      	ldr	r3, [pc, #108]	; (8001b9c <updatePosition+0x2ec>)
 8001b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b34:	f7fe ffea 	bl	8000b0c <__aeabi_dcmplt>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d134      	bne.n	8001ba8 <updatePosition+0x2f8>
		pwmBlue.config.duttyCicle = 5;
		setDuttyCycle(&pwmYellow);
		setDuttyCycle(&pwmBlue);
	}

}
 8001b3e:	e043      	b.n	8001bc8 <updatePosition+0x318>
 8001b40:	4ae74487 	.word	0x4ae74487
 8001b44:	3fa65718 	.word	0x3fa65718
 8001b48:	9999999a 	.word	0x9999999a
 8001b4c:	3fc99999 	.word	0x3fc99999
 8001b50:	54442d18 	.word	0x54442d18
 8001b54:	400921fb 	.word	0x400921fb
 8001b58:	54442d18 	.word	0x54442d18
 8001b5c:	401921fb 	.word	0x401921fb
 8001b60:	54442d18 	.word	0x54442d18
 8001b64:	c00921fb 	.word	0xc00921fb
 8001b68:	20000564 	.word	0x20000564
 8001b6c:	2000000c 	.word	0x2000000c
 8001b70:	200005d4 	.word	0x200005d4
 8001b74:	2000058c 	.word	0x2000058c
 8001b78:	200005d8 	.word	0x200005d8
 8001b7c:	20000534 	.word	0x20000534
 8001b80:	20000000 	.word	0x20000000
 8001b84:	20000008 	.word	0x20000008
 8001b88:	200005f0 	.word	0x200005f0
 8001b8c:	20000010 	.word	0x20000010
 8001b90:	200005d1 	.word	0x200005d1
 8001b94:	20000520 	.word	0x20000520
 8001b98:	2000050c 	.word	0x2000050c
 8001b9c:	200005e0 	.word	0x200005e0
 8001ba0:	200005e8 	.word	0x200005e8
 8001ba4:	20000006 	.word	0x20000006
	if ((x > distancia) && moves == 1) {
 8001ba8:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <updatePosition+0x320>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d00b      	beq.n	8001bc8 <updatePosition+0x318>
		pwmYellow.config.duttyCicle = 5;
 8001bb0:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <updatePosition+0x324>)
 8001bb2:	2205      	movs	r2, #5
 8001bb4:	81da      	strh	r2, [r3, #14]
		pwmBlue.config.duttyCicle = 5;
 8001bb6:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <updatePosition+0x328>)
 8001bb8:	2205      	movs	r2, #5
 8001bba:	81da      	strh	r2, [r3, #14]
		setDuttyCycle(&pwmYellow);
 8001bbc:	4805      	ldr	r0, [pc, #20]	; (8001bd4 <updatePosition+0x324>)
 8001bbe:	f001 fe5f 	bl	8003880 <setDuttyCycle>
		setDuttyCycle(&pwmBlue);
 8001bc2:	4805      	ldr	r0, [pc, #20]	; (8001bd8 <updatePosition+0x328>)
 8001bc4:	f001 fe5c 	bl	8003880 <setDuttyCycle>
}
 8001bc8:	bf00      	nop
 8001bca:	3738      	adds	r7, #56	; 0x38
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bdb0      	pop	{r4, r5, r7, pc}
 8001bd0:	200005d0 	.word	0x200005d0
 8001bd4:	20000520 	.word	0x20000520
 8001bd8:	2000050c 	.word	0x2000050c

08001bdc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
	return 1;
 8001be0:	2301      	movs	r3, #1
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <_kill>:

int _kill(int pid, int sig)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001bf6:	f002 fb0f 	bl	8004218 <__errno>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2216      	movs	r2, #22
 8001bfe:	601a      	str	r2, [r3, #0]
	return -1;
 8001c00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <_exit>:

void _exit (int status)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f7ff ffe7 	bl	8001bec <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c1e:	e7fe      	b.n	8001c1e <_exit+0x12>

08001c20 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	617b      	str	r3, [r7, #20]
 8001c30:	e00a      	b.n	8001c48 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c32:	f3af 8000 	nop.w
 8001c36:	4601      	mov	r1, r0
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	1c5a      	adds	r2, r3, #1
 8001c3c:	60ba      	str	r2, [r7, #8]
 8001c3e:	b2ca      	uxtb	r2, r1
 8001c40:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	3301      	adds	r3, #1
 8001c46:	617b      	str	r3, [r7, #20]
 8001c48:	697a      	ldr	r2, [r7, #20]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	dbf0      	blt.n	8001c32 <_read+0x12>
	}

return len;
 8001c50:	687b      	ldr	r3, [r7, #4]
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3718      	adds	r7, #24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b086      	sub	sp, #24
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	60f8      	str	r0, [r7, #12]
 8001c62:	60b9      	str	r1, [r7, #8]
 8001c64:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c66:	2300      	movs	r3, #0
 8001c68:	617b      	str	r3, [r7, #20]
 8001c6a:	e009      	b.n	8001c80 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	1c5a      	adds	r2, r3, #1
 8001c70:	60ba      	str	r2, [r7, #8]
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	617b      	str	r3, [r7, #20]
 8001c80:	697a      	ldr	r2, [r7, #20]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	dbf1      	blt.n	8001c6c <_write+0x12>
	}
	return len;
 8001c88:	687b      	ldr	r3, [r7, #4]
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3718      	adds	r7, #24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <_close>:

int _close(int file)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
	return -1;
 8001c9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001caa:	b480      	push	{r7}
 8001cac:	b083      	sub	sp, #12
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
 8001cb2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cba:	605a      	str	r2, [r3, #4]
	return 0;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <_isatty>:

int _isatty(int file)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	b083      	sub	sp, #12
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
	return 1;
 8001cd2:	2301      	movs	r3, #1
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
	return 0;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3714      	adds	r7, #20
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
	...

08001cfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d04:	4a14      	ldr	r2, [pc, #80]	; (8001d58 <_sbrk+0x5c>)
 8001d06:	4b15      	ldr	r3, [pc, #84]	; (8001d5c <_sbrk+0x60>)
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d10:	4b13      	ldr	r3, [pc, #76]	; (8001d60 <_sbrk+0x64>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d102      	bne.n	8001d1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d18:	4b11      	ldr	r3, [pc, #68]	; (8001d60 <_sbrk+0x64>)
 8001d1a:	4a12      	ldr	r2, [pc, #72]	; (8001d64 <_sbrk+0x68>)
 8001d1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d1e:	4b10      	ldr	r3, [pc, #64]	; (8001d60 <_sbrk+0x64>)
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4413      	add	r3, r2
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d207      	bcs.n	8001d3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d2c:	f002 fa74 	bl	8004218 <__errno>
 8001d30:	4603      	mov	r3, r0
 8001d32:	220c      	movs	r2, #12
 8001d34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d3a:	e009      	b.n	8001d50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d3c:	4b08      	ldr	r3, [pc, #32]	; (8001d60 <_sbrk+0x64>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d42:	4b07      	ldr	r3, [pc, #28]	; (8001d60 <_sbrk+0x64>)
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4413      	add	r3, r2
 8001d4a:	4a05      	ldr	r2, [pc, #20]	; (8001d60 <_sbrk+0x64>)
 8001d4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3718      	adds	r7, #24
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	20020000 	.word	0x20020000
 8001d5c:	00000400 	.word	0x00000400
 8001d60:	200005fc 	.word	0x200005fc
 8001d64:	20000638 	.word	0x20000638

08001d68 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d68:	480d      	ldr	r0, [pc, #52]	; (8001da0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d6a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d6c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d70:	480c      	ldr	r0, [pc, #48]	; (8001da4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d72:	490d      	ldr	r1, [pc, #52]	; (8001da8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d74:	4a0d      	ldr	r2, [pc, #52]	; (8001dac <LoopForever+0xe>)
  movs r3, #0
 8001d76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d78:	e002      	b.n	8001d80 <LoopCopyDataInit>

08001d7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d7e:	3304      	adds	r3, #4

08001d80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d84:	d3f9      	bcc.n	8001d7a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d86:	4a0a      	ldr	r2, [pc, #40]	; (8001db0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d88:	4c0a      	ldr	r4, [pc, #40]	; (8001db4 <LoopForever+0x16>)
  movs r3, #0
 8001d8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d8c:	e001      	b.n	8001d92 <LoopFillZerobss>

08001d8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d90:	3204      	adds	r2, #4

08001d92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d94:	d3fb      	bcc.n	8001d8e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d96:	f002 fa45 	bl	8004224 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d9a:	f7fe ffc3 	bl	8000d24 <main>

08001d9e <LoopForever>:

LoopForever:
    b LoopForever
 8001d9e:	e7fe      	b.n	8001d9e <LoopForever>
  ldr   r0, =_estack
 8001da0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001da4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001da8:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001dac:	08009a04 	.word	0x08009a04
  ldr r2, =_sbss
 8001db0:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001db4:	20000638 	.word	0x20000638

08001db8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001db8:	e7fe      	b.n	8001db8 <ADC_IRQHandler>
	...

08001dbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	db0b      	blt.n	8001de6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dce:	79fb      	ldrb	r3, [r7, #7]
 8001dd0:	f003 021f 	and.w	r2, r3, #31
 8001dd4:	4907      	ldr	r1, [pc, #28]	; (8001df4 <__NVIC_EnableIRQ+0x38>)
 8001dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dda:	095b      	lsrs	r3, r3, #5
 8001ddc:	2001      	movs	r0, #1
 8001dde:	fa00 f202 	lsl.w	r2, r0, r2
 8001de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	e000e100 	.word	0xe000e100

08001df8 <BasicTimer_Config>:
 *
 *  Como vamos a trabajar con interrupciones, antes de configurar una nueva, debemos desactivar
 *  el sistema global de interrupciones, activar la IRQ específica y luego volver a encender
 *  el sistema.
 */
void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler) {
 8001df8:	b590      	push	{r4, r7, lr}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
	// Guardamos una referencia al periferico que estamos utilizando...
	ptrTimerUsed = ptrBTimerHandler->ptrTIMx;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a60      	ldr	r2, [pc, #384]	; (8001f88 <BasicTimer_Config+0x190>)
 8001e06:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e08:	b672      	cpsid	i
}
 8001e0a:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales mientras configuramos el sistema.*/
	__disable_irq();
	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrBTimerHandler->ptrTIMx == TIM2) {
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e14:	d106      	bne.n	8001e24 <BasicTimer_Config+0x2c>
		//APB1 primero limpiamos
		// Registro del RCC que nos activa la señal de reloj para el TIM2
		//limpia
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8001e16:	4b5d      	ldr	r3, [pc, #372]	; (8001f8c <BasicTimer_Config+0x194>)
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	4a5c      	ldr	r2, [pc, #368]	; (8001f8c <BasicTimer_Config+0x194>)
 8001e1c:	f043 0301 	orr.w	r3, r3, #1
 8001e20:	6413      	str	r3, [r2, #64]	; 0x40
 8001e22:	e024      	b.n	8001e6e <BasicTimer_Config+0x76>
	} else if (ptrBTimerHandler->ptrTIMx == TIM3) {
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a59      	ldr	r2, [pc, #356]	; (8001f90 <BasicTimer_Config+0x198>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d106      	bne.n	8001e3c <BasicTimer_Config+0x44>
		// Registro del RCC que nos activa la señal de reloj para el TIM3
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8001e2e:	4b57      	ldr	r3, [pc, #348]	; (8001f8c <BasicTimer_Config+0x194>)
 8001e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e32:	4a56      	ldr	r2, [pc, #344]	; (8001f8c <BasicTimer_Config+0x194>)
 8001e34:	f043 0302 	orr.w	r3, r3, #2
 8001e38:	6413      	str	r3, [r2, #64]	; 0x40
 8001e3a:	e018      	b.n	8001e6e <BasicTimer_Config+0x76>
	} else if (ptrBTimerHandler->ptrTIMx == TIM4) {
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a54      	ldr	r2, [pc, #336]	; (8001f94 <BasicTimer_Config+0x19c>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d106      	bne.n	8001e54 <BasicTimer_Config+0x5c>
		// Registro del RCC que nos activa la señal de reloj para el TIM4
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8001e46:	4b51      	ldr	r3, [pc, #324]	; (8001f8c <BasicTimer_Config+0x194>)
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	4a50      	ldr	r2, [pc, #320]	; (8001f8c <BasicTimer_Config+0x194>)
 8001e4c:	f043 0304 	orr.w	r3, r3, #4
 8001e50:	6413      	str	r3, [r2, #64]	; 0x40
 8001e52:	e00c      	b.n	8001e6e <BasicTimer_Config+0x76>
	} else if (ptrBTimerHandler->ptrTIMx == TIM5) {
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a4f      	ldr	r2, [pc, #316]	; (8001f98 <BasicTimer_Config+0x1a0>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d106      	bne.n	8001e6c <BasicTimer_Config+0x74>
		// Registro del RCC que nos activa la señal de reloj para el TIM5
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8001e5e:	4b4b      	ldr	r3, [pc, #300]	; (8001f8c <BasicTimer_Config+0x194>)
 8001e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e62:	4a4a      	ldr	r2, [pc, #296]	; (8001f8c <BasicTimer_Config+0x194>)
 8001e64:	f043 0308 	orr.w	r3, r3, #8
 8001e68:	6413      	str	r3, [r2, #64]	; 0x40
 8001e6a:	e000      	b.n	8001e6e <BasicTimer_Config+0x76>
	} else {
		__NOP();
 8001e6c:	bf00      	nop
	 */

	/* Escriba codigo aca */
	//Se halla el valor requerido usando el PLL con esto ajustamos a cualquiera dato
	//Tener cuidado con sobrepasar el maximo valor del PLL.
	uint32_t auxData = ptrBTimerHandler->TIMx_Config.TIMx_speed * getFreqPLL();
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	689c      	ldr	r4, [r3, #8]
 8001e72:	f001 fb73 	bl	800355c <getFreqPLL>
 8001e76:	4603      	mov	r3, r0
 8001e78:	fb04 f303 	mul.w	r3, r4, r3
 8001e7c:	60fb      	str	r3, [r7, #12]
	ptrBTimerHandler->ptrTIMx->PSC = auxData - 1;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	3a01      	subs	r2, #1
 8001e86:	629a      	str	r2, [r3, #40]	; 0x28

	/* 3. Configuramos la dirección del counter (up/down)*/
	if (ptrBTimerHandler->TIMx_Config.TIMx_mode == BTIMER_MODE_UP) {
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	791b      	ldrb	r3, [r3, #4]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d111      	bne.n	8001eb4 <BasicTimer_Config+0xbc>

		/* 3a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
		// Configurar el registro que nos controla el modo up or down
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->CR1 &= (RESET << TIM_CR1_DIR_Pos);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar */
		ptrBTimerHandler->ptrTIMx->ARR =
				ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	68da      	ldr	r2, [r3, #12]
		ptrBTimerHandler->ptrTIMx->ARR =
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
				ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8001ea6:	3a01      	subs	r2, #1
		ptrBTimerHandler->ptrTIMx->ARR =
 8001ea8:	62da      	str	r2, [r3, #44]	; 0x2c

		/* 3c. Reiniciamos el registro counter*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->CNT = RESET;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	625a      	str	r2, [r3, #36]	; 0x24
 8001eb2:	e018      	b.n	8001ee6 <BasicTimer_Config+0xee>

	} else {
		/* 3a. Estamos en DOWN_Mode, el limite se carga en ARR (0) y se comienza en un valor alto
		 * Trabaja contando en direccion descendente*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->CR1 &= (RESET << TIM_CR1_DIR_Pos);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]
		ptrBTimerHandler->ptrTIMx->CR1 |= (SET << TIM_CR1_DIR_Pos);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f042 0210 	orr.w	r2, r2, #16
 8001ed0:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar
		 * En modo descendente, con numero positivos, cual es el minimi valor al que ARR puede llegar*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->ARR =
				ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	68da      	ldr	r2, [r3, #12]
		ptrBTimerHandler->ptrTIMx->ARR =
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
				ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8001eda:	3a01      	subs	r2, #1
		ptrBTimerHandler->ptrTIMx->ARR =
 8001edc:	62da      	str	r2, [r3, #44]	; 0x2c
		/* 3c. Reiniciamos el registro counter
		 * Este es el valor con el que el counter comienza */
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* 4. Activamos el Timer (el CNT debe comenzar a contar*/
	//limpiamos
	ptrBTimerHandler->ptrTIMx->CR1 &= ~(TIM_CR1_CEN);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f022 0201 	bic.w	r2, r2, #1
 8001ef4:	601a      	str	r2, [r3, #0]
	ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f042 0201 	orr.w	r2, r2, #1
 8001f04:	601a      	str	r2, [r3, #0]

	/*
	 * x. Activamos la funcion one pulse mode
	 */
	if (ptrBTimerHandler->TIMx_Config.TIMx_OPM == ENABLE) {
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	7c5b      	ldrb	r3, [r3, #17]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d107      	bne.n	8001f1e <BasicTimer_Config+0x126>
		ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_OPM;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f042 0208 	orr.w	r2, r2, #8
 8001f1c:	601a      	str	r2, [r3, #0]
	}

	/* 5. Activamos la interrupción debida al Timerx Utilizado
	 * Modificar el registro encargado de activar la interrupcion generada por el TIMx*/
	ptrBTimerHandler->ptrTIMx->DIER |=
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68da      	ldr	r2, [r3, #12]
			ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	7c1b      	ldrb	r3, [r3, #16]
 8001f28:	4619      	mov	r1, r3
	ptrBTimerHandler->ptrTIMx->DIER |=
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	60da      	str	r2, [r3, #12]

	/* 6. Activamos el canal del sistema NVIC para que lea la interrupción*/
	if (ptrBTimerHandler->ptrTIMx == TIM2) {
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f3a:	d103      	bne.n	8001f44 <BasicTimer_Config+0x14c>
		// Activando en NVIC para la interrupción del TIM2
		NVIC_EnableIRQ(TIM2_IRQn);
 8001f3c:	201c      	movs	r0, #28
 8001f3e:	f7ff ff3d 	bl	8001dbc <__NVIC_EnableIRQ>
 8001f42:	e01b      	b.n	8001f7c <BasicTimer_Config+0x184>
	} else if (ptrBTimerHandler->ptrTIMx == TIM3) {
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a11      	ldr	r2, [pc, #68]	; (8001f90 <BasicTimer_Config+0x198>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d103      	bne.n	8001f56 <BasicTimer_Config+0x15e>
		// Activando en NVIC para la interrupción del TIM3
		NVIC_EnableIRQ(TIM3_IRQn);
 8001f4e:	201d      	movs	r0, #29
 8001f50:	f7ff ff34 	bl	8001dbc <__NVIC_EnableIRQ>
 8001f54:	e012      	b.n	8001f7c <BasicTimer_Config+0x184>
	} else if (ptrBTimerHandler->ptrTIMx == TIM4) {
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a0e      	ldr	r2, [pc, #56]	; (8001f94 <BasicTimer_Config+0x19c>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d103      	bne.n	8001f68 <BasicTimer_Config+0x170>
		// Activando en NVIC para la interrupción del TIM3
		NVIC_EnableIRQ(TIM4_IRQn);
 8001f60:	201e      	movs	r0, #30
 8001f62:	f7ff ff2b 	bl	8001dbc <__NVIC_EnableIRQ>
 8001f66:	e009      	b.n	8001f7c <BasicTimer_Config+0x184>
	} else if (ptrBTimerHandler->ptrTIMx == TIM5) {
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a0a      	ldr	r2, [pc, #40]	; (8001f98 <BasicTimer_Config+0x1a0>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d103      	bne.n	8001f7a <BasicTimer_Config+0x182>
		// Activando en NVIC para la interrupción del TIM3
		NVIC_EnableIRQ(TIM5_IRQn);
 8001f72:	2032      	movs	r0, #50	; 0x32
 8001f74:	f7ff ff22 	bl	8001dbc <__NVIC_EnableIRQ>
 8001f78:	e000      	b.n	8001f7c <BasicTimer_Config+0x184>
	} else {
		__NOP();
 8001f7a:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8001f7c:	b662      	cpsie	i
}
 8001f7e:	bf00      	nop
	}

	/* 7. Volvemos a activar las interrupciones del sistema */
	__enable_irq();
}
 8001f80:	bf00      	nop
 8001f82:	3714      	adds	r7, #20
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd90      	pop	{r4, r7, pc}
 8001f88:	20000600 	.word	0x20000600
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	40000400 	.word	0x40000400
 8001f94:	40000800 	.word	0x40000800
 8001f98:	40000c00 	.word	0x40000c00

08001f9c <BasicTimer4_Callback>:
	/* NOTE : This function should not be modified, when the callback is needed,
	 the BasicTimerX_Callback could be implemented in the main file
	 */
	__NOP();
}
__attribute__((weak)) void BasicTimer4_Callback(void) {
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
	/* NOTE : This function should not be modified, when the callback is needed,
	 the BasicTimerX_Callback could be implemented in the main file
	 */
	__NOP();
 8001fa0:	bf00      	nop
}
 8001fa2:	bf00      	nop
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <BasicTimer5_Callback>:
__attribute__((weak)) void BasicTimer5_Callback(void) {
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
	/* NOTE : This function should not be modified, when the callback is needed,
	 the BasicTimerX_Callback could be implemented in the main file
	 */
	__NOP();
 8001fb0:	bf00      	nop
}
 8001fb2:	bf00      	nop
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <TIM2_IRQHandler>:

/* Esta es la función a la que apunta el sistema en el vector de interrupciones.
 * Se debe utilizar usando exactamente el mismo nombre definido en el vector de interrupciones,
 * Al hacerlo correctamente, el sistema apunta a esta función y cuando la interrupción se lanza
 * el sistema inmediatamente salta a este lugar en la memoria*/
void TIM2_IRQHandler(void) {
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	TIM2->SR &= ~TIM_SR_UIF;
 8001fc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fca:	f023 0301 	bic.w	r3, r3, #1
 8001fce:	6113      	str	r3, [r2, #16]

	/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
	BasicTimer2_Callback();
 8001fd0:	f7ff fb3c 	bl	800164c <BasicTimer2_Callback>

}
 8001fd4:	bf00      	nop
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void) {
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	TIM3->SR &= ~TIM_SR_UIF;
 8001fdc:	4b04      	ldr	r3, [pc, #16]	; (8001ff0 <TIM3_IRQHandler+0x18>)
 8001fde:	691b      	ldr	r3, [r3, #16]
 8001fe0:	4a03      	ldr	r2, [pc, #12]	; (8001ff0 <TIM3_IRQHandler+0x18>)
 8001fe2:	f023 0301 	bic.w	r3, r3, #1
 8001fe6:	6113      	str	r3, [r2, #16]

	/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
	BasicTimer3_Callback();
 8001fe8:	f7ff fb42 	bl	8001670 <BasicTimer3_Callback>

}
 8001fec:	bf00      	nop
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40000400 	.word	0x40000400

08001ff4 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void) {
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	TIM4->SR &= ~TIM_SR_UIF;
 8001ff8:	4b04      	ldr	r3, [pc, #16]	; (800200c <TIM4_IRQHandler+0x18>)
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	4a03      	ldr	r2, [pc, #12]	; (800200c <TIM4_IRQHandler+0x18>)
 8001ffe:	f023 0301 	bic.w	r3, r3, #1
 8002002:	6113      	str	r3, [r2, #16]

	/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
	BasicTimer4_Callback();
 8002004:	f7ff ffca 	bl	8001f9c <BasicTimer4_Callback>

}
 8002008:	bf00      	nop
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40000800 	.word	0x40000800

08002010 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void) {
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	TIM5->SR &= ~TIM_SR_UIF;
 8002014:	4b04      	ldr	r3, [pc, #16]	; (8002028 <TIM5_IRQHandler+0x18>)
 8002016:	691b      	ldr	r3, [r3, #16]
 8002018:	4a03      	ldr	r2, [pc, #12]	; (8002028 <TIM5_IRQHandler+0x18>)
 800201a:	f023 0301 	bic.w	r3, r3, #1
 800201e:	6113      	str	r3, [r2, #16]

	/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
	BasicTimer5_Callback();
 8002020:	f7ff ffc4 	bl	8001fac <BasicTimer5_Callback>

}
 8002024:	bf00      	nop
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40000c00 	.word	0x40000c00

0800202c <__NVIC_EnableIRQ>:
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203a:	2b00      	cmp	r3, #0
 800203c:	db0b      	blt.n	8002056 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800203e:	79fb      	ldrb	r3, [r7, #7]
 8002040:	f003 021f 	and.w	r2, r3, #31
 8002044:	4907      	ldr	r1, [pc, #28]	; (8002064 <__NVIC_EnableIRQ+0x38>)
 8002046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204a:	095b      	lsrs	r3, r3, #5
 800204c:	2001      	movs	r0, #1
 800204e:	fa00 f202 	lsl.w	r2, r0, r2
 8002052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002056:	bf00      	nop
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	e000e100 	.word	0xe000e100

08002068 <extInt_Config>:
#include "GPIOxDriver.h"



// Haciendo prueba con PC15
void extInt_Config(EXTI_Config_t *extiConfig){
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]

	/* 1.0 Se carga la configuración, que debe ser el PINx como entrada "simple" */
	GPIO_Config(extiConfig -> pGPIOHandler);//Pin objteivo
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4618      	mov	r0, r3
 8002076:	f000 ffe9 	bl	800304c <GPIO_Config>

	/* 2.0 Activamos el acceso al SYSCFG */
	/*Agregue su código acá*/
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800207a:	4b91      	ldr	r3, [pc, #580]	; (80022c0 <extInt_Config+0x258>)
 800207c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207e:	4a90      	ldr	r2, [pc, #576]	; (80022c0 <extInt_Config+0x258>)
 8002080:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002084:	6453      	str	r3, [r2, #68]	; 0x44

	/* 3.0  Asignamos el canal EXTI que corresponde al PIN_y del puerto GPIO_X
	 * Debemos activar la línea PIN_Xy (Y = A, B, C... y x = 0, 1, 2, 3...)
	 * en el módulo EXTI */
	switch (extiConfig->pGPIOHandler->GPIO_PinConfig_t.GPIO_PinNumber) {
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	791b      	ldrb	r3, [r3, #4]
 800208c:	2b0f      	cmp	r3, #15
 800208e:	f200 85ab 	bhi.w	8002be8 <extInt_Config+0xb80>
 8002092:	a201      	add	r2, pc, #4	; (adr r2, 8002098 <extInt_Config+0x30>)
 8002094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002098:	080020d9 	.word	0x080020d9
 800209c:	0800218f 	.word	0x0800218f
 80020a0:	08002235 	.word	0x08002235
 80020a4:	080022fd 	.word	0x080022fd
 80020a8:	080023a3 	.word	0x080023a3
 80020ac:	08002449 	.word	0x08002449
 80020b0:	0800250b 	.word	0x0800250b
 80020b4:	080025b1 	.word	0x080025b1
 80020b8:	08002657 	.word	0x08002657
 80020bc:	080026fd 	.word	0x080026fd
 80020c0:	080027c1 	.word	0x080027c1
 80020c4:	08002867 	.word	0x08002867
 80020c8:	0800290d 	.word	0x0800290d
 80020cc:	080029d3 	.word	0x080029d3
 80020d0:	08002a7b 	.word	0x08002a7b
 80020d4:	08002b23 	.word	0x08002b23
	/* Configurando para el todos los pines GPIOX_0*/
	case 0: {
		/* SYSCFG_EXTICR1 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI0_Pos);
 80020d8:	4b7a      	ldr	r3, [pc, #488]	; (80022c4 <extInt_Config+0x25c>)
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	4a79      	ldr	r2, [pc, #484]	; (80022c4 <extInt_Config+0x25c>)
 80020de:	f023 030f 	bic.w	r3, r3, #15
 80020e2:	6093      	str	r3, [r2, #8]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a77      	ldr	r2, [pc, #476]	; (80022c8 <extInt_Config+0x260>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d105      	bne.n	80020fc <extInt_Config+0x94>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PA);
 80020f0:	4b74      	ldr	r3, [pc, #464]	; (80022c4 <extInt_Config+0x25c>)
 80020f2:	4a74      	ldr	r2, [pc, #464]	; (80022c4 <extInt_Config+0x25c>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	6093      	str	r3, [r2, #8]

		} else {
			__NOP();
		}

		break;
 80020f8:	f000 bd78 	b.w	8002bec <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a72      	ldr	r2, [pc, #456]	; (80022cc <extInt_Config+0x264>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d107      	bne.n	8002118 <extInt_Config+0xb0>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PB);
 8002108:	4b6e      	ldr	r3, [pc, #440]	; (80022c4 <extInt_Config+0x25c>)
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	4a6d      	ldr	r2, [pc, #436]	; (80022c4 <extInt_Config+0x25c>)
 800210e:	f043 0301 	orr.w	r3, r3, #1
 8002112:	6093      	str	r3, [r2, #8]
		break;
 8002114:	f000 bd6a 	b.w	8002bec <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a6c      	ldr	r2, [pc, #432]	; (80022d0 <extInt_Config+0x268>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d107      	bne.n	8002134 <extInt_Config+0xcc>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PC);
 8002124:	4b67      	ldr	r3, [pc, #412]	; (80022c4 <extInt_Config+0x25c>)
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	4a66      	ldr	r2, [pc, #408]	; (80022c4 <extInt_Config+0x25c>)
 800212a:	f043 0302 	orr.w	r3, r3, #2
 800212e:	6093      	str	r3, [r2, #8]
		break;
 8002130:	f000 bd5c 	b.w	8002bec <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a66      	ldr	r2, [pc, #408]	; (80022d4 <extInt_Config+0x26c>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d107      	bne.n	8002150 <extInt_Config+0xe8>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PD);
 8002140:	4b60      	ldr	r3, [pc, #384]	; (80022c4 <extInt_Config+0x25c>)
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	4a5f      	ldr	r2, [pc, #380]	; (80022c4 <extInt_Config+0x25c>)
 8002146:	f043 0303 	orr.w	r3, r3, #3
 800214a:	6093      	str	r3, [r2, #8]
		break;
 800214c:	f000 bd4e 	b.w	8002bec <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a60      	ldr	r2, [pc, #384]	; (80022d8 <extInt_Config+0x270>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d107      	bne.n	800216c <extInt_Config+0x104>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PE);
 800215c:	4b59      	ldr	r3, [pc, #356]	; (80022c4 <extInt_Config+0x25c>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	4a58      	ldr	r2, [pc, #352]	; (80022c4 <extInt_Config+0x25c>)
 8002162:	f043 0304 	orr.w	r3, r3, #4
 8002166:	6093      	str	r3, [r2, #8]
		break;
 8002168:	f000 bd40 	b.w	8002bec <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a5a      	ldr	r2, [pc, #360]	; (80022dc <extInt_Config+0x274>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d107      	bne.n	8002188 <extInt_Config+0x120>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PH);
 8002178:	4b52      	ldr	r3, [pc, #328]	; (80022c4 <extInt_Config+0x25c>)
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	4a51      	ldr	r2, [pc, #324]	; (80022c4 <extInt_Config+0x25c>)
 800217e:	f043 0307 	orr.w	r3, r3, #7
 8002182:	6093      	str	r3, [r2, #8]
		break;
 8002184:	f000 bd32 	b.w	8002bec <extInt_Config+0xb84>
			__NOP();
 8002188:	bf00      	nop
		break;
 800218a:	f000 bd2f 	b.w	8002bec <extInt_Config+0xb84>

	/* Configurando para el todos los pines GPIOX_1*/
	case 1: {
		/* SYSCFG_EXTICR1 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI1_Pos);
 800218e:	4b4d      	ldr	r3, [pc, #308]	; (80022c4 <extInt_Config+0x25c>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	4a4c      	ldr	r2, [pc, #304]	; (80022c4 <extInt_Config+0x25c>)
 8002194:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002198:	6093      	str	r3, [r2, #8]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a49      	ldr	r2, [pc, #292]	; (80022c8 <extInt_Config+0x260>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d104      	bne.n	80021b0 <extInt_Config+0x148>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PA);
 80021a6:	4b47      	ldr	r3, [pc, #284]	; (80022c4 <extInt_Config+0x25c>)
 80021a8:	4a46      	ldr	r2, [pc, #280]	; (80022c4 <extInt_Config+0x25c>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	6093      	str	r3, [r2, #8]
 80021ae:	e041      	b.n	8002234 <extInt_Config+0x1cc>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a45      	ldr	r2, [pc, #276]	; (80022cc <extInt_Config+0x264>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d106      	bne.n	80021ca <extInt_Config+0x162>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PB);
 80021bc:	4b41      	ldr	r3, [pc, #260]	; (80022c4 <extInt_Config+0x25c>)
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	4a40      	ldr	r2, [pc, #256]	; (80022c4 <extInt_Config+0x25c>)
 80021c2:	f043 0310 	orr.w	r3, r3, #16
 80021c6:	6093      	str	r3, [r2, #8]
 80021c8:	e034      	b.n	8002234 <extInt_Config+0x1cc>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a3f      	ldr	r2, [pc, #252]	; (80022d0 <extInt_Config+0x268>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d106      	bne.n	80021e4 <extInt_Config+0x17c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PC);
 80021d6:	4b3b      	ldr	r3, [pc, #236]	; (80022c4 <extInt_Config+0x25c>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	4a3a      	ldr	r2, [pc, #232]	; (80022c4 <extInt_Config+0x25c>)
 80021dc:	f043 0320 	orr.w	r3, r3, #32
 80021e0:	6093      	str	r3, [r2, #8]
 80021e2:	e027      	b.n	8002234 <extInt_Config+0x1cc>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a3a      	ldr	r2, [pc, #232]	; (80022d4 <extInt_Config+0x26c>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d106      	bne.n	80021fe <extInt_Config+0x196>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PD);
 80021f0:	4b34      	ldr	r3, [pc, #208]	; (80022c4 <extInt_Config+0x25c>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	4a33      	ldr	r2, [pc, #204]	; (80022c4 <extInt_Config+0x25c>)
 80021f6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80021fa:	6093      	str	r3, [r2, #8]
 80021fc:	e01a      	b.n	8002234 <extInt_Config+0x1cc>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a34      	ldr	r2, [pc, #208]	; (80022d8 <extInt_Config+0x270>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d106      	bne.n	8002218 <extInt_Config+0x1b0>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PE);
 800220a:	4b2e      	ldr	r3, [pc, #184]	; (80022c4 <extInt_Config+0x25c>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	4a2d      	ldr	r2, [pc, #180]	; (80022c4 <extInt_Config+0x25c>)
 8002210:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002214:	6093      	str	r3, [r2, #8]
 8002216:	e00d      	b.n	8002234 <extInt_Config+0x1cc>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a2f      	ldr	r2, [pc, #188]	; (80022dc <extInt_Config+0x274>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d106      	bne.n	8002232 <extInt_Config+0x1ca>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PH);
 8002224:	4b27      	ldr	r3, [pc, #156]	; (80022c4 <extInt_Config+0x25c>)
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	4a26      	ldr	r2, [pc, #152]	; (80022c4 <extInt_Config+0x25c>)
 800222a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800222e:	6093      	str	r3, [r2, #8]
 8002230:	e000      	b.n	8002234 <extInt_Config+0x1cc>

		} else {
			__NOP();
 8002232:	bf00      	nop

	/* Configurando para el todos los pines GPIOX_2*/
	case 2: {
		/* SYSCFG_EXTICR1 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI2_Pos);
 8002234:	4b23      	ldr	r3, [pc, #140]	; (80022c4 <extInt_Config+0x25c>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	4a22      	ldr	r2, [pc, #136]	; (80022c4 <extInt_Config+0x25c>)
 800223a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800223e:	6093      	str	r3, [r2, #8]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a20      	ldr	r2, [pc, #128]	; (80022c8 <extInt_Config+0x260>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d104      	bne.n	8002256 <extInt_Config+0x1ee>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PA);
 800224c:	4b1d      	ldr	r3, [pc, #116]	; (80022c4 <extInt_Config+0x25c>)
 800224e:	4a1d      	ldr	r2, [pc, #116]	; (80022c4 <extInt_Config+0x25c>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	6093      	str	r3, [r2, #8]
 8002254:	e052      	b.n	80022fc <extInt_Config+0x294>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a1b      	ldr	r2, [pc, #108]	; (80022cc <extInt_Config+0x264>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d106      	bne.n	8002270 <extInt_Config+0x208>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PB);
 8002262:	4b18      	ldr	r3, [pc, #96]	; (80022c4 <extInt_Config+0x25c>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	4a17      	ldr	r2, [pc, #92]	; (80022c4 <extInt_Config+0x25c>)
 8002268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800226c:	6093      	str	r3, [r2, #8]
 800226e:	e045      	b.n	80022fc <extInt_Config+0x294>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a16      	ldr	r2, [pc, #88]	; (80022d0 <extInt_Config+0x268>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d106      	bne.n	800228a <extInt_Config+0x222>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PC);
 800227c:	4b11      	ldr	r3, [pc, #68]	; (80022c4 <extInt_Config+0x25c>)
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	4a10      	ldr	r2, [pc, #64]	; (80022c4 <extInt_Config+0x25c>)
 8002282:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002286:	6093      	str	r3, [r2, #8]
 8002288:	e038      	b.n	80022fc <extInt_Config+0x294>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a10      	ldr	r2, [pc, #64]	; (80022d4 <extInt_Config+0x26c>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d106      	bne.n	80022a4 <extInt_Config+0x23c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PD);
 8002296:	4b0b      	ldr	r3, [pc, #44]	; (80022c4 <extInt_Config+0x25c>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	4a0a      	ldr	r2, [pc, #40]	; (80022c4 <extInt_Config+0x25c>)
 800229c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80022a0:	6093      	str	r3, [r2, #8]
 80022a2:	e02b      	b.n	80022fc <extInt_Config+0x294>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a0b      	ldr	r2, [pc, #44]	; (80022d8 <extInt_Config+0x270>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d117      	bne.n	80022e0 <extInt_Config+0x278>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PE);
 80022b0:	4b04      	ldr	r3, [pc, #16]	; (80022c4 <extInt_Config+0x25c>)
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	4a03      	ldr	r2, [pc, #12]	; (80022c4 <extInt_Config+0x25c>)
 80022b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022ba:	6093      	str	r3, [r2, #8]
 80022bc:	e01e      	b.n	80022fc <extInt_Config+0x294>
 80022be:	bf00      	nop
 80022c0:	40023800 	.word	0x40023800
 80022c4:	40013800 	.word	0x40013800
 80022c8:	40020000 	.word	0x40020000
 80022cc:	40020400 	.word	0x40020400
 80022d0:	40020800 	.word	0x40020800
 80022d4:	40020c00 	.word	0x40020c00
 80022d8:	40021000 	.word	0x40021000
 80022dc:	40021c00 	.word	0x40021c00

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a81      	ldr	r2, [pc, #516]	; (80024ec <extInt_Config+0x484>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d106      	bne.n	80022fa <extInt_Config+0x292>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PH);
 80022ec:	4b80      	ldr	r3, [pc, #512]	; (80024f0 <extInt_Config+0x488>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	4a7f      	ldr	r2, [pc, #508]	; (80024f0 <extInt_Config+0x488>)
 80022f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022f6:	6093      	str	r3, [r2, #8]
 80022f8:	e000      	b.n	80022fc <extInt_Config+0x294>

		} else {
			__NOP();
 80022fa:	bf00      	nop
	}

	case 3: {
		/* SYSCFG_EXTICR1 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI3_Pos);
 80022fc:	4b7c      	ldr	r3, [pc, #496]	; (80024f0 <extInt_Config+0x488>)
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	4a7b      	ldr	r2, [pc, #492]	; (80024f0 <extInt_Config+0x488>)
 8002302:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002306:	6093      	str	r3, [r2, #8]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a79      	ldr	r2, [pc, #484]	; (80024f4 <extInt_Config+0x48c>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d104      	bne.n	800231e <extInt_Config+0x2b6>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PA);
 8002314:	4b76      	ldr	r3, [pc, #472]	; (80024f0 <extInt_Config+0x488>)
 8002316:	4a76      	ldr	r2, [pc, #472]	; (80024f0 <extInt_Config+0x488>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	6093      	str	r3, [r2, #8]
 800231c:	e041      	b.n	80023a2 <extInt_Config+0x33a>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a74      	ldr	r2, [pc, #464]	; (80024f8 <extInt_Config+0x490>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d106      	bne.n	8002338 <extInt_Config+0x2d0>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PB);
 800232a:	4b71      	ldr	r3, [pc, #452]	; (80024f0 <extInt_Config+0x488>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	4a70      	ldr	r2, [pc, #448]	; (80024f0 <extInt_Config+0x488>)
 8002330:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002334:	6093      	str	r3, [r2, #8]
 8002336:	e034      	b.n	80023a2 <extInt_Config+0x33a>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a6f      	ldr	r2, [pc, #444]	; (80024fc <extInt_Config+0x494>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d106      	bne.n	8002352 <extInt_Config+0x2ea>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PC);
 8002344:	4b6a      	ldr	r3, [pc, #424]	; (80024f0 <extInt_Config+0x488>)
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	4a69      	ldr	r2, [pc, #420]	; (80024f0 <extInt_Config+0x488>)
 800234a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800234e:	6093      	str	r3, [r2, #8]
 8002350:	e027      	b.n	80023a2 <extInt_Config+0x33a>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a69      	ldr	r2, [pc, #420]	; (8002500 <extInt_Config+0x498>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d106      	bne.n	800236c <extInt_Config+0x304>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PD);
 800235e:	4b64      	ldr	r3, [pc, #400]	; (80024f0 <extInt_Config+0x488>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	4a63      	ldr	r2, [pc, #396]	; (80024f0 <extInt_Config+0x488>)
 8002364:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002368:	6093      	str	r3, [r2, #8]
 800236a:	e01a      	b.n	80023a2 <extInt_Config+0x33a>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a64      	ldr	r2, [pc, #400]	; (8002504 <extInt_Config+0x49c>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d106      	bne.n	8002386 <extInt_Config+0x31e>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PE);
 8002378:	4b5d      	ldr	r3, [pc, #372]	; (80024f0 <extInt_Config+0x488>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	4a5c      	ldr	r2, [pc, #368]	; (80024f0 <extInt_Config+0x488>)
 800237e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002382:	6093      	str	r3, [r2, #8]
 8002384:	e00d      	b.n	80023a2 <extInt_Config+0x33a>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a57      	ldr	r2, [pc, #348]	; (80024ec <extInt_Config+0x484>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d106      	bne.n	80023a0 <extInt_Config+0x338>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PH);
 8002392:	4b57      	ldr	r3, [pc, #348]	; (80024f0 <extInt_Config+0x488>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	4a56      	ldr	r2, [pc, #344]	; (80024f0 <extInt_Config+0x488>)
 8002398:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800239c:	6093      	str	r3, [r2, #8]
 800239e:	e000      	b.n	80023a2 <extInt_Config+0x33a>

		} else {
			__NOP();
 80023a0:	bf00      	nop
	}

	case 4: {
		/* SYSCFG_EXTICR2 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI4_Pos);
 80023a2:	4b53      	ldr	r3, [pc, #332]	; (80024f0 <extInt_Config+0x488>)
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	4a52      	ldr	r2, [pc, #328]	; (80024f0 <extInt_Config+0x488>)
 80023a8:	f023 030f 	bic.w	r3, r3, #15
 80023ac:	60d3      	str	r3, [r2, #12]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a4f      	ldr	r2, [pc, #316]	; (80024f4 <extInt_Config+0x48c>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d104      	bne.n	80023c4 <extInt_Config+0x35c>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PA);
 80023ba:	4b4d      	ldr	r3, [pc, #308]	; (80024f0 <extInt_Config+0x488>)
 80023bc:	4a4c      	ldr	r2, [pc, #304]	; (80024f0 <extInt_Config+0x488>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	60d3      	str	r3, [r2, #12]
 80023c2:	e041      	b.n	8002448 <extInt_Config+0x3e0>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a4b      	ldr	r2, [pc, #300]	; (80024f8 <extInt_Config+0x490>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d106      	bne.n	80023de <extInt_Config+0x376>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PB);
 80023d0:	4b47      	ldr	r3, [pc, #284]	; (80024f0 <extInt_Config+0x488>)
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	4a46      	ldr	r2, [pc, #280]	; (80024f0 <extInt_Config+0x488>)
 80023d6:	f043 0301 	orr.w	r3, r3, #1
 80023da:	60d3      	str	r3, [r2, #12]
 80023dc:	e034      	b.n	8002448 <extInt_Config+0x3e0>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a45      	ldr	r2, [pc, #276]	; (80024fc <extInt_Config+0x494>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d106      	bne.n	80023f8 <extInt_Config+0x390>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PC);
 80023ea:	4b41      	ldr	r3, [pc, #260]	; (80024f0 <extInt_Config+0x488>)
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	4a40      	ldr	r2, [pc, #256]	; (80024f0 <extInt_Config+0x488>)
 80023f0:	f043 0302 	orr.w	r3, r3, #2
 80023f4:	60d3      	str	r3, [r2, #12]
 80023f6:	e027      	b.n	8002448 <extInt_Config+0x3e0>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a40      	ldr	r2, [pc, #256]	; (8002500 <extInt_Config+0x498>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d106      	bne.n	8002412 <extInt_Config+0x3aa>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PD);
 8002404:	4b3a      	ldr	r3, [pc, #232]	; (80024f0 <extInt_Config+0x488>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	4a39      	ldr	r2, [pc, #228]	; (80024f0 <extInt_Config+0x488>)
 800240a:	f043 0303 	orr.w	r3, r3, #3
 800240e:	60d3      	str	r3, [r2, #12]
 8002410:	e01a      	b.n	8002448 <extInt_Config+0x3e0>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a3a      	ldr	r2, [pc, #232]	; (8002504 <extInt_Config+0x49c>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d106      	bne.n	800242c <extInt_Config+0x3c4>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PE);
 800241e:	4b34      	ldr	r3, [pc, #208]	; (80024f0 <extInt_Config+0x488>)
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	4a33      	ldr	r2, [pc, #204]	; (80024f0 <extInt_Config+0x488>)
 8002424:	f043 0304 	orr.w	r3, r3, #4
 8002428:	60d3      	str	r3, [r2, #12]
 800242a:	e00d      	b.n	8002448 <extInt_Config+0x3e0>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a2e      	ldr	r2, [pc, #184]	; (80024ec <extInt_Config+0x484>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d106      	bne.n	8002446 <extInt_Config+0x3de>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PH);
 8002438:	4b2d      	ldr	r3, [pc, #180]	; (80024f0 <extInt_Config+0x488>)
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	4a2c      	ldr	r2, [pc, #176]	; (80024f0 <extInt_Config+0x488>)
 800243e:	f043 0307 	orr.w	r3, r3, #7
 8002442:	60d3      	str	r3, [r2, #12]
 8002444:	e000      	b.n	8002448 <extInt_Config+0x3e0>

		} else {
			__NOP();
 8002446:	bf00      	nop
	}
	
	case 5: {
		/* SYSCFG_EXTICR2 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI5_Pos);
 8002448:	4b29      	ldr	r3, [pc, #164]	; (80024f0 <extInt_Config+0x488>)
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	4a28      	ldr	r2, [pc, #160]	; (80024f0 <extInt_Config+0x488>)
 800244e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002452:	60d3      	str	r3, [r2, #12]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a26      	ldr	r2, [pc, #152]	; (80024f4 <extInt_Config+0x48c>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d104      	bne.n	800246a <extInt_Config+0x402>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PA);
 8002460:	4b23      	ldr	r3, [pc, #140]	; (80024f0 <extInt_Config+0x488>)
 8002462:	4a23      	ldr	r2, [pc, #140]	; (80024f0 <extInt_Config+0x488>)
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	60d3      	str	r3, [r2, #12]
 8002468:	e04f      	b.n	800250a <extInt_Config+0x4a2>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a21      	ldr	r2, [pc, #132]	; (80024f8 <extInt_Config+0x490>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d106      	bne.n	8002484 <extInt_Config+0x41c>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PB);
 8002476:	4b1e      	ldr	r3, [pc, #120]	; (80024f0 <extInt_Config+0x488>)
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	4a1d      	ldr	r2, [pc, #116]	; (80024f0 <extInt_Config+0x488>)
 800247c:	f043 0310 	orr.w	r3, r3, #16
 8002480:	60d3      	str	r3, [r2, #12]
 8002482:	e042      	b.n	800250a <extInt_Config+0x4a2>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a1c      	ldr	r2, [pc, #112]	; (80024fc <extInt_Config+0x494>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d106      	bne.n	800249e <extInt_Config+0x436>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PC);
 8002490:	4b17      	ldr	r3, [pc, #92]	; (80024f0 <extInt_Config+0x488>)
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	4a16      	ldr	r2, [pc, #88]	; (80024f0 <extInt_Config+0x488>)
 8002496:	f043 0320 	orr.w	r3, r3, #32
 800249a:	60d3      	str	r3, [r2, #12]
 800249c:	e035      	b.n	800250a <extInt_Config+0x4a2>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a16      	ldr	r2, [pc, #88]	; (8002500 <extInt_Config+0x498>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d106      	bne.n	80024b8 <extInt_Config+0x450>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PD);
 80024aa:	4b11      	ldr	r3, [pc, #68]	; (80024f0 <extInt_Config+0x488>)
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	4a10      	ldr	r2, [pc, #64]	; (80024f0 <extInt_Config+0x488>)
 80024b0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80024b4:	60d3      	str	r3, [r2, #12]
 80024b6:	e028      	b.n	800250a <extInt_Config+0x4a2>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a11      	ldr	r2, [pc, #68]	; (8002504 <extInt_Config+0x49c>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d106      	bne.n	80024d2 <extInt_Config+0x46a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PE);
 80024c4:	4b0a      	ldr	r3, [pc, #40]	; (80024f0 <extInt_Config+0x488>)
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	4a09      	ldr	r2, [pc, #36]	; (80024f0 <extInt_Config+0x488>)
 80024ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024ce:	60d3      	str	r3, [r2, #12]
 80024d0:	e01b      	b.n	800250a <extInt_Config+0x4a2>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a04      	ldr	r2, [pc, #16]	; (80024ec <extInt_Config+0x484>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d114      	bne.n	8002508 <extInt_Config+0x4a0>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PH);
 80024de:	4b04      	ldr	r3, [pc, #16]	; (80024f0 <extInt_Config+0x488>)
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	4a03      	ldr	r2, [pc, #12]	; (80024f0 <extInt_Config+0x488>)
 80024e4:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80024e8:	60d3      	str	r3, [r2, #12]
 80024ea:	e00e      	b.n	800250a <extInt_Config+0x4a2>
 80024ec:	40021c00 	.word	0x40021c00
 80024f0:	40013800 	.word	0x40013800
 80024f4:	40020000 	.word	0x40020000
 80024f8:	40020400 	.word	0x40020400
 80024fc:	40020800 	.word	0x40020800
 8002500:	40020c00 	.word	0x40020c00
 8002504:	40021000 	.word	0x40021000

		} else {
			__NOP();
 8002508:	bf00      	nop
	}

		case 6: {
		/* SYSCFG_EXTICR2 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI6_Pos);
 800250a:	4b85      	ldr	r3, [pc, #532]	; (8002720 <extInt_Config+0x6b8>)
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	4a84      	ldr	r2, [pc, #528]	; (8002720 <extInt_Config+0x6b8>)
 8002510:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002514:	60d3      	str	r3, [r2, #12]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a81      	ldr	r2, [pc, #516]	; (8002724 <extInt_Config+0x6bc>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d104      	bne.n	800252c <extInt_Config+0x4c4>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PA);
 8002522:	4b7f      	ldr	r3, [pc, #508]	; (8002720 <extInt_Config+0x6b8>)
 8002524:	4a7e      	ldr	r2, [pc, #504]	; (8002720 <extInt_Config+0x6b8>)
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	60d3      	str	r3, [r2, #12]
 800252a:	e041      	b.n	80025b0 <extInt_Config+0x548>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a7d      	ldr	r2, [pc, #500]	; (8002728 <extInt_Config+0x6c0>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d106      	bne.n	8002546 <extInt_Config+0x4de>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PB);
 8002538:	4b79      	ldr	r3, [pc, #484]	; (8002720 <extInt_Config+0x6b8>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	4a78      	ldr	r2, [pc, #480]	; (8002720 <extInt_Config+0x6b8>)
 800253e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002542:	60d3      	str	r3, [r2, #12]
 8002544:	e034      	b.n	80025b0 <extInt_Config+0x548>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a77      	ldr	r2, [pc, #476]	; (800272c <extInt_Config+0x6c4>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d106      	bne.n	8002560 <extInt_Config+0x4f8>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PC);
 8002552:	4b73      	ldr	r3, [pc, #460]	; (8002720 <extInt_Config+0x6b8>)
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	4a72      	ldr	r2, [pc, #456]	; (8002720 <extInt_Config+0x6b8>)
 8002558:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800255c:	60d3      	str	r3, [r2, #12]
 800255e:	e027      	b.n	80025b0 <extInt_Config+0x548>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a72      	ldr	r2, [pc, #456]	; (8002730 <extInt_Config+0x6c8>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d106      	bne.n	800257a <extInt_Config+0x512>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PD);
 800256c:	4b6c      	ldr	r3, [pc, #432]	; (8002720 <extInt_Config+0x6b8>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	4a6b      	ldr	r2, [pc, #428]	; (8002720 <extInt_Config+0x6b8>)
 8002572:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002576:	60d3      	str	r3, [r2, #12]
 8002578:	e01a      	b.n	80025b0 <extInt_Config+0x548>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a6c      	ldr	r2, [pc, #432]	; (8002734 <extInt_Config+0x6cc>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d106      	bne.n	8002594 <extInt_Config+0x52c>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PE);
 8002586:	4b66      	ldr	r3, [pc, #408]	; (8002720 <extInt_Config+0x6b8>)
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	4a65      	ldr	r2, [pc, #404]	; (8002720 <extInt_Config+0x6b8>)
 800258c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002590:	60d3      	str	r3, [r2, #12]
 8002592:	e00d      	b.n	80025b0 <extInt_Config+0x548>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a67      	ldr	r2, [pc, #412]	; (8002738 <extInt_Config+0x6d0>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d106      	bne.n	80025ae <extInt_Config+0x546>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PH);
 80025a0:	4b5f      	ldr	r3, [pc, #380]	; (8002720 <extInt_Config+0x6b8>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	4a5e      	ldr	r2, [pc, #376]	; (8002720 <extInt_Config+0x6b8>)
 80025a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025aa:	60d3      	str	r3, [r2, #12]
 80025ac:	e000      	b.n	80025b0 <extInt_Config+0x548>

		} else {
			__NOP();
 80025ae:	bf00      	nop
	}

	case 7: {
		/* SYSCFG_EXTICR2 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI7_Pos);
 80025b0:	4b5b      	ldr	r3, [pc, #364]	; (8002720 <extInt_Config+0x6b8>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	4a5a      	ldr	r2, [pc, #360]	; (8002720 <extInt_Config+0x6b8>)
 80025b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80025ba:	60d3      	str	r3, [r2, #12]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a58      	ldr	r2, [pc, #352]	; (8002724 <extInt_Config+0x6bc>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d104      	bne.n	80025d2 <extInt_Config+0x56a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PA);
 80025c8:	4b55      	ldr	r3, [pc, #340]	; (8002720 <extInt_Config+0x6b8>)
 80025ca:	4a55      	ldr	r2, [pc, #340]	; (8002720 <extInt_Config+0x6b8>)
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	60d3      	str	r3, [r2, #12]
 80025d0:	e041      	b.n	8002656 <extInt_Config+0x5ee>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a53      	ldr	r2, [pc, #332]	; (8002728 <extInt_Config+0x6c0>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d106      	bne.n	80025ec <extInt_Config+0x584>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PB);
 80025de:	4b50      	ldr	r3, [pc, #320]	; (8002720 <extInt_Config+0x6b8>)
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	4a4f      	ldr	r2, [pc, #316]	; (8002720 <extInt_Config+0x6b8>)
 80025e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025e8:	60d3      	str	r3, [r2, #12]
 80025ea:	e034      	b.n	8002656 <extInt_Config+0x5ee>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a4e      	ldr	r2, [pc, #312]	; (800272c <extInt_Config+0x6c4>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d106      	bne.n	8002606 <extInt_Config+0x59e>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PC);
 80025f8:	4b49      	ldr	r3, [pc, #292]	; (8002720 <extInt_Config+0x6b8>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	4a48      	ldr	r2, [pc, #288]	; (8002720 <extInt_Config+0x6b8>)
 80025fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002602:	60d3      	str	r3, [r2, #12]
 8002604:	e027      	b.n	8002656 <extInt_Config+0x5ee>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a48      	ldr	r2, [pc, #288]	; (8002730 <extInt_Config+0x6c8>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d106      	bne.n	8002620 <extInt_Config+0x5b8>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PD);
 8002612:	4b43      	ldr	r3, [pc, #268]	; (8002720 <extInt_Config+0x6b8>)
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	4a42      	ldr	r2, [pc, #264]	; (8002720 <extInt_Config+0x6b8>)
 8002618:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800261c:	60d3      	str	r3, [r2, #12]
 800261e:	e01a      	b.n	8002656 <extInt_Config+0x5ee>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a43      	ldr	r2, [pc, #268]	; (8002734 <extInt_Config+0x6cc>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d106      	bne.n	800263a <extInt_Config+0x5d2>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PE);
 800262c:	4b3c      	ldr	r3, [pc, #240]	; (8002720 <extInt_Config+0x6b8>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	4a3b      	ldr	r2, [pc, #236]	; (8002720 <extInt_Config+0x6b8>)
 8002632:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002636:	60d3      	str	r3, [r2, #12]
 8002638:	e00d      	b.n	8002656 <extInt_Config+0x5ee>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a3d      	ldr	r2, [pc, #244]	; (8002738 <extInt_Config+0x6d0>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d106      	bne.n	8002654 <extInt_Config+0x5ec>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PH);
 8002646:	4b36      	ldr	r3, [pc, #216]	; (8002720 <extInt_Config+0x6b8>)
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	4a35      	ldr	r2, [pc, #212]	; (8002720 <extInt_Config+0x6b8>)
 800264c:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8002650:	60d3      	str	r3, [r2, #12]
 8002652:	e000      	b.n	8002656 <extInt_Config+0x5ee>

		} else {
			__NOP();
 8002654:	bf00      	nop
	}

	case 8: {
		/* SYSCFG_EXTICR3 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI8_Pos);
 8002656:	4b32      	ldr	r3, [pc, #200]	; (8002720 <extInt_Config+0x6b8>)
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	4a31      	ldr	r2, [pc, #196]	; (8002720 <extInt_Config+0x6b8>)
 800265c:	f023 030f 	bic.w	r3, r3, #15
 8002660:	6113      	str	r3, [r2, #16]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a2e      	ldr	r2, [pc, #184]	; (8002724 <extInt_Config+0x6bc>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d104      	bne.n	8002678 <extInt_Config+0x610>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PA);
 800266e:	4b2c      	ldr	r3, [pc, #176]	; (8002720 <extInt_Config+0x6b8>)
 8002670:	4a2b      	ldr	r2, [pc, #172]	; (8002720 <extInt_Config+0x6b8>)
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	6113      	str	r3, [r2, #16]
 8002676:	e041      	b.n	80026fc <extInt_Config+0x694>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a2a      	ldr	r2, [pc, #168]	; (8002728 <extInt_Config+0x6c0>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d106      	bne.n	8002692 <extInt_Config+0x62a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PB);
 8002684:	4b26      	ldr	r3, [pc, #152]	; (8002720 <extInt_Config+0x6b8>)
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	4a25      	ldr	r2, [pc, #148]	; (8002720 <extInt_Config+0x6b8>)
 800268a:	f043 0301 	orr.w	r3, r3, #1
 800268e:	6113      	str	r3, [r2, #16]
 8002690:	e034      	b.n	80026fc <extInt_Config+0x694>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a24      	ldr	r2, [pc, #144]	; (800272c <extInt_Config+0x6c4>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d106      	bne.n	80026ac <extInt_Config+0x644>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PC);
 800269e:	4b20      	ldr	r3, [pc, #128]	; (8002720 <extInt_Config+0x6b8>)
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	4a1f      	ldr	r2, [pc, #124]	; (8002720 <extInt_Config+0x6b8>)
 80026a4:	f043 0302 	orr.w	r3, r3, #2
 80026a8:	6113      	str	r3, [r2, #16]
 80026aa:	e027      	b.n	80026fc <extInt_Config+0x694>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a1f      	ldr	r2, [pc, #124]	; (8002730 <extInt_Config+0x6c8>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d106      	bne.n	80026c6 <extInt_Config+0x65e>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PD);
 80026b8:	4b19      	ldr	r3, [pc, #100]	; (8002720 <extInt_Config+0x6b8>)
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	4a18      	ldr	r2, [pc, #96]	; (8002720 <extInt_Config+0x6b8>)
 80026be:	f043 0303 	orr.w	r3, r3, #3
 80026c2:	6113      	str	r3, [r2, #16]
 80026c4:	e01a      	b.n	80026fc <extInt_Config+0x694>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a19      	ldr	r2, [pc, #100]	; (8002734 <extInt_Config+0x6cc>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d106      	bne.n	80026e0 <extInt_Config+0x678>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PE);
 80026d2:	4b13      	ldr	r3, [pc, #76]	; (8002720 <extInt_Config+0x6b8>)
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	4a12      	ldr	r2, [pc, #72]	; (8002720 <extInt_Config+0x6b8>)
 80026d8:	f043 0304 	orr.w	r3, r3, #4
 80026dc:	6113      	str	r3, [r2, #16]
 80026de:	e00d      	b.n	80026fc <extInt_Config+0x694>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a14      	ldr	r2, [pc, #80]	; (8002738 <extInt_Config+0x6d0>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d106      	bne.n	80026fa <extInt_Config+0x692>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PH);
 80026ec:	4b0c      	ldr	r3, [pc, #48]	; (8002720 <extInt_Config+0x6b8>)
 80026ee:	691b      	ldr	r3, [r3, #16]
 80026f0:	4a0b      	ldr	r2, [pc, #44]	; (8002720 <extInt_Config+0x6b8>)
 80026f2:	f043 0307 	orr.w	r3, r3, #7
 80026f6:	6113      	str	r3, [r2, #16]
 80026f8:	e000      	b.n	80026fc <extInt_Config+0x694>

		} else {
			__NOP();
 80026fa:	bf00      	nop
	}

	case 9: {
		/* SYSCFG_EXTIC3 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI9_Pos);
 80026fc:	4b08      	ldr	r3, [pc, #32]	; (8002720 <extInt_Config+0x6b8>)
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	4a07      	ldr	r2, [pc, #28]	; (8002720 <extInt_Config+0x6b8>)
 8002702:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002706:	6113      	str	r3, [r2, #16]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a05      	ldr	r2, [pc, #20]	; (8002724 <extInt_Config+0x6bc>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d113      	bne.n	800273c <extInt_Config+0x6d4>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PA);
 8002714:	4b02      	ldr	r3, [pc, #8]	; (8002720 <extInt_Config+0x6b8>)
 8002716:	4a02      	ldr	r2, [pc, #8]	; (8002720 <extInt_Config+0x6b8>)
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	6113      	str	r3, [r2, #16]
 800271c:	e050      	b.n	80027c0 <extInt_Config+0x758>
 800271e:	bf00      	nop
 8002720:	40013800 	.word	0x40013800
 8002724:	40020000 	.word	0x40020000
 8002728:	40020400 	.word	0x40020400
 800272c:	40020800 	.word	0x40020800
 8002730:	40020c00 	.word	0x40020c00
 8002734:	40021000 	.word	0x40021000
 8002738:	40021c00 	.word	0x40021c00

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a88      	ldr	r2, [pc, #544]	; (8002964 <extInt_Config+0x8fc>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d106      	bne.n	8002756 <extInt_Config+0x6ee>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PB);
 8002748:	4b87      	ldr	r3, [pc, #540]	; (8002968 <extInt_Config+0x900>)
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	4a86      	ldr	r2, [pc, #536]	; (8002968 <extInt_Config+0x900>)
 800274e:	f043 0310 	orr.w	r3, r3, #16
 8002752:	6113      	str	r3, [r2, #16]
 8002754:	e034      	b.n	80027c0 <extInt_Config+0x758>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a83      	ldr	r2, [pc, #524]	; (800296c <extInt_Config+0x904>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d106      	bne.n	8002770 <extInt_Config+0x708>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PC);
 8002762:	4b81      	ldr	r3, [pc, #516]	; (8002968 <extInt_Config+0x900>)
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	4a80      	ldr	r2, [pc, #512]	; (8002968 <extInt_Config+0x900>)
 8002768:	f043 0320 	orr.w	r3, r3, #32
 800276c:	6113      	str	r3, [r2, #16]
 800276e:	e027      	b.n	80027c0 <extInt_Config+0x758>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a7e      	ldr	r2, [pc, #504]	; (8002970 <extInt_Config+0x908>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d106      	bne.n	800278a <extInt_Config+0x722>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PD);
 800277c:	4b7a      	ldr	r3, [pc, #488]	; (8002968 <extInt_Config+0x900>)
 800277e:	691b      	ldr	r3, [r3, #16]
 8002780:	4a79      	ldr	r2, [pc, #484]	; (8002968 <extInt_Config+0x900>)
 8002782:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002786:	6113      	str	r3, [r2, #16]
 8002788:	e01a      	b.n	80027c0 <extInt_Config+0x758>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a78      	ldr	r2, [pc, #480]	; (8002974 <extInt_Config+0x90c>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d106      	bne.n	80027a4 <extInt_Config+0x73c>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PE);
 8002796:	4b74      	ldr	r3, [pc, #464]	; (8002968 <extInt_Config+0x900>)
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	4a73      	ldr	r2, [pc, #460]	; (8002968 <extInt_Config+0x900>)
 800279c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027a0:	6113      	str	r3, [r2, #16]
 80027a2:	e00d      	b.n	80027c0 <extInt_Config+0x758>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a73      	ldr	r2, [pc, #460]	; (8002978 <extInt_Config+0x910>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d106      	bne.n	80027be <extInt_Config+0x756>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PH);
 80027b0:	4b6d      	ldr	r3, [pc, #436]	; (8002968 <extInt_Config+0x900>)
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	4a6c      	ldr	r2, [pc, #432]	; (8002968 <extInt_Config+0x900>)
 80027b6:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80027ba:	6113      	str	r3, [r2, #16]
 80027bc:	e000      	b.n	80027c0 <extInt_Config+0x758>

		} else {
			__NOP();
 80027be:	bf00      	nop
	}

	case 10: {
		/* SYSCFG_EXTICR3 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI10_Pos);
 80027c0:	4b69      	ldr	r3, [pc, #420]	; (8002968 <extInt_Config+0x900>)
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	4a68      	ldr	r2, [pc, #416]	; (8002968 <extInt_Config+0x900>)
 80027c6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80027ca:	6113      	str	r3, [r2, #16]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a6a      	ldr	r2, [pc, #424]	; (800297c <extInt_Config+0x914>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d104      	bne.n	80027e2 <extInt_Config+0x77a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PA);
 80027d8:	4b63      	ldr	r3, [pc, #396]	; (8002968 <extInt_Config+0x900>)
 80027da:	4a63      	ldr	r2, [pc, #396]	; (8002968 <extInt_Config+0x900>)
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	6113      	str	r3, [r2, #16]
 80027e0:	e041      	b.n	8002866 <extInt_Config+0x7fe>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a5e      	ldr	r2, [pc, #376]	; (8002964 <extInt_Config+0x8fc>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d106      	bne.n	80027fc <extInt_Config+0x794>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PB);
 80027ee:	4b5e      	ldr	r3, [pc, #376]	; (8002968 <extInt_Config+0x900>)
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	4a5d      	ldr	r2, [pc, #372]	; (8002968 <extInt_Config+0x900>)
 80027f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027f8:	6113      	str	r3, [r2, #16]
 80027fa:	e034      	b.n	8002866 <extInt_Config+0x7fe>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a5a      	ldr	r2, [pc, #360]	; (800296c <extInt_Config+0x904>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d106      	bne.n	8002816 <extInt_Config+0x7ae>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PC);
 8002808:	4b57      	ldr	r3, [pc, #348]	; (8002968 <extInt_Config+0x900>)
 800280a:	691b      	ldr	r3, [r3, #16]
 800280c:	4a56      	ldr	r2, [pc, #344]	; (8002968 <extInt_Config+0x900>)
 800280e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002812:	6113      	str	r3, [r2, #16]
 8002814:	e027      	b.n	8002866 <extInt_Config+0x7fe>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a54      	ldr	r2, [pc, #336]	; (8002970 <extInt_Config+0x908>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d106      	bne.n	8002830 <extInt_Config+0x7c8>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PD);
 8002822:	4b51      	ldr	r3, [pc, #324]	; (8002968 <extInt_Config+0x900>)
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	4a50      	ldr	r2, [pc, #320]	; (8002968 <extInt_Config+0x900>)
 8002828:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800282c:	6113      	str	r3, [r2, #16]
 800282e:	e01a      	b.n	8002866 <extInt_Config+0x7fe>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a4f      	ldr	r2, [pc, #316]	; (8002974 <extInt_Config+0x90c>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d106      	bne.n	800284a <extInt_Config+0x7e2>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PE);
 800283c:	4b4a      	ldr	r3, [pc, #296]	; (8002968 <extInt_Config+0x900>)
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	4a49      	ldr	r2, [pc, #292]	; (8002968 <extInt_Config+0x900>)
 8002842:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002846:	6113      	str	r3, [r2, #16]
 8002848:	e00d      	b.n	8002866 <extInt_Config+0x7fe>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a49      	ldr	r2, [pc, #292]	; (8002978 <extInt_Config+0x910>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d106      	bne.n	8002864 <extInt_Config+0x7fc>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PH);
 8002856:	4b44      	ldr	r3, [pc, #272]	; (8002968 <extInt_Config+0x900>)
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	4a43      	ldr	r2, [pc, #268]	; (8002968 <extInt_Config+0x900>)
 800285c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002860:	6113      	str	r3, [r2, #16]
 8002862:	e000      	b.n	8002866 <extInt_Config+0x7fe>

		} else {
			__NOP();
 8002864:	bf00      	nop
	}

	case 11: {
		/* SYSCFG_EXTICR3 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI11_Pos);
 8002866:	4b40      	ldr	r3, [pc, #256]	; (8002968 <extInt_Config+0x900>)
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	4a3f      	ldr	r2, [pc, #252]	; (8002968 <extInt_Config+0x900>)
 800286c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002870:	6113      	str	r3, [r2, #16]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a40      	ldr	r2, [pc, #256]	; (800297c <extInt_Config+0x914>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d104      	bne.n	8002888 <extInt_Config+0x820>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PA);
 800287e:	4b3a      	ldr	r3, [pc, #232]	; (8002968 <extInt_Config+0x900>)
 8002880:	4a39      	ldr	r2, [pc, #228]	; (8002968 <extInt_Config+0x900>)
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	6113      	str	r3, [r2, #16]
 8002886:	e041      	b.n	800290c <extInt_Config+0x8a4>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a35      	ldr	r2, [pc, #212]	; (8002964 <extInt_Config+0x8fc>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d106      	bne.n	80028a2 <extInt_Config+0x83a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PB);
 8002894:	4b34      	ldr	r3, [pc, #208]	; (8002968 <extInt_Config+0x900>)
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	4a33      	ldr	r2, [pc, #204]	; (8002968 <extInt_Config+0x900>)
 800289a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800289e:	6113      	str	r3, [r2, #16]
 80028a0:	e034      	b.n	800290c <extInt_Config+0x8a4>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a30      	ldr	r2, [pc, #192]	; (800296c <extInt_Config+0x904>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d106      	bne.n	80028bc <extInt_Config+0x854>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PC);
 80028ae:	4b2e      	ldr	r3, [pc, #184]	; (8002968 <extInt_Config+0x900>)
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	4a2d      	ldr	r2, [pc, #180]	; (8002968 <extInt_Config+0x900>)
 80028b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80028b8:	6113      	str	r3, [r2, #16]
 80028ba:	e027      	b.n	800290c <extInt_Config+0x8a4>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a2b      	ldr	r2, [pc, #172]	; (8002970 <extInt_Config+0x908>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d106      	bne.n	80028d6 <extInt_Config+0x86e>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PD);
 80028c8:	4b27      	ldr	r3, [pc, #156]	; (8002968 <extInt_Config+0x900>)
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	4a26      	ldr	r2, [pc, #152]	; (8002968 <extInt_Config+0x900>)
 80028ce:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80028d2:	6113      	str	r3, [r2, #16]
 80028d4:	e01a      	b.n	800290c <extInt_Config+0x8a4>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a25      	ldr	r2, [pc, #148]	; (8002974 <extInt_Config+0x90c>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d106      	bne.n	80028f0 <extInt_Config+0x888>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PE);
 80028e2:	4b21      	ldr	r3, [pc, #132]	; (8002968 <extInt_Config+0x900>)
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	4a20      	ldr	r2, [pc, #128]	; (8002968 <extInt_Config+0x900>)
 80028e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028ec:	6113      	str	r3, [r2, #16]
 80028ee:	e00d      	b.n	800290c <extInt_Config+0x8a4>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a20      	ldr	r2, [pc, #128]	; (8002978 <extInt_Config+0x910>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d106      	bne.n	800290a <extInt_Config+0x8a2>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PH);
 80028fc:	4b1a      	ldr	r3, [pc, #104]	; (8002968 <extInt_Config+0x900>)
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	4a19      	ldr	r2, [pc, #100]	; (8002968 <extInt_Config+0x900>)
 8002902:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8002906:	6113      	str	r3, [r2, #16]
 8002908:	e000      	b.n	800290c <extInt_Config+0x8a4>

		} else {
			__NOP();
 800290a:	bf00      	nop
		}
	}
	case 12: {
		/* SYSCFG_EXTICR4 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI12_Pos);
 800290c:	4b16      	ldr	r3, [pc, #88]	; (8002968 <extInt_Config+0x900>)
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	4a15      	ldr	r2, [pc, #84]	; (8002968 <extInt_Config+0x900>)
 8002912:	f023 030f 	bic.w	r3, r3, #15
 8002916:	6153      	str	r3, [r2, #20]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a17      	ldr	r2, [pc, #92]	; (800297c <extInt_Config+0x914>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d104      	bne.n	800292e <extInt_Config+0x8c6>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PA);
 8002924:	4b10      	ldr	r3, [pc, #64]	; (8002968 <extInt_Config+0x900>)
 8002926:	4a10      	ldr	r2, [pc, #64]	; (8002968 <extInt_Config+0x900>)
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	6153      	str	r3, [r2, #20]
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PH);

		} else {
			__NOP();
		}
		break;
 800292c:	e15e      	b.n	8002bec <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a0b      	ldr	r2, [pc, #44]	; (8002964 <extInt_Config+0x8fc>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d106      	bne.n	8002948 <extInt_Config+0x8e0>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PB);
 800293a:	4b0b      	ldr	r3, [pc, #44]	; (8002968 <extInt_Config+0x900>)
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	4a0a      	ldr	r2, [pc, #40]	; (8002968 <extInt_Config+0x900>)
 8002940:	f043 0301 	orr.w	r3, r3, #1
 8002944:	6153      	str	r3, [r2, #20]
		break;
 8002946:	e151      	b.n	8002bec <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a07      	ldr	r2, [pc, #28]	; (800296c <extInt_Config+0x904>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d115      	bne.n	8002980 <extInt_Config+0x918>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PC);
 8002954:	4b04      	ldr	r3, [pc, #16]	; (8002968 <extInt_Config+0x900>)
 8002956:	695b      	ldr	r3, [r3, #20]
 8002958:	4a03      	ldr	r2, [pc, #12]	; (8002968 <extInt_Config+0x900>)
 800295a:	f043 0302 	orr.w	r3, r3, #2
 800295e:	6153      	str	r3, [r2, #20]
		break;
 8002960:	e144      	b.n	8002bec <extInt_Config+0xb84>
 8002962:	bf00      	nop
 8002964:	40020400 	.word	0x40020400
 8002968:	40013800 	.word	0x40013800
 800296c:	40020800 	.word	0x40020800
 8002970:	40020c00 	.word	0x40020c00
 8002974:	40021000 	.word	0x40021000
 8002978:	40021c00 	.word	0x40021c00
 800297c:	40020000 	.word	0x40020000
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a83      	ldr	r2, [pc, #524]	; (8002b94 <extInt_Config+0xb2c>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d106      	bne.n	800299a <extInt_Config+0x932>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PD);
 800298c:	4b82      	ldr	r3, [pc, #520]	; (8002b98 <extInt_Config+0xb30>)
 800298e:	695b      	ldr	r3, [r3, #20]
 8002990:	4a81      	ldr	r2, [pc, #516]	; (8002b98 <extInt_Config+0xb30>)
 8002992:	f043 0303 	orr.w	r3, r3, #3
 8002996:	6153      	str	r3, [r2, #20]
		break;
 8002998:	e128      	b.n	8002bec <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a7e      	ldr	r2, [pc, #504]	; (8002b9c <extInt_Config+0xb34>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d106      	bne.n	80029b4 <extInt_Config+0x94c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PE);
 80029a6:	4b7c      	ldr	r3, [pc, #496]	; (8002b98 <extInt_Config+0xb30>)
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	4a7b      	ldr	r2, [pc, #492]	; (8002b98 <extInt_Config+0xb30>)
 80029ac:	f043 0304 	orr.w	r3, r3, #4
 80029b0:	6153      	str	r3, [r2, #20]
		break;
 80029b2:	e11b      	b.n	8002bec <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a79      	ldr	r2, [pc, #484]	; (8002ba0 <extInt_Config+0xb38>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d106      	bne.n	80029ce <extInt_Config+0x966>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PH);
 80029c0:	4b75      	ldr	r3, [pc, #468]	; (8002b98 <extInt_Config+0xb30>)
 80029c2:	695b      	ldr	r3, [r3, #20]
 80029c4:	4a74      	ldr	r2, [pc, #464]	; (8002b98 <extInt_Config+0xb30>)
 80029c6:	f043 0307 	orr.w	r3, r3, #7
 80029ca:	6153      	str	r3, [r2, #20]
		break;
 80029cc:	e10e      	b.n	8002bec <extInt_Config+0xb84>
			__NOP();
 80029ce:	bf00      	nop
		break;
 80029d0:	e10c      	b.n	8002bec <extInt_Config+0xb84>
	}
	case 13: {
		/* SYSCFG_EXTICR4 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI13_Pos);
 80029d2:	4b71      	ldr	r3, [pc, #452]	; (8002b98 <extInt_Config+0xb30>)
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	4a70      	ldr	r2, [pc, #448]	; (8002b98 <extInt_Config+0xb30>)
 80029d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029dc:	6153      	str	r3, [r2, #20]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a6f      	ldr	r2, [pc, #444]	; (8002ba4 <extInt_Config+0xb3c>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d104      	bne.n	80029f4 <extInt_Config+0x98c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PA);
 80029ea:	4b6b      	ldr	r3, [pc, #428]	; (8002b98 <extInt_Config+0xb30>)
 80029ec:	4a6a      	ldr	r2, [pc, #424]	; (8002b98 <extInt_Config+0xb30>)
 80029ee:	695b      	ldr	r3, [r3, #20]
 80029f0:	6153      	str	r3, [r2, #20]
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PH);

		} else {
			__NOP();
		}
		break;
 80029f2:	e0fb      	b.n	8002bec <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a6b      	ldr	r2, [pc, #428]	; (8002ba8 <extInt_Config+0xb40>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d106      	bne.n	8002a0e <extInt_Config+0x9a6>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PB);
 8002a00:	4b65      	ldr	r3, [pc, #404]	; (8002b98 <extInt_Config+0xb30>)
 8002a02:	695b      	ldr	r3, [r3, #20]
 8002a04:	4a64      	ldr	r2, [pc, #400]	; (8002b98 <extInt_Config+0xb30>)
 8002a06:	f043 0310 	orr.w	r3, r3, #16
 8002a0a:	6153      	str	r3, [r2, #20]
		break;
 8002a0c:	e0ee      	b.n	8002bec <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a65      	ldr	r2, [pc, #404]	; (8002bac <extInt_Config+0xb44>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d106      	bne.n	8002a28 <extInt_Config+0x9c0>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PC);
 8002a1a:	4b5f      	ldr	r3, [pc, #380]	; (8002b98 <extInt_Config+0xb30>)
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	4a5e      	ldr	r2, [pc, #376]	; (8002b98 <extInt_Config+0xb30>)
 8002a20:	f043 0320 	orr.w	r3, r3, #32
 8002a24:	6153      	str	r3, [r2, #20]
		break;
 8002a26:	e0e1      	b.n	8002bec <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a59      	ldr	r2, [pc, #356]	; (8002b94 <extInt_Config+0xb2c>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d106      	bne.n	8002a42 <extInt_Config+0x9da>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PD);
 8002a34:	4b58      	ldr	r3, [pc, #352]	; (8002b98 <extInt_Config+0xb30>)
 8002a36:	695b      	ldr	r3, [r3, #20]
 8002a38:	4a57      	ldr	r2, [pc, #348]	; (8002b98 <extInt_Config+0xb30>)
 8002a3a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002a3e:	6153      	str	r3, [r2, #20]
		break;
 8002a40:	e0d4      	b.n	8002bec <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a54      	ldr	r2, [pc, #336]	; (8002b9c <extInt_Config+0xb34>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d106      	bne.n	8002a5c <extInt_Config+0x9f4>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PE);
 8002a4e:	4b52      	ldr	r3, [pc, #328]	; (8002b98 <extInt_Config+0xb30>)
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	4a51      	ldr	r2, [pc, #324]	; (8002b98 <extInt_Config+0xb30>)
 8002a54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a58:	6153      	str	r3, [r2, #20]
		break;
 8002a5a:	e0c7      	b.n	8002bec <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a4f      	ldr	r2, [pc, #316]	; (8002ba0 <extInt_Config+0xb38>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d106      	bne.n	8002a76 <extInt_Config+0xa0e>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PH);
 8002a68:	4b4b      	ldr	r3, [pc, #300]	; (8002b98 <extInt_Config+0xb30>)
 8002a6a:	695b      	ldr	r3, [r3, #20]
 8002a6c:	4a4a      	ldr	r2, [pc, #296]	; (8002b98 <extInt_Config+0xb30>)
 8002a6e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002a72:	6153      	str	r3, [r2, #20]
		break;
 8002a74:	e0ba      	b.n	8002bec <extInt_Config+0xb84>
			__NOP();
 8002a76:	bf00      	nop
		break;
 8002a78:	e0b8      	b.n	8002bec <extInt_Config+0xb84>
	}

	case 14: {
		/* SYSCFG_EXTICR4 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI14_Pos);
 8002a7a:	4b47      	ldr	r3, [pc, #284]	; (8002b98 <extInt_Config+0xb30>)
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	4a46      	ldr	r2, [pc, #280]	; (8002b98 <extInt_Config+0xb30>)
 8002a80:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a84:	6153      	str	r3, [r2, #20]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a45      	ldr	r2, [pc, #276]	; (8002ba4 <extInt_Config+0xb3c>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d104      	bne.n	8002a9c <extInt_Config+0xa34>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PA);
 8002a92:	4b41      	ldr	r3, [pc, #260]	; (8002b98 <extInt_Config+0xb30>)
 8002a94:	4a40      	ldr	r2, [pc, #256]	; (8002b98 <extInt_Config+0xb30>)
 8002a96:	695b      	ldr	r3, [r3, #20]
 8002a98:	6153      	str	r3, [r2, #20]
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PH);

		} else {
			__NOP();
		}
		break;
 8002a9a:	e0a7      	b.n	8002bec <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a41      	ldr	r2, [pc, #260]	; (8002ba8 <extInt_Config+0xb40>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d106      	bne.n	8002ab6 <extInt_Config+0xa4e>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PB);
 8002aa8:	4b3b      	ldr	r3, [pc, #236]	; (8002b98 <extInt_Config+0xb30>)
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	4a3a      	ldr	r2, [pc, #232]	; (8002b98 <extInt_Config+0xb30>)
 8002aae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ab2:	6153      	str	r3, [r2, #20]
		break;
 8002ab4:	e09a      	b.n	8002bec <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a3b      	ldr	r2, [pc, #236]	; (8002bac <extInt_Config+0xb44>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d106      	bne.n	8002ad0 <extInt_Config+0xa68>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PC);
 8002ac2:	4b35      	ldr	r3, [pc, #212]	; (8002b98 <extInt_Config+0xb30>)
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	4a34      	ldr	r2, [pc, #208]	; (8002b98 <extInt_Config+0xb30>)
 8002ac8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002acc:	6153      	str	r3, [r2, #20]
		break;
 8002ace:	e08d      	b.n	8002bec <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a2f      	ldr	r2, [pc, #188]	; (8002b94 <extInt_Config+0xb2c>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d106      	bne.n	8002aea <extInt_Config+0xa82>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PD);
 8002adc:	4b2e      	ldr	r3, [pc, #184]	; (8002b98 <extInt_Config+0xb30>)
 8002ade:	695b      	ldr	r3, [r3, #20]
 8002ae0:	4a2d      	ldr	r2, [pc, #180]	; (8002b98 <extInt_Config+0xb30>)
 8002ae2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002ae6:	6153      	str	r3, [r2, #20]
		break;
 8002ae8:	e080      	b.n	8002bec <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a2a      	ldr	r2, [pc, #168]	; (8002b9c <extInt_Config+0xb34>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d106      	bne.n	8002b04 <extInt_Config+0xa9c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PE);
 8002af6:	4b28      	ldr	r3, [pc, #160]	; (8002b98 <extInt_Config+0xb30>)
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	4a27      	ldr	r2, [pc, #156]	; (8002b98 <extInt_Config+0xb30>)
 8002afc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b00:	6153      	str	r3, [r2, #20]
		break;
 8002b02:	e073      	b.n	8002bec <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a25      	ldr	r2, [pc, #148]	; (8002ba0 <extInt_Config+0xb38>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d106      	bne.n	8002b1e <extInt_Config+0xab6>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PH);
 8002b10:	4b21      	ldr	r3, [pc, #132]	; (8002b98 <extInt_Config+0xb30>)
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	4a20      	ldr	r2, [pc, #128]	; (8002b98 <extInt_Config+0xb30>)
 8002b16:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b1a:	6153      	str	r3, [r2, #20]
		break;
 8002b1c:	e066      	b.n	8002bec <extInt_Config+0xb84>
			__NOP();
 8002b1e:	bf00      	nop
		break;
 8002b20:	e064      	b.n	8002bec <extInt_Config+0xb84>

	/* Configurando para el todos los pines GPIOX_15 */
	case 15: {
		/* SYSCFG_EXTICR4 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI15_Pos);
 8002b22:	4b1d      	ldr	r3, [pc, #116]	; (8002b98 <extInt_Config+0xb30>)
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	4a1c      	ldr	r2, [pc, #112]	; (8002b98 <extInt_Config+0xb30>)
 8002b28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b2c:	6153      	str	r3, [r2, #20]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a1b      	ldr	r2, [pc, #108]	; (8002ba4 <extInt_Config+0xb3c>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d104      	bne.n	8002b44 <extInt_Config+0xadc>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PA);
 8002b3a:	4b17      	ldr	r3, [pc, #92]	; (8002b98 <extInt_Config+0xb30>)
 8002b3c:	4a16      	ldr	r2, [pc, #88]	; (8002b98 <extInt_Config+0xb30>)
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	6153      	str	r3, [r2, #20]
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);

		} else {
			__NOP();
		}
		break;
 8002b42:	e053      	b.n	8002bec <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a17      	ldr	r2, [pc, #92]	; (8002ba8 <extInt_Config+0xb40>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d106      	bne.n	8002b5e <extInt_Config+0xaf6>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PB);
 8002b50:	4b11      	ldr	r3, [pc, #68]	; (8002b98 <extInt_Config+0xb30>)
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	4a10      	ldr	r2, [pc, #64]	; (8002b98 <extInt_Config+0xb30>)
 8002b56:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b5a:	6153      	str	r3, [r2, #20]
		break;
 8002b5c:	e046      	b.n	8002bec <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a11      	ldr	r2, [pc, #68]	; (8002bac <extInt_Config+0xb44>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d106      	bne.n	8002b78 <extInt_Config+0xb10>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PC);
 8002b6a:	4b0b      	ldr	r3, [pc, #44]	; (8002b98 <extInt_Config+0xb30>)
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	4a0a      	ldr	r2, [pc, #40]	; (8002b98 <extInt_Config+0xb30>)
 8002b70:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b74:	6153      	str	r3, [r2, #20]
		break;
 8002b76:	e039      	b.n	8002bec <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a05      	ldr	r2, [pc, #20]	; (8002b94 <extInt_Config+0xb2c>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d115      	bne.n	8002bb0 <extInt_Config+0xb48>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PD);
 8002b84:	4b04      	ldr	r3, [pc, #16]	; (8002b98 <extInt_Config+0xb30>)
 8002b86:	695b      	ldr	r3, [r3, #20]
 8002b88:	4a03      	ldr	r2, [pc, #12]	; (8002b98 <extInt_Config+0xb30>)
 8002b8a:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002b8e:	6153      	str	r3, [r2, #20]
		break;
 8002b90:	e02c      	b.n	8002bec <extInt_Config+0xb84>
 8002b92:	bf00      	nop
 8002b94:	40020c00 	.word	0x40020c00
 8002b98:	40013800 	.word	0x40013800
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	40021c00 	.word	0x40021c00
 8002ba4:	40020000 	.word	0x40020000
 8002ba8:	40020400 	.word	0x40020400
 8002bac:	40020800 	.word	0x40020800
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a67      	ldr	r2, [pc, #412]	; (8002d54 <extInt_Config+0xcec>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d106      	bne.n	8002bca <extInt_Config+0xb62>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PE);
 8002bbc:	4b66      	ldr	r3, [pc, #408]	; (8002d58 <extInt_Config+0xcf0>)
 8002bbe:	695b      	ldr	r3, [r3, #20]
 8002bc0:	4a65      	ldr	r2, [pc, #404]	; (8002d58 <extInt_Config+0xcf0>)
 8002bc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bc6:	6153      	str	r3, [r2, #20]
		break;
 8002bc8:	e010      	b.n	8002bec <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a62      	ldr	r2, [pc, #392]	; (8002d5c <extInt_Config+0xcf4>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d106      	bne.n	8002be4 <extInt_Config+0xb7c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);
 8002bd6:	4b60      	ldr	r3, [pc, #384]	; (8002d58 <extInt_Config+0xcf0>)
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	4a5f      	ldr	r2, [pc, #380]	; (8002d58 <extInt_Config+0xcf0>)
 8002bdc:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8002be0:	6153      	str	r3, [r2, #20]
		break;
 8002be2:	e003      	b.n	8002bec <extInt_Config+0xb84>
			__NOP();
 8002be4:	bf00      	nop
		break;
 8002be6:	e001      	b.n	8002bec <extInt_Config+0xb84>
	}

	default: {
		__NOP();
 8002be8:	bf00      	nop
		break;
 8002bea:	bf00      	nop
	}

	}// Fin del switch-case

	/* 4.0 Seleccionamos el tipo de flanco */
	EXTI -> FTSR &= ~(0b1 << extiConfig->pGPIOHandler->GPIO_PinConfig_t.GPIO_PinNumber);
 8002bec:	4b5c      	ldr	r3, [pc, #368]	; (8002d60 <extInt_Config+0xcf8>)
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	6812      	ldr	r2, [r2, #0]
 8002bf4:	7912      	ldrb	r2, [r2, #4]
 8002bf6:	4611      	mov	r1, r2
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	408a      	lsls	r2, r1
 8002bfc:	43d2      	mvns	r2, r2
 8002bfe:	4611      	mov	r1, r2
 8002c00:	4a57      	ldr	r2, [pc, #348]	; (8002d60 <extInt_Config+0xcf8>)
 8002c02:	400b      	ands	r3, r1
 8002c04:	60d3      	str	r3, [r2, #12]
	EXTI -> RTSR &= ~(0b1 << extiConfig->pGPIOHandler->GPIO_PinConfig_t.GPIO_PinNumber);
 8002c06:	4b56      	ldr	r3, [pc, #344]	; (8002d60 <extInt_Config+0xcf8>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	6812      	ldr	r2, [r2, #0]
 8002c0e:	7912      	ldrb	r2, [r2, #4]
 8002c10:	4611      	mov	r1, r2
 8002c12:	2201      	movs	r2, #1
 8002c14:	408a      	lsls	r2, r1
 8002c16:	43d2      	mvns	r2, r2
 8002c18:	4611      	mov	r1, r2
 8002c1a:	4a51      	ldr	r2, [pc, #324]	; (8002d60 <extInt_Config+0xcf8>)
 8002c1c:	400b      	ands	r3, r1
 8002c1e:	6093      	str	r3, [r2, #8]
	/* Falling Trigger selection register*/
    EXTI -> FTSR |= (~extiConfig->edgeType << extiConfig->pGPIOHandler->GPIO_PinConfig_t.GPIO_PinNumber);
 8002c20:	4b4f      	ldr	r3, [pc, #316]	; (8002d60 <extInt_Config+0xcf8>)
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	7912      	ldrb	r2, [r2, #4]
 8002c28:	43d2      	mvns	r2, r2
 8002c2a:	6879      	ldr	r1, [r7, #4]
 8002c2c:	6809      	ldr	r1, [r1, #0]
 8002c2e:	7909      	ldrb	r1, [r1, #4]
 8002c30:	408a      	lsls	r2, r1
 8002c32:	4611      	mov	r1, r2
 8002c34:	4a4a      	ldr	r2, [pc, #296]	; (8002d60 <extInt_Config+0xcf8>)
 8002c36:	430b      	orrs	r3, r1
 8002c38:	60d3      	str	r3, [r2, #12]
	EXTI -> RTSR |= (extiConfig->edgeType << extiConfig->pGPIOHandler->GPIO_PinConfig_t.GPIO_PinNumber);
 8002c3a:	4b49      	ldr	r3, [pc, #292]	; (8002d60 <extInt_Config+0xcf8>)
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	7912      	ldrb	r2, [r2, #4]
 8002c42:	4611      	mov	r1, r2
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	6812      	ldr	r2, [r2, #0]
 8002c48:	7912      	ldrb	r2, [r2, #4]
 8002c4a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c4e:	4611      	mov	r1, r2
 8002c50:	4a43      	ldr	r2, [pc, #268]	; (8002d60 <extInt_Config+0xcf8>)
 8002c52:	430b      	orrs	r3, r1
 8002c54:	6093      	str	r3, [r2, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c56:	b672      	cpsid	i
}
 8002c58:	bf00      	nop
	__disable_irq();

	/* 6.0 Activamos la interrupción del canal que estamos configurando */
	// Interrupt Mask register
	/*Agregue su código acá*/
	EXTI -> IMR |= (0b1 << extiConfig->pGPIOHandler->GPIO_PinConfig_t.GPIO_PinNumber); //Activamos la interrupcion EXTI_X
 8002c5a:	4b41      	ldr	r3, [pc, #260]	; (8002d60 <extInt_Config+0xcf8>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	6812      	ldr	r2, [r2, #0]
 8002c62:	7912      	ldrb	r2, [r2, #4]
 8002c64:	4611      	mov	r1, r2
 8002c66:	2201      	movs	r2, #1
 8002c68:	408a      	lsls	r2, r1
 8002c6a:	4611      	mov	r1, r2
 8002c6c:	4a3c      	ldr	r2, [pc, #240]	; (8002d60 <extInt_Config+0xcf8>)
 8002c6e:	430b      	orrs	r3, r1
 8002c70:	6013      	str	r3, [r2, #0]
	/* 6.1 Matriculamos la interrupción en el NVIC para el canal correspondiente,
	 * donde el canal 0 corresponde al EXTI_0, canal 1 al EXTI_1, etc.
	 *
	 * NOTA: Observar que algunos canales EXTI comparten un mismo vector de interrupción
	 * */
	switch (extiConfig->pGPIOHandler->GPIO_PinConfig_t.GPIO_PinNumber) {
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	791b      	ldrb	r3, [r3, #4]
 8002c78:	2b0f      	cmp	r3, #15
 8002c7a:	d863      	bhi.n	8002d44 <extInt_Config+0xcdc>
 8002c7c:	a201      	add	r2, pc, #4	; (adr r2, 8002c84 <extInt_Config+0xc1c>)
 8002c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c82:	bf00      	nop
 8002c84:	08002cc5 	.word	0x08002cc5
 8002c88:	08002ccd 	.word	0x08002ccd
 8002c8c:	08002cd5 	.word	0x08002cd5
 8002c90:	08002cdd 	.word	0x08002cdd
 8002c94:	08002ce5 	.word	0x08002ce5
 8002c98:	08002ced 	.word	0x08002ced
 8002c9c:	08002cf5 	.word	0x08002cf5
 8002ca0:	08002cfd 	.word	0x08002cfd
 8002ca4:	08002d05 	.word	0x08002d05
 8002ca8:	08002d0d 	.word	0x08002d0d
 8002cac:	08002d15 	.word	0x08002d15
 8002cb0:	08002d1d 	.word	0x08002d1d
 8002cb4:	08002d25 	.word	0x08002d25
 8002cb8:	08002d2d 	.word	0x08002d2d
 8002cbc:	08002d35 	.word	0x08002d35
 8002cc0:	08002d3d 	.word	0x08002d3d
	case 0: {
		__NVIC_EnableIRQ(EXTI0_IRQn);
 8002cc4:	2006      	movs	r0, #6
 8002cc6:	f7ff f9b1 	bl	800202c <__NVIC_EnableIRQ>
		break;
 8002cca:	e03c      	b.n	8002d46 <extInt_Config+0xcde>
	}

	case 1: {
		__NVIC_EnableIRQ(EXTI1_IRQn);
 8002ccc:	2007      	movs	r0, #7
 8002cce:	f7ff f9ad 	bl	800202c <__NVIC_EnableIRQ>
		break;
 8002cd2:	e038      	b.n	8002d46 <extInt_Config+0xcde>
	}
	case 2: {
		__NVIC_EnableIRQ(EXTI2_IRQn);
 8002cd4:	2008      	movs	r0, #8
 8002cd6:	f7ff f9a9 	bl	800202c <__NVIC_EnableIRQ>
		break;
 8002cda:	e034      	b.n	8002d46 <extInt_Config+0xcde>
	}
	case 3: {
		__NVIC_EnableIRQ(EXTI3_IRQn);
 8002cdc:	2009      	movs	r0, #9
 8002cde:	f7ff f9a5 	bl	800202c <__NVIC_EnableIRQ>
		break;
 8002ce2:	e030      	b.n	8002d46 <extInt_Config+0xcde>
	}
	case 4: {
		__NVIC_EnableIRQ(EXTI4_IRQn);
 8002ce4:	200a      	movs	r0, #10
 8002ce6:	f7ff f9a1 	bl	800202c <__NVIC_EnableIRQ>
		break;
 8002cea:	e02c      	b.n	8002d46 <extInt_Config+0xcde>
	}
	case 5: {
		__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002cec:	2017      	movs	r0, #23
 8002cee:	f7ff f99d 	bl	800202c <__NVIC_EnableIRQ>
		break;
 8002cf2:	e028      	b.n	8002d46 <extInt_Config+0xcde>
	}
	case 6: {
		__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002cf4:	2017      	movs	r0, #23
 8002cf6:	f7ff f999 	bl	800202c <__NVIC_EnableIRQ>
		break;
 8002cfa:	e024      	b.n	8002d46 <extInt_Config+0xcde>
	}
	case 7: {
		__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002cfc:	2017      	movs	r0, #23
 8002cfe:	f7ff f995 	bl	800202c <__NVIC_EnableIRQ>
		break;
 8002d02:	e020      	b.n	8002d46 <extInt_Config+0xcde>
	}
	case 8: {
		__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002d04:	2017      	movs	r0, #23
 8002d06:	f7ff f991 	bl	800202c <__NVIC_EnableIRQ>
		break;
 8002d0a:	e01c      	b.n	8002d46 <extInt_Config+0xcde>
	}
	case 9: {
		__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002d0c:	2017      	movs	r0, #23
 8002d0e:	f7ff f98d 	bl	800202c <__NVIC_EnableIRQ>
		break;
 8002d12:	e018      	b.n	8002d46 <extInt_Config+0xcde>
	}
	case 10: {
		__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002d14:	2028      	movs	r0, #40	; 0x28
 8002d16:	f7ff f989 	bl	800202c <__NVIC_EnableIRQ>
		break;
 8002d1a:	e014      	b.n	8002d46 <extInt_Config+0xcde>
	}
	case 11: {
		__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002d1c:	2028      	movs	r0, #40	; 0x28
 8002d1e:	f7ff f985 	bl	800202c <__NVIC_EnableIRQ>
		break;
 8002d22:	e010      	b.n	8002d46 <extInt_Config+0xcde>
	}
	case 12: {
		__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002d24:	2028      	movs	r0, #40	; 0x28
 8002d26:	f7ff f981 	bl	800202c <__NVIC_EnableIRQ>
		break;
 8002d2a:	e00c      	b.n	8002d46 <extInt_Config+0xcde>
	}
	case 13: {
		__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002d2c:	2028      	movs	r0, #40	; 0x28
 8002d2e:	f7ff f97d 	bl	800202c <__NVIC_EnableIRQ>
		break;
 8002d32:	e008      	b.n	8002d46 <extInt_Config+0xcde>
	}
	case 14: {
		__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002d34:	2028      	movs	r0, #40	; 0x28
 8002d36:	f7ff f979 	bl	800202c <__NVIC_EnableIRQ>
		break;
 8002d3a:	e004      	b.n	8002d46 <extInt_Config+0xcde>
     * ..... 
     * y así hasta el ultimo caso */

	case 15: {
		/*Agregue su código acá*/
		__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002d3c:	2028      	movs	r0, #40	; 0x28
 8002d3e:	f7ff f975 	bl	800202c <__NVIC_EnableIRQ>
		break;
 8002d42:	e000      	b.n	8002d46 <extInt_Config+0xcde>
	}

	default: {
		break;
 8002d44:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8002d46:	b662      	cpsie	i
}
 8002d48:	bf00      	nop

	}

	/* 7.0 Volvemos a activar las interrupciones globales */
	__enable_irq();
}
 8002d4a:	bf00      	nop
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	40021000 	.word	0x40021000
 8002d58:	40013800 	.word	0x40013800
 8002d5c:	40021c00 	.word	0x40021c00
 8002d60:	40013c00 	.word	0x40013c00

08002d64 <callback_extInt2>:
	__NOP();
}
__attribute__ ((weak)) void callback_extInt1(void){
	__NOP();
}
__attribute__ ((weak)) void callback_extInt2(void){
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0
	__NOP();
 8002d68:	bf00      	nop
}
 8002d6a:	bf00      	nop
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <callback_extInt4>:
__attribute__ ((weak)) void callback_extInt3(void){
	__NOP();
}
__attribute__ ((weak)) void callback_extInt4(void){
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
	__NOP();
 8002d78:	bf00      	nop
}
 8002d7a:	bf00      	nop
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <callback_extInt5>:
__attribute__ ((weak)) void callback_extInt5(void){
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
	__NOP();
 8002d88:	bf00      	nop
}
 8002d8a:	bf00      	nop
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <callback_extInt6>:
__attribute__ ((weak)) void callback_extInt6(void){
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
	__NOP();
 8002d98:	bf00      	nop
}
 8002d9a:	bf00      	nop
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <callback_extInt8>:
__attribute__ ((weak)) void callback_extInt7(void){
	__NOP();
}
__attribute__ ((weak)) void callback_extInt8(void){
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
	__NOP();
 8002da8:	bf00      	nop
}
 8002daa:	bf00      	nop
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <callback_extInt9>:
__attribute__ ((weak)) void callback_extInt9(void){
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
	__NOP();
 8002db8:	bf00      	nop
}
 8002dba:	bf00      	nop
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <callback_extInt10>:
__attribute__ ((weak)) void callback_extInt10(void){
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
	__NOP();
 8002dc8:	bf00      	nop
}
 8002dca:	bf00      	nop
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <callback_extInt11>:
__attribute__ ((weak)) void callback_extInt11(void){
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
	__NOP();
 8002dd8:	bf00      	nop
}
 8002dda:	bf00      	nop
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <callback_extInt12>:
__attribute__ ((weak)) void callback_extInt12(void){
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
	__NOP();
 8002de8:	bf00      	nop
}
 8002dea:	bf00      	nop
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <callback_extInt13>:
__attribute__ ((weak)) void callback_extInt13(void){
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
	__NOP();
 8002df8:	bf00      	nop
}
 8002dfa:	bf00      	nop
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <callback_extInt14>:
__attribute__ ((weak)) void callback_extInt14(void){
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
	__NOP();
 8002e08:	bf00      	nop
}
 8002e0a:	bf00      	nop
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <callback_extInt15>:
__attribute__ ((weak)) void callback_extInt15(void){
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
	__NOP();
 8002e18:	bf00      	nop
}
 8002e1a:	bf00      	nop
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <EXTI0_IRQHandler>:
 */



/* ISR de la interrupción canal 0*/
void EXTI0_IRQHandler(void){
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR0){
 8002e28:	4b07      	ldr	r3, [pc, #28]	; (8002e48 <EXTI0_IRQHandler+0x24>)
 8002e2a:	695b      	ldr	r3, [r3, #20]
 8002e2c:	f003 0301 	and.w	r3, r3, #1
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d007      	beq.n	8002e44 <EXTI0_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR0;
 8002e34:	4b04      	ldr	r3, [pc, #16]	; (8002e48 <EXTI0_IRQHandler+0x24>)
 8002e36:	695b      	ldr	r3, [r3, #20]
 8002e38:	4a03      	ldr	r2, [pc, #12]	; (8002e48 <EXTI0_IRQHandler+0x24>)
 8002e3a:	f043 0301 	orr.w	r3, r3, #1
 8002e3e:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt0();
 8002e40:	f7fe fcc0 	bl	80017c4 <callback_extInt0>
	}
}
 8002e44:	bf00      	nop
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	40013c00 	.word	0x40013c00

08002e4c <EXTI1_IRQHandler>:

/* Agregue las demas IRQs de las interrupciones EXTI independientes ... 
 * Por favor recuerde que debe agregar el bloque if para verificar que 
 * en efecto esa es la interrupcion que se está atendiendo.
 */
void EXTI1_IRQHandler(void){
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR1){
 8002e50:	4b07      	ldr	r3, [pc, #28]	; (8002e70 <EXTI1_IRQHandler+0x24>)
 8002e52:	695b      	ldr	r3, [r3, #20]
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d007      	beq.n	8002e6c <EXTI1_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR1;
 8002e5c:	4b04      	ldr	r3, [pc, #16]	; (8002e70 <EXTI1_IRQHandler+0x24>)
 8002e5e:	695b      	ldr	r3, [r3, #20]
 8002e60:	4a03      	ldr	r2, [pc, #12]	; (8002e70 <EXTI1_IRQHandler+0x24>)
 8002e62:	f043 0302 	orr.w	r3, r3, #2
 8002e66:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt1();
 8002e68:	f7fe fcc8 	bl	80017fc <callback_extInt1>
	}
}
 8002e6c:	bf00      	nop
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	40013c00 	.word	0x40013c00

08002e74 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void){
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR2){
 8002e78:	4b07      	ldr	r3, [pc, #28]	; (8002e98 <EXTI2_IRQHandler+0x24>)
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	f003 0304 	and.w	r3, r3, #4
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d007      	beq.n	8002e94 <EXTI2_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR2;
 8002e84:	4b04      	ldr	r3, [pc, #16]	; (8002e98 <EXTI2_IRQHandler+0x24>)
 8002e86:	695b      	ldr	r3, [r3, #20]
 8002e88:	4a03      	ldr	r2, [pc, #12]	; (8002e98 <EXTI2_IRQHandler+0x24>)
 8002e8a:	f043 0304 	orr.w	r3, r3, #4
 8002e8e:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt2();
 8002e90:	f7ff ff68 	bl	8002d64 <callback_extInt2>
	}
}
 8002e94:	bf00      	nop
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40013c00 	.word	0x40013c00

08002e9c <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void){
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR3){
 8002ea0:	4b07      	ldr	r3, [pc, #28]	; (8002ec0 <EXTI3_IRQHandler+0x24>)
 8002ea2:	695b      	ldr	r3, [r3, #20]
 8002ea4:	f003 0308 	and.w	r3, r3, #8
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d007      	beq.n	8002ebc <EXTI3_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR3;
 8002eac:	4b04      	ldr	r3, [pc, #16]	; (8002ec0 <EXTI3_IRQHandler+0x24>)
 8002eae:	695b      	ldr	r3, [r3, #20]
 8002eb0:	4a03      	ldr	r2, [pc, #12]	; (8002ec0 <EXTI3_IRQHandler+0x24>)
 8002eb2:	f043 0308 	orr.w	r3, r3, #8
 8002eb6:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt3();
 8002eb8:	f7fe fccc 	bl	8001854 <callback_extInt3>
	}
}
 8002ebc:	bf00      	nop
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	40013c00 	.word	0x40013c00

08002ec4 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void){
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR4){
 8002ec8:	4b07      	ldr	r3, [pc, #28]	; (8002ee8 <EXTI4_IRQHandler+0x24>)
 8002eca:	695b      	ldr	r3, [r3, #20]
 8002ecc:	f003 0310 	and.w	r3, r3, #16
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d007      	beq.n	8002ee4 <EXTI4_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR4;
 8002ed4:	4b04      	ldr	r3, [pc, #16]	; (8002ee8 <EXTI4_IRQHandler+0x24>)
 8002ed6:	695b      	ldr	r3, [r3, #20]
 8002ed8:	4a03      	ldr	r2, [pc, #12]	; (8002ee8 <EXTI4_IRQHandler+0x24>)
 8002eda:	f043 0310 	orr.w	r3, r3, #16
 8002ede:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt4();
 8002ee0:	f7ff ff48 	bl	8002d74 <callback_extInt4>
	}
}
 8002ee4:	bf00      	nop
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	40013c00 	.word	0x40013c00

08002eec <EXTI9_5_IRQHandler>:
/* ISR de la interrupción canales 9_5
 * Observe que debe agregar totos los posibles casos, los cuales
 * son identificados por un bloque if() y el analisis de la bandera
 * (pending register -> EXTI_PR)
 */
void EXTI9_5_IRQHandler(void){
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
    if(EXTI->PR & EXTI_PR_PR5){
 8002ef0:	4b25      	ldr	r3, [pc, #148]	; (8002f88 <EXTI9_5_IRQHandler+0x9c>)
 8002ef2:	695b      	ldr	r3, [r3, #20]
 8002ef4:	f003 0320 	and.w	r3, r3, #32
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d008      	beq.n	8002f0e <EXTI9_5_IRQHandler+0x22>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR5;
 8002efc:	4b22      	ldr	r3, [pc, #136]	; (8002f88 <EXTI9_5_IRQHandler+0x9c>)
 8002efe:	695b      	ldr	r3, [r3, #20]
 8002f00:	4a21      	ldr	r2, [pc, #132]	; (8002f88 <EXTI9_5_IRQHandler+0x9c>)
 8002f02:	f043 0320 	orr.w	r3, r3, #32
 8002f06:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt5();
 8002f08:	f7ff ff3c 	bl	8002d84 <callback_extInt5>
		EXTI->PR |= EXTI_PR_PR9;

		// llamamos al callback
		callback_extInt9();
	}
}
 8002f0c:	e03a      	b.n	8002f84 <EXTI9_5_IRQHandler+0x98>
    else if(EXTI->PR & EXTI_PR_PR6){
 8002f0e:	4b1e      	ldr	r3, [pc, #120]	; (8002f88 <EXTI9_5_IRQHandler+0x9c>)
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d008      	beq.n	8002f2c <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR6;
 8002f1a:	4b1b      	ldr	r3, [pc, #108]	; (8002f88 <EXTI9_5_IRQHandler+0x9c>)
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	4a1a      	ldr	r2, [pc, #104]	; (8002f88 <EXTI9_5_IRQHandler+0x9c>)
 8002f20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f24:	6153      	str	r3, [r2, #20]
		callback_extInt6();
 8002f26:	f7ff ff35 	bl	8002d94 <callback_extInt6>
}
 8002f2a:	e02b      	b.n	8002f84 <EXTI9_5_IRQHandler+0x98>
    else if(EXTI->PR & EXTI_PR_PR7){
 8002f2c:	4b16      	ldr	r3, [pc, #88]	; (8002f88 <EXTI9_5_IRQHandler+0x9c>)
 8002f2e:	695b      	ldr	r3, [r3, #20]
 8002f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d008      	beq.n	8002f4a <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR7;
 8002f38:	4b13      	ldr	r3, [pc, #76]	; (8002f88 <EXTI9_5_IRQHandler+0x9c>)
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	4a12      	ldr	r2, [pc, #72]	; (8002f88 <EXTI9_5_IRQHandler+0x9c>)
 8002f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f42:	6153      	str	r3, [r2, #20]
		callback_extInt7();
 8002f44:	f7fe fc4c 	bl	80017e0 <callback_extInt7>
}
 8002f48:	e01c      	b.n	8002f84 <EXTI9_5_IRQHandler+0x98>
    else if(EXTI->PR & EXTI_PR_PR8){
 8002f4a:	4b0f      	ldr	r3, [pc, #60]	; (8002f88 <EXTI9_5_IRQHandler+0x9c>)
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d008      	beq.n	8002f68 <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR8;
 8002f56:	4b0c      	ldr	r3, [pc, #48]	; (8002f88 <EXTI9_5_IRQHandler+0x9c>)
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	4a0b      	ldr	r2, [pc, #44]	; (8002f88 <EXTI9_5_IRQHandler+0x9c>)
 8002f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f60:	6153      	str	r3, [r2, #20]
		callback_extInt8();
 8002f62:	f7ff ff1f 	bl	8002da4 <callback_extInt8>
}
 8002f66:	e00d      	b.n	8002f84 <EXTI9_5_IRQHandler+0x98>
    else if(EXTI->PR & EXTI_PR_PR9){
 8002f68:	4b07      	ldr	r3, [pc, #28]	; (8002f88 <EXTI9_5_IRQHandler+0x9c>)
 8002f6a:	695b      	ldr	r3, [r3, #20]
 8002f6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d007      	beq.n	8002f84 <EXTI9_5_IRQHandler+0x98>
		EXTI->PR |= EXTI_PR_PR9;
 8002f74:	4b04      	ldr	r3, [pc, #16]	; (8002f88 <EXTI9_5_IRQHandler+0x9c>)
 8002f76:	695b      	ldr	r3, [r3, #20]
 8002f78:	4a03      	ldr	r2, [pc, #12]	; (8002f88 <EXTI9_5_IRQHandler+0x9c>)
 8002f7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f7e:	6153      	str	r3, [r2, #20]
		callback_extInt9();
 8002f80:	f7ff ff18 	bl	8002db4 <callback_extInt9>
}
 8002f84:	bf00      	nop
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	40013c00 	.word	0x40013c00

08002f8c <EXTI15_10_IRQHandler>:
/* ISR de la interrupción canales 15_10
 * Observe que debe agregar totos los posibles casos, los cuales
 * son identificados por un bloque if() y el analisis de la bandera
 * (pending register -> EXTI_PR)
 */
void EXTI15_10_IRQHandler(void){
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_Y_15
	if(EXTI->PR & EXTI_PR_PR10){
 8002f90:	4b2d      	ldr	r3, [pc, #180]	; (8003048 <EXTI15_10_IRQHandler+0xbc>)
 8002f92:	695b      	ldr	r3, [r3, #20]
 8002f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d008      	beq.n	8002fae <EXTI15_10_IRQHandler+0x22>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR10;
 8002f9c:	4b2a      	ldr	r3, [pc, #168]	; (8003048 <EXTI15_10_IRQHandler+0xbc>)
 8002f9e:	695b      	ldr	r3, [r3, #20]
 8002fa0:	4a29      	ldr	r2, [pc, #164]	; (8003048 <EXTI15_10_IRQHandler+0xbc>)
 8002fa2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fa6:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt10();
 8002fa8:	f7ff ff0c 	bl	8002dc4 <callback_extInt10>
    /* .....
     * .....
     * ..... 
     * y así hasta el ultimo caso */
	
}
 8002fac:	e049      	b.n	8003042 <EXTI15_10_IRQHandler+0xb6>
	else if(EXTI->PR & EXTI_PR_PR11){
 8002fae:	4b26      	ldr	r3, [pc, #152]	; (8003048 <EXTI15_10_IRQHandler+0xbc>)
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d008      	beq.n	8002fcc <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR11;
 8002fba:	4b23      	ldr	r3, [pc, #140]	; (8003048 <EXTI15_10_IRQHandler+0xbc>)
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	4a22      	ldr	r2, [pc, #136]	; (8003048 <EXTI15_10_IRQHandler+0xbc>)
 8002fc0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002fc4:	6153      	str	r3, [r2, #20]
		callback_extInt11();
 8002fc6:	f7ff ff05 	bl	8002dd4 <callback_extInt11>
}
 8002fca:	e03a      	b.n	8003042 <EXTI15_10_IRQHandler+0xb6>
	else if(EXTI->PR & EXTI_PR_PR12){
 8002fcc:	4b1e      	ldr	r3, [pc, #120]	; (8003048 <EXTI15_10_IRQHandler+0xbc>)
 8002fce:	695b      	ldr	r3, [r3, #20]
 8002fd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d008      	beq.n	8002fea <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR12;
 8002fd8:	4b1b      	ldr	r3, [pc, #108]	; (8003048 <EXTI15_10_IRQHandler+0xbc>)
 8002fda:	695b      	ldr	r3, [r3, #20]
 8002fdc:	4a1a      	ldr	r2, [pc, #104]	; (8003048 <EXTI15_10_IRQHandler+0xbc>)
 8002fde:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002fe2:	6153      	str	r3, [r2, #20]
		callback_extInt12();
 8002fe4:	f7ff fefe 	bl	8002de4 <callback_extInt12>
}
 8002fe8:	e02b      	b.n	8003042 <EXTI15_10_IRQHandler+0xb6>
	else if(EXTI->PR & EXTI_PR_PR13){
 8002fea:	4b17      	ldr	r3, [pc, #92]	; (8003048 <EXTI15_10_IRQHandler+0xbc>)
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d008      	beq.n	8003008 <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR13;
 8002ff6:	4b14      	ldr	r3, [pc, #80]	; (8003048 <EXTI15_10_IRQHandler+0xbc>)
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	4a13      	ldr	r2, [pc, #76]	; (8003048 <EXTI15_10_IRQHandler+0xbc>)
 8002ffc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003000:	6153      	str	r3, [r2, #20]
		callback_extInt13();
 8003002:	f7ff fef7 	bl	8002df4 <callback_extInt13>
}
 8003006:	e01c      	b.n	8003042 <EXTI15_10_IRQHandler+0xb6>
	else if(EXTI->PR & EXTI_PR_PR14){
 8003008:	4b0f      	ldr	r3, [pc, #60]	; (8003048 <EXTI15_10_IRQHandler+0xbc>)
 800300a:	695b      	ldr	r3, [r3, #20]
 800300c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d008      	beq.n	8003026 <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= EXTI_PR_PR14;
 8003014:	4b0c      	ldr	r3, [pc, #48]	; (8003048 <EXTI15_10_IRQHandler+0xbc>)
 8003016:	695b      	ldr	r3, [r3, #20]
 8003018:	4a0b      	ldr	r2, [pc, #44]	; (8003048 <EXTI15_10_IRQHandler+0xbc>)
 800301a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800301e:	6153      	str	r3, [r2, #20]
		callback_extInt14();
 8003020:	f7ff fef0 	bl	8002e04 <callback_extInt14>
}
 8003024:	e00d      	b.n	8003042 <EXTI15_10_IRQHandler+0xb6>
	else if(EXTI->PR & EXTI_PR_PR15){
 8003026:	4b08      	ldr	r3, [pc, #32]	; (8003048 <EXTI15_10_IRQHandler+0xbc>)
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d007      	beq.n	8003042 <EXTI15_10_IRQHandler+0xb6>
		EXTI->PR |= EXTI_PR_PR15;
 8003032:	4b05      	ldr	r3, [pc, #20]	; (8003048 <EXTI15_10_IRQHandler+0xbc>)
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	4a04      	ldr	r2, [pc, #16]	; (8003048 <EXTI15_10_IRQHandler+0xbc>)
 8003038:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800303c:	6153      	str	r3, [r2, #20]
		callback_extInt15();
 800303e:	f7ff fee9 	bl	8002e14 <callback_extInt15>
}
 8003042:	bf00      	nop
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	40013c00 	.word	0x40013c00

0800304c <GPIO_Config>:
 * Para cualquier prefierico hay unos pasos estrictos que siempre
 * se tienen que seguir en un orden. Lo primero sería activar la señal
 * de reloj
 */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
	//Variable para hacer  paso a paso.
	uint32_t auxConfig = 	0;
 8003054:	2300      	movs	r3, #0
 8003056:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 	0;
 8003058:	2300      	movs	r3, #0
 800305a:	60bb      	str	r3, [r7, #8]
	// 1) activar el periferico.
	//Verificar que pin.
	if(pGPIOHandler -> pGPIOx == GPIOA){
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a88      	ldr	r2, [pc, #544]	; (8003284 <GPIO_Config+0x238>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d106      	bne.n	8003074 <GPIO_Config+0x28>
		RCC -> AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8003066:	4b88      	ldr	r3, [pc, #544]	; (8003288 <GPIO_Config+0x23c>)
 8003068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306a:	4a87      	ldr	r2, [pc, #540]	; (8003288 <GPIO_Config+0x23c>)
 800306c:	f043 0301 	orr.w	r3, r3, #1
 8003070:	6313      	str	r3, [r2, #48]	; 0x30
 8003072:	e03a      	b.n	80030ea <GPIO_Config+0x9e>
	}
	else if(pGPIOHandler -> pGPIOx == GPIOB){
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a84      	ldr	r2, [pc, #528]	; (800328c <GPIO_Config+0x240>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d106      	bne.n	800308c <GPIO_Config+0x40>
		RCC -> AHB1ENR |=  RCC_AHB1ENR_GPIOBEN;
 800307e:	4b82      	ldr	r3, [pc, #520]	; (8003288 <GPIO_Config+0x23c>)
 8003080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003082:	4a81      	ldr	r2, [pc, #516]	; (8003288 <GPIO_Config+0x23c>)
 8003084:	f043 0302 	orr.w	r3, r3, #2
 8003088:	6313      	str	r3, [r2, #48]	; 0x30
 800308a:	e02e      	b.n	80030ea <GPIO_Config+0x9e>
	}
	else if(pGPIOHandler -> pGPIOx == GPIOC){
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a7f      	ldr	r2, [pc, #508]	; (8003290 <GPIO_Config+0x244>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d106      	bne.n	80030a4 <GPIO_Config+0x58>
		RCC -> AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8003096:	4b7c      	ldr	r3, [pc, #496]	; (8003288 <GPIO_Config+0x23c>)
 8003098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309a:	4a7b      	ldr	r2, [pc, #492]	; (8003288 <GPIO_Config+0x23c>)
 800309c:	f043 0304 	orr.w	r3, r3, #4
 80030a0:	6313      	str	r3, [r2, #48]	; 0x30
 80030a2:	e022      	b.n	80030ea <GPIO_Config+0x9e>
	}
	else if(pGPIOHandler -> pGPIOx == GPIOD){
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a7a      	ldr	r2, [pc, #488]	; (8003294 <GPIO_Config+0x248>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d106      	bne.n	80030bc <GPIO_Config+0x70>
		RCC -> AHB1ENR |=  RCC_AHB1ENR_GPIODEN;
 80030ae:	4b76      	ldr	r3, [pc, #472]	; (8003288 <GPIO_Config+0x23c>)
 80030b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b2:	4a75      	ldr	r2, [pc, #468]	; (8003288 <GPIO_Config+0x23c>)
 80030b4:	f043 0308 	orr.w	r3, r3, #8
 80030b8:	6313      	str	r3, [r2, #48]	; 0x30
 80030ba:	e016      	b.n	80030ea <GPIO_Config+0x9e>
	}
	else if(pGPIOHandler -> pGPIOx == GPIOE){
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a75      	ldr	r2, [pc, #468]	; (8003298 <GPIO_Config+0x24c>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d106      	bne.n	80030d4 <GPIO_Config+0x88>
		RCC -> AHB1ENR |=  RCC_AHB1ENR_GPIOEEN;
 80030c6:	4b70      	ldr	r3, [pc, #448]	; (8003288 <GPIO_Config+0x23c>)
 80030c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ca:	4a6f      	ldr	r2, [pc, #444]	; (8003288 <GPIO_Config+0x23c>)
 80030cc:	f043 0310 	orr.w	r3, r3, #16
 80030d0:	6313      	str	r3, [r2, #48]	; 0x30
 80030d2:	e00a      	b.n	80030ea <GPIO_Config+0x9e>
	}
	else if(pGPIOHandler -> pGPIOx == GPIOH){
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a70      	ldr	r2, [pc, #448]	; (800329c <GPIO_Config+0x250>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d105      	bne.n	80030ea <GPIO_Config+0x9e>
		RCC -> AHB1ENR |= RCC_AHB1ENR_GPIOHEN;
 80030de:	4b6a      	ldr	r3, [pc, #424]	; (8003288 <GPIO_Config+0x23c>)
 80030e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e2:	4a69      	ldr	r2, [pc, #420]	; (8003288 <GPIO_Config+0x23c>)
 80030e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030e8:	6313      	str	r3, [r2, #48]	; 0x30
	}

	//Despues de activado podemos comenzar a configurar.
	// 2) Configurar el registro GPIOx_MODER
	auxConfig = (pGPIOHandler -> GPIO_PinConfig_t.GPIO_PinMode << 2 * pGPIOHandler -> GPIO_PinConfig_t.GPIO_PinNumber);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	795b      	ldrb	r3, [r3, #5]
 80030ee:	461a      	mov	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	791b      	ldrb	r3, [r3, #4]
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	fa02 f303 	lsl.w	r3, r2, r3
 80030fa:	60fb      	str	r3, [r7, #12]
	//Antes de cargar el nuevo valor, limpiamos los bits especificos de ese registro
	//para lo cual aplicamos.
	pGPIOHandler -> pGPIOx -> MODER &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig_t.GPIO_PinNumber);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	791b      	ldrb	r3, [r3, #4]
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	2103      	movs	r1, #3
 800310a:	fa01 f303 	lsl.w	r3, r1, r3
 800310e:	43db      	mvns	r3, r3
 8003110:	4619      	mov	r1, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	400a      	ands	r2, r1
 8003118:	601a      	str	r2, [r3, #0]

	//Cargamos a auxConfig en el registro MODER
	pGPIOHandler -> pGPIOx -> MODER |= auxConfig;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	6819      	ldr	r1, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	430a      	orrs	r2, r1
 8003128:	601a      	str	r2, [r3, #0]

	// 3)configurando el registro OTYPER
	auxConfig = (pGPIOHandler -> GPIO_PinConfig_t.GPIO_PinOPType << pGPIOHandler -> GPIO_PinConfig_t.GPIO_PinNumber);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	7a1b      	ldrb	r3, [r3, #8]
 800312e:	461a      	mov	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	791b      	ldrb	r3, [r3, #4]
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	60fb      	str	r3, [r7, #12]
	//limpiamos
	pGPIOHandler -> pGPIOx -> OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig_t.GPIO_PinNumber);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	685a      	ldr	r2, [r3, #4]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	791b      	ldrb	r3, [r3, #4]
 8003144:	4619      	mov	r1, r3
 8003146:	2301      	movs	r3, #1
 8003148:	408b      	lsls	r3, r1
 800314a:	43db      	mvns	r3, r3
 800314c:	4619      	mov	r1, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	400a      	ands	r2, r1
 8003154:	605a      	str	r2, [r3, #4]
	// cargamos el resultado
	pGPIOHandler -> pGPIOx -> OTYPER |= auxConfig;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	6859      	ldr	r1, [r3, #4]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	430a      	orrs	r2, r1
 8003164:	605a      	str	r2, [r3, #4]

	// 4) Configurando ahora la velocidad.
	//Realizando el mismo proceso
	auxConfig = (pGPIOHandler -> GPIO_PinConfig_t.GPIO_PinSpeed << 2 * pGPIOHandler -> GPIO_PinConfig_t.GPIO_PinNumber);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	799b      	ldrb	r3, [r3, #6]
 800316a:	461a      	mov	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	791b      	ldrb	r3, [r3, #4]
 8003170:	005b      	lsls	r3, r3, #1
 8003172:	fa02 f303 	lsl.w	r3, r2, r3
 8003176:	60fb      	str	r3, [r7, #12]
	pGPIOHandler -> pGPIOx -> OSPEEDR &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig_t.GPIO_PinNumber);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	689a      	ldr	r2, [r3, #8]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	791b      	ldrb	r3, [r3, #4]
 8003182:	005b      	lsls	r3, r3, #1
 8003184:	2103      	movs	r1, #3
 8003186:	fa01 f303 	lsl.w	r3, r1, r3
 800318a:	43db      	mvns	r3, r3
 800318c:	4619      	mov	r1, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	400a      	ands	r2, r1
 8003194:	609a      	str	r2, [r3, #8]
	pGPIOHandler -> pGPIOx -> OSPEEDR |= auxConfig;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	6899      	ldr	r1, [r3, #8]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	430a      	orrs	r2, r1
 80031a4:	609a      	str	r2, [r3, #8]

	// 5) confiurando si se desea pull-up, pull-down o flotante.
	auxConfig = (pGPIOHandler -> GPIO_PinConfig_t.GPIO_PinPuPdControl << 2 * pGPIOHandler -> GPIO_PinConfig_t.GPIO_PinNumber);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	79db      	ldrb	r3, [r3, #7]
 80031aa:	461a      	mov	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	791b      	ldrb	r3, [r3, #4]
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	fa02 f303 	lsl.w	r3, r2, r3
 80031b6:	60fb      	str	r3, [r7, #12]
	pGPIOHandler -> pGPIOx -> PUPDR &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig_t.GPIO_PinNumber);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68da      	ldr	r2, [r3, #12]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	791b      	ldrb	r3, [r3, #4]
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	2103      	movs	r1, #3
 80031c6:	fa01 f303 	lsl.w	r3, r1, r3
 80031ca:	43db      	mvns	r3, r3
 80031cc:	4619      	mov	r1, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	400a      	ands	r2, r1
 80031d4:	60da      	str	r2, [r3, #12]
	pGPIOHandler -> pGPIOx -> PUPDR |= auxConfig;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68d9      	ldr	r1, [r3, #12]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	430a      	orrs	r2, r1
 80031e4:	60da      	str	r2, [r3, #12]

	//Esta es la parte para la configuración de las funciones alternativs
	if(pGPIOHandler->GPIO_PinConfig_t.GPIO_PinMode == GPIO_MODE_ALTFN){
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	795b      	ldrb	r3, [r3, #5]
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d143      	bne.n	8003276 <GPIO_Config+0x22a>

		//Seleccionamos primero si se debe utilizar el registro bajo (AFRL) o alto (AFRH)
		if(pGPIOHandler->GPIO_PinConfig_t.GPIO_PinNumber < 8){
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	791b      	ldrb	r3, [r3, #4]
 80031f2:	2b07      	cmp	r3, #7
 80031f4:	d81f      	bhi.n	8003236 <GPIO_Config+0x1ea>
			//Estamos en el registro AFRL, que controla los pines del 0 al 7
			auxPosition = 4 * pGPIOHandler->GPIO_PinConfig_t.GPIO_PinNumber;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	791b      	ldrb	r3, [r3, #4]
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	60bb      	str	r3, [r7, #8]

			//limpiamos
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b111<<auxPosition);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	6a1a      	ldr	r2, [r3, #32]
 8003204:	2107      	movs	r1, #7
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	fa01 f303 	lsl.w	r3, r1, r3
 800320c:	43db      	mvns	r3, r3
 800320e:	4619      	mov	r1, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	400a      	ands	r2, r1
 8003216:	621a      	str	r2, [r3, #32]

			// Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig_t.GPIO_PinAltFunMode << auxPosition);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	6a1a      	ldr	r2, [r3, #32]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	7a5b      	ldrb	r3, [r3, #9]
 8003222:	4619      	mov	r1, r3
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	fa01 f303 	lsl.w	r3, r1, r3
 800322a:	4619      	mov	r1, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	430a      	orrs	r2, r1
 8003232:	621a      	str	r2, [r3, #32]

			// Y escribimos el valor configurado en la posicion seleccionada
						pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig_t.GPIO_PinAltFunMode << auxPosition);
		}
	}
} //Fin del GPIO_config
 8003234:	e01f      	b.n	8003276 <GPIO_Config+0x22a>
			auxPosition = 4 * (pGPIOHandler->GPIO_PinConfig_t.GPIO_PinNumber - 8);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	791b      	ldrb	r3, [r3, #4]
 800323a:	3b08      	subs	r3, #8
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b111<<auxPosition);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003246:	2107      	movs	r1, #7
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	fa01 f303 	lsl.w	r3, r1, r3
 800324e:	43db      	mvns	r3, r3
 8003250:	4619      	mov	r1, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	400a      	ands	r2, r1
 8003258:	625a      	str	r2, [r3, #36]	; 0x24
						pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig_t.GPIO_PinAltFunMode << auxPosition);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	7a5b      	ldrb	r3, [r3, #9]
 8003264:	4619      	mov	r1, r3
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	fa01 f303 	lsl.w	r3, r1, r3
 800326c:	4619      	mov	r1, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	430a      	orrs	r2, r1
 8003274:	625a      	str	r2, [r3, #36]	; 0x24
} //Fin del GPIO_config
 8003276:	bf00      	nop
 8003278:	3714      	adds	r7, #20
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	40020000 	.word	0x40020000
 8003288:	40023800 	.word	0x40023800
 800328c:	40020400 	.word	0x40020400
 8003290:	40020800 	.word	0x40020800
 8003294:	40020c00 	.word	0x40020c00
 8003298:	40021000 	.word	0x40021000
 800329c:	40021c00 	.word	0x40021c00

080032a0 <GPIO_WritePin>:
/**
 * Funcion utilizada para cambiar el estado el pin enregado en el hander, asignando
 * el valor entregado en el variable newState
 */

void GPIO_WritePin(GPIO_Handler_t *pPinHandler, uint8_t newState){
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	460b      	mov	r3, r1
 80032aa:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
//	pPinHandler -> pGPIOx -> ODR &= ~(SET << pPinHandler->GPIO_PinConfig_t.GPIO_PinNumber);
	if(newState == SET){
 80032ac:	78fb      	ldrb	r3, [r7, #3]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d10d      	bne.n	80032ce <GPIO_WritePin+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << pPinHandler->GPIO_PinConfig_t.GPIO_PinNumber);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	699a      	ldr	r2, [r3, #24]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	791b      	ldrb	r3, [r3, #4]
 80032bc:	4619      	mov	r1, r3
 80032be:	2301      	movs	r3, #1
 80032c0:	408b      	lsls	r3, r1
 80032c2:	4619      	mov	r1, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	430a      	orrs	r2, r1
 80032ca:	619a      	str	r2, [r3, #24]
	} else{
		//trabajando con la parte alta del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler->GPIO_PinConfig_t.GPIO_PinNumber + 16));
	}
}
 80032cc:	e00d      	b.n	80032ea <GPIO_WritePin+0x4a>
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler->GPIO_PinConfig_t.GPIO_PinNumber + 16));
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	699a      	ldr	r2, [r3, #24]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	791b      	ldrb	r3, [r3, #4]
 80032d8:	3310      	adds	r3, #16
 80032da:	2101      	movs	r1, #1
 80032dc:	fa01 f303 	lsl.w	r3, r1, r3
 80032e0:	4619      	mov	r1, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	430a      	orrs	r2, r1
 80032e8:	619a      	str	r2, [r3, #24]
}
 80032ea:	bf00      	nop
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr

080032f6 <GPIO_ReadPin>:
//Funcion para leer el estado de un pin.
uint32_t GPIO_ReadPin(GPIO_Handler_t *pPinHandler){
 80032f6:	b480      	push	{r7}
 80032f8:	b085      	sub	sp, #20
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
	// creamos variable auxiliar para retornarla
	uint32_t pinValue = pPinHandler->pGPIOx->IDR;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	60fb      	str	r3, [r7, #12]
	//Cargamos el valor del registro IDR, desplzadado a derecha tantas veces como la ubicacion del pin
	//especifico
	//limpiar los demas valores
	//Antes:
	// pinValue = (pPinHandler->pGPIOx->IDR>>pPinHandler->GPIO_PinConfig_t.GPIO_PinNumber);
	pinValue &= (SET<<pPinHandler->GPIO_PinConfig_t.GPIO_PinNumber);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	791b      	ldrb	r3, [r3, #4]
 800330a:	461a      	mov	r2, r3
 800330c:	2301      	movs	r3, #1
 800330e:	4093      	lsls	r3, r2
 8003310:	461a      	mov	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	4013      	ands	r3, r2
 8003316:	60fb      	str	r3, [r7, #12]
	pinValue >>= pPinHandler->GPIO_PinConfig_t.GPIO_PinNumber;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	791b      	ldrb	r3, [r3, #4]
 800331c:	461a      	mov	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	40d3      	lsrs	r3, r2
 8003322:	60fb      	str	r3, [r7, #12]
	return pinValue;
 8003324:	68fb      	ldr	r3, [r7, #12]
}
 8003326:	4618      	mov	r0, r3
 8003328:	3714      	adds	r7, #20
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr

08003332 <GPIOxTooglePin>:
 * 		1	  |  1	|		 0
 * 		0	  |  1	| 	 	 1
 */


void GPIOxTooglePin(GPIO_Handler_t *pPinHandler){
 8003332:	b580      	push	{r7, lr}
 8003334:	b082      	sub	sp, #8
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
	GPIO_WritePin(pPinHandler,SET^GPIO_ReadPin(pPinHandler));
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f7ff ffdb 	bl	80032f6 <GPIO_ReadPin>
 8003340:	4603      	mov	r3, r0
 8003342:	b2db      	uxtb	r3, r3
 8003344:	f083 0301 	eor.w	r3, r3, #1
 8003348:	b2db      	uxtb	r3, r3
 800334a:	4619      	mov	r1, r3
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f7ff ffa7 	bl	80032a0 <GPIO_WritePin>
}
 8003352:	bf00      	nop
 8003354:	3708      	adds	r7, #8
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
	...

0800335c <configPLL>:
 */

#include <stm32f4xx.h>
#include "PLLDriver.h"

int configPLL(uint16_t freqPLL){
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	4603      	mov	r3, r0
 8003364:	80fb      	strh	r3, [r7, #6]
	if (freqPLL == 16){
 8003366:	88fb      	ldrh	r3, [r7, #6]
 8003368:	2b10      	cmp	r3, #16
 800336a:	d101      	bne.n	8003370 <configPLL+0x14>
		return 0;
 800336c:	2300      	movs	r3, #0
 800336e:	e0c2      	b.n	80034f6 <configPLL+0x19a>
	}
	//Selecionamos HSI como la fuente para el PLL
	RCC -> PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC);
 8003370:	4b64      	ldr	r3, [pc, #400]	; (8003504 <configPLL+0x1a8>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	4a63      	ldr	r2, [pc, #396]	; (8003504 <configPLL+0x1a8>)
 8003376:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800337a:	6053      	str	r3, [r2, #4]

	//Asignamos el divisor para la señal de entrada que sea facil de manipular
	//Por lo que la pondremos en 2MHz colocando en el registro 8.
	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLM); // Limpiamos
 800337c:	4b61      	ldr	r3, [pc, #388]	; (8003504 <configPLL+0x1a8>)
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	4a60      	ldr	r2, [pc, #384]	; (8003504 <configPLL+0x1a8>)
 8003382:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003386:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (RCC_PLLCFGR_PLLM_3); // Ponemos un 8 en el PLLM
 8003388:	4b5e      	ldr	r3, [pc, #376]	; (8003504 <configPLL+0x1a8>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	4a5d      	ldr	r2, [pc, #372]	; (8003504 <configPLL+0x1a8>)
 800338e:	f043 0308 	orr.w	r3, r3, #8
 8003392:	6053      	str	r3, [r2, #4]

	//Ahora conifugraremos la multiplicación
	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLN); // Limpiamos
 8003394:	4b5b      	ldr	r3, [pc, #364]	; (8003504 <configPLL+0x1a8>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	4a5a      	ldr	r2, [pc, #360]	; (8003504 <configPLL+0x1a8>)
 800339a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800339e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033a2:	6053      	str	r3, [r2, #4]

	//ponemos el PLLN en 80 para conseguir 160MHz
	RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_2);
 80033a4:	4b57      	ldr	r3, [pc, #348]	; (8003504 <configPLL+0x1a8>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	4a56      	ldr	r2, [pc, #344]	; (8003504 <configPLL+0x1a8>)
 80033aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ae:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_5);
 80033b0:	4b54      	ldr	r3, [pc, #336]	; (8003504 <configPLL+0x1a8>)
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	4a53      	ldr	r2, [pc, #332]	; (8003504 <configPLL+0x1a8>)
 80033b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80033ba:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_6);
 80033bc:	4b51      	ldr	r3, [pc, #324]	; (8003504 <configPLL+0x1a8>)
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	4a50      	ldr	r2, [pc, #320]	; (8003504 <configPLL+0x1a8>)
 80033c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80033c6:	6053      	str	r3, [r2, #4]

	//  Borro el posible valor configurado
	RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLN_Pos);
 80033c8:	4b4e      	ldr	r3, [pc, #312]	; (8003504 <configPLL+0x1a8>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	4a4d      	ldr	r2, [pc, #308]	; (8003504 <configPLL+0x1a8>)
 80033ce:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80033d2:	6053      	str	r3, [r2, #4]

	// Cargamos el valor del multiplicador el cual al final terminaria siendo la frecuencia
	//Esto teniendo en cuenta que se utilizamos el PLLp para dividir entre 2
	if(freqPLL <= 100 && 50 < freqPLL)
 80033d4:	88fb      	ldrh	r3, [r7, #6]
 80033d6:	2b64      	cmp	r3, #100	; 0x64
 80033d8:	d80b      	bhi.n	80033f2 <configPLL+0x96>
 80033da:	88fb      	ldrh	r3, [r7, #6]
 80033dc:	2b32      	cmp	r3, #50	; 0x32
 80033de:	d908      	bls.n	80033f2 <configPLL+0x96>
		RCC->PLLCFGR |= (freqPLL << RCC_PLLCFGR_PLLN_Pos);
 80033e0:	4b48      	ldr	r3, [pc, #288]	; (8003504 <configPLL+0x1a8>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	88fa      	ldrh	r2, [r7, #6]
 80033e6:	0192      	lsls	r2, r2, #6
 80033e8:	4611      	mov	r1, r2
 80033ea:	4a46      	ldr	r2, [pc, #280]	; (8003504 <configPLL+0x1a8>)
 80033ec:	430b      	orrs	r3, r1
 80033ee:	6053      	str	r3, [r2, #4]
 80033f0:	e005      	b.n	80033fe <configPLL+0xa2>
	else
		RCC->PLLCFGR |= (PLL_STANDARD_FREQ << RCC_PLLCFGR_PLLN_Pos);
 80033f2:	4b44      	ldr	r3, [pc, #272]	; (8003504 <configPLL+0x1a8>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	4a43      	ldr	r2, [pc, #268]	; (8003504 <configPLL+0x1a8>)
 80033f8:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80033fc:	6053      	str	r3, [r2, #4]

	// La salida del PLL depende del valor VCO y del preescaler PLLP, el cual
	// su minimo valor es de 2 con esto configuramos siempre la frecuencia que le entreguemos
	// entre 50 a 100
	RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos); // Salida DIV2
 80033fe:	4b41      	ldr	r3, [pc, #260]	; (8003504 <configPLL+0x1a8>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	4a40      	ldr	r2, [pc, #256]	; (8003504 <configPLL+0x1a8>)
 8003404:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003408:	6053      	str	r3, [r2, #4]

	// Cambio el valor VOS (regulador de voltaje) para que se tenga el
	// rendimiento adecuado Esto se debe hacer antes de encender el PLL

	if(freqPLL <= 64)
 800340a:	88fb      	ldrh	r3, [r7, #6]
 800340c:	2b40      	cmp	r3, #64	; 0x40
 800340e:	d806      	bhi.n	800341e <configPLL+0xc2>
		PWR->CR |= (0x1 << PWR_CR_VOS_Pos);
 8003410:	4b3d      	ldr	r3, [pc, #244]	; (8003508 <configPLL+0x1ac>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a3c      	ldr	r2, [pc, #240]	; (8003508 <configPLL+0x1ac>)
 8003416:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800341a:	6013      	str	r3, [r2, #0]
 800341c:	e012      	b.n	8003444 <configPLL+0xe8>
	else if(freqPLL <= 84)
 800341e:	88fb      	ldrh	r3, [r7, #6]
 8003420:	2b54      	cmp	r3, #84	; 0x54
 8003422:	d806      	bhi.n	8003432 <configPLL+0xd6>
		PWR->CR |= (0x2 << PWR_CR_VOS_Pos);
 8003424:	4b38      	ldr	r3, [pc, #224]	; (8003508 <configPLL+0x1ac>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a37      	ldr	r2, [pc, #220]	; (8003508 <configPLL+0x1ac>)
 800342a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800342e:	6013      	str	r3, [r2, #0]
 8003430:	e008      	b.n	8003444 <configPLL+0xe8>
	else if(freqPLL <= 100)
 8003432:	88fb      	ldrh	r3, [r7, #6]
 8003434:	2b64      	cmp	r3, #100	; 0x64
 8003436:	d805      	bhi.n	8003444 <configPLL+0xe8>
		PWR->CR |= (0x3 << PWR_CR_VOS_Pos);
 8003438:	4b33      	ldr	r3, [pc, #204]	; (8003508 <configPLL+0x1ac>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a32      	ldr	r2, [pc, #200]	; (8003508 <configPLL+0x1ac>)
 800343e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003442:	6013      	str	r3, [r2, #0]

	// Activamos el PLL en el control register del RCC
	RCC->CR |= RCC_CR_PLLON;
 8003444:	4b2f      	ldr	r3, [pc, #188]	; (8003504 <configPLL+0x1a8>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a2e      	ldr	r2, [pc, #184]	; (8003504 <configPLL+0x1a8>)
 800344a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800344e:	6013      	str	r3, [r2, #0]

	// Esperamos a que el PLL se cierre (se estabilice)
	while (!(RCC->CR & RCC_CR_PLLRDY)){
 8003450:	e000      	b.n	8003454 <configPLL+0xf8>
		__NOP();
 8003452:	bf00      	nop
	while (!(RCC->CR & RCC_CR_PLLRDY)){
 8003454:	4b2b      	ldr	r3, [pc, #172]	; (8003504 <configPLL+0x1a8>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d0f8      	beq.n	8003452 <configPLL+0xf6>
	/* ---- Configuración de Preescalers para velocidad de los Buses ---- */
	//  Organizamos los preescalers del hardware, de forma que funcionen
	// a la velocidad maxima permitida
	// Preescaler del hardware del procesador, el valor en 0 significa
	// 	 sin preescaler
	RCC->CFGR &= ~(0xF << RCC_CFGR_HPRE_Pos);
 8003460:	4b28      	ldr	r3, [pc, #160]	; (8003504 <configPLL+0x1a8>)
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	4a27      	ldr	r2, [pc, #156]	; (8003504 <configPLL+0x1a8>)
 8003466:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800346a:	6093      	str	r3, [r2, #8]

	// Preescaler para el APB2 (high speed), el valor en 0 significa
	// sin preescaler
	RCC->CFGR &= ~(0x7 << RCC_CFGR_PPRE2_Pos);
 800346c:	4b25      	ldr	r3, [pc, #148]	; (8003504 <configPLL+0x1a8>)
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	4a24      	ldr	r2, [pc, #144]	; (8003504 <configPLL+0x1a8>)
 8003472:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003476:	6093      	str	r3, [r2, #8]

	// Preescaler para el APB1 (low speed). Se debe poner un preescaler
	// de 2:1, para que la velocidad
	// sea la máxima permitida. Primero lo limpio, luego lo configuro
	RCC->CFGR &= ~(0x7 << RCC_CFGR_PPRE1_Pos); // Limpiar
 8003478:	4b22      	ldr	r3, [pc, #136]	; (8003504 <configPLL+0x1a8>)
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	4a21      	ldr	r2, [pc, #132]	; (8003504 <configPLL+0x1a8>)
 800347e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8003482:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (0x4 << RCC_CFGR_PPRE1_Pos);  // Preescaler 2:1
 8003484:	4b1f      	ldr	r3, [pc, #124]	; (8003504 <configPLL+0x1a8>)
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	4a1e      	ldr	r2, [pc, #120]	; (8003504 <configPLL+0x1a8>)
 800348a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800348e:	6093      	str	r3, [r2, #8]

	// Ahora debemos configurar el periodo de espera para leer la
	// memoria flash (Lantency), tal cual como esta descrito en la seccion
	// 3.4.1, tabla 5, pag 45.

	FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos); // Limpiamos la posicion
 8003490:	4b1e      	ldr	r3, [pc, #120]	; (800350c <configPLL+0x1b0>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a1d      	ldr	r2, [pc, #116]	; (800350c <configPLL+0x1b0>)
 8003496:	f023 030f 	bic.w	r3, r3, #15
 800349a:	6013      	str	r3, [r2, #0]

	if(50 <= freqPLL && freqPLL <= 64)
 800349c:	88fb      	ldrh	r3, [r7, #6]
 800349e:	2b31      	cmp	r3, #49	; 0x31
 80034a0:	d909      	bls.n	80034b6 <configPLL+0x15a>
 80034a2:	88fb      	ldrh	r3, [r7, #6]
 80034a4:	2b40      	cmp	r3, #64	; 0x40
 80034a6:	d806      	bhi.n	80034b6 <configPLL+0x15a>
		FLASH -> ACR |= (0x1 << FLASH_ACR_LATENCY_Pos); // Configurando 1 WS
 80034a8:	4b18      	ldr	r3, [pc, #96]	; (800350c <configPLL+0x1b0>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a17      	ldr	r2, [pc, #92]	; (800350c <configPLL+0x1b0>)
 80034ae:	f043 0301 	orr.w	r3, r3, #1
 80034b2:	6013      	str	r3, [r2, #0]
 80034b4:	e012      	b.n	80034dc <configPLL+0x180>
	else if(90 <= freqPLL && freqPLL <= 100)
 80034b6:	88fb      	ldrh	r3, [r7, #6]
 80034b8:	2b59      	cmp	r3, #89	; 0x59
 80034ba:	d909      	bls.n	80034d0 <configPLL+0x174>
 80034bc:	88fb      	ldrh	r3, [r7, #6]
 80034be:	2b64      	cmp	r3, #100	; 0x64
 80034c0:	d806      	bhi.n	80034d0 <configPLL+0x174>
		FLASH -> ACR |= (0x3 << FLASH_ACR_LATENCY_Pos); // Configurando 3 WS
 80034c2:	4b12      	ldr	r3, [pc, #72]	; (800350c <configPLL+0x1b0>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a11      	ldr	r2, [pc, #68]	; (800350c <configPLL+0x1b0>)
 80034c8:	f043 0303 	orr.w	r3, r3, #3
 80034cc:	6013      	str	r3, [r2, #0]
 80034ce:	e005      	b.n	80034dc <configPLL+0x180>
	else // Default State: (64 <= freqPLL && freqPLL <= 90)
		FLASH -> ACR |= (0x2 << FLASH_ACR_LATENCY_Pos); // Configurando 2 WS
 80034d0:	4b0e      	ldr	r3, [pc, #56]	; (800350c <configPLL+0x1b0>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a0d      	ldr	r2, [pc, #52]	; (800350c <configPLL+0x1b0>)
 80034d6:	f043 0302 	orr.w	r3, r3, #2
 80034da:	6013      	str	r3, [r2, #0]

	//  Ahora falta hacer el cambio del sistema a que funcione en la nueva frecuencia
	RCC->CFGR &= ~RCC_CFGR_SW_1;  // Borramos la posicion
 80034dc:	4b09      	ldr	r3, [pc, #36]	; (8003504 <configPLL+0x1a8>)
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	4a08      	ldr	r2, [pc, #32]	; (8003504 <configPLL+0x1a8>)
 80034e2:	f023 0302 	bic.w	r3, r3, #2
 80034e6:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_1;   // PLL como reloj principal
 80034e8:	4b06      	ldr	r3, [pc, #24]	; (8003504 <configPLL+0x1a8>)
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	4a05      	ldr	r2, [pc, #20]	; (8003504 <configPLL+0x1a8>)
 80034ee:	f043 0302 	orr.w	r3, r3, #2
 80034f2:	6093      	str	r3, [r2, #8]

	return 1;
 80034f4:	2301      	movs	r3, #1
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	40023800 	.word	0x40023800
 8003508:	40007000 	.word	0x40007000
 800350c:	40023c00 	.word	0x40023c00

08003510 <getConfigPLL>:

// Obtener  la configuración
uint8_t getConfigPLL(void){
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0

	// Seleccion de los dos valores SWS1 y SWS0, que indican cual es la
	// fuente del reloj principal

	uint32_t auxClockState = (RCC->CFGR & 0b1100) >> 2;
 8003516:	4b10      	ldr	r3, [pc, #64]	; (8003558 <getConfigPLL+0x48>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	089b      	lsrs	r3, r3, #2
 800351c:	f003 0303 	and.w	r3, r3, #3
 8003520:	607b      	str	r3, [r7, #4]

	switch(auxClockState){
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2b02      	cmp	r3, #2
 8003526:	d00d      	beq.n	8003544 <getConfigPLL+0x34>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b02      	cmp	r3, #2
 800352c:	d80c      	bhi.n	8003548 <getConfigPLL+0x38>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d003      	beq.n	800353c <getConfigPLL+0x2c>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d002      	beq.n	8003540 <getConfigPLL+0x30>
 800353a:	e005      	b.n	8003548 <getConfigPLL+0x38>
	case HSI_CLOCK_CONFIGURED:
		return 0;
 800353c:	2300      	movs	r3, #0
 800353e:	e004      	b.n	800354a <getConfigPLL+0x3a>
		break;

	case HSE_CLOCK_CONFIGURED:
		return 1;
 8003540:	2301      	movs	r3, #1
 8003542:	e002      	b.n	800354a <getConfigPLL+0x3a>
		break;

	case PLL_CLOCK_CONFIGURED:
		return 2;
 8003544:	2302      	movs	r3, #2
 8003546:	e000      	b.n	800354a <getConfigPLL+0x3a>
		break;

	default:
		return 0;
 8003548:	2300      	movs	r3, #0
		break;

	}
}
 800354a:	4618      	mov	r0, r3
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	40023800 	.word	0x40023800

0800355c <getFreqPLL>:

// Obtener la frecuencia función importante para cualquier aplicaciom.
uint16_t getFreqPLL(void){
 800355c:	b580      	push	{r7, lr}
 800355e:	af00      	add	r7, sp, #0

	// Retorno del valor actual de PLL, discriminación del valor actual
	switch(getConfigPLL()){
 8003560:	f7ff ffd6 	bl	8003510 <getConfigPLL>
 8003564:	4603      	mov	r3, r0
 8003566:	2b02      	cmp	r3, #2
 8003568:	d001      	beq.n	800356e <getFreqPLL+0x12>

	default:
	case HSI_CLOCK_CONFIGURED:
		return 16;
 800356a:	2310      	movs	r3, #16
 800356c:	e006      	b.n	800357c <getFreqPLL+0x20>
		break;

	case PLL_CLOCK_CONFIGURED:

		return (RCC->PLLCFGR & 0b111111111000000) >> RCC_PLLCFGR_PLLN_Pos;
 800356e:	4b04      	ldr	r3, [pc, #16]	; (8003580 <getFreqPLL+0x24>)
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	099b      	lsrs	r3, r3, #6
 8003574:	b29b      	uxth	r3, r3
 8003576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800357a:	b29b      	uxth	r3, r3
		break;

	}
}
 800357c:	4618      	mov	r0, r3
 800357e:	bd80      	pop	{r7, pc}
 8003580:	40023800 	.word	0x40023800

08003584 <pwm_Config>:
 *      Author: namontoy
 */
#include "PwmDriver.h"
void pwmSetPolarity(PWM_Handler_t *ptrPwmHandler);
/**/
void pwm_Config(PWM_Handler_t *ptrPwmHandler) {
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]

	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrPwmHandler->ptrTIMx == TIM2) {
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003594:	d106      	bne.n	80035a4 <pwm_Config+0x20>
		//APB1 primero limpiamos
		// Registro del RCC que nos activa la señal de reloj para el TIM2
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8003596:	4b63      	ldr	r3, [pc, #396]	; (8003724 <pwm_Config+0x1a0>)
 8003598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359a:	4a62      	ldr	r2, [pc, #392]	; (8003724 <pwm_Config+0x1a0>)
 800359c:	f043 0301 	orr.w	r3, r3, #1
 80035a0:	6413      	str	r3, [r2, #64]	; 0x40
 80035a2:	e024      	b.n	80035ee <pwm_Config+0x6a>
	} else if (ptrPwmHandler->ptrTIMx == TIM3) {
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a5f      	ldr	r2, [pc, #380]	; (8003728 <pwm_Config+0x1a4>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d106      	bne.n	80035bc <pwm_Config+0x38>
		// Registro del RCC que nos activa la señal de reloj para el TIM3
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 80035ae:	4b5d      	ldr	r3, [pc, #372]	; (8003724 <pwm_Config+0x1a0>)
 80035b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b2:	4a5c      	ldr	r2, [pc, #368]	; (8003724 <pwm_Config+0x1a0>)
 80035b4:	f043 0302 	orr.w	r3, r3, #2
 80035b8:	6413      	str	r3, [r2, #64]	; 0x40
 80035ba:	e018      	b.n	80035ee <pwm_Config+0x6a>
	} else if (ptrPwmHandler->ptrTIMx == TIM4) {
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a5a      	ldr	r2, [pc, #360]	; (800372c <pwm_Config+0x1a8>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d106      	bne.n	80035d4 <pwm_Config+0x50>
		// Registro del RCC que nos activa la señal de reloj para el TIM4
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 80035c6:	4b57      	ldr	r3, [pc, #348]	; (8003724 <pwm_Config+0x1a0>)
 80035c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ca:	4a56      	ldr	r2, [pc, #344]	; (8003724 <pwm_Config+0x1a0>)
 80035cc:	f043 0304 	orr.w	r3, r3, #4
 80035d0:	6413      	str	r3, [r2, #64]	; 0x40
 80035d2:	e00c      	b.n	80035ee <pwm_Config+0x6a>
	} else if (ptrPwmHandler->ptrTIMx == TIM5) {
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a55      	ldr	r2, [pc, #340]	; (8003730 <pwm_Config+0x1ac>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d106      	bne.n	80035ec <pwm_Config+0x68>
		// Registro del RCC que nos activa la señal de reloj para el TIM5
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 80035de:	4b51      	ldr	r3, [pc, #324]	; (8003724 <pwm_Config+0x1a0>)
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	4a50      	ldr	r2, [pc, #320]	; (8003724 <pwm_Config+0x1a0>)
 80035e4:	f043 0308 	orr.w	r3, r3, #8
 80035e8:	6413      	str	r3, [r2, #64]	; 0x40
 80035ea:	e000      	b.n	80035ee <pwm_Config+0x6a>
	} else {
		__NOP();
 80035ec:	bf00      	nop
	}

	/* 1. Cargamos la frecuencia deseada */
	setFrequency(ptrPwmHandler);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 f930 	bl	8003854 <setFrequency>

	/* 2. Cargamos el valor del dutty-Cycle*/
	setDuttyCycle(ptrPwmHandler);
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f000 f943 	bl	8003880 <setDuttyCycle>

	pwmSetPolarity(ptrPwmHandler);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 f974 	bl	80038e8 <pwmSetPolarity>

	/* 2a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
	// Configurar el registro que nos controla el modo up or down
	ptrPwmHandler->ptrTIMx->CR1 &= (RESET << TIM_CR1_DIR_Pos);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2200      	movs	r2, #0
 800360c:	601a      	str	r2, [r3, #0]
	ptrPwmHandler->ptrTIMx->CR1 |= TIM_CR1_ARPE;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800361c:	601a      	str	r2, [r3, #0]
	/* 2b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar */
	ptrPwmHandler->ptrTIMx->ARR = ptrPwmHandler->config.periodo - 1;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	899b      	ldrh	r3, [r3, #12]
 8003622:	1e5a      	subs	r2, r3, #1
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	62da      	str	r2, [r3, #44]	; 0x2c

	/* 2c. Reiniciamos el registro counter*/
	ptrPwmHandler->ptrTIMx->CNT = RESET;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2200      	movs	r2, #0
 8003630:	625a      	str	r2, [r3, #36]	; 0x24
	 *
	 * 4. Además, en el mismo "case" podemos configurar el modo del PWM, su polaridad...
	 *
	 * 5. Y además activamos el preload bit, para que cada vez que exista un update-event
	 * el valor cargado en el CCRx será recargado en el registro "shadow" del PWM */
	switch (ptrPwmHandler->config.channel) {
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	791b      	ldrb	r3, [r3, #4]
 8003636:	2b03      	cmp	r3, #3
 8003638:	d86e      	bhi.n	8003718 <pwm_Config+0x194>
 800363a:	a201      	add	r2, pc, #4	; (adr r2, 8003640 <pwm_Config+0xbc>)
 800363c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003640:	08003651 	.word	0x08003651
 8003644:	08003683 	.word	0x08003683
 8003648:	080036b5 	.word	0x080036b5
 800364c:	080036e7 	.word	0x080036e7
	case PWM_CHANNEL_1: {
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~(0b11 << TIM_CCMR1_CC1S_Pos);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	699a      	ldr	r2, [r3, #24]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f022 0203 	bic.w	r2, r2, #3
 800365e:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= (0b110 << TIM_CCMR1_OC1M_Pos);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	699a      	ldr	r2, [r3, #24]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800366e:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	699a      	ldr	r2, [r3, #24]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f042 0208 	orr.w	r2, r2, #8
 800367e:	619a      	str	r2, [r3, #24]

		break;
 8003680:	e04b      	b.n	800371a <pwm_Config+0x196>
	}

	case PWM_CHANNEL_2: {
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~(0b11 << TIM_CCMR1_CC2S_Pos);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	699a      	ldr	r2, [r3, #24]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003690:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= (0b110 << TIM_CCMR1_OC2M_Pos);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	699a      	ldr	r2, [r3, #24]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 80036a0:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	699a      	ldr	r2, [r3, #24]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036b0:	619a      	str	r2, [r3, #24]

		break;
 80036b2:	e032      	b.n	800371a <pwm_Config+0x196>
	}
	case PWM_CHANNEL_3: {
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~(0b11 << TIM_CCMR2_CC3S_Pos);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	69da      	ldr	r2, [r3, #28]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f022 0203 	bic.w	r2, r2, #3
 80036c2:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= (0b110 << TIM_CCMR2_OC3M_Pos);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	69da      	ldr	r2, [r3, #28]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80036d2:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	69da      	ldr	r2, [r3, #28]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f042 0208 	orr.w	r2, r2, #8
 80036e2:	61da      	str	r2, [r3, #28]

		break;
 80036e4:	e019      	b.n	800371a <pwm_Config+0x196>
	}
	case PWM_CHANNEL_4: {
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~(0b11 << TIM_CCMR2_CC4S_Pos);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	69da      	ldr	r2, [r3, #28]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80036f4:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= (0b110 << TIM_CCMR2_OC4M_Pos);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	69da      	ldr	r2, [r3, #28]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8003704:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	69da      	ldr	r2, [r3, #28]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003714:	61da      	str	r2, [r3, #28]

		break;
 8003716:	e000      	b.n	800371a <pwm_Config+0x196>
	}

	default: {
		break;
 8003718:	bf00      	nop
	}

	}		// fin del switch-case
	/* 6. Activamos la salida seleccionada */

}
 800371a:	bf00      	nop
 800371c:	3708      	adds	r7, #8
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	40023800 	.word	0x40023800
 8003728:	40000400 	.word	0x40000400
 800372c:	40000800 	.word	0x40000800
 8003730:	40000c00 	.word	0x40000c00

08003734 <startPwmSignal>:

/* Función para activar el Timer y activar todos el módulo PWM */
void startPwmSignal(PWM_Handler_t *ptrPwmHandler) {
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]

	//Activamos el timer

	ptrPwmHandler->ptrTIMx->CR1 &= ~(TIM_CR1_CEN);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f022 0201 	bic.w	r2, r2, #1
 800374a:	601a      	str	r2, [r3, #0]
	ptrPwmHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f042 0201 	orr.w	r2, r2, #1
 800375a:	601a      	str	r2, [r3, #0]

	//Activamos la salida dependiendo del chanel usado

	switch (ptrPwmHandler->config.channel) {
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	791b      	ldrb	r3, [r3, #4]
 8003760:	2b03      	cmp	r3, #3
 8003762:	d82f      	bhi.n	80037c4 <startPwmSignal+0x90>
 8003764:	a201      	add	r2, pc, #4	; (adr r2, 800376c <startPwmSignal+0x38>)
 8003766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800376a:	bf00      	nop
 800376c:	0800377d 	.word	0x0800377d
 8003770:	0800378f 	.word	0x0800378f
 8003774:	080037a1 	.word	0x080037a1
 8003778:	080037b3 	.word	0x080037b3
	case PWM_CHANNEL_1: {
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	6a1a      	ldr	r2, [r3, #32]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f042 0201 	orr.w	r2, r2, #1
 800378a:	621a      	str	r2, [r3, #32]

		break;
 800378c:	e01b      	b.n	80037c6 <startPwmSignal+0x92>
	}

	case PWM_CHANNEL_2: {
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	6a1a      	ldr	r2, [r3, #32]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f042 0210 	orr.w	r2, r2, #16
 800379c:	621a      	str	r2, [r3, #32]

		break;
 800379e:	e012      	b.n	80037c6 <startPwmSignal+0x92>
	}
	case PWM_CHANNEL_3: {
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6a1a      	ldr	r2, [r3, #32]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037ae:	621a      	str	r2, [r3, #32]

		break;
 80037b0:	e009      	b.n	80037c6 <startPwmSignal+0x92>
	}
	case PWM_CHANNEL_4: {
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	6a1a      	ldr	r2, [r3, #32]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80037c0:	621a      	str	r2, [r3, #32]

		break;
 80037c2:	e000      	b.n	80037c6 <startPwmSignal+0x92>
	}

	default: {
		break;
 80037c4:	bf00      	nop
	}
	}
}
 80037c6:	bf00      	nop
 80037c8:	370c      	adds	r7, #12
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop

080037d4 <enableOutput>:
		break;
	}
	}
}
/* Función encargada de activar cada uno de los canales con los que cuenta el TimerX */
void enableOutput(PWM_Handler_t *ptrPwmHandler) {
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]

	switch (ptrPwmHandler->config.channel) {
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	791b      	ldrb	r3, [r3, #4]
 80037e0:	2b03      	cmp	r3, #3
 80037e2:	d82f      	bhi.n	8003844 <enableOutput+0x70>
 80037e4:	a201      	add	r2, pc, #4	; (adr r2, 80037ec <enableOutput+0x18>)
 80037e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ea:	bf00      	nop
 80037ec:	080037fd 	.word	0x080037fd
 80037f0:	0800380f 	.word	0x0800380f
 80037f4:	08003821 	.word	0x08003821
 80037f8:	08003833 	.word	0x08003833
	case PWM_CHANNEL_1: {
		// Activamos la salida del canal 1
		/* agregue acá su código */
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	6a1a      	ldr	r2, [r3, #32]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f042 0201 	orr.w	r2, r2, #1
 800380a:	621a      	str	r2, [r3, #32]

		break;
 800380c:	e01b      	b.n	8003846 <enableOutput+0x72>
	}

	case PWM_CHANNEL_2: {
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	6a1a      	ldr	r2, [r3, #32]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f042 0210 	orr.w	r2, r2, #16
 800381c:	621a      	str	r2, [r3, #32]

		break;
 800381e:	e012      	b.n	8003846 <enableOutput+0x72>
	}
	case PWM_CHANNEL_3: {
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	6a1a      	ldr	r2, [r3, #32]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800382e:	621a      	str	r2, [r3, #32]

		break;
 8003830:	e009      	b.n	8003846 <enableOutput+0x72>
	}
	case PWM_CHANNEL_4: {
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6a1a      	ldr	r2, [r3, #32]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003840:	621a      	str	r2, [r3, #32]

		break;
 8003842:	e000      	b.n	8003846 <enableOutput+0x72>
	}

	default: {
		break;
 8003844:	bf00      	nop
	}
	}
}
 8003846:	bf00      	nop
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop

08003854 <setFrequency>:
/* 
 * La frecuencia es definida por el conjunto formado por el preescaler (PSC)
 * y el valor límite al que llega el Timer (ARR), con estos dos se establece
 * la frecuencia.
 * */
void setFrequency(PWM_Handler_t *ptrPwmHandler) {
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]

	// Cargamos el valor del prescaler, nos define la velocidad (en ns) a la cual
	// se incrementa el Timer
	ptrPwmHandler->ptrTIMx->PSC = ptrPwmHandler->config.prescaler - 1;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689a      	ldr	r2, [r3, #8]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	3a01      	subs	r2, #1
 8003866:	629a      	str	r2, [r3, #40]	; 0x28

	// Cargamos el valor del ARR, el cual es el límite de incrementos del Timer
	// antes de hacer un update y reload.
	ptrPwmHandler->ptrTIMx->ARR = ptrPwmHandler->config.periodo - 1;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	899b      	ldrh	r3, [r3, #12]
 800386c:	1e5a      	subs	r2, r3, #1
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <setDuttyCycle>:
	// Llamamos a la fucnión que cambia la frecuencia
	setFrequency(ptrPwmHandler);
}

/* El valor del dutty debe estar dado en valores de %, entre 0% y 100%*/
void setDuttyCycle(PWM_Handler_t *ptrPwmHandler) {
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch (ptrPwmHandler->config.channel) {
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	791b      	ldrb	r3, [r3, #4]
 800388c:	2b03      	cmp	r3, #3
 800388e:	d823      	bhi.n	80038d8 <setDuttyCycle+0x58>
 8003890:	a201      	add	r2, pc, #4	; (adr r2, 8003898 <setDuttyCycle+0x18>)
 8003892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003896:	bf00      	nop
 8003898:	080038a9 	.word	0x080038a9
 800389c:	080038b5 	.word	0x080038b5
 80038a0:	080038c1 	.word	0x080038c1
 80038a4:	080038cd 	.word	0x080038cd
	case PWM_CHANNEL_1: {
		ptrPwmHandler->ptrTIMx->CCR1 = ptrPwmHandler->config.duttyCicle;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	89da      	ldrh	r2, [r3, #14]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	635a      	str	r2, [r3, #52]	; 0x34

		break;
 80038b2:	e012      	b.n	80038da <setDuttyCycle+0x5a>
	}

	case PWM_CHANNEL_2: {
		ptrPwmHandler->ptrTIMx->CCR2 = ptrPwmHandler->config.duttyCicle;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	89da      	ldrh	r2, [r3, #14]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	639a      	str	r2, [r3, #56]	; 0x38

		break;
 80038be:	e00c      	b.n	80038da <setDuttyCycle+0x5a>
	}

	case PWM_CHANNEL_3: {
		ptrPwmHandler->ptrTIMx->CCR3 = ptrPwmHandler->config.duttyCicle;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	89da      	ldrh	r2, [r3, #14]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	63da      	str	r2, [r3, #60]	; 0x3c

		break;
 80038ca:	e006      	b.n	80038da <setDuttyCycle+0x5a>
	}

	case PWM_CHANNEL_4: {
		ptrPwmHandler->ptrTIMx->CCR4 = ptrPwmHandler->config.duttyCicle;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	89da      	ldrh	r2, [r3, #14]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	641a      	str	r2, [r3, #64]	; 0x40

		break;
 80038d6:	e000      	b.n	80038da <setDuttyCycle+0x5a>
	}

	default: {
		break;
 80038d8:	bf00      	nop
	}

	}	// fin del switch-case

}
 80038da:	bf00      	nop
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop

080038e8 <pwmSetPolarity>:

	// Llamamos a la fucnión que cambia el dutty y cargamos el nuevo valor
	setDuttyCycle(ptrPwmHandler);
}

void pwmSetPolarity(PWM_Handler_t *ptrPwmHandler) {
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
	// Seleccionamos el canal para configurar su dutty
	switch (ptrPwmHandler->config.channel) {
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	791b      	ldrb	r3, [r3, #4]
 80038f4:	2b03      	cmp	r3, #3
 80038f6:	d85b      	bhi.n	80039b0 <pwmSetPolarity+0xc8>
 80038f8:	a201      	add	r2, pc, #4	; (adr r2, 8003900 <pwmSetPolarity+0x18>)
 80038fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038fe:	bf00      	nop
 8003900:	08003911 	.word	0x08003911
 8003904:	08003939 	.word	0x08003939
 8003908:	08003961 	.word	0x08003961
 800390c:	08003989 	.word	0x08003989
	case PWM_CHANNEL_1: {
		ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	6a1a      	ldr	r2, [r3, #32]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f022 0202 	bic.w	r2, r2, #2
 800391e:	621a      	str	r2, [r3, #32]
		ptrPwmHandler->ptrTIMx->CCER |= ptrPwmHandler->config.polarity<<TIM_CCER_CC1P_Pos;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6a1a      	ldr	r2, [r3, #32]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	7c1b      	ldrb	r3, [r3, #16]
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	4619      	mov	r1, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	430a      	orrs	r2, r1
 8003934:	621a      	str	r2, [r3, #32]
		break;
 8003936:	e03c      	b.n	80039b2 <pwmSetPolarity+0xca>
	}

	case PWM_CHANNEL_2: {
		ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6a1a      	ldr	r2, [r3, #32]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 0220 	bic.w	r2, r2, #32
 8003946:	621a      	str	r2, [r3, #32]
		ptrPwmHandler->ptrTIMx->CCER |= ptrPwmHandler->config.polarity<<TIM_CCER_CC2P_Pos;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6a1a      	ldr	r2, [r3, #32]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	7c1b      	ldrb	r3, [r3, #16]
 8003952:	015b      	lsls	r3, r3, #5
 8003954:	4619      	mov	r1, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	430a      	orrs	r2, r1
 800395c:	621a      	str	r2, [r3, #32]

		break;
 800395e:	e028      	b.n	80039b2 <pwmSetPolarity+0xca>
	}

	case PWM_CHANNEL_3: {
		ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	6a1a      	ldr	r2, [r3, #32]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800396e:	621a      	str	r2, [r3, #32]
		ptrPwmHandler->ptrTIMx->CCER |= ptrPwmHandler->config.polarity<<TIM_CCER_CC3P_Pos;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6a1a      	ldr	r2, [r3, #32]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	7c1b      	ldrb	r3, [r3, #16]
 800397a:	025b      	lsls	r3, r3, #9
 800397c:	4619      	mov	r1, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	430a      	orrs	r2, r1
 8003984:	621a      	str	r2, [r3, #32]

		break;
 8003986:	e014      	b.n	80039b2 <pwmSetPolarity+0xca>
	}

	case PWM_CHANNEL_4: {
		ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6a1a      	ldr	r2, [r3, #32]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003996:	621a      	str	r2, [r3, #32]
		ptrPwmHandler->ptrTIMx->CCER |= ptrPwmHandler->config.polarity<<TIM_CCER_CC4P_Pos;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	6a1a      	ldr	r2, [r3, #32]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	7c1b      	ldrb	r3, [r3, #16]
 80039a2:	035b      	lsls	r3, r3, #13
 80039a4:	4619      	mov	r1, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	430a      	orrs	r2, r1
 80039ac:	621a      	str	r2, [r3, #32]

		break;
 80039ae:	e000      	b.n	80039b2 <pwmSetPolarity+0xca>
	}

	default: {
		break;
 80039b0:	bf00      	nop
	}

	}	// fin del switch-case
}
 80039b2:	bf00      	nop
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop

080039c0 <pwmUpdatePolarity>:

void pwmUpdatePolarity(PWM_Handler_t *ptrPwmHandler, uint8_t newPolarity) {
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	460b      	mov	r3, r1
 80039ca:	70fb      	strb	r3, [r7, #3]
	// Actualizamos el registro que manipula el dutty
	ptrPwmHandler->config.polarity = newPolarity;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	78fa      	ldrb	r2, [r7, #3]
 80039d0:	741a      	strb	r2, [r3, #16]

	pwmSetPolarity(ptrPwmHandler);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f7ff ff88 	bl	80038e8 <pwmSetPolarity>
}
 80039d8:	bf00      	nop
 80039da:	3708      	adds	r7, #8
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <__NVIC_EnableIRQ>:
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	4603      	mov	r3, r0
 80039e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	db0b      	blt.n	8003a0a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039f2:	79fb      	ldrb	r3, [r7, #7]
 80039f4:	f003 021f 	and.w	r2, r3, #31
 80039f8:	4907      	ldr	r1, [pc, #28]	; (8003a18 <__NVIC_EnableIRQ+0x38>)
 80039fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039fe:	095b      	lsrs	r3, r3, #5
 8003a00:	2001      	movs	r0, #1
 8003a02:	fa00 f202 	lsl.w	r2, r0, r2
 8003a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003a0a:	bf00      	nop
 8003a0c:	370c      	adds	r7, #12
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	e000e100 	.word	0xe000e100
 8003a1c:	00000000 	.word	0x00000000

08003a20 <USART_Config>:
/**
 * Configurando el puerto Serial...
 * Recordar que siempre se debe comenzar con activar la señal de reloj
 * del periferico que se está utilizando.
 */
void USART_Config(USART_Handler_t *ptrUsartHandler) {
 8003a20:	b5b0      	push	{r4, r5, r7, lr}
 8003a22:	b090      	sub	sp, #64	; 0x40
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a28:	b672      	cpsid	i
}
 8003a2a:	bf00      	nop
	__disable_irq();

	/* 1. Activamos la señal de reloj que viene desde el BUS al que pertenece el periferico */
	/* Lo debemos hacer para cada uno de las pisbles opciones que tengamos (USART1, USART2, USART6) */
	/* 1.1 Configuramos el USART1 */
	if (ptrUsartHandler->ptrUSARTx == USART1) {
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a85      	ldr	r2, [pc, #532]	; (8003c48 <USART_Config+0x228>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d106      	bne.n	8003a44 <USART_Config+0x24>
		RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8003a36:	4b85      	ldr	r3, [pc, #532]	; (8003c4c <USART_Config+0x22c>)
 8003a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3a:	4a84      	ldr	r2, [pc, #528]	; (8003c4c <USART_Config+0x22c>)
 8003a3c:	f043 0310 	orr.w	r3, r3, #16
 8003a40:	6453      	str	r3, [r2, #68]	; 0x44
 8003a42:	e016      	b.n	8003a72 <USART_Config+0x52>
	}

	/* 1.2 Configuramos el USART2 */
	else if (ptrUsartHandler->ptrUSARTx == USART2) {
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a81      	ldr	r2, [pc, #516]	; (8003c50 <USART_Config+0x230>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d106      	bne.n	8003a5c <USART_Config+0x3c>
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8003a4e:	4b7f      	ldr	r3, [pc, #508]	; (8003c4c <USART_Config+0x22c>)
 8003a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a52:	4a7e      	ldr	r2, [pc, #504]	; (8003c4c <USART_Config+0x22c>)
 8003a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a58:	6413      	str	r3, [r2, #64]	; 0x40
 8003a5a:	e00a      	b.n	8003a72 <USART_Config+0x52>
	}

	/* 1.3 Configuramos el USART6 */
	else if (ptrUsartHandler->ptrUSARTx == USART6) {
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a7c      	ldr	r2, [pc, #496]	; (8003c54 <USART_Config+0x234>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d105      	bne.n	8003a72 <USART_Config+0x52>
		RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 8003a66:	4b79      	ldr	r3, [pc, #484]	; (8003c4c <USART_Config+0x22c>)
 8003a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a6a:	4a78      	ldr	r2, [pc, #480]	; (8003c4c <USART_Config+0x22c>)
 8003a6c:	f043 0320 	orr.w	r3, r3, #32
 8003a70:	6453      	str	r3, [r2, #68]	; 0x44
	/* Configuracion del Baudrate (registro BRR) */
	/* Configuramos el modo: only TX, only RX, o RXTX */
	/* Por ultimo activamos el modulo USART cuando todos esta correctamente configurado */

	// 2.1 Comienzo por limpiar los registros, para cargar la configuración desde cero
	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2200      	movs	r2, #0
 8003a78:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	611a      	str	r2, [r3, #16]

	// 2.2 Configuracion del Parity:
	// Verificamos si el parity esta activado o no
	// Tenga cuidado, el parity hace parte del tamaño de los datos...
	if (ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE) {
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	7b5b      	ldrb	r3, [r3, #13]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d01d      	beq.n	8003ac6 <USART_Config+0xa6>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PCE; // Activamos la seleccion de paridad
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68da      	ldr	r2, [r3, #12]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a98:	60da      	str	r2, [r3, #12]
		// Verificamos si se ha seleccionado ODD or EVEN
		if (ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_EVEN) {
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	7b5b      	ldrb	r3, [r3, #13]
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d108      	bne.n	8003ab4 <USART_Config+0x94>
			// Es even, entonces cargamos la configuracion adecuada
			// Escriba acá su código
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_PS); //Queremos que sea 0
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68da      	ldr	r2, [r3, #12]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003ab0:	60da      	str	r2, [r3, #12]
 8003ab2:	e010      	b.n	8003ad6 <USART_Config+0xb6>
		} else {
			// Si es "else" significa que la paridad seleccionada es ODD, y cargamos esta configuracion
			// Escriba acá su código
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS; //Queremos que sea 1
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68da      	ldr	r2, [r3, #12]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ac2:	60da      	str	r2, [r3, #12]
 8003ac4:	e007      	b.n	8003ad6 <USART_Config+0xb6>
		}
	} else {
		// Si llegamos aca, es porque no deseamos tener el parity-check
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_PCE); // Activamos la seleccion de paridad
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68da      	ldr	r2, [r3, #12]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ad4:	60da      	str	r2, [r3, #12]

	}

	// 2.3 Configuramos el tamaño del dato
	if (ptrUsartHandler->USART_Config.USART_datasize == USART_DATASIZE_8BIT) {
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	7b1b      	ldrb	r3, [r3, #12]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d108      	bne.n	8003af0 <USART_Config+0xd0>
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_M); // Lo ponemos en 8 bits
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	68da      	ldr	r2, [r3, #12]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003aec:	60da      	str	r2, [r3, #12]
 8003aee:	e007      	b.n	8003b00 <USART_Config+0xe0>
	} else {
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M; // Lo ponemos en 9 bits
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68da      	ldr	r2, [r3, #12]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003afe:	60da      	str	r2, [r3, #12]
	}

	// 2.4 Configuramos los stop bits (SFR USART_CR2)
	switch (ptrUsartHandler->USART_Config.USART_stopbits) {
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	7b9b      	ldrb	r3, [r3, #14]
 8003b04:	2b03      	cmp	r3, #3
 8003b06:	d82f      	bhi.n	8003b68 <USART_Config+0x148>
 8003b08:	a201      	add	r2, pc, #4	; (adr r2, 8003b10 <USART_Config+0xf0>)
 8003b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b0e:	bf00      	nop
 8003b10:	08003b21 	.word	0x08003b21
 8003b14:	08003b33 	.word	0x08003b33
 8003b18:	08003b45 	.word	0x08003b45
 8003b1c:	08003b57 	.word	0x08003b57
	case USART_STOPBIT_1: {
		// Debemoscargar el valor 0b00 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00 < USART_CR2_STOP_Pos);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	691a      	ldr	r2, [r3, #16]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f042 0201 	orr.w	r2, r2, #1
 8003b2e:	611a      	str	r2, [r3, #16]
		break;
 8003b30:	e023      	b.n	8003b7a <USART_Config+0x15a>
	}
	case USART_STOPBIT_0_5: {
		// Debemoscargar el valor 0b01 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b01 < USART_CR2_STOP_Pos);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	691a      	ldr	r2, [r3, #16]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f042 0201 	orr.w	r2, r2, #1
 8003b40:	611a      	str	r2, [r3, #16]
		break;
 8003b42:	e01a      	b.n	8003b7a <USART_Config+0x15a>
	}
	case USART_STOPBIT_2: {
		// Debemoscargar el valor 0b10 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b10 < USART_CR2_STOP_Pos);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	691a      	ldr	r2, [r3, #16]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f042 0201 	orr.w	r2, r2, #1
 8003b52:	611a      	str	r2, [r3, #16]
		break;
 8003b54:	e011      	b.n	8003b7a <USART_Config+0x15a>
	}
	case USART_STOPBIT_1_5: {
		// Debemoscargar el valor 0b11 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b11 < USART_CR2_STOP_Pos);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	691a      	ldr	r2, [r3, #16]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f042 0201 	orr.w	r2, r2, #1
 8003b64:	611a      	str	r2, [r3, #16]
		break;
 8003b66:	e008      	b.n	8003b7a <USART_Config+0x15a>
	}
	default: {
		// En el casopor defecto seleccionamos 1 bit de parada
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00 < USART_CR2_STOP_Pos);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	691a      	ldr	r2, [r3, #16]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f042 0201 	orr.w	r2, r2, #1
 8003b76:	611a      	str	r2, [r3, #16]
		break;
 8003b78:	bf00      	nop
	}
	}
	//Obtenes la frecuencia actual desde el PLL, si estamos en usart2 toca dividirla entre 2
	uint16_t freckClock = getFreqPLL();
 8003b7a:	f7ff fcef 	bl	800355c <getFreqPLL>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	87fb      	strh	r3, [r7, #62]	; 0x3e
	if (ptrUsartHandler->ptrUSARTx == USART2 && freckClock > 50) {
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a32      	ldr	r2, [pc, #200]	; (8003c50 <USART_Config+0x230>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d107      	bne.n	8003b9c <USART_Config+0x17c>
 8003b8c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003b8e:	2b32      	cmp	r3, #50	; 0x32
 8003b90:	d904      	bls.n	8003b9c <USART_Config+0x17c>
		freckClock = getFreqPLL() / 2;
 8003b92:	f7ff fce3 	bl	800355c <getFreqPLL>
 8003b96:	4603      	mov	r3, r0
 8003b98:	085b      	lsrs	r3, r3, #1
 8003b9a:	87fb      	strh	r3, [r7, #62]	; 0x3e
	}
	// 2.5 Configuracion del Baudrate (SFR USART_BRR)
	// Ver tabla de valores (Tabla 73), Frec = 16MHz, overr = 0;
	//Se dejan los comentarios antiguos pero ahora se utilizan formulas
	//matematicas para calcular los resultados automaticamente.
	if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600) {
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d15b      	bne.n	8003c5c <USART_Config+0x23c>
		float div = (freckClock * 1E6) / (16 * 9600);
 8003ba4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7fc fcd4 	bl	8000554 <__aeabi_i2d>
 8003bac:	a324      	add	r3, pc, #144	; (adr r3, 8003c40 <USART_Config+0x220>)
 8003bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bb2:	f7fc fd39 	bl	8000628 <__aeabi_dmul>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	460b      	mov	r3, r1
 8003bba:	4610      	mov	r0, r2
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	f04f 0200 	mov.w	r2, #0
 8003bc2:	4b25      	ldr	r3, [pc, #148]	; (8003c58 <USART_Config+0x238>)
 8003bc4:	f7fc fe5a 	bl	800087c <__aeabi_ddiv>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	460b      	mov	r3, r1
 8003bcc:	4610      	mov	r0, r2
 8003bce:	4619      	mov	r1, r3
 8003bd0:	f7fd f822 	bl	8000c18 <__aeabi_d2f>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	617b      	str	r3, [r7, #20]
		uint16_t mantissa = (int) div;
 8003bd8:	edd7 7a05 	vldr	s15, [r7, #20]
 8003bdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003be0:	ee17 3a90 	vmov	r3, s15
 8003be4:	827b      	strh	r3, [r7, #18]
		uint16_t fraction = (int) round((div - mantissa) * 16);
 8003be6:	8a7b      	ldrh	r3, [r7, #18]
 8003be8:	ee07 3a90 	vmov	s15, r3
 8003bec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bf0:	ed97 7a05 	vldr	s14, [r7, #20]
 8003bf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bf8:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8003bfc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c00:	ee17 0a90 	vmov	r0, s15
 8003c04:	f7fc fcb8 	bl	8000578 <__aeabi_f2d>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	ec43 2b10 	vmov	d0, r2, r3
 8003c10:	f005 fbdc 	bl	80093cc <round>
 8003c14:	ec53 2b10 	vmov	r2, r3, d0
 8003c18:	4610      	mov	r0, r2
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	f7fc ffb4 	bl	8000b88 <__aeabi_d2iz>
 8003c20:	4603      	mov	r3, r0
 8003c22:	823b      	strh	r3, [r7, #16]
		uint16_t result = mantissa << 4 | fraction;
 8003c24:	8a7b      	ldrh	r3, [r7, #18]
 8003c26:	011b      	lsls	r3, r3, #4
 8003c28:	b21a      	sxth	r2, r3
 8003c2a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	b21b      	sxth	r3, r3
 8003c32:	81fb      	strh	r3, [r7, #14]
		ptrUsartHandler->ptrUSARTx->BRR = result;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	89fa      	ldrh	r2, [r7, #14]
 8003c3a:	609a      	str	r2, [r3, #8]
 8003c3c:	e103      	b.n	8003e46 <USART_Config+0x426>
 8003c3e:	bf00      	nop
 8003c40:	00000000 	.word	0x00000000
 8003c44:	412e8480 	.word	0x412e8480
 8003c48:	40011000 	.word	0x40011000
 8003c4c:	40023800 	.word	0x40023800
 8003c50:	40004400 	.word	0x40004400
 8003c54:	40011400 	.word	0x40011400
 8003c58:	4102c000 	.word	0x4102c000
		// Valor a cargar 0x0683
		// Configurando el Baudrate generator para una velocidad de 9600bps

	}

	else if (ptrUsartHandler->USART_Config.USART_baudrate
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d14c      	bne.n	8003cfe <USART_Config+0x2de>
			== USART_BAUDRATE_19200) {
		float div = (freckClock * 1E6) / (16 * 19200);
 8003c64:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7fc fc74 	bl	8000554 <__aeabi_i2d>
 8003c6c:	a39c      	add	r3, pc, #624	; (adr r3, 8003ee0 <USART_Config+0x4c0>)
 8003c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c72:	f7fc fcd9 	bl	8000628 <__aeabi_dmul>
 8003c76:	4602      	mov	r2, r0
 8003c78:	460b      	mov	r3, r1
 8003c7a:	4610      	mov	r0, r2
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	f04f 0200 	mov.w	r2, #0
 8003c82:	4b9b      	ldr	r3, [pc, #620]	; (8003ef0 <USART_Config+0x4d0>)
 8003c84:	f7fc fdfa 	bl	800087c <__aeabi_ddiv>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	4610      	mov	r0, r2
 8003c8e:	4619      	mov	r1, r3
 8003c90:	f7fc ffc2 	bl	8000c18 <__aeabi_d2f>
 8003c94:	4603      	mov	r3, r0
 8003c96:	623b      	str	r3, [r7, #32]
		uint16_t mantissa = (int) div;
 8003c98:	edd7 7a08 	vldr	s15, [r7, #32]
 8003c9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ca0:	ee17 3a90 	vmov	r3, s15
 8003ca4:	83fb      	strh	r3, [r7, #30]
		uint16_t fraction = (int) round((div - mantissa) * 16);
 8003ca6:	8bfb      	ldrh	r3, [r7, #30]
 8003ca8:	ee07 3a90 	vmov	s15, r3
 8003cac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cb0:	ed97 7a08 	vldr	s14, [r7, #32]
 8003cb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cb8:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8003cbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003cc0:	ee17 0a90 	vmov	r0, s15
 8003cc4:	f7fc fc58 	bl	8000578 <__aeabi_f2d>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	460b      	mov	r3, r1
 8003ccc:	ec43 2b10 	vmov	d0, r2, r3
 8003cd0:	f005 fb7c 	bl	80093cc <round>
 8003cd4:	ec53 2b10 	vmov	r2, r3, d0
 8003cd8:	4610      	mov	r0, r2
 8003cda:	4619      	mov	r1, r3
 8003cdc:	f7fc ff54 	bl	8000b88 <__aeabi_d2iz>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	83bb      	strh	r3, [r7, #28]
		uint16_t result = mantissa << 4 | fraction;
 8003ce4:	8bfb      	ldrh	r3, [r7, #30]
 8003ce6:	011b      	lsls	r3, r3, #4
 8003ce8:	b21a      	sxth	r2, r3
 8003cea:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	b21b      	sxth	r3, r3
 8003cf2:	837b      	strh	r3, [r7, #26]
		ptrUsartHandler->ptrUSARTx->BRR = result;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	8b7a      	ldrh	r2, [r7, #26]
 8003cfa:	609a      	str	r2, [r3, #8]
 8003cfc:	e0a3      	b.n	8003e46 <USART_Config+0x426>
		// Mantiza = 52 = 0x34, fraction = 16 * 0.1875 = 1
		// Valor a cargar 0x0341
		// Escriba acá su código y los comentarios que faltan
	}

	else if (ptrUsartHandler->USART_Config.USART_baudrate
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d14c      	bne.n	8003da0 <USART_Config+0x380>
			== USART_BAUDRATE_115200) {
		float div = (freckClock * 1E6) / (16 * 115200);
 8003d06:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7fc fc23 	bl	8000554 <__aeabi_i2d>
 8003d0e:	a374      	add	r3, pc, #464	; (adr r3, 8003ee0 <USART_Config+0x4c0>)
 8003d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d14:	f7fc fc88 	bl	8000628 <__aeabi_dmul>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	4610      	mov	r0, r2
 8003d1e:	4619      	mov	r1, r3
 8003d20:	a371      	add	r3, pc, #452	; (adr r3, 8003ee8 <USART_Config+0x4c8>)
 8003d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d26:	f7fc fda9 	bl	800087c <__aeabi_ddiv>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	4610      	mov	r0, r2
 8003d30:	4619      	mov	r1, r3
 8003d32:	f7fc ff71 	bl	8000c18 <__aeabi_d2f>
 8003d36:	4603      	mov	r3, r0
 8003d38:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint16_t mantissa = (int) div;
 8003d3a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003d3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d42:	ee17 3a90 	vmov	r3, s15
 8003d46:	857b      	strh	r3, [r7, #42]	; 0x2a
		uint16_t fraction = (int) round((div - mantissa) * 16);
 8003d48:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003d4a:	ee07 3a90 	vmov	s15, r3
 8003d4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d52:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003d56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d5a:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8003d5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d62:	ee17 0a90 	vmov	r0, s15
 8003d66:	f7fc fc07 	bl	8000578 <__aeabi_f2d>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	ec43 2b10 	vmov	d0, r2, r3
 8003d72:	f005 fb2b 	bl	80093cc <round>
 8003d76:	ec53 2b10 	vmov	r2, r3, d0
 8003d7a:	4610      	mov	r0, r2
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	f7fc ff03 	bl	8000b88 <__aeabi_d2iz>
 8003d82:	4603      	mov	r3, r0
 8003d84:	853b      	strh	r3, [r7, #40]	; 0x28
		uint16_t result = mantissa << 4 | fraction;
 8003d86:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003d88:	011b      	lsls	r3, r3, #4
 8003d8a:	b21a      	sxth	r2, r3
 8003d8c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8003d90:	4313      	orrs	r3, r2
 8003d92:	b21b      	sxth	r3, r3
 8003d94:	84fb      	strh	r3, [r7, #38]	; 0x26
		ptrUsartHandler->ptrUSARTx->BRR = result;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003d9c:	609a      	str	r2, [r3, #8]
 8003d9e:	e052      	b.n	8003e46 <USART_Config+0x426>
		// Valor a cargar 0x008B
		// Escriba acá su código y los comentarios que faltan
	}

	else {
		float div = (freckClock * 1E6) / (16 * ptrUsartHandler->USART_Config.USART_baudrate);
 8003da0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7fc fbd6 	bl	8000554 <__aeabi_i2d>
 8003da8:	a34d      	add	r3, pc, #308	; (adr r3, 8003ee0 <USART_Config+0x4c0>)
 8003daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dae:	f7fc fc3b 	bl	8000628 <__aeabi_dmul>
 8003db2:	4602      	mov	r2, r0
 8003db4:	460b      	mov	r3, r1
 8003db6:	4614      	mov	r4, r2
 8003db8:	461d      	mov	r5, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	011b      	lsls	r3, r3, #4
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7fc fbb7 	bl	8000534 <__aeabi_ui2d>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	460b      	mov	r3, r1
 8003dca:	4620      	mov	r0, r4
 8003dcc:	4629      	mov	r1, r5
 8003dce:	f7fc fd55 	bl	800087c <__aeabi_ddiv>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	4610      	mov	r0, r2
 8003dd8:	4619      	mov	r1, r3
 8003dda:	f7fc ff1d 	bl	8000c18 <__aeabi_d2f>
 8003dde:	4603      	mov	r3, r0
 8003de0:	63bb      	str	r3, [r7, #56]	; 0x38
		uint16_t mantissa = (int) div;
 8003de2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003de6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003dea:	ee17 3a90 	vmov	r3, s15
 8003dee:	86fb      	strh	r3, [r7, #54]	; 0x36
		uint16_t fraction = (int) round((div - mantissa) * 16);
 8003df0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003df2:	ee07 3a90 	vmov	s15, r3
 8003df6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dfa:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003dfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e02:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8003e06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e0a:	ee17 0a90 	vmov	r0, s15
 8003e0e:	f7fc fbb3 	bl	8000578 <__aeabi_f2d>
 8003e12:	4602      	mov	r2, r0
 8003e14:	460b      	mov	r3, r1
 8003e16:	ec43 2b10 	vmov	d0, r2, r3
 8003e1a:	f005 fad7 	bl	80093cc <round>
 8003e1e:	ec53 2b10 	vmov	r2, r3, d0
 8003e22:	4610      	mov	r0, r2
 8003e24:	4619      	mov	r1, r3
 8003e26:	f7fc feaf 	bl	8000b88 <__aeabi_d2iz>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	86bb      	strh	r3, [r7, #52]	; 0x34
		uint16_t result = mantissa << 4 | fraction;
 8003e2e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003e30:	011b      	lsls	r3, r3, #4
 8003e32:	b21a      	sxth	r2, r3
 8003e34:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	b21b      	sxth	r3, r3
 8003e3c:	867b      	strh	r3, [r7, #50]	; 0x32
		ptrUsartHandler->ptrUSARTx->BRR = result;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8003e44:	609a      	str	r2, [r3, #8]




	// 2.6 Configuramos el modo: TX only, RX only, RXTX, disable
	switch (ptrUsartHandler->USART_Config.USART_mode) {
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	791b      	ldrb	r3, [r3, #4]
 8003e4a:	2b03      	cmp	r3, #3
 8003e4c:	d852      	bhi.n	8003ef4 <USART_Config+0x4d4>
 8003e4e:	a201      	add	r2, pc, #4	; (adr r2, 8003e54 <USART_Config+0x434>)
 8003e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e54:	08003e65 	.word	0x08003e65
 8003e58:	08003e77 	.word	0x08003e77
 8003e5c:	08003e89 	.word	0x08003e89
 8003e60:	08003eab 	.word	0x08003eab
	case USART_MODE_TX: {
		// Activamos la parte del sistema encargada de enviar
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68da      	ldr	r2, [r3, #12]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f042 0208 	orr.w	r2, r2, #8
 8003e72:	60da      	str	r2, [r3, #12]
		break;
 8003e74:	e057      	b.n	8003f26 <USART_Config+0x506>
	}
	case USART_MODE_RX: {
		// Activamos la parte del sistema encargada de recibir
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68da      	ldr	r2, [r3, #12]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f042 0204 	orr.w	r2, r2, #4
 8003e84:	60da      	str	r2, [r3, #12]
		break;
 8003e86:	e04e      	b.n	8003f26 <USART_Config+0x506>
	}
	case USART_MODE_RXTX: {
		// Activamos ambas partes, tanto transmision como recepcion
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68da      	ldr	r2, [r3, #12]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f042 0208 	orr.w	r2, r2, #8
 8003e96:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68da      	ldr	r2, [r3, #12]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f042 0204 	orr.w	r2, r2, #4
 8003ea6:	60da      	str	r2, [r3, #12]
		break;
 8003ea8:	e03d      	b.n	8003f26 <USART_Config+0x506>
	}
	case USART_MODE_DISABLE: {
		// Desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68da      	ldr	r2, [r3, #12]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003eb8:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68da      	ldr	r2, [r3, #12]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f022 0208 	bic.w	r2, r2, #8
 8003ec8:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68da      	ldr	r2, [r3, #12]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f022 0204 	bic.w	r2, r2, #4
 8003ed8:	60da      	str	r2, [r3, #12]
		break;
 8003eda:	e024      	b.n	8003f26 <USART_Config+0x506>
 8003edc:	f3af 8000 	nop.w
 8003ee0:	00000000 	.word	0x00000000
 8003ee4:	412e8480 	.word	0x412e8480
 8003ee8:	00000000 	.word	0x00000000
 8003eec:	413c2000 	.word	0x413c2000
 8003ef0:	4112c000 	.word	0x4112c000
	}

	default: {
		// Actuando por defecto, desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68da      	ldr	r2, [r3, #12]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f02:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68da      	ldr	r2, [r3, #12]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f022 0208 	bic.w	r2, r2, #8
 8003f12:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68da      	ldr	r2, [r3, #12]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f022 0204 	bic.w	r2, r2, #4
 8003f22:	60da      	str	r2, [r3, #12]
		break;
 8003f24:	bf00      	nop
	}
	}

	// 2.7 Activamos el modulo serial.
	if (ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE) {
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	791b      	ldrb	r3, [r3, #4]
 8003f2a:	2b03      	cmp	r3, #3
 8003f2c:	d007      	beq.n	8003f3e <USART_Config+0x51e>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68da      	ldr	r2, [r3, #12]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f3c:	60da      	str	r2, [r3, #12]
	}

	//3.Activamos la interrupcion para el rx USART_RX_Int_Ena y el TX
	ptrUsartHandler->ptrUSARTx->CR1 |=
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68da      	ldr	r2, [r3, #12]
			(ptrUsartHandler->USART_Config.USART_RX_Int_Ena
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	7bdb      	ldrb	r3, [r3, #15]
					<< USART_CR1_RXNEIE_Pos);
 8003f48:	015b      	lsls	r3, r3, #5
 8003f4a:	4619      	mov	r1, r3
	ptrUsartHandler->ptrUSARTx->CR1 |=
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	430a      	orrs	r2, r1
 8003f52:	60da      	str	r2, [r3, #12]

	/* 4.. Activamos el canal del sistema NVIC para que lea la interrupción*/
	if (ptrUsartHandler->ptrUSARTx == USART1) {
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a0f      	ldr	r2, [pc, #60]	; (8003f98 <USART_Config+0x578>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d103      	bne.n	8003f66 <USART_Config+0x546>
		// Activando en NVIC para la interrupción del USART1 USART1_IRQHandler
		NVIC_EnableIRQ(USART1_IRQn);
 8003f5e:	2025      	movs	r0, #37	; 0x25
 8003f60:	f7ff fd3e 	bl	80039e0 <__NVIC_EnableIRQ>
 8003f64:	e012      	b.n	8003f8c <USART_Config+0x56c>
	} else if (ptrUsartHandler->ptrUSARTx == USART2) {
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a0c      	ldr	r2, [pc, #48]	; (8003f9c <USART_Config+0x57c>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d103      	bne.n	8003f78 <USART_Config+0x558>
		// Activando en NVIC para la interrupción del USART2 USART1_IRQHandler
		NVIC_EnableIRQ(USART2_IRQn);
 8003f70:	2026      	movs	r0, #38	; 0x26
 8003f72:	f7ff fd35 	bl	80039e0 <__NVIC_EnableIRQ>
 8003f76:	e009      	b.n	8003f8c <USART_Config+0x56c>
	} else if (ptrUsartHandler->ptrUSARTx == USART6) {
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a08      	ldr	r2, [pc, #32]	; (8003fa0 <USART_Config+0x580>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d103      	bne.n	8003f8a <USART_Config+0x56a>
		// Activando en NVIC para la interrupción del USART6 USART1_IRQHandler
		NVIC_EnableIRQ(USART6_IRQn);
 8003f82:	2047      	movs	r0, #71	; 0x47
 8003f84:	f7ff fd2c 	bl	80039e0 <__NVIC_EnableIRQ>
 8003f88:	e000      	b.n	8003f8c <USART_Config+0x56c>
	}

	else {
		__NOP();
 8003f8a:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8003f8c:	b662      	cpsie	i
}
 8003f8e:	bf00      	nop
	}

	/* 5. Volvemos a activar las interrupciones del sistema */
	__enable_irq();
}
 8003f90:	bf00      	nop
 8003f92:	3740      	adds	r7, #64	; 0x40
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bdb0      	pop	{r4, r5, r7, pc}
 8003f98:	40011000 	.word	0x40011000
 8003f9c:	40004400 	.word	0x40004400
 8003fa0:	40011400 	.word	0x40011400

08003fa4 <USART1Tx_Char>:

/*
 * Se crean este par de funciones en cada usart para el envio de datos
 * donde se utilizan las interrupciones.
 */
void USART1Tx_Char(void) {
 8003fa4:	b480      	push	{r7}
 8003fa6:	af00      	add	r7, sp, #0
	USART1->DR = dataToSend1;
 8003fa8:	4b07      	ldr	r3, [pc, #28]	; (8003fc8 <USART1Tx_Char+0x24>)
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	4b07      	ldr	r3, [pc, #28]	; (8003fcc <USART1Tx_Char+0x28>)
 8003fae:	605a      	str	r2, [r3, #4]
	USART1->CR1 &= ~(USART_CR1_TXEIE);
 8003fb0:	4b06      	ldr	r3, [pc, #24]	; (8003fcc <USART1Tx_Char+0x28>)
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	4a05      	ldr	r2, [pc, #20]	; (8003fcc <USART1Tx_Char+0x28>)
 8003fb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fba:	60d3      	str	r3, [r2, #12]

}
 8003fbc:	bf00      	nop
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	20000608 	.word	0x20000608
 8003fcc:	40011000 	.word	0x40011000

08003fd0 <USART1Tx_String>:

void USART1Tx_String(void) {
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
	char auxData = stringToSend1[posicionActual1];
 8003fd6:	4b12      	ldr	r3, [pc, #72]	; (8004020 <USART1Tx_String+0x50>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a12      	ldr	r2, [pc, #72]	; (8004024 <USART1Tx_String+0x54>)
 8003fdc:	6812      	ldr	r2, [r2, #0]
 8003fde:	4413      	add	r3, r2
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	71fb      	strb	r3, [r7, #7]
	if (auxData != 0) {
 8003fe4:	79fb      	ldrb	r3, [r7, #7]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d008      	beq.n	8003ffc <USART1Tx_String+0x2c>
		USART1->DR = auxData;
 8003fea:	4a0f      	ldr	r2, [pc, #60]	; (8004028 <USART1Tx_String+0x58>)
 8003fec:	79fb      	ldrb	r3, [r7, #7]
 8003fee:	6053      	str	r3, [r2, #4]
		posicionActual1++;
 8003ff0:	4b0c      	ldr	r3, [pc, #48]	; (8004024 <USART1Tx_String+0x54>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	4a0b      	ldr	r2, [pc, #44]	; (8004024 <USART1Tx_String+0x54>)
 8003ff8:	6013      	str	r3, [r2, #0]
		USART1->CR1 &= ~(USART_CR1_TXEIE);
		posicionActual6 = 0;
		flagNewData = 0;
	}

}
 8003ffa:	e00b      	b.n	8004014 <USART1Tx_String+0x44>
		USART1->CR1 &= ~(USART_CR1_TXEIE);
 8003ffc:	4b0a      	ldr	r3, [pc, #40]	; (8004028 <USART1Tx_String+0x58>)
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	4a09      	ldr	r2, [pc, #36]	; (8004028 <USART1Tx_String+0x58>)
 8004002:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004006:	60d3      	str	r3, [r2, #12]
		posicionActual6 = 0;
 8004008:	4b08      	ldr	r3, [pc, #32]	; (800402c <USART1Tx_String+0x5c>)
 800400a:	2200      	movs	r2, #0
 800400c:	601a      	str	r2, [r3, #0]
		flagNewData = 0;
 800400e:	4b08      	ldr	r3, [pc, #32]	; (8004030 <USART1Tx_String+0x60>)
 8004010:	2200      	movs	r2, #0
 8004012:	701a      	strb	r2, [r3, #0]
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr
 8004020:	2000060c 	.word	0x2000060c
 8004024:	20000614 	.word	0x20000614
 8004028:	40011000 	.word	0x40011000
 800402c:	20000624 	.word	0x20000624
 8004030:	20000605 	.word	0x20000605

08004034 <USART6Rx_Callback>:
		posicionActual2 = 0;
		flagNewData = 0;
	}

}
__attribute__((weak)) void USART6Rx_Callback(void) {
 8004034:	b480      	push	{r7}
 8004036:	af00      	add	r7, sp, #0
	/* NOTE : This function should not be modified, when the callback is needed,
	 the USART1_Callback could be implemented in the main file
	 */
	__NOP();
 8004038:	bf00      	nop
}
 800403a:	bf00      	nop
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <USART6Tx_Char>:
/*
 * Se crean este par de funciones en cada usart para el envio de datos
 * donde se utilizan las interrupciones.
 */
void USART6Tx_Char(void) {
 8004044:	b480      	push	{r7}
 8004046:	af00      	add	r7, sp, #0
	USART6->DR = dataToSend6;
 8004048:	4b07      	ldr	r3, [pc, #28]	; (8004068 <USART6Tx_Char+0x24>)
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	4b07      	ldr	r3, [pc, #28]	; (800406c <USART6Tx_Char+0x28>)
 800404e:	605a      	str	r2, [r3, #4]
	USART6->CR1 &= ~(USART_CR1_TXEIE);
 8004050:	4b06      	ldr	r3, [pc, #24]	; (800406c <USART6Tx_Char+0x28>)
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	4a05      	ldr	r2, [pc, #20]	; (800406c <USART6Tx_Char+0x28>)
 8004056:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800405a:	60d3      	str	r3, [r2, #12]

}
 800405c:	bf00      	nop
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	20000618 	.word	0x20000618
 800406c:	40011400 	.word	0x40011400

08004070 <USART6Tx_String>:

void USART6Tx_String(void) {
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
	char auxData = stringToSend6[posicionActual6];//se apagan las interrupciones por transmision
 8004076:	4b12      	ldr	r3, [pc, #72]	; (80040c0 <USART6Tx_String+0x50>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a12      	ldr	r2, [pc, #72]	; (80040c4 <USART6Tx_String+0x54>)
 800407c:	6812      	ldr	r2, [r2, #0]
 800407e:	4413      	add	r3, r2
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	71fb      	strb	r3, [r7, #7]
	if (auxData != 0) {
 8004084:	79fb      	ldrb	r3, [r7, #7]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d008      	beq.n	800409c <USART6Tx_String+0x2c>
		USART6->DR = auxData;
 800408a:	4a0f      	ldr	r2, [pc, #60]	; (80040c8 <USART6Tx_String+0x58>)
 800408c:	79fb      	ldrb	r3, [r7, #7]
 800408e:	6053      	str	r3, [r2, #4]
		posicionActual6++;
 8004090:	4b0c      	ldr	r3, [pc, #48]	; (80040c4 <USART6Tx_String+0x54>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	3301      	adds	r3, #1
 8004096:	4a0b      	ldr	r2, [pc, #44]	; (80040c4 <USART6Tx_String+0x54>)
 8004098:	6013      	str	r3, [r2, #0]
		USART6->CR1 &= ~(USART_CR1_TXEIE); //se apagan las interrupciones por transmision
		posicionActual6 = 0; //Se reinicia el contador global
		flagNewData = 0;	//Se permite el ingreso de nueva data.
	}

}
 800409a:	e00b      	b.n	80040b4 <USART6Tx_String+0x44>
		USART6->CR1 &= ~(USART_CR1_TXEIE); //se apagan las interrupciones por transmision
 800409c:	4b0a      	ldr	r3, [pc, #40]	; (80040c8 <USART6Tx_String+0x58>)
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	4a09      	ldr	r2, [pc, #36]	; (80040c8 <USART6Tx_String+0x58>)
 80040a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040a6:	60d3      	str	r3, [r2, #12]
		posicionActual6 = 0; //Se reinicia el contador global
 80040a8:	4b06      	ldr	r3, [pc, #24]	; (80040c4 <USART6Tx_String+0x54>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	601a      	str	r2, [r3, #0]
		flagNewData = 0;	//Se permite el ingreso de nueva data.
 80040ae:	4b07      	ldr	r3, [pc, #28]	; (80040cc <USART6Tx_String+0x5c>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	701a      	strb	r2, [r3, #0]
}
 80040b4:	bf00      	nop
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr
 80040c0:	2000061c 	.word	0x2000061c
 80040c4:	20000624 	.word	0x20000624
 80040c8:	40011400 	.word	0x40011400
 80040cc:	20000605 	.word	0x20000605

080040d0 <USART1_IRQHandler>:
 * el sistema inmediatamente salta a este lugar en la memoria
 *
 * Además de esto ahora se agrega una parte donde se verifica si la interrupcion es de transmisión
 * donde se envia a la función correspondiente para que se haga el envio
 */
void USART1_IRQHandler(void) {
 80040d0:	b580      	push	{r7, lr}
 80040d2:	af00      	add	r7, sp, #0
	if (USART1->SR & USART_SR_RXNE) {
 80040d4:	4b16      	ldr	r3, [pc, #88]	; (8004130 <USART1_IRQHandler+0x60>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0320 	and.w	r3, r3, #32
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00d      	beq.n	80040fc <USART1_IRQHandler+0x2c>
		/* Limpiamos la bandera que indica que la interrupción se ha generado */
		USART1->SR &= ~USART_SR_RXNE;
 80040e0:	4b13      	ldr	r3, [pc, #76]	; (8004130 <USART1_IRQHandler+0x60>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a12      	ldr	r2, [pc, #72]	; (8004130 <USART1_IRQHandler+0x60>)
 80040e6:	f023 0320 	bic.w	r3, r3, #32
 80040ea:	6013      	str	r3, [r2, #0]
		//Auxiliar
		auxRxData = (uint8_t) USART1->DR;
 80040ec:	4b10      	ldr	r3, [pc, #64]	; (8004130 <USART1_IRQHandler+0x60>)
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	b2da      	uxtb	r2, r3
 80040f2:	4b10      	ldr	r3, [pc, #64]	; (8004134 <USART1_IRQHandler+0x64>)
 80040f4:	701a      	strb	r2, [r3, #0]

		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		USART1Rx_Callback();
 80040f6:	f7fd fb55 	bl	80017a4 <USART1Rx_Callback>
			USART1Tx_String();
		}

	}

}
 80040fa:	e017      	b.n	800412c <USART1_IRQHandler+0x5c>
	else if (USART1->SR & USART_SR_TXE) {
 80040fc:	4b0c      	ldr	r3, [pc, #48]	; (8004130 <USART1_IRQHandler+0x60>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004104:	2b00      	cmp	r3, #0
 8004106:	d011      	beq.n	800412c <USART1_IRQHandler+0x5c>
		USART1->SR &= ~USART_SR_TXE;
 8004108:	4b09      	ldr	r3, [pc, #36]	; (8004130 <USART1_IRQHandler+0x60>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a08      	ldr	r2, [pc, #32]	; (8004130 <USART1_IRQHandler+0x60>)
 800410e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004112:	6013      	str	r3, [r2, #0]
		if (tipo1 == 0) {
 8004114:	4b08      	ldr	r3, [pc, #32]	; (8004138 <USART1_IRQHandler+0x68>)
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	f083 0301 	eor.w	r3, r3, #1
 800411c:	b2db      	uxtb	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d002      	beq.n	8004128 <USART1_IRQHandler+0x58>
			USART1Tx_Char();
 8004122:	f7ff ff3f 	bl	8003fa4 <USART1Tx_Char>
}
 8004126:	e001      	b.n	800412c <USART1_IRQHandler+0x5c>
			USART1Tx_String();
 8004128:	f7ff ff52 	bl	8003fd0 <USART1Tx_String>
}
 800412c:	bf00      	nop
 800412e:	bd80      	pop	{r7, pc}
 8004130:	40011000 	.word	0x40011000
 8004134:	20000604 	.word	0x20000604
 8004138:	20000610 	.word	0x20000610

0800413c <USART6_IRQHandler>:

	}

}

void USART6_IRQHandler(void) {
 800413c:	b580      	push	{r7, lr}
 800413e:	af00      	add	r7, sp, #0
	if (USART6->SR & USART_SR_RXNE) {
 8004140:	4b16      	ldr	r3, [pc, #88]	; (800419c <USART6_IRQHandler+0x60>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0320 	and.w	r3, r3, #32
 8004148:	2b00      	cmp	r3, #0
 800414a:	d00d      	beq.n	8004168 <USART6_IRQHandler+0x2c>
		/* Limpiamos la bandera que indica que la interrupción se ha generado */
		USART6->SR &= ~USART_SR_RXNE;
 800414c:	4b13      	ldr	r3, [pc, #76]	; (800419c <USART6_IRQHandler+0x60>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a12      	ldr	r2, [pc, #72]	; (800419c <USART6_IRQHandler+0x60>)
 8004152:	f023 0320 	bic.w	r3, r3, #32
 8004156:	6013      	str	r3, [r2, #0]
		//Auxiliar
		auxRxData = (uint8_t) USART6->DR;
 8004158:	4b10      	ldr	r3, [pc, #64]	; (800419c <USART6_IRQHandler+0x60>)
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	b2da      	uxtb	r2, r3
 800415e:	4b10      	ldr	r3, [pc, #64]	; (80041a0 <USART6_IRQHandler+0x64>)
 8004160:	701a      	strb	r2, [r3, #0]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		USART6Rx_Callback();
 8004162:	f7ff ff67 	bl	8004034 <USART6Rx_Callback>
			USART6Tx_String();
		}

	}

}
 8004166:	e017      	b.n	8004198 <USART6_IRQHandler+0x5c>
	else if (USART6->SR & USART_SR_TXE) {
 8004168:	4b0c      	ldr	r3, [pc, #48]	; (800419c <USART6_IRQHandler+0x60>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004170:	2b00      	cmp	r3, #0
 8004172:	d011      	beq.n	8004198 <USART6_IRQHandler+0x5c>
		USART6->SR &= ~USART_SR_TXE;
 8004174:	4b09      	ldr	r3, [pc, #36]	; (800419c <USART6_IRQHandler+0x60>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a08      	ldr	r2, [pc, #32]	; (800419c <USART6_IRQHandler+0x60>)
 800417a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800417e:	6013      	str	r3, [r2, #0]
		if (tipo6 == 0) {
 8004180:	4b08      	ldr	r3, [pc, #32]	; (80041a4 <USART6_IRQHandler+0x68>)
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	f083 0301 	eor.w	r3, r3, #1
 8004188:	b2db      	uxtb	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d002      	beq.n	8004194 <USART6_IRQHandler+0x58>
			USART6Tx_Char();
 800418e:	f7ff ff59 	bl	8004044 <USART6Tx_Char>
}
 8004192:	e001      	b.n	8004198 <USART6_IRQHandler+0x5c>
			USART6Tx_String();
 8004194:	f7ff ff6c 	bl	8004070 <USART6Tx_String>
}
 8004198:	bf00      	nop
 800419a:	bd80      	pop	{r7, pc}
 800419c:	40011400 	.word	0x40011400
 80041a0:	20000604 	.word	0x20000604
 80041a4:	20000620 	.word	0x20000620

080041a8 <writeChar>:

/* funcion para escribir un solo char */
int writeChar(USART_Handler_t *ptrUsartHandler, int dataToSend) {
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
	while (!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)) {
 80041b2:	e000      	b.n	80041b6 <writeChar+0xe>
		__NOP();
 80041b4:	bf00      	nop
	while (!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)) {
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d0f7      	beq.n	80041b4 <writeChar+0xc>
	}

	ptrUsartHandler->ptrUSARTx->DR = dataToSend;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	683a      	ldr	r2, [r7, #0]
 80041ca:	605a      	str	r2, [r3, #4]

	return dataToSend;
 80041cc:	683b      	ldr	r3, [r7, #0]
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	370c      	adds	r7, #12
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr

080041da <writeString>:

int readChar(USART_Handler_t *ptrUsartHandler) {
	return ptrUsartHandler->ptrUSARTx->DR;
}

void writeString(USART_Handler_t *ptrUsartHandler, char *string) {
 80041da:	b580      	push	{r7, lr}
 80041dc:	b084      	sub	sp, #16
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
 80041e2:	6039      	str	r1, [r7, #0]
	int i = 0;
 80041e4:	2300      	movs	r3, #0
 80041e6:	60fb      	str	r3, [r7, #12]
	while (string[i] != 0) {
 80041e8:	e00a      	b.n	8004200 <writeString+0x26>
		writeChar(ptrUsartHandler, string[i]);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	683a      	ldr	r2, [r7, #0]
 80041ee:	4413      	add	r3, r2
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	4619      	mov	r1, r3
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f7ff ffd7 	bl	80041a8 <writeChar>
		i++;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	3301      	adds	r3, #1
 80041fe:	60fb      	str	r3, [r7, #12]
	while (string[i] != 0) {
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	683a      	ldr	r2, [r7, #0]
 8004204:	4413      	add	r3, r2
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d1ee      	bne.n	80041ea <writeString+0x10>
	}
}
 800420c:	bf00      	nop
 800420e:	bf00      	nop
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
	...

08004218 <__errno>:
 8004218:	4b01      	ldr	r3, [pc, #4]	; (8004220 <__errno+0x8>)
 800421a:	6818      	ldr	r0, [r3, #0]
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	20000014 	.word	0x20000014

08004224 <__libc_init_array>:
 8004224:	b570      	push	{r4, r5, r6, lr}
 8004226:	4d0d      	ldr	r5, [pc, #52]	; (800425c <__libc_init_array+0x38>)
 8004228:	4c0d      	ldr	r4, [pc, #52]	; (8004260 <__libc_init_array+0x3c>)
 800422a:	1b64      	subs	r4, r4, r5
 800422c:	10a4      	asrs	r4, r4, #2
 800422e:	2600      	movs	r6, #0
 8004230:	42a6      	cmp	r6, r4
 8004232:	d109      	bne.n	8004248 <__libc_init_array+0x24>
 8004234:	4d0b      	ldr	r5, [pc, #44]	; (8004264 <__libc_init_array+0x40>)
 8004236:	4c0c      	ldr	r4, [pc, #48]	; (8004268 <__libc_init_array+0x44>)
 8004238:	f005 f90e 	bl	8009458 <_init>
 800423c:	1b64      	subs	r4, r4, r5
 800423e:	10a4      	asrs	r4, r4, #2
 8004240:	2600      	movs	r6, #0
 8004242:	42a6      	cmp	r6, r4
 8004244:	d105      	bne.n	8004252 <__libc_init_array+0x2e>
 8004246:	bd70      	pop	{r4, r5, r6, pc}
 8004248:	f855 3b04 	ldr.w	r3, [r5], #4
 800424c:	4798      	blx	r3
 800424e:	3601      	adds	r6, #1
 8004250:	e7ee      	b.n	8004230 <__libc_init_array+0xc>
 8004252:	f855 3b04 	ldr.w	r3, [r5], #4
 8004256:	4798      	blx	r3
 8004258:	3601      	adds	r6, #1
 800425a:	e7f2      	b.n	8004242 <__libc_init_array+0x1e>
 800425c:	080099fc 	.word	0x080099fc
 8004260:	080099fc 	.word	0x080099fc
 8004264:	080099fc 	.word	0x080099fc
 8004268:	08009a00 	.word	0x08009a00

0800426c <memset>:
 800426c:	4402      	add	r2, r0
 800426e:	4603      	mov	r3, r0
 8004270:	4293      	cmp	r3, r2
 8004272:	d100      	bne.n	8004276 <memset+0xa>
 8004274:	4770      	bx	lr
 8004276:	f803 1b01 	strb.w	r1, [r3], #1
 800427a:	e7f9      	b.n	8004270 <memset+0x4>

0800427c <__cvt>:
 800427c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004280:	ec55 4b10 	vmov	r4, r5, d0
 8004284:	2d00      	cmp	r5, #0
 8004286:	460e      	mov	r6, r1
 8004288:	4619      	mov	r1, r3
 800428a:	462b      	mov	r3, r5
 800428c:	bfbb      	ittet	lt
 800428e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004292:	461d      	movlt	r5, r3
 8004294:	2300      	movge	r3, #0
 8004296:	232d      	movlt	r3, #45	; 0x2d
 8004298:	700b      	strb	r3, [r1, #0]
 800429a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800429c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80042a0:	4691      	mov	r9, r2
 80042a2:	f023 0820 	bic.w	r8, r3, #32
 80042a6:	bfbc      	itt	lt
 80042a8:	4622      	movlt	r2, r4
 80042aa:	4614      	movlt	r4, r2
 80042ac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80042b0:	d005      	beq.n	80042be <__cvt+0x42>
 80042b2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80042b6:	d100      	bne.n	80042ba <__cvt+0x3e>
 80042b8:	3601      	adds	r6, #1
 80042ba:	2102      	movs	r1, #2
 80042bc:	e000      	b.n	80042c0 <__cvt+0x44>
 80042be:	2103      	movs	r1, #3
 80042c0:	ab03      	add	r3, sp, #12
 80042c2:	9301      	str	r3, [sp, #4]
 80042c4:	ab02      	add	r3, sp, #8
 80042c6:	9300      	str	r3, [sp, #0]
 80042c8:	ec45 4b10 	vmov	d0, r4, r5
 80042cc:	4653      	mov	r3, sl
 80042ce:	4632      	mov	r2, r6
 80042d0:	f001 fe42 	bl	8005f58 <_dtoa_r>
 80042d4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80042d8:	4607      	mov	r7, r0
 80042da:	d102      	bne.n	80042e2 <__cvt+0x66>
 80042dc:	f019 0f01 	tst.w	r9, #1
 80042e0:	d022      	beq.n	8004328 <__cvt+0xac>
 80042e2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80042e6:	eb07 0906 	add.w	r9, r7, r6
 80042ea:	d110      	bne.n	800430e <__cvt+0x92>
 80042ec:	783b      	ldrb	r3, [r7, #0]
 80042ee:	2b30      	cmp	r3, #48	; 0x30
 80042f0:	d10a      	bne.n	8004308 <__cvt+0x8c>
 80042f2:	2200      	movs	r2, #0
 80042f4:	2300      	movs	r3, #0
 80042f6:	4620      	mov	r0, r4
 80042f8:	4629      	mov	r1, r5
 80042fa:	f7fc fbfd 	bl	8000af8 <__aeabi_dcmpeq>
 80042fe:	b918      	cbnz	r0, 8004308 <__cvt+0x8c>
 8004300:	f1c6 0601 	rsb	r6, r6, #1
 8004304:	f8ca 6000 	str.w	r6, [sl]
 8004308:	f8da 3000 	ldr.w	r3, [sl]
 800430c:	4499      	add	r9, r3
 800430e:	2200      	movs	r2, #0
 8004310:	2300      	movs	r3, #0
 8004312:	4620      	mov	r0, r4
 8004314:	4629      	mov	r1, r5
 8004316:	f7fc fbef 	bl	8000af8 <__aeabi_dcmpeq>
 800431a:	b108      	cbz	r0, 8004320 <__cvt+0xa4>
 800431c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004320:	2230      	movs	r2, #48	; 0x30
 8004322:	9b03      	ldr	r3, [sp, #12]
 8004324:	454b      	cmp	r3, r9
 8004326:	d307      	bcc.n	8004338 <__cvt+0xbc>
 8004328:	9b03      	ldr	r3, [sp, #12]
 800432a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800432c:	1bdb      	subs	r3, r3, r7
 800432e:	4638      	mov	r0, r7
 8004330:	6013      	str	r3, [r2, #0]
 8004332:	b004      	add	sp, #16
 8004334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004338:	1c59      	adds	r1, r3, #1
 800433a:	9103      	str	r1, [sp, #12]
 800433c:	701a      	strb	r2, [r3, #0]
 800433e:	e7f0      	b.n	8004322 <__cvt+0xa6>

08004340 <__exponent>:
 8004340:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004342:	4603      	mov	r3, r0
 8004344:	2900      	cmp	r1, #0
 8004346:	bfb8      	it	lt
 8004348:	4249      	neglt	r1, r1
 800434a:	f803 2b02 	strb.w	r2, [r3], #2
 800434e:	bfb4      	ite	lt
 8004350:	222d      	movlt	r2, #45	; 0x2d
 8004352:	222b      	movge	r2, #43	; 0x2b
 8004354:	2909      	cmp	r1, #9
 8004356:	7042      	strb	r2, [r0, #1]
 8004358:	dd2a      	ble.n	80043b0 <__exponent+0x70>
 800435a:	f10d 0407 	add.w	r4, sp, #7
 800435e:	46a4      	mov	ip, r4
 8004360:	270a      	movs	r7, #10
 8004362:	46a6      	mov	lr, r4
 8004364:	460a      	mov	r2, r1
 8004366:	fb91 f6f7 	sdiv	r6, r1, r7
 800436a:	fb07 1516 	mls	r5, r7, r6, r1
 800436e:	3530      	adds	r5, #48	; 0x30
 8004370:	2a63      	cmp	r2, #99	; 0x63
 8004372:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8004376:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800437a:	4631      	mov	r1, r6
 800437c:	dcf1      	bgt.n	8004362 <__exponent+0x22>
 800437e:	3130      	adds	r1, #48	; 0x30
 8004380:	f1ae 0502 	sub.w	r5, lr, #2
 8004384:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004388:	1c44      	adds	r4, r0, #1
 800438a:	4629      	mov	r1, r5
 800438c:	4561      	cmp	r1, ip
 800438e:	d30a      	bcc.n	80043a6 <__exponent+0x66>
 8004390:	f10d 0209 	add.w	r2, sp, #9
 8004394:	eba2 020e 	sub.w	r2, r2, lr
 8004398:	4565      	cmp	r5, ip
 800439a:	bf88      	it	hi
 800439c:	2200      	movhi	r2, #0
 800439e:	4413      	add	r3, r2
 80043a0:	1a18      	subs	r0, r3, r0
 80043a2:	b003      	add	sp, #12
 80043a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80043aa:	f804 2f01 	strb.w	r2, [r4, #1]!
 80043ae:	e7ed      	b.n	800438c <__exponent+0x4c>
 80043b0:	2330      	movs	r3, #48	; 0x30
 80043b2:	3130      	adds	r1, #48	; 0x30
 80043b4:	7083      	strb	r3, [r0, #2]
 80043b6:	70c1      	strb	r1, [r0, #3]
 80043b8:	1d03      	adds	r3, r0, #4
 80043ba:	e7f1      	b.n	80043a0 <__exponent+0x60>

080043bc <_printf_float>:
 80043bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043c0:	ed2d 8b02 	vpush	{d8}
 80043c4:	b08d      	sub	sp, #52	; 0x34
 80043c6:	460c      	mov	r4, r1
 80043c8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80043cc:	4616      	mov	r6, r2
 80043ce:	461f      	mov	r7, r3
 80043d0:	4605      	mov	r5, r0
 80043d2:	f002 ff1f 	bl	8007214 <_localeconv_r>
 80043d6:	f8d0 a000 	ldr.w	sl, [r0]
 80043da:	4650      	mov	r0, sl
 80043dc:	f7fb ff0a 	bl	80001f4 <strlen>
 80043e0:	2300      	movs	r3, #0
 80043e2:	930a      	str	r3, [sp, #40]	; 0x28
 80043e4:	6823      	ldr	r3, [r4, #0]
 80043e6:	9305      	str	r3, [sp, #20]
 80043e8:	f8d8 3000 	ldr.w	r3, [r8]
 80043ec:	f894 b018 	ldrb.w	fp, [r4, #24]
 80043f0:	3307      	adds	r3, #7
 80043f2:	f023 0307 	bic.w	r3, r3, #7
 80043f6:	f103 0208 	add.w	r2, r3, #8
 80043fa:	f8c8 2000 	str.w	r2, [r8]
 80043fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004402:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004406:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800440a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800440e:	9307      	str	r3, [sp, #28]
 8004410:	f8cd 8018 	str.w	r8, [sp, #24]
 8004414:	ee08 0a10 	vmov	s16, r0
 8004418:	4b9f      	ldr	r3, [pc, #636]	; (8004698 <_printf_float+0x2dc>)
 800441a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800441e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004422:	f7fc fb9b 	bl	8000b5c <__aeabi_dcmpun>
 8004426:	bb88      	cbnz	r0, 800448c <_printf_float+0xd0>
 8004428:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800442c:	4b9a      	ldr	r3, [pc, #616]	; (8004698 <_printf_float+0x2dc>)
 800442e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004432:	f7fc fb75 	bl	8000b20 <__aeabi_dcmple>
 8004436:	bb48      	cbnz	r0, 800448c <_printf_float+0xd0>
 8004438:	2200      	movs	r2, #0
 800443a:	2300      	movs	r3, #0
 800443c:	4640      	mov	r0, r8
 800443e:	4649      	mov	r1, r9
 8004440:	f7fc fb64 	bl	8000b0c <__aeabi_dcmplt>
 8004444:	b110      	cbz	r0, 800444c <_printf_float+0x90>
 8004446:	232d      	movs	r3, #45	; 0x2d
 8004448:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800444c:	4b93      	ldr	r3, [pc, #588]	; (800469c <_printf_float+0x2e0>)
 800444e:	4894      	ldr	r0, [pc, #592]	; (80046a0 <_printf_float+0x2e4>)
 8004450:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004454:	bf94      	ite	ls
 8004456:	4698      	movls	r8, r3
 8004458:	4680      	movhi	r8, r0
 800445a:	2303      	movs	r3, #3
 800445c:	6123      	str	r3, [r4, #16]
 800445e:	9b05      	ldr	r3, [sp, #20]
 8004460:	f023 0204 	bic.w	r2, r3, #4
 8004464:	6022      	str	r2, [r4, #0]
 8004466:	f04f 0900 	mov.w	r9, #0
 800446a:	9700      	str	r7, [sp, #0]
 800446c:	4633      	mov	r3, r6
 800446e:	aa0b      	add	r2, sp, #44	; 0x2c
 8004470:	4621      	mov	r1, r4
 8004472:	4628      	mov	r0, r5
 8004474:	f000 f9d8 	bl	8004828 <_printf_common>
 8004478:	3001      	adds	r0, #1
 800447a:	f040 8090 	bne.w	800459e <_printf_float+0x1e2>
 800447e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004482:	b00d      	add	sp, #52	; 0x34
 8004484:	ecbd 8b02 	vpop	{d8}
 8004488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800448c:	4642      	mov	r2, r8
 800448e:	464b      	mov	r3, r9
 8004490:	4640      	mov	r0, r8
 8004492:	4649      	mov	r1, r9
 8004494:	f7fc fb62 	bl	8000b5c <__aeabi_dcmpun>
 8004498:	b140      	cbz	r0, 80044ac <_printf_float+0xf0>
 800449a:	464b      	mov	r3, r9
 800449c:	2b00      	cmp	r3, #0
 800449e:	bfbc      	itt	lt
 80044a0:	232d      	movlt	r3, #45	; 0x2d
 80044a2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80044a6:	487f      	ldr	r0, [pc, #508]	; (80046a4 <_printf_float+0x2e8>)
 80044a8:	4b7f      	ldr	r3, [pc, #508]	; (80046a8 <_printf_float+0x2ec>)
 80044aa:	e7d1      	b.n	8004450 <_printf_float+0x94>
 80044ac:	6863      	ldr	r3, [r4, #4]
 80044ae:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80044b2:	9206      	str	r2, [sp, #24]
 80044b4:	1c5a      	adds	r2, r3, #1
 80044b6:	d13f      	bne.n	8004538 <_printf_float+0x17c>
 80044b8:	2306      	movs	r3, #6
 80044ba:	6063      	str	r3, [r4, #4]
 80044bc:	9b05      	ldr	r3, [sp, #20]
 80044be:	6861      	ldr	r1, [r4, #4]
 80044c0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80044c4:	2300      	movs	r3, #0
 80044c6:	9303      	str	r3, [sp, #12]
 80044c8:	ab0a      	add	r3, sp, #40	; 0x28
 80044ca:	e9cd b301 	strd	fp, r3, [sp, #4]
 80044ce:	ab09      	add	r3, sp, #36	; 0x24
 80044d0:	ec49 8b10 	vmov	d0, r8, r9
 80044d4:	9300      	str	r3, [sp, #0]
 80044d6:	6022      	str	r2, [r4, #0]
 80044d8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80044dc:	4628      	mov	r0, r5
 80044de:	f7ff fecd 	bl	800427c <__cvt>
 80044e2:	9b06      	ldr	r3, [sp, #24]
 80044e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80044e6:	2b47      	cmp	r3, #71	; 0x47
 80044e8:	4680      	mov	r8, r0
 80044ea:	d108      	bne.n	80044fe <_printf_float+0x142>
 80044ec:	1cc8      	adds	r0, r1, #3
 80044ee:	db02      	blt.n	80044f6 <_printf_float+0x13a>
 80044f0:	6863      	ldr	r3, [r4, #4]
 80044f2:	4299      	cmp	r1, r3
 80044f4:	dd41      	ble.n	800457a <_printf_float+0x1be>
 80044f6:	f1ab 0b02 	sub.w	fp, fp, #2
 80044fa:	fa5f fb8b 	uxtb.w	fp, fp
 80044fe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004502:	d820      	bhi.n	8004546 <_printf_float+0x18a>
 8004504:	3901      	subs	r1, #1
 8004506:	465a      	mov	r2, fp
 8004508:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800450c:	9109      	str	r1, [sp, #36]	; 0x24
 800450e:	f7ff ff17 	bl	8004340 <__exponent>
 8004512:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004514:	1813      	adds	r3, r2, r0
 8004516:	2a01      	cmp	r2, #1
 8004518:	4681      	mov	r9, r0
 800451a:	6123      	str	r3, [r4, #16]
 800451c:	dc02      	bgt.n	8004524 <_printf_float+0x168>
 800451e:	6822      	ldr	r2, [r4, #0]
 8004520:	07d2      	lsls	r2, r2, #31
 8004522:	d501      	bpl.n	8004528 <_printf_float+0x16c>
 8004524:	3301      	adds	r3, #1
 8004526:	6123      	str	r3, [r4, #16]
 8004528:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800452c:	2b00      	cmp	r3, #0
 800452e:	d09c      	beq.n	800446a <_printf_float+0xae>
 8004530:	232d      	movs	r3, #45	; 0x2d
 8004532:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004536:	e798      	b.n	800446a <_printf_float+0xae>
 8004538:	9a06      	ldr	r2, [sp, #24]
 800453a:	2a47      	cmp	r2, #71	; 0x47
 800453c:	d1be      	bne.n	80044bc <_printf_float+0x100>
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1bc      	bne.n	80044bc <_printf_float+0x100>
 8004542:	2301      	movs	r3, #1
 8004544:	e7b9      	b.n	80044ba <_printf_float+0xfe>
 8004546:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800454a:	d118      	bne.n	800457e <_printf_float+0x1c2>
 800454c:	2900      	cmp	r1, #0
 800454e:	6863      	ldr	r3, [r4, #4]
 8004550:	dd0b      	ble.n	800456a <_printf_float+0x1ae>
 8004552:	6121      	str	r1, [r4, #16]
 8004554:	b913      	cbnz	r3, 800455c <_printf_float+0x1a0>
 8004556:	6822      	ldr	r2, [r4, #0]
 8004558:	07d0      	lsls	r0, r2, #31
 800455a:	d502      	bpl.n	8004562 <_printf_float+0x1a6>
 800455c:	3301      	adds	r3, #1
 800455e:	440b      	add	r3, r1
 8004560:	6123      	str	r3, [r4, #16]
 8004562:	65a1      	str	r1, [r4, #88]	; 0x58
 8004564:	f04f 0900 	mov.w	r9, #0
 8004568:	e7de      	b.n	8004528 <_printf_float+0x16c>
 800456a:	b913      	cbnz	r3, 8004572 <_printf_float+0x1b6>
 800456c:	6822      	ldr	r2, [r4, #0]
 800456e:	07d2      	lsls	r2, r2, #31
 8004570:	d501      	bpl.n	8004576 <_printf_float+0x1ba>
 8004572:	3302      	adds	r3, #2
 8004574:	e7f4      	b.n	8004560 <_printf_float+0x1a4>
 8004576:	2301      	movs	r3, #1
 8004578:	e7f2      	b.n	8004560 <_printf_float+0x1a4>
 800457a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800457e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004580:	4299      	cmp	r1, r3
 8004582:	db05      	blt.n	8004590 <_printf_float+0x1d4>
 8004584:	6823      	ldr	r3, [r4, #0]
 8004586:	6121      	str	r1, [r4, #16]
 8004588:	07d8      	lsls	r0, r3, #31
 800458a:	d5ea      	bpl.n	8004562 <_printf_float+0x1a6>
 800458c:	1c4b      	adds	r3, r1, #1
 800458e:	e7e7      	b.n	8004560 <_printf_float+0x1a4>
 8004590:	2900      	cmp	r1, #0
 8004592:	bfd4      	ite	le
 8004594:	f1c1 0202 	rsble	r2, r1, #2
 8004598:	2201      	movgt	r2, #1
 800459a:	4413      	add	r3, r2
 800459c:	e7e0      	b.n	8004560 <_printf_float+0x1a4>
 800459e:	6823      	ldr	r3, [r4, #0]
 80045a0:	055a      	lsls	r2, r3, #21
 80045a2:	d407      	bmi.n	80045b4 <_printf_float+0x1f8>
 80045a4:	6923      	ldr	r3, [r4, #16]
 80045a6:	4642      	mov	r2, r8
 80045a8:	4631      	mov	r1, r6
 80045aa:	4628      	mov	r0, r5
 80045ac:	47b8      	blx	r7
 80045ae:	3001      	adds	r0, #1
 80045b0:	d12c      	bne.n	800460c <_printf_float+0x250>
 80045b2:	e764      	b.n	800447e <_printf_float+0xc2>
 80045b4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80045b8:	f240 80e0 	bls.w	800477c <_printf_float+0x3c0>
 80045bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80045c0:	2200      	movs	r2, #0
 80045c2:	2300      	movs	r3, #0
 80045c4:	f7fc fa98 	bl	8000af8 <__aeabi_dcmpeq>
 80045c8:	2800      	cmp	r0, #0
 80045ca:	d034      	beq.n	8004636 <_printf_float+0x27a>
 80045cc:	4a37      	ldr	r2, [pc, #220]	; (80046ac <_printf_float+0x2f0>)
 80045ce:	2301      	movs	r3, #1
 80045d0:	4631      	mov	r1, r6
 80045d2:	4628      	mov	r0, r5
 80045d4:	47b8      	blx	r7
 80045d6:	3001      	adds	r0, #1
 80045d8:	f43f af51 	beq.w	800447e <_printf_float+0xc2>
 80045dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80045e0:	429a      	cmp	r2, r3
 80045e2:	db02      	blt.n	80045ea <_printf_float+0x22e>
 80045e4:	6823      	ldr	r3, [r4, #0]
 80045e6:	07d8      	lsls	r0, r3, #31
 80045e8:	d510      	bpl.n	800460c <_printf_float+0x250>
 80045ea:	ee18 3a10 	vmov	r3, s16
 80045ee:	4652      	mov	r2, sl
 80045f0:	4631      	mov	r1, r6
 80045f2:	4628      	mov	r0, r5
 80045f4:	47b8      	blx	r7
 80045f6:	3001      	adds	r0, #1
 80045f8:	f43f af41 	beq.w	800447e <_printf_float+0xc2>
 80045fc:	f04f 0800 	mov.w	r8, #0
 8004600:	f104 091a 	add.w	r9, r4, #26
 8004604:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004606:	3b01      	subs	r3, #1
 8004608:	4543      	cmp	r3, r8
 800460a:	dc09      	bgt.n	8004620 <_printf_float+0x264>
 800460c:	6823      	ldr	r3, [r4, #0]
 800460e:	079b      	lsls	r3, r3, #30
 8004610:	f100 8105 	bmi.w	800481e <_printf_float+0x462>
 8004614:	68e0      	ldr	r0, [r4, #12]
 8004616:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004618:	4298      	cmp	r0, r3
 800461a:	bfb8      	it	lt
 800461c:	4618      	movlt	r0, r3
 800461e:	e730      	b.n	8004482 <_printf_float+0xc6>
 8004620:	2301      	movs	r3, #1
 8004622:	464a      	mov	r2, r9
 8004624:	4631      	mov	r1, r6
 8004626:	4628      	mov	r0, r5
 8004628:	47b8      	blx	r7
 800462a:	3001      	adds	r0, #1
 800462c:	f43f af27 	beq.w	800447e <_printf_float+0xc2>
 8004630:	f108 0801 	add.w	r8, r8, #1
 8004634:	e7e6      	b.n	8004604 <_printf_float+0x248>
 8004636:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004638:	2b00      	cmp	r3, #0
 800463a:	dc39      	bgt.n	80046b0 <_printf_float+0x2f4>
 800463c:	4a1b      	ldr	r2, [pc, #108]	; (80046ac <_printf_float+0x2f0>)
 800463e:	2301      	movs	r3, #1
 8004640:	4631      	mov	r1, r6
 8004642:	4628      	mov	r0, r5
 8004644:	47b8      	blx	r7
 8004646:	3001      	adds	r0, #1
 8004648:	f43f af19 	beq.w	800447e <_printf_float+0xc2>
 800464c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004650:	4313      	orrs	r3, r2
 8004652:	d102      	bne.n	800465a <_printf_float+0x29e>
 8004654:	6823      	ldr	r3, [r4, #0]
 8004656:	07d9      	lsls	r1, r3, #31
 8004658:	d5d8      	bpl.n	800460c <_printf_float+0x250>
 800465a:	ee18 3a10 	vmov	r3, s16
 800465e:	4652      	mov	r2, sl
 8004660:	4631      	mov	r1, r6
 8004662:	4628      	mov	r0, r5
 8004664:	47b8      	blx	r7
 8004666:	3001      	adds	r0, #1
 8004668:	f43f af09 	beq.w	800447e <_printf_float+0xc2>
 800466c:	f04f 0900 	mov.w	r9, #0
 8004670:	f104 0a1a 	add.w	sl, r4, #26
 8004674:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004676:	425b      	negs	r3, r3
 8004678:	454b      	cmp	r3, r9
 800467a:	dc01      	bgt.n	8004680 <_printf_float+0x2c4>
 800467c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800467e:	e792      	b.n	80045a6 <_printf_float+0x1ea>
 8004680:	2301      	movs	r3, #1
 8004682:	4652      	mov	r2, sl
 8004684:	4631      	mov	r1, r6
 8004686:	4628      	mov	r0, r5
 8004688:	47b8      	blx	r7
 800468a:	3001      	adds	r0, #1
 800468c:	f43f aef7 	beq.w	800447e <_printf_float+0xc2>
 8004690:	f109 0901 	add.w	r9, r9, #1
 8004694:	e7ee      	b.n	8004674 <_printf_float+0x2b8>
 8004696:	bf00      	nop
 8004698:	7fefffff 	.word	0x7fefffff
 800469c:	08009544 	.word	0x08009544
 80046a0:	08009548 	.word	0x08009548
 80046a4:	08009550 	.word	0x08009550
 80046a8:	0800954c 	.word	0x0800954c
 80046ac:	08009949 	.word	0x08009949
 80046b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80046b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80046b4:	429a      	cmp	r2, r3
 80046b6:	bfa8      	it	ge
 80046b8:	461a      	movge	r2, r3
 80046ba:	2a00      	cmp	r2, #0
 80046bc:	4691      	mov	r9, r2
 80046be:	dc37      	bgt.n	8004730 <_printf_float+0x374>
 80046c0:	f04f 0b00 	mov.w	fp, #0
 80046c4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80046c8:	f104 021a 	add.w	r2, r4, #26
 80046cc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80046ce:	9305      	str	r3, [sp, #20]
 80046d0:	eba3 0309 	sub.w	r3, r3, r9
 80046d4:	455b      	cmp	r3, fp
 80046d6:	dc33      	bgt.n	8004740 <_printf_float+0x384>
 80046d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80046dc:	429a      	cmp	r2, r3
 80046de:	db3b      	blt.n	8004758 <_printf_float+0x39c>
 80046e0:	6823      	ldr	r3, [r4, #0]
 80046e2:	07da      	lsls	r2, r3, #31
 80046e4:	d438      	bmi.n	8004758 <_printf_float+0x39c>
 80046e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046e8:	9a05      	ldr	r2, [sp, #20]
 80046ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80046ec:	1a9a      	subs	r2, r3, r2
 80046ee:	eba3 0901 	sub.w	r9, r3, r1
 80046f2:	4591      	cmp	r9, r2
 80046f4:	bfa8      	it	ge
 80046f6:	4691      	movge	r9, r2
 80046f8:	f1b9 0f00 	cmp.w	r9, #0
 80046fc:	dc35      	bgt.n	800476a <_printf_float+0x3ae>
 80046fe:	f04f 0800 	mov.w	r8, #0
 8004702:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004706:	f104 0a1a 	add.w	sl, r4, #26
 800470a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800470e:	1a9b      	subs	r3, r3, r2
 8004710:	eba3 0309 	sub.w	r3, r3, r9
 8004714:	4543      	cmp	r3, r8
 8004716:	f77f af79 	ble.w	800460c <_printf_float+0x250>
 800471a:	2301      	movs	r3, #1
 800471c:	4652      	mov	r2, sl
 800471e:	4631      	mov	r1, r6
 8004720:	4628      	mov	r0, r5
 8004722:	47b8      	blx	r7
 8004724:	3001      	adds	r0, #1
 8004726:	f43f aeaa 	beq.w	800447e <_printf_float+0xc2>
 800472a:	f108 0801 	add.w	r8, r8, #1
 800472e:	e7ec      	b.n	800470a <_printf_float+0x34e>
 8004730:	4613      	mov	r3, r2
 8004732:	4631      	mov	r1, r6
 8004734:	4642      	mov	r2, r8
 8004736:	4628      	mov	r0, r5
 8004738:	47b8      	blx	r7
 800473a:	3001      	adds	r0, #1
 800473c:	d1c0      	bne.n	80046c0 <_printf_float+0x304>
 800473e:	e69e      	b.n	800447e <_printf_float+0xc2>
 8004740:	2301      	movs	r3, #1
 8004742:	4631      	mov	r1, r6
 8004744:	4628      	mov	r0, r5
 8004746:	9205      	str	r2, [sp, #20]
 8004748:	47b8      	blx	r7
 800474a:	3001      	adds	r0, #1
 800474c:	f43f ae97 	beq.w	800447e <_printf_float+0xc2>
 8004750:	9a05      	ldr	r2, [sp, #20]
 8004752:	f10b 0b01 	add.w	fp, fp, #1
 8004756:	e7b9      	b.n	80046cc <_printf_float+0x310>
 8004758:	ee18 3a10 	vmov	r3, s16
 800475c:	4652      	mov	r2, sl
 800475e:	4631      	mov	r1, r6
 8004760:	4628      	mov	r0, r5
 8004762:	47b8      	blx	r7
 8004764:	3001      	adds	r0, #1
 8004766:	d1be      	bne.n	80046e6 <_printf_float+0x32a>
 8004768:	e689      	b.n	800447e <_printf_float+0xc2>
 800476a:	9a05      	ldr	r2, [sp, #20]
 800476c:	464b      	mov	r3, r9
 800476e:	4442      	add	r2, r8
 8004770:	4631      	mov	r1, r6
 8004772:	4628      	mov	r0, r5
 8004774:	47b8      	blx	r7
 8004776:	3001      	adds	r0, #1
 8004778:	d1c1      	bne.n	80046fe <_printf_float+0x342>
 800477a:	e680      	b.n	800447e <_printf_float+0xc2>
 800477c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800477e:	2a01      	cmp	r2, #1
 8004780:	dc01      	bgt.n	8004786 <_printf_float+0x3ca>
 8004782:	07db      	lsls	r3, r3, #31
 8004784:	d538      	bpl.n	80047f8 <_printf_float+0x43c>
 8004786:	2301      	movs	r3, #1
 8004788:	4642      	mov	r2, r8
 800478a:	4631      	mov	r1, r6
 800478c:	4628      	mov	r0, r5
 800478e:	47b8      	blx	r7
 8004790:	3001      	adds	r0, #1
 8004792:	f43f ae74 	beq.w	800447e <_printf_float+0xc2>
 8004796:	ee18 3a10 	vmov	r3, s16
 800479a:	4652      	mov	r2, sl
 800479c:	4631      	mov	r1, r6
 800479e:	4628      	mov	r0, r5
 80047a0:	47b8      	blx	r7
 80047a2:	3001      	adds	r0, #1
 80047a4:	f43f ae6b 	beq.w	800447e <_printf_float+0xc2>
 80047a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80047ac:	2200      	movs	r2, #0
 80047ae:	2300      	movs	r3, #0
 80047b0:	f7fc f9a2 	bl	8000af8 <__aeabi_dcmpeq>
 80047b4:	b9d8      	cbnz	r0, 80047ee <_printf_float+0x432>
 80047b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047b8:	f108 0201 	add.w	r2, r8, #1
 80047bc:	3b01      	subs	r3, #1
 80047be:	4631      	mov	r1, r6
 80047c0:	4628      	mov	r0, r5
 80047c2:	47b8      	blx	r7
 80047c4:	3001      	adds	r0, #1
 80047c6:	d10e      	bne.n	80047e6 <_printf_float+0x42a>
 80047c8:	e659      	b.n	800447e <_printf_float+0xc2>
 80047ca:	2301      	movs	r3, #1
 80047cc:	4652      	mov	r2, sl
 80047ce:	4631      	mov	r1, r6
 80047d0:	4628      	mov	r0, r5
 80047d2:	47b8      	blx	r7
 80047d4:	3001      	adds	r0, #1
 80047d6:	f43f ae52 	beq.w	800447e <_printf_float+0xc2>
 80047da:	f108 0801 	add.w	r8, r8, #1
 80047de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047e0:	3b01      	subs	r3, #1
 80047e2:	4543      	cmp	r3, r8
 80047e4:	dcf1      	bgt.n	80047ca <_printf_float+0x40e>
 80047e6:	464b      	mov	r3, r9
 80047e8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80047ec:	e6dc      	b.n	80045a8 <_printf_float+0x1ec>
 80047ee:	f04f 0800 	mov.w	r8, #0
 80047f2:	f104 0a1a 	add.w	sl, r4, #26
 80047f6:	e7f2      	b.n	80047de <_printf_float+0x422>
 80047f8:	2301      	movs	r3, #1
 80047fa:	4642      	mov	r2, r8
 80047fc:	e7df      	b.n	80047be <_printf_float+0x402>
 80047fe:	2301      	movs	r3, #1
 8004800:	464a      	mov	r2, r9
 8004802:	4631      	mov	r1, r6
 8004804:	4628      	mov	r0, r5
 8004806:	47b8      	blx	r7
 8004808:	3001      	adds	r0, #1
 800480a:	f43f ae38 	beq.w	800447e <_printf_float+0xc2>
 800480e:	f108 0801 	add.w	r8, r8, #1
 8004812:	68e3      	ldr	r3, [r4, #12]
 8004814:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004816:	1a5b      	subs	r3, r3, r1
 8004818:	4543      	cmp	r3, r8
 800481a:	dcf0      	bgt.n	80047fe <_printf_float+0x442>
 800481c:	e6fa      	b.n	8004614 <_printf_float+0x258>
 800481e:	f04f 0800 	mov.w	r8, #0
 8004822:	f104 0919 	add.w	r9, r4, #25
 8004826:	e7f4      	b.n	8004812 <_printf_float+0x456>

08004828 <_printf_common>:
 8004828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800482c:	4616      	mov	r6, r2
 800482e:	4699      	mov	r9, r3
 8004830:	688a      	ldr	r2, [r1, #8]
 8004832:	690b      	ldr	r3, [r1, #16]
 8004834:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004838:	4293      	cmp	r3, r2
 800483a:	bfb8      	it	lt
 800483c:	4613      	movlt	r3, r2
 800483e:	6033      	str	r3, [r6, #0]
 8004840:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004844:	4607      	mov	r7, r0
 8004846:	460c      	mov	r4, r1
 8004848:	b10a      	cbz	r2, 800484e <_printf_common+0x26>
 800484a:	3301      	adds	r3, #1
 800484c:	6033      	str	r3, [r6, #0]
 800484e:	6823      	ldr	r3, [r4, #0]
 8004850:	0699      	lsls	r1, r3, #26
 8004852:	bf42      	ittt	mi
 8004854:	6833      	ldrmi	r3, [r6, #0]
 8004856:	3302      	addmi	r3, #2
 8004858:	6033      	strmi	r3, [r6, #0]
 800485a:	6825      	ldr	r5, [r4, #0]
 800485c:	f015 0506 	ands.w	r5, r5, #6
 8004860:	d106      	bne.n	8004870 <_printf_common+0x48>
 8004862:	f104 0a19 	add.w	sl, r4, #25
 8004866:	68e3      	ldr	r3, [r4, #12]
 8004868:	6832      	ldr	r2, [r6, #0]
 800486a:	1a9b      	subs	r3, r3, r2
 800486c:	42ab      	cmp	r3, r5
 800486e:	dc26      	bgt.n	80048be <_printf_common+0x96>
 8004870:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004874:	1e13      	subs	r3, r2, #0
 8004876:	6822      	ldr	r2, [r4, #0]
 8004878:	bf18      	it	ne
 800487a:	2301      	movne	r3, #1
 800487c:	0692      	lsls	r2, r2, #26
 800487e:	d42b      	bmi.n	80048d8 <_printf_common+0xb0>
 8004880:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004884:	4649      	mov	r1, r9
 8004886:	4638      	mov	r0, r7
 8004888:	47c0      	blx	r8
 800488a:	3001      	adds	r0, #1
 800488c:	d01e      	beq.n	80048cc <_printf_common+0xa4>
 800488e:	6823      	ldr	r3, [r4, #0]
 8004890:	68e5      	ldr	r5, [r4, #12]
 8004892:	6832      	ldr	r2, [r6, #0]
 8004894:	f003 0306 	and.w	r3, r3, #6
 8004898:	2b04      	cmp	r3, #4
 800489a:	bf08      	it	eq
 800489c:	1aad      	subeq	r5, r5, r2
 800489e:	68a3      	ldr	r3, [r4, #8]
 80048a0:	6922      	ldr	r2, [r4, #16]
 80048a2:	bf0c      	ite	eq
 80048a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048a8:	2500      	movne	r5, #0
 80048aa:	4293      	cmp	r3, r2
 80048ac:	bfc4      	itt	gt
 80048ae:	1a9b      	subgt	r3, r3, r2
 80048b0:	18ed      	addgt	r5, r5, r3
 80048b2:	2600      	movs	r6, #0
 80048b4:	341a      	adds	r4, #26
 80048b6:	42b5      	cmp	r5, r6
 80048b8:	d11a      	bne.n	80048f0 <_printf_common+0xc8>
 80048ba:	2000      	movs	r0, #0
 80048bc:	e008      	b.n	80048d0 <_printf_common+0xa8>
 80048be:	2301      	movs	r3, #1
 80048c0:	4652      	mov	r2, sl
 80048c2:	4649      	mov	r1, r9
 80048c4:	4638      	mov	r0, r7
 80048c6:	47c0      	blx	r8
 80048c8:	3001      	adds	r0, #1
 80048ca:	d103      	bne.n	80048d4 <_printf_common+0xac>
 80048cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048d4:	3501      	adds	r5, #1
 80048d6:	e7c6      	b.n	8004866 <_printf_common+0x3e>
 80048d8:	18e1      	adds	r1, r4, r3
 80048da:	1c5a      	adds	r2, r3, #1
 80048dc:	2030      	movs	r0, #48	; 0x30
 80048de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80048e2:	4422      	add	r2, r4
 80048e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80048e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80048ec:	3302      	adds	r3, #2
 80048ee:	e7c7      	b.n	8004880 <_printf_common+0x58>
 80048f0:	2301      	movs	r3, #1
 80048f2:	4622      	mov	r2, r4
 80048f4:	4649      	mov	r1, r9
 80048f6:	4638      	mov	r0, r7
 80048f8:	47c0      	blx	r8
 80048fa:	3001      	adds	r0, #1
 80048fc:	d0e6      	beq.n	80048cc <_printf_common+0xa4>
 80048fe:	3601      	adds	r6, #1
 8004900:	e7d9      	b.n	80048b6 <_printf_common+0x8e>
	...

08004904 <_printf_i>:
 8004904:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004908:	7e0f      	ldrb	r7, [r1, #24]
 800490a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800490c:	2f78      	cmp	r7, #120	; 0x78
 800490e:	4691      	mov	r9, r2
 8004910:	4680      	mov	r8, r0
 8004912:	460c      	mov	r4, r1
 8004914:	469a      	mov	sl, r3
 8004916:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800491a:	d807      	bhi.n	800492c <_printf_i+0x28>
 800491c:	2f62      	cmp	r7, #98	; 0x62
 800491e:	d80a      	bhi.n	8004936 <_printf_i+0x32>
 8004920:	2f00      	cmp	r7, #0
 8004922:	f000 80d8 	beq.w	8004ad6 <_printf_i+0x1d2>
 8004926:	2f58      	cmp	r7, #88	; 0x58
 8004928:	f000 80a3 	beq.w	8004a72 <_printf_i+0x16e>
 800492c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004930:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004934:	e03a      	b.n	80049ac <_printf_i+0xa8>
 8004936:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800493a:	2b15      	cmp	r3, #21
 800493c:	d8f6      	bhi.n	800492c <_printf_i+0x28>
 800493e:	a101      	add	r1, pc, #4	; (adr r1, 8004944 <_printf_i+0x40>)
 8004940:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004944:	0800499d 	.word	0x0800499d
 8004948:	080049b1 	.word	0x080049b1
 800494c:	0800492d 	.word	0x0800492d
 8004950:	0800492d 	.word	0x0800492d
 8004954:	0800492d 	.word	0x0800492d
 8004958:	0800492d 	.word	0x0800492d
 800495c:	080049b1 	.word	0x080049b1
 8004960:	0800492d 	.word	0x0800492d
 8004964:	0800492d 	.word	0x0800492d
 8004968:	0800492d 	.word	0x0800492d
 800496c:	0800492d 	.word	0x0800492d
 8004970:	08004abd 	.word	0x08004abd
 8004974:	080049e1 	.word	0x080049e1
 8004978:	08004a9f 	.word	0x08004a9f
 800497c:	0800492d 	.word	0x0800492d
 8004980:	0800492d 	.word	0x0800492d
 8004984:	08004adf 	.word	0x08004adf
 8004988:	0800492d 	.word	0x0800492d
 800498c:	080049e1 	.word	0x080049e1
 8004990:	0800492d 	.word	0x0800492d
 8004994:	0800492d 	.word	0x0800492d
 8004998:	08004aa7 	.word	0x08004aa7
 800499c:	682b      	ldr	r3, [r5, #0]
 800499e:	1d1a      	adds	r2, r3, #4
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	602a      	str	r2, [r5, #0]
 80049a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049ac:	2301      	movs	r3, #1
 80049ae:	e0a3      	b.n	8004af8 <_printf_i+0x1f4>
 80049b0:	6820      	ldr	r0, [r4, #0]
 80049b2:	6829      	ldr	r1, [r5, #0]
 80049b4:	0606      	lsls	r6, r0, #24
 80049b6:	f101 0304 	add.w	r3, r1, #4
 80049ba:	d50a      	bpl.n	80049d2 <_printf_i+0xce>
 80049bc:	680e      	ldr	r6, [r1, #0]
 80049be:	602b      	str	r3, [r5, #0]
 80049c0:	2e00      	cmp	r6, #0
 80049c2:	da03      	bge.n	80049cc <_printf_i+0xc8>
 80049c4:	232d      	movs	r3, #45	; 0x2d
 80049c6:	4276      	negs	r6, r6
 80049c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049cc:	485e      	ldr	r0, [pc, #376]	; (8004b48 <_printf_i+0x244>)
 80049ce:	230a      	movs	r3, #10
 80049d0:	e019      	b.n	8004a06 <_printf_i+0x102>
 80049d2:	680e      	ldr	r6, [r1, #0]
 80049d4:	602b      	str	r3, [r5, #0]
 80049d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80049da:	bf18      	it	ne
 80049dc:	b236      	sxthne	r6, r6
 80049de:	e7ef      	b.n	80049c0 <_printf_i+0xbc>
 80049e0:	682b      	ldr	r3, [r5, #0]
 80049e2:	6820      	ldr	r0, [r4, #0]
 80049e4:	1d19      	adds	r1, r3, #4
 80049e6:	6029      	str	r1, [r5, #0]
 80049e8:	0601      	lsls	r1, r0, #24
 80049ea:	d501      	bpl.n	80049f0 <_printf_i+0xec>
 80049ec:	681e      	ldr	r6, [r3, #0]
 80049ee:	e002      	b.n	80049f6 <_printf_i+0xf2>
 80049f0:	0646      	lsls	r6, r0, #25
 80049f2:	d5fb      	bpl.n	80049ec <_printf_i+0xe8>
 80049f4:	881e      	ldrh	r6, [r3, #0]
 80049f6:	4854      	ldr	r0, [pc, #336]	; (8004b48 <_printf_i+0x244>)
 80049f8:	2f6f      	cmp	r7, #111	; 0x6f
 80049fa:	bf0c      	ite	eq
 80049fc:	2308      	moveq	r3, #8
 80049fe:	230a      	movne	r3, #10
 8004a00:	2100      	movs	r1, #0
 8004a02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a06:	6865      	ldr	r5, [r4, #4]
 8004a08:	60a5      	str	r5, [r4, #8]
 8004a0a:	2d00      	cmp	r5, #0
 8004a0c:	bfa2      	ittt	ge
 8004a0e:	6821      	ldrge	r1, [r4, #0]
 8004a10:	f021 0104 	bicge.w	r1, r1, #4
 8004a14:	6021      	strge	r1, [r4, #0]
 8004a16:	b90e      	cbnz	r6, 8004a1c <_printf_i+0x118>
 8004a18:	2d00      	cmp	r5, #0
 8004a1a:	d04d      	beq.n	8004ab8 <_printf_i+0x1b4>
 8004a1c:	4615      	mov	r5, r2
 8004a1e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004a22:	fb03 6711 	mls	r7, r3, r1, r6
 8004a26:	5dc7      	ldrb	r7, [r0, r7]
 8004a28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004a2c:	4637      	mov	r7, r6
 8004a2e:	42bb      	cmp	r3, r7
 8004a30:	460e      	mov	r6, r1
 8004a32:	d9f4      	bls.n	8004a1e <_printf_i+0x11a>
 8004a34:	2b08      	cmp	r3, #8
 8004a36:	d10b      	bne.n	8004a50 <_printf_i+0x14c>
 8004a38:	6823      	ldr	r3, [r4, #0]
 8004a3a:	07de      	lsls	r6, r3, #31
 8004a3c:	d508      	bpl.n	8004a50 <_printf_i+0x14c>
 8004a3e:	6923      	ldr	r3, [r4, #16]
 8004a40:	6861      	ldr	r1, [r4, #4]
 8004a42:	4299      	cmp	r1, r3
 8004a44:	bfde      	ittt	le
 8004a46:	2330      	movle	r3, #48	; 0x30
 8004a48:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a4c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004a50:	1b52      	subs	r2, r2, r5
 8004a52:	6122      	str	r2, [r4, #16]
 8004a54:	f8cd a000 	str.w	sl, [sp]
 8004a58:	464b      	mov	r3, r9
 8004a5a:	aa03      	add	r2, sp, #12
 8004a5c:	4621      	mov	r1, r4
 8004a5e:	4640      	mov	r0, r8
 8004a60:	f7ff fee2 	bl	8004828 <_printf_common>
 8004a64:	3001      	adds	r0, #1
 8004a66:	d14c      	bne.n	8004b02 <_printf_i+0x1fe>
 8004a68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a6c:	b004      	add	sp, #16
 8004a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a72:	4835      	ldr	r0, [pc, #212]	; (8004b48 <_printf_i+0x244>)
 8004a74:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004a78:	6829      	ldr	r1, [r5, #0]
 8004a7a:	6823      	ldr	r3, [r4, #0]
 8004a7c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004a80:	6029      	str	r1, [r5, #0]
 8004a82:	061d      	lsls	r5, r3, #24
 8004a84:	d514      	bpl.n	8004ab0 <_printf_i+0x1ac>
 8004a86:	07df      	lsls	r7, r3, #31
 8004a88:	bf44      	itt	mi
 8004a8a:	f043 0320 	orrmi.w	r3, r3, #32
 8004a8e:	6023      	strmi	r3, [r4, #0]
 8004a90:	b91e      	cbnz	r6, 8004a9a <_printf_i+0x196>
 8004a92:	6823      	ldr	r3, [r4, #0]
 8004a94:	f023 0320 	bic.w	r3, r3, #32
 8004a98:	6023      	str	r3, [r4, #0]
 8004a9a:	2310      	movs	r3, #16
 8004a9c:	e7b0      	b.n	8004a00 <_printf_i+0xfc>
 8004a9e:	6823      	ldr	r3, [r4, #0]
 8004aa0:	f043 0320 	orr.w	r3, r3, #32
 8004aa4:	6023      	str	r3, [r4, #0]
 8004aa6:	2378      	movs	r3, #120	; 0x78
 8004aa8:	4828      	ldr	r0, [pc, #160]	; (8004b4c <_printf_i+0x248>)
 8004aaa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004aae:	e7e3      	b.n	8004a78 <_printf_i+0x174>
 8004ab0:	0659      	lsls	r1, r3, #25
 8004ab2:	bf48      	it	mi
 8004ab4:	b2b6      	uxthmi	r6, r6
 8004ab6:	e7e6      	b.n	8004a86 <_printf_i+0x182>
 8004ab8:	4615      	mov	r5, r2
 8004aba:	e7bb      	b.n	8004a34 <_printf_i+0x130>
 8004abc:	682b      	ldr	r3, [r5, #0]
 8004abe:	6826      	ldr	r6, [r4, #0]
 8004ac0:	6961      	ldr	r1, [r4, #20]
 8004ac2:	1d18      	adds	r0, r3, #4
 8004ac4:	6028      	str	r0, [r5, #0]
 8004ac6:	0635      	lsls	r5, r6, #24
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	d501      	bpl.n	8004ad0 <_printf_i+0x1cc>
 8004acc:	6019      	str	r1, [r3, #0]
 8004ace:	e002      	b.n	8004ad6 <_printf_i+0x1d2>
 8004ad0:	0670      	lsls	r0, r6, #25
 8004ad2:	d5fb      	bpl.n	8004acc <_printf_i+0x1c8>
 8004ad4:	8019      	strh	r1, [r3, #0]
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	6123      	str	r3, [r4, #16]
 8004ada:	4615      	mov	r5, r2
 8004adc:	e7ba      	b.n	8004a54 <_printf_i+0x150>
 8004ade:	682b      	ldr	r3, [r5, #0]
 8004ae0:	1d1a      	adds	r2, r3, #4
 8004ae2:	602a      	str	r2, [r5, #0]
 8004ae4:	681d      	ldr	r5, [r3, #0]
 8004ae6:	6862      	ldr	r2, [r4, #4]
 8004ae8:	2100      	movs	r1, #0
 8004aea:	4628      	mov	r0, r5
 8004aec:	f7fb fb90 	bl	8000210 <memchr>
 8004af0:	b108      	cbz	r0, 8004af6 <_printf_i+0x1f2>
 8004af2:	1b40      	subs	r0, r0, r5
 8004af4:	6060      	str	r0, [r4, #4]
 8004af6:	6863      	ldr	r3, [r4, #4]
 8004af8:	6123      	str	r3, [r4, #16]
 8004afa:	2300      	movs	r3, #0
 8004afc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b00:	e7a8      	b.n	8004a54 <_printf_i+0x150>
 8004b02:	6923      	ldr	r3, [r4, #16]
 8004b04:	462a      	mov	r2, r5
 8004b06:	4649      	mov	r1, r9
 8004b08:	4640      	mov	r0, r8
 8004b0a:	47d0      	blx	sl
 8004b0c:	3001      	adds	r0, #1
 8004b0e:	d0ab      	beq.n	8004a68 <_printf_i+0x164>
 8004b10:	6823      	ldr	r3, [r4, #0]
 8004b12:	079b      	lsls	r3, r3, #30
 8004b14:	d413      	bmi.n	8004b3e <_printf_i+0x23a>
 8004b16:	68e0      	ldr	r0, [r4, #12]
 8004b18:	9b03      	ldr	r3, [sp, #12]
 8004b1a:	4298      	cmp	r0, r3
 8004b1c:	bfb8      	it	lt
 8004b1e:	4618      	movlt	r0, r3
 8004b20:	e7a4      	b.n	8004a6c <_printf_i+0x168>
 8004b22:	2301      	movs	r3, #1
 8004b24:	4632      	mov	r2, r6
 8004b26:	4649      	mov	r1, r9
 8004b28:	4640      	mov	r0, r8
 8004b2a:	47d0      	blx	sl
 8004b2c:	3001      	adds	r0, #1
 8004b2e:	d09b      	beq.n	8004a68 <_printf_i+0x164>
 8004b30:	3501      	adds	r5, #1
 8004b32:	68e3      	ldr	r3, [r4, #12]
 8004b34:	9903      	ldr	r1, [sp, #12]
 8004b36:	1a5b      	subs	r3, r3, r1
 8004b38:	42ab      	cmp	r3, r5
 8004b3a:	dcf2      	bgt.n	8004b22 <_printf_i+0x21e>
 8004b3c:	e7eb      	b.n	8004b16 <_printf_i+0x212>
 8004b3e:	2500      	movs	r5, #0
 8004b40:	f104 0619 	add.w	r6, r4, #25
 8004b44:	e7f5      	b.n	8004b32 <_printf_i+0x22e>
 8004b46:	bf00      	nop
 8004b48:	08009554 	.word	0x08009554
 8004b4c:	08009565 	.word	0x08009565

08004b50 <_scanf_float>:
 8004b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b54:	b087      	sub	sp, #28
 8004b56:	4617      	mov	r7, r2
 8004b58:	9303      	str	r3, [sp, #12]
 8004b5a:	688b      	ldr	r3, [r1, #8]
 8004b5c:	1e5a      	subs	r2, r3, #1
 8004b5e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004b62:	bf83      	ittte	hi
 8004b64:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004b68:	195b      	addhi	r3, r3, r5
 8004b6a:	9302      	strhi	r3, [sp, #8]
 8004b6c:	2300      	movls	r3, #0
 8004b6e:	bf86      	itte	hi
 8004b70:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004b74:	608b      	strhi	r3, [r1, #8]
 8004b76:	9302      	strls	r3, [sp, #8]
 8004b78:	680b      	ldr	r3, [r1, #0]
 8004b7a:	468b      	mov	fp, r1
 8004b7c:	2500      	movs	r5, #0
 8004b7e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004b82:	f84b 3b1c 	str.w	r3, [fp], #28
 8004b86:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004b8a:	4680      	mov	r8, r0
 8004b8c:	460c      	mov	r4, r1
 8004b8e:	465e      	mov	r6, fp
 8004b90:	46aa      	mov	sl, r5
 8004b92:	46a9      	mov	r9, r5
 8004b94:	9501      	str	r5, [sp, #4]
 8004b96:	68a2      	ldr	r2, [r4, #8]
 8004b98:	b152      	cbz	r2, 8004bb0 <_scanf_float+0x60>
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	2b4e      	cmp	r3, #78	; 0x4e
 8004ba0:	d864      	bhi.n	8004c6c <_scanf_float+0x11c>
 8004ba2:	2b40      	cmp	r3, #64	; 0x40
 8004ba4:	d83c      	bhi.n	8004c20 <_scanf_float+0xd0>
 8004ba6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004baa:	b2c8      	uxtb	r0, r1
 8004bac:	280e      	cmp	r0, #14
 8004bae:	d93a      	bls.n	8004c26 <_scanf_float+0xd6>
 8004bb0:	f1b9 0f00 	cmp.w	r9, #0
 8004bb4:	d003      	beq.n	8004bbe <_scanf_float+0x6e>
 8004bb6:	6823      	ldr	r3, [r4, #0]
 8004bb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bbc:	6023      	str	r3, [r4, #0]
 8004bbe:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004bc2:	f1ba 0f01 	cmp.w	sl, #1
 8004bc6:	f200 8113 	bhi.w	8004df0 <_scanf_float+0x2a0>
 8004bca:	455e      	cmp	r6, fp
 8004bcc:	f200 8105 	bhi.w	8004dda <_scanf_float+0x28a>
 8004bd0:	2501      	movs	r5, #1
 8004bd2:	4628      	mov	r0, r5
 8004bd4:	b007      	add	sp, #28
 8004bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bda:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004bde:	2a0d      	cmp	r2, #13
 8004be0:	d8e6      	bhi.n	8004bb0 <_scanf_float+0x60>
 8004be2:	a101      	add	r1, pc, #4	; (adr r1, 8004be8 <_scanf_float+0x98>)
 8004be4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004be8:	08004d27 	.word	0x08004d27
 8004bec:	08004bb1 	.word	0x08004bb1
 8004bf0:	08004bb1 	.word	0x08004bb1
 8004bf4:	08004bb1 	.word	0x08004bb1
 8004bf8:	08004d87 	.word	0x08004d87
 8004bfc:	08004d5f 	.word	0x08004d5f
 8004c00:	08004bb1 	.word	0x08004bb1
 8004c04:	08004bb1 	.word	0x08004bb1
 8004c08:	08004d35 	.word	0x08004d35
 8004c0c:	08004bb1 	.word	0x08004bb1
 8004c10:	08004bb1 	.word	0x08004bb1
 8004c14:	08004bb1 	.word	0x08004bb1
 8004c18:	08004bb1 	.word	0x08004bb1
 8004c1c:	08004ced 	.word	0x08004ced
 8004c20:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004c24:	e7db      	b.n	8004bde <_scanf_float+0x8e>
 8004c26:	290e      	cmp	r1, #14
 8004c28:	d8c2      	bhi.n	8004bb0 <_scanf_float+0x60>
 8004c2a:	a001      	add	r0, pc, #4	; (adr r0, 8004c30 <_scanf_float+0xe0>)
 8004c2c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004c30:	08004cdf 	.word	0x08004cdf
 8004c34:	08004bb1 	.word	0x08004bb1
 8004c38:	08004cdf 	.word	0x08004cdf
 8004c3c:	08004d73 	.word	0x08004d73
 8004c40:	08004bb1 	.word	0x08004bb1
 8004c44:	08004c8d 	.word	0x08004c8d
 8004c48:	08004cc9 	.word	0x08004cc9
 8004c4c:	08004cc9 	.word	0x08004cc9
 8004c50:	08004cc9 	.word	0x08004cc9
 8004c54:	08004cc9 	.word	0x08004cc9
 8004c58:	08004cc9 	.word	0x08004cc9
 8004c5c:	08004cc9 	.word	0x08004cc9
 8004c60:	08004cc9 	.word	0x08004cc9
 8004c64:	08004cc9 	.word	0x08004cc9
 8004c68:	08004cc9 	.word	0x08004cc9
 8004c6c:	2b6e      	cmp	r3, #110	; 0x6e
 8004c6e:	d809      	bhi.n	8004c84 <_scanf_float+0x134>
 8004c70:	2b60      	cmp	r3, #96	; 0x60
 8004c72:	d8b2      	bhi.n	8004bda <_scanf_float+0x8a>
 8004c74:	2b54      	cmp	r3, #84	; 0x54
 8004c76:	d077      	beq.n	8004d68 <_scanf_float+0x218>
 8004c78:	2b59      	cmp	r3, #89	; 0x59
 8004c7a:	d199      	bne.n	8004bb0 <_scanf_float+0x60>
 8004c7c:	2d07      	cmp	r5, #7
 8004c7e:	d197      	bne.n	8004bb0 <_scanf_float+0x60>
 8004c80:	2508      	movs	r5, #8
 8004c82:	e029      	b.n	8004cd8 <_scanf_float+0x188>
 8004c84:	2b74      	cmp	r3, #116	; 0x74
 8004c86:	d06f      	beq.n	8004d68 <_scanf_float+0x218>
 8004c88:	2b79      	cmp	r3, #121	; 0x79
 8004c8a:	e7f6      	b.n	8004c7a <_scanf_float+0x12a>
 8004c8c:	6821      	ldr	r1, [r4, #0]
 8004c8e:	05c8      	lsls	r0, r1, #23
 8004c90:	d51a      	bpl.n	8004cc8 <_scanf_float+0x178>
 8004c92:	9b02      	ldr	r3, [sp, #8]
 8004c94:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004c98:	6021      	str	r1, [r4, #0]
 8004c9a:	f109 0901 	add.w	r9, r9, #1
 8004c9e:	b11b      	cbz	r3, 8004ca8 <_scanf_float+0x158>
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	3201      	adds	r2, #1
 8004ca4:	9302      	str	r3, [sp, #8]
 8004ca6:	60a2      	str	r2, [r4, #8]
 8004ca8:	68a3      	ldr	r3, [r4, #8]
 8004caa:	3b01      	subs	r3, #1
 8004cac:	60a3      	str	r3, [r4, #8]
 8004cae:	6923      	ldr	r3, [r4, #16]
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	6123      	str	r3, [r4, #16]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	607b      	str	r3, [r7, #4]
 8004cbc:	f340 8084 	ble.w	8004dc8 <_scanf_float+0x278>
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	603b      	str	r3, [r7, #0]
 8004cc6:	e766      	b.n	8004b96 <_scanf_float+0x46>
 8004cc8:	eb1a 0f05 	cmn.w	sl, r5
 8004ccc:	f47f af70 	bne.w	8004bb0 <_scanf_float+0x60>
 8004cd0:	6822      	ldr	r2, [r4, #0]
 8004cd2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004cd6:	6022      	str	r2, [r4, #0]
 8004cd8:	f806 3b01 	strb.w	r3, [r6], #1
 8004cdc:	e7e4      	b.n	8004ca8 <_scanf_float+0x158>
 8004cde:	6822      	ldr	r2, [r4, #0]
 8004ce0:	0610      	lsls	r0, r2, #24
 8004ce2:	f57f af65 	bpl.w	8004bb0 <_scanf_float+0x60>
 8004ce6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004cea:	e7f4      	b.n	8004cd6 <_scanf_float+0x186>
 8004cec:	f1ba 0f00 	cmp.w	sl, #0
 8004cf0:	d10e      	bne.n	8004d10 <_scanf_float+0x1c0>
 8004cf2:	f1b9 0f00 	cmp.w	r9, #0
 8004cf6:	d10e      	bne.n	8004d16 <_scanf_float+0x1c6>
 8004cf8:	6822      	ldr	r2, [r4, #0]
 8004cfa:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004cfe:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004d02:	d108      	bne.n	8004d16 <_scanf_float+0x1c6>
 8004d04:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004d08:	6022      	str	r2, [r4, #0]
 8004d0a:	f04f 0a01 	mov.w	sl, #1
 8004d0e:	e7e3      	b.n	8004cd8 <_scanf_float+0x188>
 8004d10:	f1ba 0f02 	cmp.w	sl, #2
 8004d14:	d055      	beq.n	8004dc2 <_scanf_float+0x272>
 8004d16:	2d01      	cmp	r5, #1
 8004d18:	d002      	beq.n	8004d20 <_scanf_float+0x1d0>
 8004d1a:	2d04      	cmp	r5, #4
 8004d1c:	f47f af48 	bne.w	8004bb0 <_scanf_float+0x60>
 8004d20:	3501      	adds	r5, #1
 8004d22:	b2ed      	uxtb	r5, r5
 8004d24:	e7d8      	b.n	8004cd8 <_scanf_float+0x188>
 8004d26:	f1ba 0f01 	cmp.w	sl, #1
 8004d2a:	f47f af41 	bne.w	8004bb0 <_scanf_float+0x60>
 8004d2e:	f04f 0a02 	mov.w	sl, #2
 8004d32:	e7d1      	b.n	8004cd8 <_scanf_float+0x188>
 8004d34:	b97d      	cbnz	r5, 8004d56 <_scanf_float+0x206>
 8004d36:	f1b9 0f00 	cmp.w	r9, #0
 8004d3a:	f47f af3c 	bne.w	8004bb6 <_scanf_float+0x66>
 8004d3e:	6822      	ldr	r2, [r4, #0]
 8004d40:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004d44:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004d48:	f47f af39 	bne.w	8004bbe <_scanf_float+0x6e>
 8004d4c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004d50:	6022      	str	r2, [r4, #0]
 8004d52:	2501      	movs	r5, #1
 8004d54:	e7c0      	b.n	8004cd8 <_scanf_float+0x188>
 8004d56:	2d03      	cmp	r5, #3
 8004d58:	d0e2      	beq.n	8004d20 <_scanf_float+0x1d0>
 8004d5a:	2d05      	cmp	r5, #5
 8004d5c:	e7de      	b.n	8004d1c <_scanf_float+0x1cc>
 8004d5e:	2d02      	cmp	r5, #2
 8004d60:	f47f af26 	bne.w	8004bb0 <_scanf_float+0x60>
 8004d64:	2503      	movs	r5, #3
 8004d66:	e7b7      	b.n	8004cd8 <_scanf_float+0x188>
 8004d68:	2d06      	cmp	r5, #6
 8004d6a:	f47f af21 	bne.w	8004bb0 <_scanf_float+0x60>
 8004d6e:	2507      	movs	r5, #7
 8004d70:	e7b2      	b.n	8004cd8 <_scanf_float+0x188>
 8004d72:	6822      	ldr	r2, [r4, #0]
 8004d74:	0591      	lsls	r1, r2, #22
 8004d76:	f57f af1b 	bpl.w	8004bb0 <_scanf_float+0x60>
 8004d7a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004d7e:	6022      	str	r2, [r4, #0]
 8004d80:	f8cd 9004 	str.w	r9, [sp, #4]
 8004d84:	e7a8      	b.n	8004cd8 <_scanf_float+0x188>
 8004d86:	6822      	ldr	r2, [r4, #0]
 8004d88:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004d8c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004d90:	d006      	beq.n	8004da0 <_scanf_float+0x250>
 8004d92:	0550      	lsls	r0, r2, #21
 8004d94:	f57f af0c 	bpl.w	8004bb0 <_scanf_float+0x60>
 8004d98:	f1b9 0f00 	cmp.w	r9, #0
 8004d9c:	f43f af0f 	beq.w	8004bbe <_scanf_float+0x6e>
 8004da0:	0591      	lsls	r1, r2, #22
 8004da2:	bf58      	it	pl
 8004da4:	9901      	ldrpl	r1, [sp, #4]
 8004da6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004daa:	bf58      	it	pl
 8004dac:	eba9 0101 	subpl.w	r1, r9, r1
 8004db0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004db4:	bf58      	it	pl
 8004db6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004dba:	6022      	str	r2, [r4, #0]
 8004dbc:	f04f 0900 	mov.w	r9, #0
 8004dc0:	e78a      	b.n	8004cd8 <_scanf_float+0x188>
 8004dc2:	f04f 0a03 	mov.w	sl, #3
 8004dc6:	e787      	b.n	8004cd8 <_scanf_float+0x188>
 8004dc8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004dcc:	4639      	mov	r1, r7
 8004dce:	4640      	mov	r0, r8
 8004dd0:	4798      	blx	r3
 8004dd2:	2800      	cmp	r0, #0
 8004dd4:	f43f aedf 	beq.w	8004b96 <_scanf_float+0x46>
 8004dd8:	e6ea      	b.n	8004bb0 <_scanf_float+0x60>
 8004dda:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004dde:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004de2:	463a      	mov	r2, r7
 8004de4:	4640      	mov	r0, r8
 8004de6:	4798      	blx	r3
 8004de8:	6923      	ldr	r3, [r4, #16]
 8004dea:	3b01      	subs	r3, #1
 8004dec:	6123      	str	r3, [r4, #16]
 8004dee:	e6ec      	b.n	8004bca <_scanf_float+0x7a>
 8004df0:	1e6b      	subs	r3, r5, #1
 8004df2:	2b06      	cmp	r3, #6
 8004df4:	d825      	bhi.n	8004e42 <_scanf_float+0x2f2>
 8004df6:	2d02      	cmp	r5, #2
 8004df8:	d836      	bhi.n	8004e68 <_scanf_float+0x318>
 8004dfa:	455e      	cmp	r6, fp
 8004dfc:	f67f aee8 	bls.w	8004bd0 <_scanf_float+0x80>
 8004e00:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004e04:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004e08:	463a      	mov	r2, r7
 8004e0a:	4640      	mov	r0, r8
 8004e0c:	4798      	blx	r3
 8004e0e:	6923      	ldr	r3, [r4, #16]
 8004e10:	3b01      	subs	r3, #1
 8004e12:	6123      	str	r3, [r4, #16]
 8004e14:	e7f1      	b.n	8004dfa <_scanf_float+0x2aa>
 8004e16:	9802      	ldr	r0, [sp, #8]
 8004e18:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004e1c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004e20:	9002      	str	r0, [sp, #8]
 8004e22:	463a      	mov	r2, r7
 8004e24:	4640      	mov	r0, r8
 8004e26:	4798      	blx	r3
 8004e28:	6923      	ldr	r3, [r4, #16]
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	6123      	str	r3, [r4, #16]
 8004e2e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004e32:	fa5f fa8a 	uxtb.w	sl, sl
 8004e36:	f1ba 0f02 	cmp.w	sl, #2
 8004e3a:	d1ec      	bne.n	8004e16 <_scanf_float+0x2c6>
 8004e3c:	3d03      	subs	r5, #3
 8004e3e:	b2ed      	uxtb	r5, r5
 8004e40:	1b76      	subs	r6, r6, r5
 8004e42:	6823      	ldr	r3, [r4, #0]
 8004e44:	05da      	lsls	r2, r3, #23
 8004e46:	d52f      	bpl.n	8004ea8 <_scanf_float+0x358>
 8004e48:	055b      	lsls	r3, r3, #21
 8004e4a:	d510      	bpl.n	8004e6e <_scanf_float+0x31e>
 8004e4c:	455e      	cmp	r6, fp
 8004e4e:	f67f aebf 	bls.w	8004bd0 <_scanf_float+0x80>
 8004e52:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004e56:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004e5a:	463a      	mov	r2, r7
 8004e5c:	4640      	mov	r0, r8
 8004e5e:	4798      	blx	r3
 8004e60:	6923      	ldr	r3, [r4, #16]
 8004e62:	3b01      	subs	r3, #1
 8004e64:	6123      	str	r3, [r4, #16]
 8004e66:	e7f1      	b.n	8004e4c <_scanf_float+0x2fc>
 8004e68:	46aa      	mov	sl, r5
 8004e6a:	9602      	str	r6, [sp, #8]
 8004e6c:	e7df      	b.n	8004e2e <_scanf_float+0x2de>
 8004e6e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004e72:	6923      	ldr	r3, [r4, #16]
 8004e74:	2965      	cmp	r1, #101	; 0x65
 8004e76:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8004e7a:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8004e7e:	6123      	str	r3, [r4, #16]
 8004e80:	d00c      	beq.n	8004e9c <_scanf_float+0x34c>
 8004e82:	2945      	cmp	r1, #69	; 0x45
 8004e84:	d00a      	beq.n	8004e9c <_scanf_float+0x34c>
 8004e86:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004e8a:	463a      	mov	r2, r7
 8004e8c:	4640      	mov	r0, r8
 8004e8e:	4798      	blx	r3
 8004e90:	6923      	ldr	r3, [r4, #16]
 8004e92:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004e96:	3b01      	subs	r3, #1
 8004e98:	1eb5      	subs	r5, r6, #2
 8004e9a:	6123      	str	r3, [r4, #16]
 8004e9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004ea0:	463a      	mov	r2, r7
 8004ea2:	4640      	mov	r0, r8
 8004ea4:	4798      	blx	r3
 8004ea6:	462e      	mov	r6, r5
 8004ea8:	6825      	ldr	r5, [r4, #0]
 8004eaa:	f015 0510 	ands.w	r5, r5, #16
 8004eae:	d159      	bne.n	8004f64 <_scanf_float+0x414>
 8004eb0:	7035      	strb	r5, [r6, #0]
 8004eb2:	6823      	ldr	r3, [r4, #0]
 8004eb4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004eb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ebc:	d11b      	bne.n	8004ef6 <_scanf_float+0x3a6>
 8004ebe:	9b01      	ldr	r3, [sp, #4]
 8004ec0:	454b      	cmp	r3, r9
 8004ec2:	eba3 0209 	sub.w	r2, r3, r9
 8004ec6:	d123      	bne.n	8004f10 <_scanf_float+0x3c0>
 8004ec8:	2200      	movs	r2, #0
 8004eca:	4659      	mov	r1, fp
 8004ecc:	4640      	mov	r0, r8
 8004ece:	f000 ff09 	bl	8005ce4 <_strtod_r>
 8004ed2:	6822      	ldr	r2, [r4, #0]
 8004ed4:	9b03      	ldr	r3, [sp, #12]
 8004ed6:	f012 0f02 	tst.w	r2, #2
 8004eda:	ec57 6b10 	vmov	r6, r7, d0
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	d021      	beq.n	8004f26 <_scanf_float+0x3d6>
 8004ee2:	9903      	ldr	r1, [sp, #12]
 8004ee4:	1d1a      	adds	r2, r3, #4
 8004ee6:	600a      	str	r2, [r1, #0]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	e9c3 6700 	strd	r6, r7, [r3]
 8004eee:	68e3      	ldr	r3, [r4, #12]
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	60e3      	str	r3, [r4, #12]
 8004ef4:	e66d      	b.n	8004bd2 <_scanf_float+0x82>
 8004ef6:	9b04      	ldr	r3, [sp, #16]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d0e5      	beq.n	8004ec8 <_scanf_float+0x378>
 8004efc:	9905      	ldr	r1, [sp, #20]
 8004efe:	230a      	movs	r3, #10
 8004f00:	462a      	mov	r2, r5
 8004f02:	3101      	adds	r1, #1
 8004f04:	4640      	mov	r0, r8
 8004f06:	f000 ff75 	bl	8005df4 <_strtol_r>
 8004f0a:	9b04      	ldr	r3, [sp, #16]
 8004f0c:	9e05      	ldr	r6, [sp, #20]
 8004f0e:	1ac2      	subs	r2, r0, r3
 8004f10:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004f14:	429e      	cmp	r6, r3
 8004f16:	bf28      	it	cs
 8004f18:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004f1c:	4912      	ldr	r1, [pc, #72]	; (8004f68 <_scanf_float+0x418>)
 8004f1e:	4630      	mov	r0, r6
 8004f20:	f000 f82c 	bl	8004f7c <siprintf>
 8004f24:	e7d0      	b.n	8004ec8 <_scanf_float+0x378>
 8004f26:	9903      	ldr	r1, [sp, #12]
 8004f28:	f012 0f04 	tst.w	r2, #4
 8004f2c:	f103 0204 	add.w	r2, r3, #4
 8004f30:	600a      	str	r2, [r1, #0]
 8004f32:	d1d9      	bne.n	8004ee8 <_scanf_float+0x398>
 8004f34:	f8d3 8000 	ldr.w	r8, [r3]
 8004f38:	ee10 2a10 	vmov	r2, s0
 8004f3c:	ee10 0a10 	vmov	r0, s0
 8004f40:	463b      	mov	r3, r7
 8004f42:	4639      	mov	r1, r7
 8004f44:	f7fb fe0a 	bl	8000b5c <__aeabi_dcmpun>
 8004f48:	b128      	cbz	r0, 8004f56 <_scanf_float+0x406>
 8004f4a:	4808      	ldr	r0, [pc, #32]	; (8004f6c <_scanf_float+0x41c>)
 8004f4c:	f000 f810 	bl	8004f70 <nanf>
 8004f50:	ed88 0a00 	vstr	s0, [r8]
 8004f54:	e7cb      	b.n	8004eee <_scanf_float+0x39e>
 8004f56:	4630      	mov	r0, r6
 8004f58:	4639      	mov	r1, r7
 8004f5a:	f7fb fe5d 	bl	8000c18 <__aeabi_d2f>
 8004f5e:	f8c8 0000 	str.w	r0, [r8]
 8004f62:	e7c4      	b.n	8004eee <_scanf_float+0x39e>
 8004f64:	2500      	movs	r5, #0
 8004f66:	e634      	b.n	8004bd2 <_scanf_float+0x82>
 8004f68:	08009576 	.word	0x08009576
 8004f6c:	0800999b 	.word	0x0800999b

08004f70 <nanf>:
 8004f70:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004f78 <nanf+0x8>
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop
 8004f78:	7fc00000 	.word	0x7fc00000

08004f7c <siprintf>:
 8004f7c:	b40e      	push	{r1, r2, r3}
 8004f7e:	b500      	push	{lr}
 8004f80:	b09c      	sub	sp, #112	; 0x70
 8004f82:	ab1d      	add	r3, sp, #116	; 0x74
 8004f84:	9002      	str	r0, [sp, #8]
 8004f86:	9006      	str	r0, [sp, #24]
 8004f88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004f8c:	4809      	ldr	r0, [pc, #36]	; (8004fb4 <siprintf+0x38>)
 8004f8e:	9107      	str	r1, [sp, #28]
 8004f90:	9104      	str	r1, [sp, #16]
 8004f92:	4909      	ldr	r1, [pc, #36]	; (8004fb8 <siprintf+0x3c>)
 8004f94:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f98:	9105      	str	r1, [sp, #20]
 8004f9a:	6800      	ldr	r0, [r0, #0]
 8004f9c:	9301      	str	r3, [sp, #4]
 8004f9e:	a902      	add	r1, sp, #8
 8004fa0:	f002 ff8a 	bl	8007eb8 <_svfiprintf_r>
 8004fa4:	9b02      	ldr	r3, [sp, #8]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	701a      	strb	r2, [r3, #0]
 8004faa:	b01c      	add	sp, #112	; 0x70
 8004fac:	f85d eb04 	ldr.w	lr, [sp], #4
 8004fb0:	b003      	add	sp, #12
 8004fb2:	4770      	bx	lr
 8004fb4:	20000014 	.word	0x20000014
 8004fb8:	ffff0208 	.word	0xffff0208

08004fbc <siscanf>:
 8004fbc:	b40e      	push	{r1, r2, r3}
 8004fbe:	b510      	push	{r4, lr}
 8004fc0:	b09f      	sub	sp, #124	; 0x7c
 8004fc2:	ac21      	add	r4, sp, #132	; 0x84
 8004fc4:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004fc8:	f854 2b04 	ldr.w	r2, [r4], #4
 8004fcc:	9201      	str	r2, [sp, #4]
 8004fce:	f8ad 101c 	strh.w	r1, [sp, #28]
 8004fd2:	9004      	str	r0, [sp, #16]
 8004fd4:	9008      	str	r0, [sp, #32]
 8004fd6:	f7fb f90d 	bl	80001f4 <strlen>
 8004fda:	4b0c      	ldr	r3, [pc, #48]	; (800500c <siscanf+0x50>)
 8004fdc:	9005      	str	r0, [sp, #20]
 8004fde:	9009      	str	r0, [sp, #36]	; 0x24
 8004fe0:	930d      	str	r3, [sp, #52]	; 0x34
 8004fe2:	480b      	ldr	r0, [pc, #44]	; (8005010 <siscanf+0x54>)
 8004fe4:	9a01      	ldr	r2, [sp, #4]
 8004fe6:	6800      	ldr	r0, [r0, #0]
 8004fe8:	9403      	str	r4, [sp, #12]
 8004fea:	2300      	movs	r3, #0
 8004fec:	9311      	str	r3, [sp, #68]	; 0x44
 8004fee:	9316      	str	r3, [sp, #88]	; 0x58
 8004ff0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004ff4:	f8ad 301e 	strh.w	r3, [sp, #30]
 8004ff8:	a904      	add	r1, sp, #16
 8004ffa:	4623      	mov	r3, r4
 8004ffc:	f003 f8b6 	bl	800816c <__ssvfiscanf_r>
 8005000:	b01f      	add	sp, #124	; 0x7c
 8005002:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005006:	b003      	add	sp, #12
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	08005037 	.word	0x08005037
 8005010:	20000014 	.word	0x20000014

08005014 <__sread>:
 8005014:	b510      	push	{r4, lr}
 8005016:	460c      	mov	r4, r1
 8005018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800501c:	f003 fb70 	bl	8008700 <_read_r>
 8005020:	2800      	cmp	r0, #0
 8005022:	bfab      	itete	ge
 8005024:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005026:	89a3      	ldrhlt	r3, [r4, #12]
 8005028:	181b      	addge	r3, r3, r0
 800502a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800502e:	bfac      	ite	ge
 8005030:	6563      	strge	r3, [r4, #84]	; 0x54
 8005032:	81a3      	strhlt	r3, [r4, #12]
 8005034:	bd10      	pop	{r4, pc}

08005036 <__seofread>:
 8005036:	2000      	movs	r0, #0
 8005038:	4770      	bx	lr

0800503a <__swrite>:
 800503a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800503e:	461f      	mov	r7, r3
 8005040:	898b      	ldrh	r3, [r1, #12]
 8005042:	05db      	lsls	r3, r3, #23
 8005044:	4605      	mov	r5, r0
 8005046:	460c      	mov	r4, r1
 8005048:	4616      	mov	r6, r2
 800504a:	d505      	bpl.n	8005058 <__swrite+0x1e>
 800504c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005050:	2302      	movs	r3, #2
 8005052:	2200      	movs	r2, #0
 8005054:	f002 f8e2 	bl	800721c <_lseek_r>
 8005058:	89a3      	ldrh	r3, [r4, #12]
 800505a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800505e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005062:	81a3      	strh	r3, [r4, #12]
 8005064:	4632      	mov	r2, r6
 8005066:	463b      	mov	r3, r7
 8005068:	4628      	mov	r0, r5
 800506a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800506e:	f000 bec3 	b.w	8005df8 <_write_r>

08005072 <__sseek>:
 8005072:	b510      	push	{r4, lr}
 8005074:	460c      	mov	r4, r1
 8005076:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800507a:	f002 f8cf 	bl	800721c <_lseek_r>
 800507e:	1c43      	adds	r3, r0, #1
 8005080:	89a3      	ldrh	r3, [r4, #12]
 8005082:	bf15      	itete	ne
 8005084:	6560      	strne	r0, [r4, #84]	; 0x54
 8005086:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800508a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800508e:	81a3      	strheq	r3, [r4, #12]
 8005090:	bf18      	it	ne
 8005092:	81a3      	strhne	r3, [r4, #12]
 8005094:	bd10      	pop	{r4, pc}

08005096 <__sclose>:
 8005096:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800509a:	f000 bebf 	b.w	8005e1c <_close_r>

0800509e <sulp>:
 800509e:	b570      	push	{r4, r5, r6, lr}
 80050a0:	4604      	mov	r4, r0
 80050a2:	460d      	mov	r5, r1
 80050a4:	ec45 4b10 	vmov	d0, r4, r5
 80050a8:	4616      	mov	r6, r2
 80050aa:	f002 fc63 	bl	8007974 <__ulp>
 80050ae:	ec51 0b10 	vmov	r0, r1, d0
 80050b2:	b17e      	cbz	r6, 80050d4 <sulp+0x36>
 80050b4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80050b8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80050bc:	2b00      	cmp	r3, #0
 80050be:	dd09      	ble.n	80050d4 <sulp+0x36>
 80050c0:	051b      	lsls	r3, r3, #20
 80050c2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80050c6:	2400      	movs	r4, #0
 80050c8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80050cc:	4622      	mov	r2, r4
 80050ce:	462b      	mov	r3, r5
 80050d0:	f7fb faaa 	bl	8000628 <__aeabi_dmul>
 80050d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080050d8 <_strtod_l>:
 80050d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050dc:	ed2d 8b02 	vpush	{d8}
 80050e0:	b09d      	sub	sp, #116	; 0x74
 80050e2:	461f      	mov	r7, r3
 80050e4:	2300      	movs	r3, #0
 80050e6:	9318      	str	r3, [sp, #96]	; 0x60
 80050e8:	4ba2      	ldr	r3, [pc, #648]	; (8005374 <_strtod_l+0x29c>)
 80050ea:	9213      	str	r2, [sp, #76]	; 0x4c
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	9305      	str	r3, [sp, #20]
 80050f0:	4604      	mov	r4, r0
 80050f2:	4618      	mov	r0, r3
 80050f4:	4688      	mov	r8, r1
 80050f6:	f7fb f87d 	bl	80001f4 <strlen>
 80050fa:	f04f 0a00 	mov.w	sl, #0
 80050fe:	4605      	mov	r5, r0
 8005100:	f04f 0b00 	mov.w	fp, #0
 8005104:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005108:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800510a:	781a      	ldrb	r2, [r3, #0]
 800510c:	2a2b      	cmp	r2, #43	; 0x2b
 800510e:	d04e      	beq.n	80051ae <_strtod_l+0xd6>
 8005110:	d83b      	bhi.n	800518a <_strtod_l+0xb2>
 8005112:	2a0d      	cmp	r2, #13
 8005114:	d834      	bhi.n	8005180 <_strtod_l+0xa8>
 8005116:	2a08      	cmp	r2, #8
 8005118:	d834      	bhi.n	8005184 <_strtod_l+0xac>
 800511a:	2a00      	cmp	r2, #0
 800511c:	d03e      	beq.n	800519c <_strtod_l+0xc4>
 800511e:	2300      	movs	r3, #0
 8005120:	930a      	str	r3, [sp, #40]	; 0x28
 8005122:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8005124:	7833      	ldrb	r3, [r6, #0]
 8005126:	2b30      	cmp	r3, #48	; 0x30
 8005128:	f040 80b0 	bne.w	800528c <_strtod_l+0x1b4>
 800512c:	7873      	ldrb	r3, [r6, #1]
 800512e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005132:	2b58      	cmp	r3, #88	; 0x58
 8005134:	d168      	bne.n	8005208 <_strtod_l+0x130>
 8005136:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005138:	9301      	str	r3, [sp, #4]
 800513a:	ab18      	add	r3, sp, #96	; 0x60
 800513c:	9702      	str	r7, [sp, #8]
 800513e:	9300      	str	r3, [sp, #0]
 8005140:	4a8d      	ldr	r2, [pc, #564]	; (8005378 <_strtod_l+0x2a0>)
 8005142:	ab19      	add	r3, sp, #100	; 0x64
 8005144:	a917      	add	r1, sp, #92	; 0x5c
 8005146:	4620      	mov	r0, r4
 8005148:	f001 fd5c 	bl	8006c04 <__gethex>
 800514c:	f010 0707 	ands.w	r7, r0, #7
 8005150:	4605      	mov	r5, r0
 8005152:	d005      	beq.n	8005160 <_strtod_l+0x88>
 8005154:	2f06      	cmp	r7, #6
 8005156:	d12c      	bne.n	80051b2 <_strtod_l+0xda>
 8005158:	3601      	adds	r6, #1
 800515a:	2300      	movs	r3, #0
 800515c:	9617      	str	r6, [sp, #92]	; 0x5c
 800515e:	930a      	str	r3, [sp, #40]	; 0x28
 8005160:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005162:	2b00      	cmp	r3, #0
 8005164:	f040 8590 	bne.w	8005c88 <_strtod_l+0xbb0>
 8005168:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800516a:	b1eb      	cbz	r3, 80051a8 <_strtod_l+0xd0>
 800516c:	4652      	mov	r2, sl
 800516e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005172:	ec43 2b10 	vmov	d0, r2, r3
 8005176:	b01d      	add	sp, #116	; 0x74
 8005178:	ecbd 8b02 	vpop	{d8}
 800517c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005180:	2a20      	cmp	r2, #32
 8005182:	d1cc      	bne.n	800511e <_strtod_l+0x46>
 8005184:	3301      	adds	r3, #1
 8005186:	9317      	str	r3, [sp, #92]	; 0x5c
 8005188:	e7be      	b.n	8005108 <_strtod_l+0x30>
 800518a:	2a2d      	cmp	r2, #45	; 0x2d
 800518c:	d1c7      	bne.n	800511e <_strtod_l+0x46>
 800518e:	2201      	movs	r2, #1
 8005190:	920a      	str	r2, [sp, #40]	; 0x28
 8005192:	1c5a      	adds	r2, r3, #1
 8005194:	9217      	str	r2, [sp, #92]	; 0x5c
 8005196:	785b      	ldrb	r3, [r3, #1]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d1c2      	bne.n	8005122 <_strtod_l+0x4a>
 800519c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800519e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	f040 856e 	bne.w	8005c84 <_strtod_l+0xbac>
 80051a8:	4652      	mov	r2, sl
 80051aa:	465b      	mov	r3, fp
 80051ac:	e7e1      	b.n	8005172 <_strtod_l+0x9a>
 80051ae:	2200      	movs	r2, #0
 80051b0:	e7ee      	b.n	8005190 <_strtod_l+0xb8>
 80051b2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80051b4:	b13a      	cbz	r2, 80051c6 <_strtod_l+0xee>
 80051b6:	2135      	movs	r1, #53	; 0x35
 80051b8:	a81a      	add	r0, sp, #104	; 0x68
 80051ba:	f002 fce6 	bl	8007b8a <__copybits>
 80051be:	9918      	ldr	r1, [sp, #96]	; 0x60
 80051c0:	4620      	mov	r0, r4
 80051c2:	f002 f8a5 	bl	8007310 <_Bfree>
 80051c6:	3f01      	subs	r7, #1
 80051c8:	2f04      	cmp	r7, #4
 80051ca:	d806      	bhi.n	80051da <_strtod_l+0x102>
 80051cc:	e8df f007 	tbb	[pc, r7]
 80051d0:	1714030a 	.word	0x1714030a
 80051d4:	0a          	.byte	0x0a
 80051d5:	00          	.byte	0x00
 80051d6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80051da:	0728      	lsls	r0, r5, #28
 80051dc:	d5c0      	bpl.n	8005160 <_strtod_l+0x88>
 80051de:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80051e2:	e7bd      	b.n	8005160 <_strtod_l+0x88>
 80051e4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80051e8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80051ea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80051ee:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80051f2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80051f6:	e7f0      	b.n	80051da <_strtod_l+0x102>
 80051f8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800537c <_strtod_l+0x2a4>
 80051fc:	e7ed      	b.n	80051da <_strtod_l+0x102>
 80051fe:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8005202:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8005206:	e7e8      	b.n	80051da <_strtod_l+0x102>
 8005208:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800520a:	1c5a      	adds	r2, r3, #1
 800520c:	9217      	str	r2, [sp, #92]	; 0x5c
 800520e:	785b      	ldrb	r3, [r3, #1]
 8005210:	2b30      	cmp	r3, #48	; 0x30
 8005212:	d0f9      	beq.n	8005208 <_strtod_l+0x130>
 8005214:	2b00      	cmp	r3, #0
 8005216:	d0a3      	beq.n	8005160 <_strtod_l+0x88>
 8005218:	2301      	movs	r3, #1
 800521a:	f04f 0900 	mov.w	r9, #0
 800521e:	9304      	str	r3, [sp, #16]
 8005220:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005222:	9308      	str	r3, [sp, #32]
 8005224:	f8cd 901c 	str.w	r9, [sp, #28]
 8005228:	464f      	mov	r7, r9
 800522a:	220a      	movs	r2, #10
 800522c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800522e:	7806      	ldrb	r6, [r0, #0]
 8005230:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005234:	b2d9      	uxtb	r1, r3
 8005236:	2909      	cmp	r1, #9
 8005238:	d92a      	bls.n	8005290 <_strtod_l+0x1b8>
 800523a:	9905      	ldr	r1, [sp, #20]
 800523c:	462a      	mov	r2, r5
 800523e:	f003 fac3 	bl	80087c8 <strncmp>
 8005242:	b398      	cbz	r0, 80052ac <_strtod_l+0x1d4>
 8005244:	2000      	movs	r0, #0
 8005246:	4632      	mov	r2, r6
 8005248:	463d      	mov	r5, r7
 800524a:	9005      	str	r0, [sp, #20]
 800524c:	4603      	mov	r3, r0
 800524e:	2a65      	cmp	r2, #101	; 0x65
 8005250:	d001      	beq.n	8005256 <_strtod_l+0x17e>
 8005252:	2a45      	cmp	r2, #69	; 0x45
 8005254:	d118      	bne.n	8005288 <_strtod_l+0x1b0>
 8005256:	b91d      	cbnz	r5, 8005260 <_strtod_l+0x188>
 8005258:	9a04      	ldr	r2, [sp, #16]
 800525a:	4302      	orrs	r2, r0
 800525c:	d09e      	beq.n	800519c <_strtod_l+0xc4>
 800525e:	2500      	movs	r5, #0
 8005260:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8005264:	f108 0201 	add.w	r2, r8, #1
 8005268:	9217      	str	r2, [sp, #92]	; 0x5c
 800526a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800526e:	2a2b      	cmp	r2, #43	; 0x2b
 8005270:	d075      	beq.n	800535e <_strtod_l+0x286>
 8005272:	2a2d      	cmp	r2, #45	; 0x2d
 8005274:	d07b      	beq.n	800536e <_strtod_l+0x296>
 8005276:	f04f 0c00 	mov.w	ip, #0
 800527a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800527e:	2909      	cmp	r1, #9
 8005280:	f240 8082 	bls.w	8005388 <_strtod_l+0x2b0>
 8005284:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005288:	2600      	movs	r6, #0
 800528a:	e09d      	b.n	80053c8 <_strtod_l+0x2f0>
 800528c:	2300      	movs	r3, #0
 800528e:	e7c4      	b.n	800521a <_strtod_l+0x142>
 8005290:	2f08      	cmp	r7, #8
 8005292:	bfd8      	it	le
 8005294:	9907      	ldrle	r1, [sp, #28]
 8005296:	f100 0001 	add.w	r0, r0, #1
 800529a:	bfda      	itte	le
 800529c:	fb02 3301 	mlale	r3, r2, r1, r3
 80052a0:	9307      	strle	r3, [sp, #28]
 80052a2:	fb02 3909 	mlagt	r9, r2, r9, r3
 80052a6:	3701      	adds	r7, #1
 80052a8:	9017      	str	r0, [sp, #92]	; 0x5c
 80052aa:	e7bf      	b.n	800522c <_strtod_l+0x154>
 80052ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80052ae:	195a      	adds	r2, r3, r5
 80052b0:	9217      	str	r2, [sp, #92]	; 0x5c
 80052b2:	5d5a      	ldrb	r2, [r3, r5]
 80052b4:	2f00      	cmp	r7, #0
 80052b6:	d037      	beq.n	8005328 <_strtod_l+0x250>
 80052b8:	9005      	str	r0, [sp, #20]
 80052ba:	463d      	mov	r5, r7
 80052bc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80052c0:	2b09      	cmp	r3, #9
 80052c2:	d912      	bls.n	80052ea <_strtod_l+0x212>
 80052c4:	2301      	movs	r3, #1
 80052c6:	e7c2      	b.n	800524e <_strtod_l+0x176>
 80052c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80052ca:	1c5a      	adds	r2, r3, #1
 80052cc:	9217      	str	r2, [sp, #92]	; 0x5c
 80052ce:	785a      	ldrb	r2, [r3, #1]
 80052d0:	3001      	adds	r0, #1
 80052d2:	2a30      	cmp	r2, #48	; 0x30
 80052d4:	d0f8      	beq.n	80052c8 <_strtod_l+0x1f0>
 80052d6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80052da:	2b08      	cmp	r3, #8
 80052dc:	f200 84d9 	bhi.w	8005c92 <_strtod_l+0xbba>
 80052e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80052e2:	9005      	str	r0, [sp, #20]
 80052e4:	2000      	movs	r0, #0
 80052e6:	9308      	str	r3, [sp, #32]
 80052e8:	4605      	mov	r5, r0
 80052ea:	3a30      	subs	r2, #48	; 0x30
 80052ec:	f100 0301 	add.w	r3, r0, #1
 80052f0:	d014      	beq.n	800531c <_strtod_l+0x244>
 80052f2:	9905      	ldr	r1, [sp, #20]
 80052f4:	4419      	add	r1, r3
 80052f6:	9105      	str	r1, [sp, #20]
 80052f8:	462b      	mov	r3, r5
 80052fa:	eb00 0e05 	add.w	lr, r0, r5
 80052fe:	210a      	movs	r1, #10
 8005300:	4573      	cmp	r3, lr
 8005302:	d113      	bne.n	800532c <_strtod_l+0x254>
 8005304:	182b      	adds	r3, r5, r0
 8005306:	2b08      	cmp	r3, #8
 8005308:	f105 0501 	add.w	r5, r5, #1
 800530c:	4405      	add	r5, r0
 800530e:	dc1c      	bgt.n	800534a <_strtod_l+0x272>
 8005310:	9907      	ldr	r1, [sp, #28]
 8005312:	230a      	movs	r3, #10
 8005314:	fb03 2301 	mla	r3, r3, r1, r2
 8005318:	9307      	str	r3, [sp, #28]
 800531a:	2300      	movs	r3, #0
 800531c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800531e:	1c51      	adds	r1, r2, #1
 8005320:	9117      	str	r1, [sp, #92]	; 0x5c
 8005322:	7852      	ldrb	r2, [r2, #1]
 8005324:	4618      	mov	r0, r3
 8005326:	e7c9      	b.n	80052bc <_strtod_l+0x1e4>
 8005328:	4638      	mov	r0, r7
 800532a:	e7d2      	b.n	80052d2 <_strtod_l+0x1fa>
 800532c:	2b08      	cmp	r3, #8
 800532e:	dc04      	bgt.n	800533a <_strtod_l+0x262>
 8005330:	9e07      	ldr	r6, [sp, #28]
 8005332:	434e      	muls	r6, r1
 8005334:	9607      	str	r6, [sp, #28]
 8005336:	3301      	adds	r3, #1
 8005338:	e7e2      	b.n	8005300 <_strtod_l+0x228>
 800533a:	f103 0c01 	add.w	ip, r3, #1
 800533e:	f1bc 0f10 	cmp.w	ip, #16
 8005342:	bfd8      	it	le
 8005344:	fb01 f909 	mulle.w	r9, r1, r9
 8005348:	e7f5      	b.n	8005336 <_strtod_l+0x25e>
 800534a:	2d10      	cmp	r5, #16
 800534c:	bfdc      	itt	le
 800534e:	230a      	movle	r3, #10
 8005350:	fb03 2909 	mlale	r9, r3, r9, r2
 8005354:	e7e1      	b.n	800531a <_strtod_l+0x242>
 8005356:	2300      	movs	r3, #0
 8005358:	9305      	str	r3, [sp, #20]
 800535a:	2301      	movs	r3, #1
 800535c:	e77c      	b.n	8005258 <_strtod_l+0x180>
 800535e:	f04f 0c00 	mov.w	ip, #0
 8005362:	f108 0202 	add.w	r2, r8, #2
 8005366:	9217      	str	r2, [sp, #92]	; 0x5c
 8005368:	f898 2002 	ldrb.w	r2, [r8, #2]
 800536c:	e785      	b.n	800527a <_strtod_l+0x1a2>
 800536e:	f04f 0c01 	mov.w	ip, #1
 8005372:	e7f6      	b.n	8005362 <_strtod_l+0x28a>
 8005374:	080097c8 	.word	0x080097c8
 8005378:	0800957c 	.word	0x0800957c
 800537c:	7ff00000 	.word	0x7ff00000
 8005380:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005382:	1c51      	adds	r1, r2, #1
 8005384:	9117      	str	r1, [sp, #92]	; 0x5c
 8005386:	7852      	ldrb	r2, [r2, #1]
 8005388:	2a30      	cmp	r2, #48	; 0x30
 800538a:	d0f9      	beq.n	8005380 <_strtod_l+0x2a8>
 800538c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005390:	2908      	cmp	r1, #8
 8005392:	f63f af79 	bhi.w	8005288 <_strtod_l+0x1b0>
 8005396:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800539a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800539c:	9206      	str	r2, [sp, #24]
 800539e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80053a0:	1c51      	adds	r1, r2, #1
 80053a2:	9117      	str	r1, [sp, #92]	; 0x5c
 80053a4:	7852      	ldrb	r2, [r2, #1]
 80053a6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80053aa:	2e09      	cmp	r6, #9
 80053ac:	d937      	bls.n	800541e <_strtod_l+0x346>
 80053ae:	9e06      	ldr	r6, [sp, #24]
 80053b0:	1b89      	subs	r1, r1, r6
 80053b2:	2908      	cmp	r1, #8
 80053b4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80053b8:	dc02      	bgt.n	80053c0 <_strtod_l+0x2e8>
 80053ba:	4576      	cmp	r6, lr
 80053bc:	bfa8      	it	ge
 80053be:	4676      	movge	r6, lr
 80053c0:	f1bc 0f00 	cmp.w	ip, #0
 80053c4:	d000      	beq.n	80053c8 <_strtod_l+0x2f0>
 80053c6:	4276      	negs	r6, r6
 80053c8:	2d00      	cmp	r5, #0
 80053ca:	d14d      	bne.n	8005468 <_strtod_l+0x390>
 80053cc:	9904      	ldr	r1, [sp, #16]
 80053ce:	4301      	orrs	r1, r0
 80053d0:	f47f aec6 	bne.w	8005160 <_strtod_l+0x88>
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	f47f aee1 	bne.w	800519c <_strtod_l+0xc4>
 80053da:	2a69      	cmp	r2, #105	; 0x69
 80053dc:	d027      	beq.n	800542e <_strtod_l+0x356>
 80053de:	dc24      	bgt.n	800542a <_strtod_l+0x352>
 80053e0:	2a49      	cmp	r2, #73	; 0x49
 80053e2:	d024      	beq.n	800542e <_strtod_l+0x356>
 80053e4:	2a4e      	cmp	r2, #78	; 0x4e
 80053e6:	f47f aed9 	bne.w	800519c <_strtod_l+0xc4>
 80053ea:	499f      	ldr	r1, [pc, #636]	; (8005668 <_strtod_l+0x590>)
 80053ec:	a817      	add	r0, sp, #92	; 0x5c
 80053ee:	f001 fe61 	bl	80070b4 <__match>
 80053f2:	2800      	cmp	r0, #0
 80053f4:	f43f aed2 	beq.w	800519c <_strtod_l+0xc4>
 80053f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	2b28      	cmp	r3, #40	; 0x28
 80053fe:	d12d      	bne.n	800545c <_strtod_l+0x384>
 8005400:	499a      	ldr	r1, [pc, #616]	; (800566c <_strtod_l+0x594>)
 8005402:	aa1a      	add	r2, sp, #104	; 0x68
 8005404:	a817      	add	r0, sp, #92	; 0x5c
 8005406:	f001 fe69 	bl	80070dc <__hexnan>
 800540a:	2805      	cmp	r0, #5
 800540c:	d126      	bne.n	800545c <_strtod_l+0x384>
 800540e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005410:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8005414:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005418:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800541c:	e6a0      	b.n	8005160 <_strtod_l+0x88>
 800541e:	210a      	movs	r1, #10
 8005420:	fb01 2e0e 	mla	lr, r1, lr, r2
 8005424:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005428:	e7b9      	b.n	800539e <_strtod_l+0x2c6>
 800542a:	2a6e      	cmp	r2, #110	; 0x6e
 800542c:	e7db      	b.n	80053e6 <_strtod_l+0x30e>
 800542e:	4990      	ldr	r1, [pc, #576]	; (8005670 <_strtod_l+0x598>)
 8005430:	a817      	add	r0, sp, #92	; 0x5c
 8005432:	f001 fe3f 	bl	80070b4 <__match>
 8005436:	2800      	cmp	r0, #0
 8005438:	f43f aeb0 	beq.w	800519c <_strtod_l+0xc4>
 800543c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800543e:	498d      	ldr	r1, [pc, #564]	; (8005674 <_strtod_l+0x59c>)
 8005440:	3b01      	subs	r3, #1
 8005442:	a817      	add	r0, sp, #92	; 0x5c
 8005444:	9317      	str	r3, [sp, #92]	; 0x5c
 8005446:	f001 fe35 	bl	80070b4 <__match>
 800544a:	b910      	cbnz	r0, 8005452 <_strtod_l+0x37a>
 800544c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800544e:	3301      	adds	r3, #1
 8005450:	9317      	str	r3, [sp, #92]	; 0x5c
 8005452:	f8df b230 	ldr.w	fp, [pc, #560]	; 8005684 <_strtod_l+0x5ac>
 8005456:	f04f 0a00 	mov.w	sl, #0
 800545a:	e681      	b.n	8005160 <_strtod_l+0x88>
 800545c:	4886      	ldr	r0, [pc, #536]	; (8005678 <_strtod_l+0x5a0>)
 800545e:	f003 f963 	bl	8008728 <nan>
 8005462:	ec5b ab10 	vmov	sl, fp, d0
 8005466:	e67b      	b.n	8005160 <_strtod_l+0x88>
 8005468:	9b05      	ldr	r3, [sp, #20]
 800546a:	9807      	ldr	r0, [sp, #28]
 800546c:	1af3      	subs	r3, r6, r3
 800546e:	2f00      	cmp	r7, #0
 8005470:	bf08      	it	eq
 8005472:	462f      	moveq	r7, r5
 8005474:	2d10      	cmp	r5, #16
 8005476:	9306      	str	r3, [sp, #24]
 8005478:	46a8      	mov	r8, r5
 800547a:	bfa8      	it	ge
 800547c:	f04f 0810 	movge.w	r8, #16
 8005480:	f7fb f858 	bl	8000534 <__aeabi_ui2d>
 8005484:	2d09      	cmp	r5, #9
 8005486:	4682      	mov	sl, r0
 8005488:	468b      	mov	fp, r1
 800548a:	dd13      	ble.n	80054b4 <_strtod_l+0x3dc>
 800548c:	4b7b      	ldr	r3, [pc, #492]	; (800567c <_strtod_l+0x5a4>)
 800548e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005492:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005496:	f7fb f8c7 	bl	8000628 <__aeabi_dmul>
 800549a:	4682      	mov	sl, r0
 800549c:	4648      	mov	r0, r9
 800549e:	468b      	mov	fp, r1
 80054a0:	f7fb f848 	bl	8000534 <__aeabi_ui2d>
 80054a4:	4602      	mov	r2, r0
 80054a6:	460b      	mov	r3, r1
 80054a8:	4650      	mov	r0, sl
 80054aa:	4659      	mov	r1, fp
 80054ac:	f7fa ff06 	bl	80002bc <__adddf3>
 80054b0:	4682      	mov	sl, r0
 80054b2:	468b      	mov	fp, r1
 80054b4:	2d0f      	cmp	r5, #15
 80054b6:	dc38      	bgt.n	800552a <_strtod_l+0x452>
 80054b8:	9b06      	ldr	r3, [sp, #24]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	f43f ae50 	beq.w	8005160 <_strtod_l+0x88>
 80054c0:	dd24      	ble.n	800550c <_strtod_l+0x434>
 80054c2:	2b16      	cmp	r3, #22
 80054c4:	dc0b      	bgt.n	80054de <_strtod_l+0x406>
 80054c6:	496d      	ldr	r1, [pc, #436]	; (800567c <_strtod_l+0x5a4>)
 80054c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80054cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80054d0:	4652      	mov	r2, sl
 80054d2:	465b      	mov	r3, fp
 80054d4:	f7fb f8a8 	bl	8000628 <__aeabi_dmul>
 80054d8:	4682      	mov	sl, r0
 80054da:	468b      	mov	fp, r1
 80054dc:	e640      	b.n	8005160 <_strtod_l+0x88>
 80054de:	9a06      	ldr	r2, [sp, #24]
 80054e0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80054e4:	4293      	cmp	r3, r2
 80054e6:	db20      	blt.n	800552a <_strtod_l+0x452>
 80054e8:	4c64      	ldr	r4, [pc, #400]	; (800567c <_strtod_l+0x5a4>)
 80054ea:	f1c5 050f 	rsb	r5, r5, #15
 80054ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80054f2:	4652      	mov	r2, sl
 80054f4:	465b      	mov	r3, fp
 80054f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80054fa:	f7fb f895 	bl	8000628 <__aeabi_dmul>
 80054fe:	9b06      	ldr	r3, [sp, #24]
 8005500:	1b5d      	subs	r5, r3, r5
 8005502:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005506:	e9d4 2300 	ldrd	r2, r3, [r4]
 800550a:	e7e3      	b.n	80054d4 <_strtod_l+0x3fc>
 800550c:	9b06      	ldr	r3, [sp, #24]
 800550e:	3316      	adds	r3, #22
 8005510:	db0b      	blt.n	800552a <_strtod_l+0x452>
 8005512:	9b05      	ldr	r3, [sp, #20]
 8005514:	1b9e      	subs	r6, r3, r6
 8005516:	4b59      	ldr	r3, [pc, #356]	; (800567c <_strtod_l+0x5a4>)
 8005518:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800551c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005520:	4650      	mov	r0, sl
 8005522:	4659      	mov	r1, fp
 8005524:	f7fb f9aa 	bl	800087c <__aeabi_ddiv>
 8005528:	e7d6      	b.n	80054d8 <_strtod_l+0x400>
 800552a:	9b06      	ldr	r3, [sp, #24]
 800552c:	eba5 0808 	sub.w	r8, r5, r8
 8005530:	4498      	add	r8, r3
 8005532:	f1b8 0f00 	cmp.w	r8, #0
 8005536:	dd74      	ble.n	8005622 <_strtod_l+0x54a>
 8005538:	f018 030f 	ands.w	r3, r8, #15
 800553c:	d00a      	beq.n	8005554 <_strtod_l+0x47c>
 800553e:	494f      	ldr	r1, [pc, #316]	; (800567c <_strtod_l+0x5a4>)
 8005540:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005544:	4652      	mov	r2, sl
 8005546:	465b      	mov	r3, fp
 8005548:	e9d1 0100 	ldrd	r0, r1, [r1]
 800554c:	f7fb f86c 	bl	8000628 <__aeabi_dmul>
 8005550:	4682      	mov	sl, r0
 8005552:	468b      	mov	fp, r1
 8005554:	f038 080f 	bics.w	r8, r8, #15
 8005558:	d04f      	beq.n	80055fa <_strtod_l+0x522>
 800555a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800555e:	dd22      	ble.n	80055a6 <_strtod_l+0x4ce>
 8005560:	2500      	movs	r5, #0
 8005562:	462e      	mov	r6, r5
 8005564:	9507      	str	r5, [sp, #28]
 8005566:	9505      	str	r5, [sp, #20]
 8005568:	2322      	movs	r3, #34	; 0x22
 800556a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8005684 <_strtod_l+0x5ac>
 800556e:	6023      	str	r3, [r4, #0]
 8005570:	f04f 0a00 	mov.w	sl, #0
 8005574:	9b07      	ldr	r3, [sp, #28]
 8005576:	2b00      	cmp	r3, #0
 8005578:	f43f adf2 	beq.w	8005160 <_strtod_l+0x88>
 800557c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800557e:	4620      	mov	r0, r4
 8005580:	f001 fec6 	bl	8007310 <_Bfree>
 8005584:	9905      	ldr	r1, [sp, #20]
 8005586:	4620      	mov	r0, r4
 8005588:	f001 fec2 	bl	8007310 <_Bfree>
 800558c:	4631      	mov	r1, r6
 800558e:	4620      	mov	r0, r4
 8005590:	f001 febe 	bl	8007310 <_Bfree>
 8005594:	9907      	ldr	r1, [sp, #28]
 8005596:	4620      	mov	r0, r4
 8005598:	f001 feba 	bl	8007310 <_Bfree>
 800559c:	4629      	mov	r1, r5
 800559e:	4620      	mov	r0, r4
 80055a0:	f001 feb6 	bl	8007310 <_Bfree>
 80055a4:	e5dc      	b.n	8005160 <_strtod_l+0x88>
 80055a6:	4b36      	ldr	r3, [pc, #216]	; (8005680 <_strtod_l+0x5a8>)
 80055a8:	9304      	str	r3, [sp, #16]
 80055aa:	2300      	movs	r3, #0
 80055ac:	ea4f 1828 	mov.w	r8, r8, asr #4
 80055b0:	4650      	mov	r0, sl
 80055b2:	4659      	mov	r1, fp
 80055b4:	4699      	mov	r9, r3
 80055b6:	f1b8 0f01 	cmp.w	r8, #1
 80055ba:	dc21      	bgt.n	8005600 <_strtod_l+0x528>
 80055bc:	b10b      	cbz	r3, 80055c2 <_strtod_l+0x4ea>
 80055be:	4682      	mov	sl, r0
 80055c0:	468b      	mov	fp, r1
 80055c2:	4b2f      	ldr	r3, [pc, #188]	; (8005680 <_strtod_l+0x5a8>)
 80055c4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80055c8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80055cc:	4652      	mov	r2, sl
 80055ce:	465b      	mov	r3, fp
 80055d0:	e9d9 0100 	ldrd	r0, r1, [r9]
 80055d4:	f7fb f828 	bl	8000628 <__aeabi_dmul>
 80055d8:	4b2a      	ldr	r3, [pc, #168]	; (8005684 <_strtod_l+0x5ac>)
 80055da:	460a      	mov	r2, r1
 80055dc:	400b      	ands	r3, r1
 80055de:	492a      	ldr	r1, [pc, #168]	; (8005688 <_strtod_l+0x5b0>)
 80055e0:	428b      	cmp	r3, r1
 80055e2:	4682      	mov	sl, r0
 80055e4:	d8bc      	bhi.n	8005560 <_strtod_l+0x488>
 80055e6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80055ea:	428b      	cmp	r3, r1
 80055ec:	bf86      	itte	hi
 80055ee:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800568c <_strtod_l+0x5b4>
 80055f2:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 80055f6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80055fa:	2300      	movs	r3, #0
 80055fc:	9304      	str	r3, [sp, #16]
 80055fe:	e084      	b.n	800570a <_strtod_l+0x632>
 8005600:	f018 0f01 	tst.w	r8, #1
 8005604:	d005      	beq.n	8005612 <_strtod_l+0x53a>
 8005606:	9b04      	ldr	r3, [sp, #16]
 8005608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800560c:	f7fb f80c 	bl	8000628 <__aeabi_dmul>
 8005610:	2301      	movs	r3, #1
 8005612:	9a04      	ldr	r2, [sp, #16]
 8005614:	3208      	adds	r2, #8
 8005616:	f109 0901 	add.w	r9, r9, #1
 800561a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800561e:	9204      	str	r2, [sp, #16]
 8005620:	e7c9      	b.n	80055b6 <_strtod_l+0x4de>
 8005622:	d0ea      	beq.n	80055fa <_strtod_l+0x522>
 8005624:	f1c8 0800 	rsb	r8, r8, #0
 8005628:	f018 020f 	ands.w	r2, r8, #15
 800562c:	d00a      	beq.n	8005644 <_strtod_l+0x56c>
 800562e:	4b13      	ldr	r3, [pc, #76]	; (800567c <_strtod_l+0x5a4>)
 8005630:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005634:	4650      	mov	r0, sl
 8005636:	4659      	mov	r1, fp
 8005638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800563c:	f7fb f91e 	bl	800087c <__aeabi_ddiv>
 8005640:	4682      	mov	sl, r0
 8005642:	468b      	mov	fp, r1
 8005644:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005648:	d0d7      	beq.n	80055fa <_strtod_l+0x522>
 800564a:	f1b8 0f1f 	cmp.w	r8, #31
 800564e:	dd1f      	ble.n	8005690 <_strtod_l+0x5b8>
 8005650:	2500      	movs	r5, #0
 8005652:	462e      	mov	r6, r5
 8005654:	9507      	str	r5, [sp, #28]
 8005656:	9505      	str	r5, [sp, #20]
 8005658:	2322      	movs	r3, #34	; 0x22
 800565a:	f04f 0a00 	mov.w	sl, #0
 800565e:	f04f 0b00 	mov.w	fp, #0
 8005662:	6023      	str	r3, [r4, #0]
 8005664:	e786      	b.n	8005574 <_strtod_l+0x49c>
 8005666:	bf00      	nop
 8005668:	08009551 	.word	0x08009551
 800566c:	08009590 	.word	0x08009590
 8005670:	08009549 	.word	0x08009549
 8005674:	080096d4 	.word	0x080096d4
 8005678:	0800999b 	.word	0x0800999b
 800567c:	08009860 	.word	0x08009860
 8005680:	08009838 	.word	0x08009838
 8005684:	7ff00000 	.word	0x7ff00000
 8005688:	7ca00000 	.word	0x7ca00000
 800568c:	7fefffff 	.word	0x7fefffff
 8005690:	f018 0310 	ands.w	r3, r8, #16
 8005694:	bf18      	it	ne
 8005696:	236a      	movne	r3, #106	; 0x6a
 8005698:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8005a48 <_strtod_l+0x970>
 800569c:	9304      	str	r3, [sp, #16]
 800569e:	4650      	mov	r0, sl
 80056a0:	4659      	mov	r1, fp
 80056a2:	2300      	movs	r3, #0
 80056a4:	f018 0f01 	tst.w	r8, #1
 80056a8:	d004      	beq.n	80056b4 <_strtod_l+0x5dc>
 80056aa:	e9d9 2300 	ldrd	r2, r3, [r9]
 80056ae:	f7fa ffbb 	bl	8000628 <__aeabi_dmul>
 80056b2:	2301      	movs	r3, #1
 80056b4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80056b8:	f109 0908 	add.w	r9, r9, #8
 80056bc:	d1f2      	bne.n	80056a4 <_strtod_l+0x5cc>
 80056be:	b10b      	cbz	r3, 80056c4 <_strtod_l+0x5ec>
 80056c0:	4682      	mov	sl, r0
 80056c2:	468b      	mov	fp, r1
 80056c4:	9b04      	ldr	r3, [sp, #16]
 80056c6:	b1c3      	cbz	r3, 80056fa <_strtod_l+0x622>
 80056c8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80056cc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	4659      	mov	r1, fp
 80056d4:	dd11      	ble.n	80056fa <_strtod_l+0x622>
 80056d6:	2b1f      	cmp	r3, #31
 80056d8:	f340 8124 	ble.w	8005924 <_strtod_l+0x84c>
 80056dc:	2b34      	cmp	r3, #52	; 0x34
 80056de:	bfde      	ittt	le
 80056e0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80056e4:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 80056e8:	fa03 f202 	lslle.w	r2, r3, r2
 80056ec:	f04f 0a00 	mov.w	sl, #0
 80056f0:	bfcc      	ite	gt
 80056f2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80056f6:	ea02 0b01 	andle.w	fp, r2, r1
 80056fa:	2200      	movs	r2, #0
 80056fc:	2300      	movs	r3, #0
 80056fe:	4650      	mov	r0, sl
 8005700:	4659      	mov	r1, fp
 8005702:	f7fb f9f9 	bl	8000af8 <__aeabi_dcmpeq>
 8005706:	2800      	cmp	r0, #0
 8005708:	d1a2      	bne.n	8005650 <_strtod_l+0x578>
 800570a:	9b07      	ldr	r3, [sp, #28]
 800570c:	9300      	str	r3, [sp, #0]
 800570e:	9908      	ldr	r1, [sp, #32]
 8005710:	462b      	mov	r3, r5
 8005712:	463a      	mov	r2, r7
 8005714:	4620      	mov	r0, r4
 8005716:	f001 fe63 	bl	80073e0 <__s2b>
 800571a:	9007      	str	r0, [sp, #28]
 800571c:	2800      	cmp	r0, #0
 800571e:	f43f af1f 	beq.w	8005560 <_strtod_l+0x488>
 8005722:	9b05      	ldr	r3, [sp, #20]
 8005724:	1b9e      	subs	r6, r3, r6
 8005726:	9b06      	ldr	r3, [sp, #24]
 8005728:	2b00      	cmp	r3, #0
 800572a:	bfb4      	ite	lt
 800572c:	4633      	movlt	r3, r6
 800572e:	2300      	movge	r3, #0
 8005730:	930c      	str	r3, [sp, #48]	; 0x30
 8005732:	9b06      	ldr	r3, [sp, #24]
 8005734:	2500      	movs	r5, #0
 8005736:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800573a:	9312      	str	r3, [sp, #72]	; 0x48
 800573c:	462e      	mov	r6, r5
 800573e:	9b07      	ldr	r3, [sp, #28]
 8005740:	4620      	mov	r0, r4
 8005742:	6859      	ldr	r1, [r3, #4]
 8005744:	f001 fda4 	bl	8007290 <_Balloc>
 8005748:	9005      	str	r0, [sp, #20]
 800574a:	2800      	cmp	r0, #0
 800574c:	f43f af0c 	beq.w	8005568 <_strtod_l+0x490>
 8005750:	9b07      	ldr	r3, [sp, #28]
 8005752:	691a      	ldr	r2, [r3, #16]
 8005754:	3202      	adds	r2, #2
 8005756:	f103 010c 	add.w	r1, r3, #12
 800575a:	0092      	lsls	r2, r2, #2
 800575c:	300c      	adds	r0, #12
 800575e:	f001 fd89 	bl	8007274 <memcpy>
 8005762:	ec4b ab10 	vmov	d0, sl, fp
 8005766:	aa1a      	add	r2, sp, #104	; 0x68
 8005768:	a919      	add	r1, sp, #100	; 0x64
 800576a:	4620      	mov	r0, r4
 800576c:	f002 f97e 	bl	8007a6c <__d2b>
 8005770:	ec4b ab18 	vmov	d8, sl, fp
 8005774:	9018      	str	r0, [sp, #96]	; 0x60
 8005776:	2800      	cmp	r0, #0
 8005778:	f43f aef6 	beq.w	8005568 <_strtod_l+0x490>
 800577c:	2101      	movs	r1, #1
 800577e:	4620      	mov	r0, r4
 8005780:	f001 fec8 	bl	8007514 <__i2b>
 8005784:	4606      	mov	r6, r0
 8005786:	2800      	cmp	r0, #0
 8005788:	f43f aeee 	beq.w	8005568 <_strtod_l+0x490>
 800578c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800578e:	9904      	ldr	r1, [sp, #16]
 8005790:	2b00      	cmp	r3, #0
 8005792:	bfab      	itete	ge
 8005794:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8005796:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8005798:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800579a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800579e:	bfac      	ite	ge
 80057a0:	eb03 0902 	addge.w	r9, r3, r2
 80057a4:	1ad7      	sublt	r7, r2, r3
 80057a6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80057a8:	eba3 0801 	sub.w	r8, r3, r1
 80057ac:	4490      	add	r8, r2
 80057ae:	4ba1      	ldr	r3, [pc, #644]	; (8005a34 <_strtod_l+0x95c>)
 80057b0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80057b4:	4598      	cmp	r8, r3
 80057b6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80057ba:	f280 80c7 	bge.w	800594c <_strtod_l+0x874>
 80057be:	eba3 0308 	sub.w	r3, r3, r8
 80057c2:	2b1f      	cmp	r3, #31
 80057c4:	eba2 0203 	sub.w	r2, r2, r3
 80057c8:	f04f 0101 	mov.w	r1, #1
 80057cc:	f300 80b1 	bgt.w	8005932 <_strtod_l+0x85a>
 80057d0:	fa01 f303 	lsl.w	r3, r1, r3
 80057d4:	930d      	str	r3, [sp, #52]	; 0x34
 80057d6:	2300      	movs	r3, #0
 80057d8:	9308      	str	r3, [sp, #32]
 80057da:	eb09 0802 	add.w	r8, r9, r2
 80057de:	9b04      	ldr	r3, [sp, #16]
 80057e0:	45c1      	cmp	r9, r8
 80057e2:	4417      	add	r7, r2
 80057e4:	441f      	add	r7, r3
 80057e6:	464b      	mov	r3, r9
 80057e8:	bfa8      	it	ge
 80057ea:	4643      	movge	r3, r8
 80057ec:	42bb      	cmp	r3, r7
 80057ee:	bfa8      	it	ge
 80057f0:	463b      	movge	r3, r7
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	bfc2      	ittt	gt
 80057f6:	eba8 0803 	subgt.w	r8, r8, r3
 80057fa:	1aff      	subgt	r7, r7, r3
 80057fc:	eba9 0903 	subgt.w	r9, r9, r3
 8005800:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005802:	2b00      	cmp	r3, #0
 8005804:	dd17      	ble.n	8005836 <_strtod_l+0x75e>
 8005806:	4631      	mov	r1, r6
 8005808:	461a      	mov	r2, r3
 800580a:	4620      	mov	r0, r4
 800580c:	f001 ff42 	bl	8007694 <__pow5mult>
 8005810:	4606      	mov	r6, r0
 8005812:	2800      	cmp	r0, #0
 8005814:	f43f aea8 	beq.w	8005568 <_strtod_l+0x490>
 8005818:	4601      	mov	r1, r0
 800581a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800581c:	4620      	mov	r0, r4
 800581e:	f001 fe8f 	bl	8007540 <__multiply>
 8005822:	900b      	str	r0, [sp, #44]	; 0x2c
 8005824:	2800      	cmp	r0, #0
 8005826:	f43f ae9f 	beq.w	8005568 <_strtod_l+0x490>
 800582a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800582c:	4620      	mov	r0, r4
 800582e:	f001 fd6f 	bl	8007310 <_Bfree>
 8005832:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005834:	9318      	str	r3, [sp, #96]	; 0x60
 8005836:	f1b8 0f00 	cmp.w	r8, #0
 800583a:	f300 808c 	bgt.w	8005956 <_strtod_l+0x87e>
 800583e:	9b06      	ldr	r3, [sp, #24]
 8005840:	2b00      	cmp	r3, #0
 8005842:	dd08      	ble.n	8005856 <_strtod_l+0x77e>
 8005844:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005846:	9905      	ldr	r1, [sp, #20]
 8005848:	4620      	mov	r0, r4
 800584a:	f001 ff23 	bl	8007694 <__pow5mult>
 800584e:	9005      	str	r0, [sp, #20]
 8005850:	2800      	cmp	r0, #0
 8005852:	f43f ae89 	beq.w	8005568 <_strtod_l+0x490>
 8005856:	2f00      	cmp	r7, #0
 8005858:	dd08      	ble.n	800586c <_strtod_l+0x794>
 800585a:	9905      	ldr	r1, [sp, #20]
 800585c:	463a      	mov	r2, r7
 800585e:	4620      	mov	r0, r4
 8005860:	f001 ff72 	bl	8007748 <__lshift>
 8005864:	9005      	str	r0, [sp, #20]
 8005866:	2800      	cmp	r0, #0
 8005868:	f43f ae7e 	beq.w	8005568 <_strtod_l+0x490>
 800586c:	f1b9 0f00 	cmp.w	r9, #0
 8005870:	dd08      	ble.n	8005884 <_strtod_l+0x7ac>
 8005872:	4631      	mov	r1, r6
 8005874:	464a      	mov	r2, r9
 8005876:	4620      	mov	r0, r4
 8005878:	f001 ff66 	bl	8007748 <__lshift>
 800587c:	4606      	mov	r6, r0
 800587e:	2800      	cmp	r0, #0
 8005880:	f43f ae72 	beq.w	8005568 <_strtod_l+0x490>
 8005884:	9a05      	ldr	r2, [sp, #20]
 8005886:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005888:	4620      	mov	r0, r4
 800588a:	f001 ffe9 	bl	8007860 <__mdiff>
 800588e:	4605      	mov	r5, r0
 8005890:	2800      	cmp	r0, #0
 8005892:	f43f ae69 	beq.w	8005568 <_strtod_l+0x490>
 8005896:	68c3      	ldr	r3, [r0, #12]
 8005898:	930b      	str	r3, [sp, #44]	; 0x2c
 800589a:	2300      	movs	r3, #0
 800589c:	60c3      	str	r3, [r0, #12]
 800589e:	4631      	mov	r1, r6
 80058a0:	f001 ffc2 	bl	8007828 <__mcmp>
 80058a4:	2800      	cmp	r0, #0
 80058a6:	da60      	bge.n	800596a <_strtod_l+0x892>
 80058a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058aa:	ea53 030a 	orrs.w	r3, r3, sl
 80058ae:	f040 8082 	bne.w	80059b6 <_strtod_l+0x8de>
 80058b2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d17d      	bne.n	80059b6 <_strtod_l+0x8de>
 80058ba:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80058be:	0d1b      	lsrs	r3, r3, #20
 80058c0:	051b      	lsls	r3, r3, #20
 80058c2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80058c6:	d976      	bls.n	80059b6 <_strtod_l+0x8de>
 80058c8:	696b      	ldr	r3, [r5, #20]
 80058ca:	b913      	cbnz	r3, 80058d2 <_strtod_l+0x7fa>
 80058cc:	692b      	ldr	r3, [r5, #16]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	dd71      	ble.n	80059b6 <_strtod_l+0x8de>
 80058d2:	4629      	mov	r1, r5
 80058d4:	2201      	movs	r2, #1
 80058d6:	4620      	mov	r0, r4
 80058d8:	f001 ff36 	bl	8007748 <__lshift>
 80058dc:	4631      	mov	r1, r6
 80058de:	4605      	mov	r5, r0
 80058e0:	f001 ffa2 	bl	8007828 <__mcmp>
 80058e4:	2800      	cmp	r0, #0
 80058e6:	dd66      	ble.n	80059b6 <_strtod_l+0x8de>
 80058e8:	9904      	ldr	r1, [sp, #16]
 80058ea:	4a53      	ldr	r2, [pc, #332]	; (8005a38 <_strtod_l+0x960>)
 80058ec:	465b      	mov	r3, fp
 80058ee:	2900      	cmp	r1, #0
 80058f0:	f000 8081 	beq.w	80059f6 <_strtod_l+0x91e>
 80058f4:	ea02 010b 	and.w	r1, r2, fp
 80058f8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80058fc:	dc7b      	bgt.n	80059f6 <_strtod_l+0x91e>
 80058fe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005902:	f77f aea9 	ble.w	8005658 <_strtod_l+0x580>
 8005906:	4b4d      	ldr	r3, [pc, #308]	; (8005a3c <_strtod_l+0x964>)
 8005908:	4650      	mov	r0, sl
 800590a:	4659      	mov	r1, fp
 800590c:	2200      	movs	r2, #0
 800590e:	f7fa fe8b 	bl	8000628 <__aeabi_dmul>
 8005912:	460b      	mov	r3, r1
 8005914:	4303      	orrs	r3, r0
 8005916:	bf08      	it	eq
 8005918:	2322      	moveq	r3, #34	; 0x22
 800591a:	4682      	mov	sl, r0
 800591c:	468b      	mov	fp, r1
 800591e:	bf08      	it	eq
 8005920:	6023      	streq	r3, [r4, #0]
 8005922:	e62b      	b.n	800557c <_strtod_l+0x4a4>
 8005924:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005928:	fa02 f303 	lsl.w	r3, r2, r3
 800592c:	ea03 0a0a 	and.w	sl, r3, sl
 8005930:	e6e3      	b.n	80056fa <_strtod_l+0x622>
 8005932:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8005936:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800593a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800593e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8005942:	fa01 f308 	lsl.w	r3, r1, r8
 8005946:	9308      	str	r3, [sp, #32]
 8005948:	910d      	str	r1, [sp, #52]	; 0x34
 800594a:	e746      	b.n	80057da <_strtod_l+0x702>
 800594c:	2300      	movs	r3, #0
 800594e:	9308      	str	r3, [sp, #32]
 8005950:	2301      	movs	r3, #1
 8005952:	930d      	str	r3, [sp, #52]	; 0x34
 8005954:	e741      	b.n	80057da <_strtod_l+0x702>
 8005956:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005958:	4642      	mov	r2, r8
 800595a:	4620      	mov	r0, r4
 800595c:	f001 fef4 	bl	8007748 <__lshift>
 8005960:	9018      	str	r0, [sp, #96]	; 0x60
 8005962:	2800      	cmp	r0, #0
 8005964:	f47f af6b 	bne.w	800583e <_strtod_l+0x766>
 8005968:	e5fe      	b.n	8005568 <_strtod_l+0x490>
 800596a:	465f      	mov	r7, fp
 800596c:	d16e      	bne.n	8005a4c <_strtod_l+0x974>
 800596e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005970:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005974:	b342      	cbz	r2, 80059c8 <_strtod_l+0x8f0>
 8005976:	4a32      	ldr	r2, [pc, #200]	; (8005a40 <_strtod_l+0x968>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d128      	bne.n	80059ce <_strtod_l+0x8f6>
 800597c:	9b04      	ldr	r3, [sp, #16]
 800597e:	4651      	mov	r1, sl
 8005980:	b1eb      	cbz	r3, 80059be <_strtod_l+0x8e6>
 8005982:	4b2d      	ldr	r3, [pc, #180]	; (8005a38 <_strtod_l+0x960>)
 8005984:	403b      	ands	r3, r7
 8005986:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800598a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800598e:	d819      	bhi.n	80059c4 <_strtod_l+0x8ec>
 8005990:	0d1b      	lsrs	r3, r3, #20
 8005992:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005996:	fa02 f303 	lsl.w	r3, r2, r3
 800599a:	4299      	cmp	r1, r3
 800599c:	d117      	bne.n	80059ce <_strtod_l+0x8f6>
 800599e:	4b29      	ldr	r3, [pc, #164]	; (8005a44 <_strtod_l+0x96c>)
 80059a0:	429f      	cmp	r7, r3
 80059a2:	d102      	bne.n	80059aa <_strtod_l+0x8d2>
 80059a4:	3101      	adds	r1, #1
 80059a6:	f43f addf 	beq.w	8005568 <_strtod_l+0x490>
 80059aa:	4b23      	ldr	r3, [pc, #140]	; (8005a38 <_strtod_l+0x960>)
 80059ac:	403b      	ands	r3, r7
 80059ae:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80059b2:	f04f 0a00 	mov.w	sl, #0
 80059b6:	9b04      	ldr	r3, [sp, #16]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d1a4      	bne.n	8005906 <_strtod_l+0x82e>
 80059bc:	e5de      	b.n	800557c <_strtod_l+0x4a4>
 80059be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80059c2:	e7ea      	b.n	800599a <_strtod_l+0x8c2>
 80059c4:	4613      	mov	r3, r2
 80059c6:	e7e8      	b.n	800599a <_strtod_l+0x8c2>
 80059c8:	ea53 030a 	orrs.w	r3, r3, sl
 80059cc:	d08c      	beq.n	80058e8 <_strtod_l+0x810>
 80059ce:	9b08      	ldr	r3, [sp, #32]
 80059d0:	b1db      	cbz	r3, 8005a0a <_strtod_l+0x932>
 80059d2:	423b      	tst	r3, r7
 80059d4:	d0ef      	beq.n	80059b6 <_strtod_l+0x8de>
 80059d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059d8:	9a04      	ldr	r2, [sp, #16]
 80059da:	4650      	mov	r0, sl
 80059dc:	4659      	mov	r1, fp
 80059de:	b1c3      	cbz	r3, 8005a12 <_strtod_l+0x93a>
 80059e0:	f7ff fb5d 	bl	800509e <sulp>
 80059e4:	4602      	mov	r2, r0
 80059e6:	460b      	mov	r3, r1
 80059e8:	ec51 0b18 	vmov	r0, r1, d8
 80059ec:	f7fa fc66 	bl	80002bc <__adddf3>
 80059f0:	4682      	mov	sl, r0
 80059f2:	468b      	mov	fp, r1
 80059f4:	e7df      	b.n	80059b6 <_strtod_l+0x8de>
 80059f6:	4013      	ands	r3, r2
 80059f8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80059fc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005a00:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005a04:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8005a08:	e7d5      	b.n	80059b6 <_strtod_l+0x8de>
 8005a0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a0c:	ea13 0f0a 	tst.w	r3, sl
 8005a10:	e7e0      	b.n	80059d4 <_strtod_l+0x8fc>
 8005a12:	f7ff fb44 	bl	800509e <sulp>
 8005a16:	4602      	mov	r2, r0
 8005a18:	460b      	mov	r3, r1
 8005a1a:	ec51 0b18 	vmov	r0, r1, d8
 8005a1e:	f7fa fc4b 	bl	80002b8 <__aeabi_dsub>
 8005a22:	2200      	movs	r2, #0
 8005a24:	2300      	movs	r3, #0
 8005a26:	4682      	mov	sl, r0
 8005a28:	468b      	mov	fp, r1
 8005a2a:	f7fb f865 	bl	8000af8 <__aeabi_dcmpeq>
 8005a2e:	2800      	cmp	r0, #0
 8005a30:	d0c1      	beq.n	80059b6 <_strtod_l+0x8de>
 8005a32:	e611      	b.n	8005658 <_strtod_l+0x580>
 8005a34:	fffffc02 	.word	0xfffffc02
 8005a38:	7ff00000 	.word	0x7ff00000
 8005a3c:	39500000 	.word	0x39500000
 8005a40:	000fffff 	.word	0x000fffff
 8005a44:	7fefffff 	.word	0x7fefffff
 8005a48:	080095a8 	.word	0x080095a8
 8005a4c:	4631      	mov	r1, r6
 8005a4e:	4628      	mov	r0, r5
 8005a50:	f002 f868 	bl	8007b24 <__ratio>
 8005a54:	ec59 8b10 	vmov	r8, r9, d0
 8005a58:	ee10 0a10 	vmov	r0, s0
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005a62:	4649      	mov	r1, r9
 8005a64:	f7fb f85c 	bl	8000b20 <__aeabi_dcmple>
 8005a68:	2800      	cmp	r0, #0
 8005a6a:	d07a      	beq.n	8005b62 <_strtod_l+0xa8a>
 8005a6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d04a      	beq.n	8005b08 <_strtod_l+0xa30>
 8005a72:	4b95      	ldr	r3, [pc, #596]	; (8005cc8 <_strtod_l+0xbf0>)
 8005a74:	2200      	movs	r2, #0
 8005a76:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005a7a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8005cc8 <_strtod_l+0xbf0>
 8005a7e:	f04f 0800 	mov.w	r8, #0
 8005a82:	4b92      	ldr	r3, [pc, #584]	; (8005ccc <_strtod_l+0xbf4>)
 8005a84:	403b      	ands	r3, r7
 8005a86:	930d      	str	r3, [sp, #52]	; 0x34
 8005a88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005a8a:	4b91      	ldr	r3, [pc, #580]	; (8005cd0 <_strtod_l+0xbf8>)
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	f040 80b0 	bne.w	8005bf2 <_strtod_l+0xb1a>
 8005a92:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005a96:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8005a9a:	ec4b ab10 	vmov	d0, sl, fp
 8005a9e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005aa2:	f001 ff67 	bl	8007974 <__ulp>
 8005aa6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005aaa:	ec53 2b10 	vmov	r2, r3, d0
 8005aae:	f7fa fdbb 	bl	8000628 <__aeabi_dmul>
 8005ab2:	4652      	mov	r2, sl
 8005ab4:	465b      	mov	r3, fp
 8005ab6:	f7fa fc01 	bl	80002bc <__adddf3>
 8005aba:	460b      	mov	r3, r1
 8005abc:	4983      	ldr	r1, [pc, #524]	; (8005ccc <_strtod_l+0xbf4>)
 8005abe:	4a85      	ldr	r2, [pc, #532]	; (8005cd4 <_strtod_l+0xbfc>)
 8005ac0:	4019      	ands	r1, r3
 8005ac2:	4291      	cmp	r1, r2
 8005ac4:	4682      	mov	sl, r0
 8005ac6:	d960      	bls.n	8005b8a <_strtod_l+0xab2>
 8005ac8:	ee18 3a90 	vmov	r3, s17
 8005acc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d104      	bne.n	8005ade <_strtod_l+0xa06>
 8005ad4:	ee18 3a10 	vmov	r3, s16
 8005ad8:	3301      	adds	r3, #1
 8005ada:	f43f ad45 	beq.w	8005568 <_strtod_l+0x490>
 8005ade:	f8df b200 	ldr.w	fp, [pc, #512]	; 8005ce0 <_strtod_l+0xc08>
 8005ae2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8005ae6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005ae8:	4620      	mov	r0, r4
 8005aea:	f001 fc11 	bl	8007310 <_Bfree>
 8005aee:	9905      	ldr	r1, [sp, #20]
 8005af0:	4620      	mov	r0, r4
 8005af2:	f001 fc0d 	bl	8007310 <_Bfree>
 8005af6:	4631      	mov	r1, r6
 8005af8:	4620      	mov	r0, r4
 8005afa:	f001 fc09 	bl	8007310 <_Bfree>
 8005afe:	4629      	mov	r1, r5
 8005b00:	4620      	mov	r0, r4
 8005b02:	f001 fc05 	bl	8007310 <_Bfree>
 8005b06:	e61a      	b.n	800573e <_strtod_l+0x666>
 8005b08:	f1ba 0f00 	cmp.w	sl, #0
 8005b0c:	d11b      	bne.n	8005b46 <_strtod_l+0xa6e>
 8005b0e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005b12:	b9f3      	cbnz	r3, 8005b52 <_strtod_l+0xa7a>
 8005b14:	4b6c      	ldr	r3, [pc, #432]	; (8005cc8 <_strtod_l+0xbf0>)
 8005b16:	2200      	movs	r2, #0
 8005b18:	4640      	mov	r0, r8
 8005b1a:	4649      	mov	r1, r9
 8005b1c:	f7fa fff6 	bl	8000b0c <__aeabi_dcmplt>
 8005b20:	b9d0      	cbnz	r0, 8005b58 <_strtod_l+0xa80>
 8005b22:	4640      	mov	r0, r8
 8005b24:	4649      	mov	r1, r9
 8005b26:	4b6c      	ldr	r3, [pc, #432]	; (8005cd8 <_strtod_l+0xc00>)
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f7fa fd7d 	bl	8000628 <__aeabi_dmul>
 8005b2e:	4680      	mov	r8, r0
 8005b30:	4689      	mov	r9, r1
 8005b32:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005b36:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8005b3a:	9315      	str	r3, [sp, #84]	; 0x54
 8005b3c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005b40:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005b44:	e79d      	b.n	8005a82 <_strtod_l+0x9aa>
 8005b46:	f1ba 0f01 	cmp.w	sl, #1
 8005b4a:	d102      	bne.n	8005b52 <_strtod_l+0xa7a>
 8005b4c:	2f00      	cmp	r7, #0
 8005b4e:	f43f ad83 	beq.w	8005658 <_strtod_l+0x580>
 8005b52:	4b62      	ldr	r3, [pc, #392]	; (8005cdc <_strtod_l+0xc04>)
 8005b54:	2200      	movs	r2, #0
 8005b56:	e78e      	b.n	8005a76 <_strtod_l+0x99e>
 8005b58:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8005cd8 <_strtod_l+0xc00>
 8005b5c:	f04f 0800 	mov.w	r8, #0
 8005b60:	e7e7      	b.n	8005b32 <_strtod_l+0xa5a>
 8005b62:	4b5d      	ldr	r3, [pc, #372]	; (8005cd8 <_strtod_l+0xc00>)
 8005b64:	4640      	mov	r0, r8
 8005b66:	4649      	mov	r1, r9
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f7fa fd5d 	bl	8000628 <__aeabi_dmul>
 8005b6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b70:	4680      	mov	r8, r0
 8005b72:	4689      	mov	r9, r1
 8005b74:	b933      	cbnz	r3, 8005b84 <_strtod_l+0xaac>
 8005b76:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005b7a:	900e      	str	r0, [sp, #56]	; 0x38
 8005b7c:	930f      	str	r3, [sp, #60]	; 0x3c
 8005b7e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005b82:	e7dd      	b.n	8005b40 <_strtod_l+0xa68>
 8005b84:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8005b88:	e7f9      	b.n	8005b7e <_strtod_l+0xaa6>
 8005b8a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8005b8e:	9b04      	ldr	r3, [sp, #16]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d1a8      	bne.n	8005ae6 <_strtod_l+0xa0e>
 8005b94:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005b98:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005b9a:	0d1b      	lsrs	r3, r3, #20
 8005b9c:	051b      	lsls	r3, r3, #20
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d1a1      	bne.n	8005ae6 <_strtod_l+0xa0e>
 8005ba2:	4640      	mov	r0, r8
 8005ba4:	4649      	mov	r1, r9
 8005ba6:	f7fb f887 	bl	8000cb8 <__aeabi_d2lz>
 8005baa:	f7fa fd0f 	bl	80005cc <__aeabi_l2d>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	4640      	mov	r0, r8
 8005bb4:	4649      	mov	r1, r9
 8005bb6:	f7fa fb7f 	bl	80002b8 <__aeabi_dsub>
 8005bba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005bbc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005bc0:	ea43 030a 	orr.w	r3, r3, sl
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	4680      	mov	r8, r0
 8005bc8:	4689      	mov	r9, r1
 8005bca:	d055      	beq.n	8005c78 <_strtod_l+0xba0>
 8005bcc:	a336      	add	r3, pc, #216	; (adr r3, 8005ca8 <_strtod_l+0xbd0>)
 8005bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd2:	f7fa ff9b 	bl	8000b0c <__aeabi_dcmplt>
 8005bd6:	2800      	cmp	r0, #0
 8005bd8:	f47f acd0 	bne.w	800557c <_strtod_l+0x4a4>
 8005bdc:	a334      	add	r3, pc, #208	; (adr r3, 8005cb0 <_strtod_l+0xbd8>)
 8005bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be2:	4640      	mov	r0, r8
 8005be4:	4649      	mov	r1, r9
 8005be6:	f7fa ffaf 	bl	8000b48 <__aeabi_dcmpgt>
 8005bea:	2800      	cmp	r0, #0
 8005bec:	f43f af7b 	beq.w	8005ae6 <_strtod_l+0xa0e>
 8005bf0:	e4c4      	b.n	800557c <_strtod_l+0x4a4>
 8005bf2:	9b04      	ldr	r3, [sp, #16]
 8005bf4:	b333      	cbz	r3, 8005c44 <_strtod_l+0xb6c>
 8005bf6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005bf8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005bfc:	d822      	bhi.n	8005c44 <_strtod_l+0xb6c>
 8005bfe:	a32e      	add	r3, pc, #184	; (adr r3, 8005cb8 <_strtod_l+0xbe0>)
 8005c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c04:	4640      	mov	r0, r8
 8005c06:	4649      	mov	r1, r9
 8005c08:	f7fa ff8a 	bl	8000b20 <__aeabi_dcmple>
 8005c0c:	b1a0      	cbz	r0, 8005c38 <_strtod_l+0xb60>
 8005c0e:	4649      	mov	r1, r9
 8005c10:	4640      	mov	r0, r8
 8005c12:	f7fa ffe1 	bl	8000bd8 <__aeabi_d2uiz>
 8005c16:	2801      	cmp	r0, #1
 8005c18:	bf38      	it	cc
 8005c1a:	2001      	movcc	r0, #1
 8005c1c:	f7fa fc8a 	bl	8000534 <__aeabi_ui2d>
 8005c20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c22:	4680      	mov	r8, r0
 8005c24:	4689      	mov	r9, r1
 8005c26:	bb23      	cbnz	r3, 8005c72 <_strtod_l+0xb9a>
 8005c28:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005c2c:	9010      	str	r0, [sp, #64]	; 0x40
 8005c2e:	9311      	str	r3, [sp, #68]	; 0x44
 8005c30:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005c34:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005c38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c3a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005c3c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8005c40:	1a9b      	subs	r3, r3, r2
 8005c42:	9309      	str	r3, [sp, #36]	; 0x24
 8005c44:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005c48:	eeb0 0a48 	vmov.f32	s0, s16
 8005c4c:	eef0 0a68 	vmov.f32	s1, s17
 8005c50:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005c54:	f001 fe8e 	bl	8007974 <__ulp>
 8005c58:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005c5c:	ec53 2b10 	vmov	r2, r3, d0
 8005c60:	f7fa fce2 	bl	8000628 <__aeabi_dmul>
 8005c64:	ec53 2b18 	vmov	r2, r3, d8
 8005c68:	f7fa fb28 	bl	80002bc <__adddf3>
 8005c6c:	4682      	mov	sl, r0
 8005c6e:	468b      	mov	fp, r1
 8005c70:	e78d      	b.n	8005b8e <_strtod_l+0xab6>
 8005c72:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8005c76:	e7db      	b.n	8005c30 <_strtod_l+0xb58>
 8005c78:	a311      	add	r3, pc, #68	; (adr r3, 8005cc0 <_strtod_l+0xbe8>)
 8005c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c7e:	f7fa ff45 	bl	8000b0c <__aeabi_dcmplt>
 8005c82:	e7b2      	b.n	8005bea <_strtod_l+0xb12>
 8005c84:	2300      	movs	r3, #0
 8005c86:	930a      	str	r3, [sp, #40]	; 0x28
 8005c88:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005c8a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005c8c:	6013      	str	r3, [r2, #0]
 8005c8e:	f7ff ba6b 	b.w	8005168 <_strtod_l+0x90>
 8005c92:	2a65      	cmp	r2, #101	; 0x65
 8005c94:	f43f ab5f 	beq.w	8005356 <_strtod_l+0x27e>
 8005c98:	2a45      	cmp	r2, #69	; 0x45
 8005c9a:	f43f ab5c 	beq.w	8005356 <_strtod_l+0x27e>
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	f7ff bb94 	b.w	80053cc <_strtod_l+0x2f4>
 8005ca4:	f3af 8000 	nop.w
 8005ca8:	94a03595 	.word	0x94a03595
 8005cac:	3fdfffff 	.word	0x3fdfffff
 8005cb0:	35afe535 	.word	0x35afe535
 8005cb4:	3fe00000 	.word	0x3fe00000
 8005cb8:	ffc00000 	.word	0xffc00000
 8005cbc:	41dfffff 	.word	0x41dfffff
 8005cc0:	94a03595 	.word	0x94a03595
 8005cc4:	3fcfffff 	.word	0x3fcfffff
 8005cc8:	3ff00000 	.word	0x3ff00000
 8005ccc:	7ff00000 	.word	0x7ff00000
 8005cd0:	7fe00000 	.word	0x7fe00000
 8005cd4:	7c9fffff 	.word	0x7c9fffff
 8005cd8:	3fe00000 	.word	0x3fe00000
 8005cdc:	bff00000 	.word	0xbff00000
 8005ce0:	7fefffff 	.word	0x7fefffff

08005ce4 <_strtod_r>:
 8005ce4:	4b01      	ldr	r3, [pc, #4]	; (8005cec <_strtod_r+0x8>)
 8005ce6:	f7ff b9f7 	b.w	80050d8 <_strtod_l>
 8005cea:	bf00      	nop
 8005cec:	2000007c 	.word	0x2000007c

08005cf0 <_strtol_l.constprop.0>:
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cf6:	d001      	beq.n	8005cfc <_strtol_l.constprop.0+0xc>
 8005cf8:	2b24      	cmp	r3, #36	; 0x24
 8005cfa:	d906      	bls.n	8005d0a <_strtol_l.constprop.0+0x1a>
 8005cfc:	f7fe fa8c 	bl	8004218 <__errno>
 8005d00:	2316      	movs	r3, #22
 8005d02:	6003      	str	r3, [r0, #0]
 8005d04:	2000      	movs	r0, #0
 8005d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d0a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005df0 <_strtol_l.constprop.0+0x100>
 8005d0e:	460d      	mov	r5, r1
 8005d10:	462e      	mov	r6, r5
 8005d12:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005d16:	f814 700c 	ldrb.w	r7, [r4, ip]
 8005d1a:	f017 0708 	ands.w	r7, r7, #8
 8005d1e:	d1f7      	bne.n	8005d10 <_strtol_l.constprop.0+0x20>
 8005d20:	2c2d      	cmp	r4, #45	; 0x2d
 8005d22:	d132      	bne.n	8005d8a <_strtol_l.constprop.0+0x9a>
 8005d24:	782c      	ldrb	r4, [r5, #0]
 8005d26:	2701      	movs	r7, #1
 8005d28:	1cb5      	adds	r5, r6, #2
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d05b      	beq.n	8005de6 <_strtol_l.constprop.0+0xf6>
 8005d2e:	2b10      	cmp	r3, #16
 8005d30:	d109      	bne.n	8005d46 <_strtol_l.constprop.0+0x56>
 8005d32:	2c30      	cmp	r4, #48	; 0x30
 8005d34:	d107      	bne.n	8005d46 <_strtol_l.constprop.0+0x56>
 8005d36:	782c      	ldrb	r4, [r5, #0]
 8005d38:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005d3c:	2c58      	cmp	r4, #88	; 0x58
 8005d3e:	d14d      	bne.n	8005ddc <_strtol_l.constprop.0+0xec>
 8005d40:	786c      	ldrb	r4, [r5, #1]
 8005d42:	2310      	movs	r3, #16
 8005d44:	3502      	adds	r5, #2
 8005d46:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005d4a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8005d4e:	f04f 0c00 	mov.w	ip, #0
 8005d52:	fbb8 f9f3 	udiv	r9, r8, r3
 8005d56:	4666      	mov	r6, ip
 8005d58:	fb03 8a19 	mls	sl, r3, r9, r8
 8005d5c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005d60:	f1be 0f09 	cmp.w	lr, #9
 8005d64:	d816      	bhi.n	8005d94 <_strtol_l.constprop.0+0xa4>
 8005d66:	4674      	mov	r4, lr
 8005d68:	42a3      	cmp	r3, r4
 8005d6a:	dd24      	ble.n	8005db6 <_strtol_l.constprop.0+0xc6>
 8005d6c:	f1bc 0f00 	cmp.w	ip, #0
 8005d70:	db1e      	blt.n	8005db0 <_strtol_l.constprop.0+0xc0>
 8005d72:	45b1      	cmp	r9, r6
 8005d74:	d31c      	bcc.n	8005db0 <_strtol_l.constprop.0+0xc0>
 8005d76:	d101      	bne.n	8005d7c <_strtol_l.constprop.0+0x8c>
 8005d78:	45a2      	cmp	sl, r4
 8005d7a:	db19      	blt.n	8005db0 <_strtol_l.constprop.0+0xc0>
 8005d7c:	fb06 4603 	mla	r6, r6, r3, r4
 8005d80:	f04f 0c01 	mov.w	ip, #1
 8005d84:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005d88:	e7e8      	b.n	8005d5c <_strtol_l.constprop.0+0x6c>
 8005d8a:	2c2b      	cmp	r4, #43	; 0x2b
 8005d8c:	bf04      	itt	eq
 8005d8e:	782c      	ldrbeq	r4, [r5, #0]
 8005d90:	1cb5      	addeq	r5, r6, #2
 8005d92:	e7ca      	b.n	8005d2a <_strtol_l.constprop.0+0x3a>
 8005d94:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8005d98:	f1be 0f19 	cmp.w	lr, #25
 8005d9c:	d801      	bhi.n	8005da2 <_strtol_l.constprop.0+0xb2>
 8005d9e:	3c37      	subs	r4, #55	; 0x37
 8005da0:	e7e2      	b.n	8005d68 <_strtol_l.constprop.0+0x78>
 8005da2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8005da6:	f1be 0f19 	cmp.w	lr, #25
 8005daa:	d804      	bhi.n	8005db6 <_strtol_l.constprop.0+0xc6>
 8005dac:	3c57      	subs	r4, #87	; 0x57
 8005dae:	e7db      	b.n	8005d68 <_strtol_l.constprop.0+0x78>
 8005db0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8005db4:	e7e6      	b.n	8005d84 <_strtol_l.constprop.0+0x94>
 8005db6:	f1bc 0f00 	cmp.w	ip, #0
 8005dba:	da05      	bge.n	8005dc8 <_strtol_l.constprop.0+0xd8>
 8005dbc:	2322      	movs	r3, #34	; 0x22
 8005dbe:	6003      	str	r3, [r0, #0]
 8005dc0:	4646      	mov	r6, r8
 8005dc2:	b942      	cbnz	r2, 8005dd6 <_strtol_l.constprop.0+0xe6>
 8005dc4:	4630      	mov	r0, r6
 8005dc6:	e79e      	b.n	8005d06 <_strtol_l.constprop.0+0x16>
 8005dc8:	b107      	cbz	r7, 8005dcc <_strtol_l.constprop.0+0xdc>
 8005dca:	4276      	negs	r6, r6
 8005dcc:	2a00      	cmp	r2, #0
 8005dce:	d0f9      	beq.n	8005dc4 <_strtol_l.constprop.0+0xd4>
 8005dd0:	f1bc 0f00 	cmp.w	ip, #0
 8005dd4:	d000      	beq.n	8005dd8 <_strtol_l.constprop.0+0xe8>
 8005dd6:	1e69      	subs	r1, r5, #1
 8005dd8:	6011      	str	r1, [r2, #0]
 8005dda:	e7f3      	b.n	8005dc4 <_strtol_l.constprop.0+0xd4>
 8005ddc:	2430      	movs	r4, #48	; 0x30
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d1b1      	bne.n	8005d46 <_strtol_l.constprop.0+0x56>
 8005de2:	2308      	movs	r3, #8
 8005de4:	e7af      	b.n	8005d46 <_strtol_l.constprop.0+0x56>
 8005de6:	2c30      	cmp	r4, #48	; 0x30
 8005de8:	d0a5      	beq.n	8005d36 <_strtol_l.constprop.0+0x46>
 8005dea:	230a      	movs	r3, #10
 8005dec:	e7ab      	b.n	8005d46 <_strtol_l.constprop.0+0x56>
 8005dee:	bf00      	nop
 8005df0:	080095d1 	.word	0x080095d1

08005df4 <_strtol_r>:
 8005df4:	f7ff bf7c 	b.w	8005cf0 <_strtol_l.constprop.0>

08005df8 <_write_r>:
 8005df8:	b538      	push	{r3, r4, r5, lr}
 8005dfa:	4d07      	ldr	r5, [pc, #28]	; (8005e18 <_write_r+0x20>)
 8005dfc:	4604      	mov	r4, r0
 8005dfe:	4608      	mov	r0, r1
 8005e00:	4611      	mov	r1, r2
 8005e02:	2200      	movs	r2, #0
 8005e04:	602a      	str	r2, [r5, #0]
 8005e06:	461a      	mov	r2, r3
 8005e08:	f7fb ff27 	bl	8001c5a <_write>
 8005e0c:	1c43      	adds	r3, r0, #1
 8005e0e:	d102      	bne.n	8005e16 <_write_r+0x1e>
 8005e10:	682b      	ldr	r3, [r5, #0]
 8005e12:	b103      	cbz	r3, 8005e16 <_write_r+0x1e>
 8005e14:	6023      	str	r3, [r4, #0]
 8005e16:	bd38      	pop	{r3, r4, r5, pc}
 8005e18:	20000630 	.word	0x20000630

08005e1c <_close_r>:
 8005e1c:	b538      	push	{r3, r4, r5, lr}
 8005e1e:	4d06      	ldr	r5, [pc, #24]	; (8005e38 <_close_r+0x1c>)
 8005e20:	2300      	movs	r3, #0
 8005e22:	4604      	mov	r4, r0
 8005e24:	4608      	mov	r0, r1
 8005e26:	602b      	str	r3, [r5, #0]
 8005e28:	f7fb ff33 	bl	8001c92 <_close>
 8005e2c:	1c43      	adds	r3, r0, #1
 8005e2e:	d102      	bne.n	8005e36 <_close_r+0x1a>
 8005e30:	682b      	ldr	r3, [r5, #0]
 8005e32:	b103      	cbz	r3, 8005e36 <_close_r+0x1a>
 8005e34:	6023      	str	r3, [r4, #0]
 8005e36:	bd38      	pop	{r3, r4, r5, pc}
 8005e38:	20000630 	.word	0x20000630

08005e3c <quorem>:
 8005e3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e40:	6903      	ldr	r3, [r0, #16]
 8005e42:	690c      	ldr	r4, [r1, #16]
 8005e44:	42a3      	cmp	r3, r4
 8005e46:	4607      	mov	r7, r0
 8005e48:	f2c0 8081 	blt.w	8005f4e <quorem+0x112>
 8005e4c:	3c01      	subs	r4, #1
 8005e4e:	f101 0814 	add.w	r8, r1, #20
 8005e52:	f100 0514 	add.w	r5, r0, #20
 8005e56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e5a:	9301      	str	r3, [sp, #4]
 8005e5c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005e60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e64:	3301      	adds	r3, #1
 8005e66:	429a      	cmp	r2, r3
 8005e68:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005e6c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005e70:	fbb2 f6f3 	udiv	r6, r2, r3
 8005e74:	d331      	bcc.n	8005eda <quorem+0x9e>
 8005e76:	f04f 0e00 	mov.w	lr, #0
 8005e7a:	4640      	mov	r0, r8
 8005e7c:	46ac      	mov	ip, r5
 8005e7e:	46f2      	mov	sl, lr
 8005e80:	f850 2b04 	ldr.w	r2, [r0], #4
 8005e84:	b293      	uxth	r3, r2
 8005e86:	fb06 e303 	mla	r3, r6, r3, lr
 8005e8a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	ebaa 0303 	sub.w	r3, sl, r3
 8005e94:	f8dc a000 	ldr.w	sl, [ip]
 8005e98:	0c12      	lsrs	r2, r2, #16
 8005e9a:	fa13 f38a 	uxtah	r3, r3, sl
 8005e9e:	fb06 e202 	mla	r2, r6, r2, lr
 8005ea2:	9300      	str	r3, [sp, #0]
 8005ea4:	9b00      	ldr	r3, [sp, #0]
 8005ea6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005eaa:	b292      	uxth	r2, r2
 8005eac:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005eb0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005eb4:	f8bd 3000 	ldrh.w	r3, [sp]
 8005eb8:	4581      	cmp	r9, r0
 8005eba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ebe:	f84c 3b04 	str.w	r3, [ip], #4
 8005ec2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005ec6:	d2db      	bcs.n	8005e80 <quorem+0x44>
 8005ec8:	f855 300b 	ldr.w	r3, [r5, fp]
 8005ecc:	b92b      	cbnz	r3, 8005eda <quorem+0x9e>
 8005ece:	9b01      	ldr	r3, [sp, #4]
 8005ed0:	3b04      	subs	r3, #4
 8005ed2:	429d      	cmp	r5, r3
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	d32e      	bcc.n	8005f36 <quorem+0xfa>
 8005ed8:	613c      	str	r4, [r7, #16]
 8005eda:	4638      	mov	r0, r7
 8005edc:	f001 fca4 	bl	8007828 <__mcmp>
 8005ee0:	2800      	cmp	r0, #0
 8005ee2:	db24      	blt.n	8005f2e <quorem+0xf2>
 8005ee4:	3601      	adds	r6, #1
 8005ee6:	4628      	mov	r0, r5
 8005ee8:	f04f 0c00 	mov.w	ip, #0
 8005eec:	f858 2b04 	ldr.w	r2, [r8], #4
 8005ef0:	f8d0 e000 	ldr.w	lr, [r0]
 8005ef4:	b293      	uxth	r3, r2
 8005ef6:	ebac 0303 	sub.w	r3, ip, r3
 8005efa:	0c12      	lsrs	r2, r2, #16
 8005efc:	fa13 f38e 	uxtah	r3, r3, lr
 8005f00:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005f04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f0e:	45c1      	cmp	r9, r8
 8005f10:	f840 3b04 	str.w	r3, [r0], #4
 8005f14:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005f18:	d2e8      	bcs.n	8005eec <quorem+0xb0>
 8005f1a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f22:	b922      	cbnz	r2, 8005f2e <quorem+0xf2>
 8005f24:	3b04      	subs	r3, #4
 8005f26:	429d      	cmp	r5, r3
 8005f28:	461a      	mov	r2, r3
 8005f2a:	d30a      	bcc.n	8005f42 <quorem+0x106>
 8005f2c:	613c      	str	r4, [r7, #16]
 8005f2e:	4630      	mov	r0, r6
 8005f30:	b003      	add	sp, #12
 8005f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f36:	6812      	ldr	r2, [r2, #0]
 8005f38:	3b04      	subs	r3, #4
 8005f3a:	2a00      	cmp	r2, #0
 8005f3c:	d1cc      	bne.n	8005ed8 <quorem+0x9c>
 8005f3e:	3c01      	subs	r4, #1
 8005f40:	e7c7      	b.n	8005ed2 <quorem+0x96>
 8005f42:	6812      	ldr	r2, [r2, #0]
 8005f44:	3b04      	subs	r3, #4
 8005f46:	2a00      	cmp	r2, #0
 8005f48:	d1f0      	bne.n	8005f2c <quorem+0xf0>
 8005f4a:	3c01      	subs	r4, #1
 8005f4c:	e7eb      	b.n	8005f26 <quorem+0xea>
 8005f4e:	2000      	movs	r0, #0
 8005f50:	e7ee      	b.n	8005f30 <quorem+0xf4>
 8005f52:	0000      	movs	r0, r0
 8005f54:	0000      	movs	r0, r0
	...

08005f58 <_dtoa_r>:
 8005f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f5c:	ed2d 8b04 	vpush	{d8-d9}
 8005f60:	ec57 6b10 	vmov	r6, r7, d0
 8005f64:	b093      	sub	sp, #76	; 0x4c
 8005f66:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005f68:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005f6c:	9106      	str	r1, [sp, #24]
 8005f6e:	ee10 aa10 	vmov	sl, s0
 8005f72:	4604      	mov	r4, r0
 8005f74:	9209      	str	r2, [sp, #36]	; 0x24
 8005f76:	930c      	str	r3, [sp, #48]	; 0x30
 8005f78:	46bb      	mov	fp, r7
 8005f7a:	b975      	cbnz	r5, 8005f9a <_dtoa_r+0x42>
 8005f7c:	2010      	movs	r0, #16
 8005f7e:	f001 f95f 	bl	8007240 <malloc>
 8005f82:	4602      	mov	r2, r0
 8005f84:	6260      	str	r0, [r4, #36]	; 0x24
 8005f86:	b920      	cbnz	r0, 8005f92 <_dtoa_r+0x3a>
 8005f88:	4ba7      	ldr	r3, [pc, #668]	; (8006228 <_dtoa_r+0x2d0>)
 8005f8a:	21ea      	movs	r1, #234	; 0xea
 8005f8c:	48a7      	ldr	r0, [pc, #668]	; (800622c <_dtoa_r+0x2d4>)
 8005f8e:	f002 fceb 	bl	8008968 <__assert_func>
 8005f92:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005f96:	6005      	str	r5, [r0, #0]
 8005f98:	60c5      	str	r5, [r0, #12]
 8005f9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f9c:	6819      	ldr	r1, [r3, #0]
 8005f9e:	b151      	cbz	r1, 8005fb6 <_dtoa_r+0x5e>
 8005fa0:	685a      	ldr	r2, [r3, #4]
 8005fa2:	604a      	str	r2, [r1, #4]
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	4093      	lsls	r3, r2
 8005fa8:	608b      	str	r3, [r1, #8]
 8005faa:	4620      	mov	r0, r4
 8005fac:	f001 f9b0 	bl	8007310 <_Bfree>
 8005fb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	601a      	str	r2, [r3, #0]
 8005fb6:	1e3b      	subs	r3, r7, #0
 8005fb8:	bfaa      	itet	ge
 8005fba:	2300      	movge	r3, #0
 8005fbc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005fc0:	f8c8 3000 	strge.w	r3, [r8]
 8005fc4:	4b9a      	ldr	r3, [pc, #616]	; (8006230 <_dtoa_r+0x2d8>)
 8005fc6:	bfbc      	itt	lt
 8005fc8:	2201      	movlt	r2, #1
 8005fca:	f8c8 2000 	strlt.w	r2, [r8]
 8005fce:	ea33 030b 	bics.w	r3, r3, fp
 8005fd2:	d11b      	bne.n	800600c <_dtoa_r+0xb4>
 8005fd4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005fd6:	f242 730f 	movw	r3, #9999	; 0x270f
 8005fda:	6013      	str	r3, [r2, #0]
 8005fdc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005fe0:	4333      	orrs	r3, r6
 8005fe2:	f000 8592 	beq.w	8006b0a <_dtoa_r+0xbb2>
 8005fe6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005fe8:	b963      	cbnz	r3, 8006004 <_dtoa_r+0xac>
 8005fea:	4b92      	ldr	r3, [pc, #584]	; (8006234 <_dtoa_r+0x2dc>)
 8005fec:	e022      	b.n	8006034 <_dtoa_r+0xdc>
 8005fee:	4b92      	ldr	r3, [pc, #584]	; (8006238 <_dtoa_r+0x2e0>)
 8005ff0:	9301      	str	r3, [sp, #4]
 8005ff2:	3308      	adds	r3, #8
 8005ff4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005ff6:	6013      	str	r3, [r2, #0]
 8005ff8:	9801      	ldr	r0, [sp, #4]
 8005ffa:	b013      	add	sp, #76	; 0x4c
 8005ffc:	ecbd 8b04 	vpop	{d8-d9}
 8006000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006004:	4b8b      	ldr	r3, [pc, #556]	; (8006234 <_dtoa_r+0x2dc>)
 8006006:	9301      	str	r3, [sp, #4]
 8006008:	3303      	adds	r3, #3
 800600a:	e7f3      	b.n	8005ff4 <_dtoa_r+0x9c>
 800600c:	2200      	movs	r2, #0
 800600e:	2300      	movs	r3, #0
 8006010:	4650      	mov	r0, sl
 8006012:	4659      	mov	r1, fp
 8006014:	f7fa fd70 	bl	8000af8 <__aeabi_dcmpeq>
 8006018:	ec4b ab19 	vmov	d9, sl, fp
 800601c:	4680      	mov	r8, r0
 800601e:	b158      	cbz	r0, 8006038 <_dtoa_r+0xe0>
 8006020:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006022:	2301      	movs	r3, #1
 8006024:	6013      	str	r3, [r2, #0]
 8006026:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006028:	2b00      	cmp	r3, #0
 800602a:	f000 856b 	beq.w	8006b04 <_dtoa_r+0xbac>
 800602e:	4883      	ldr	r0, [pc, #524]	; (800623c <_dtoa_r+0x2e4>)
 8006030:	6018      	str	r0, [r3, #0]
 8006032:	1e43      	subs	r3, r0, #1
 8006034:	9301      	str	r3, [sp, #4]
 8006036:	e7df      	b.n	8005ff8 <_dtoa_r+0xa0>
 8006038:	ec4b ab10 	vmov	d0, sl, fp
 800603c:	aa10      	add	r2, sp, #64	; 0x40
 800603e:	a911      	add	r1, sp, #68	; 0x44
 8006040:	4620      	mov	r0, r4
 8006042:	f001 fd13 	bl	8007a6c <__d2b>
 8006046:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800604a:	ee08 0a10 	vmov	s16, r0
 800604e:	2d00      	cmp	r5, #0
 8006050:	f000 8084 	beq.w	800615c <_dtoa_r+0x204>
 8006054:	ee19 3a90 	vmov	r3, s19
 8006058:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800605c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006060:	4656      	mov	r6, sl
 8006062:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006066:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800606a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800606e:	4b74      	ldr	r3, [pc, #464]	; (8006240 <_dtoa_r+0x2e8>)
 8006070:	2200      	movs	r2, #0
 8006072:	4630      	mov	r0, r6
 8006074:	4639      	mov	r1, r7
 8006076:	f7fa f91f 	bl	80002b8 <__aeabi_dsub>
 800607a:	a365      	add	r3, pc, #404	; (adr r3, 8006210 <_dtoa_r+0x2b8>)
 800607c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006080:	f7fa fad2 	bl	8000628 <__aeabi_dmul>
 8006084:	a364      	add	r3, pc, #400	; (adr r3, 8006218 <_dtoa_r+0x2c0>)
 8006086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800608a:	f7fa f917 	bl	80002bc <__adddf3>
 800608e:	4606      	mov	r6, r0
 8006090:	4628      	mov	r0, r5
 8006092:	460f      	mov	r7, r1
 8006094:	f7fa fa5e 	bl	8000554 <__aeabi_i2d>
 8006098:	a361      	add	r3, pc, #388	; (adr r3, 8006220 <_dtoa_r+0x2c8>)
 800609a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800609e:	f7fa fac3 	bl	8000628 <__aeabi_dmul>
 80060a2:	4602      	mov	r2, r0
 80060a4:	460b      	mov	r3, r1
 80060a6:	4630      	mov	r0, r6
 80060a8:	4639      	mov	r1, r7
 80060aa:	f7fa f907 	bl	80002bc <__adddf3>
 80060ae:	4606      	mov	r6, r0
 80060b0:	460f      	mov	r7, r1
 80060b2:	f7fa fd69 	bl	8000b88 <__aeabi_d2iz>
 80060b6:	2200      	movs	r2, #0
 80060b8:	9000      	str	r0, [sp, #0]
 80060ba:	2300      	movs	r3, #0
 80060bc:	4630      	mov	r0, r6
 80060be:	4639      	mov	r1, r7
 80060c0:	f7fa fd24 	bl	8000b0c <__aeabi_dcmplt>
 80060c4:	b150      	cbz	r0, 80060dc <_dtoa_r+0x184>
 80060c6:	9800      	ldr	r0, [sp, #0]
 80060c8:	f7fa fa44 	bl	8000554 <__aeabi_i2d>
 80060cc:	4632      	mov	r2, r6
 80060ce:	463b      	mov	r3, r7
 80060d0:	f7fa fd12 	bl	8000af8 <__aeabi_dcmpeq>
 80060d4:	b910      	cbnz	r0, 80060dc <_dtoa_r+0x184>
 80060d6:	9b00      	ldr	r3, [sp, #0]
 80060d8:	3b01      	subs	r3, #1
 80060da:	9300      	str	r3, [sp, #0]
 80060dc:	9b00      	ldr	r3, [sp, #0]
 80060de:	2b16      	cmp	r3, #22
 80060e0:	d85a      	bhi.n	8006198 <_dtoa_r+0x240>
 80060e2:	9a00      	ldr	r2, [sp, #0]
 80060e4:	4b57      	ldr	r3, [pc, #348]	; (8006244 <_dtoa_r+0x2ec>)
 80060e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80060ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ee:	ec51 0b19 	vmov	r0, r1, d9
 80060f2:	f7fa fd0b 	bl	8000b0c <__aeabi_dcmplt>
 80060f6:	2800      	cmp	r0, #0
 80060f8:	d050      	beq.n	800619c <_dtoa_r+0x244>
 80060fa:	9b00      	ldr	r3, [sp, #0]
 80060fc:	3b01      	subs	r3, #1
 80060fe:	9300      	str	r3, [sp, #0]
 8006100:	2300      	movs	r3, #0
 8006102:	930b      	str	r3, [sp, #44]	; 0x2c
 8006104:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006106:	1b5d      	subs	r5, r3, r5
 8006108:	1e6b      	subs	r3, r5, #1
 800610a:	9305      	str	r3, [sp, #20]
 800610c:	bf45      	ittet	mi
 800610e:	f1c5 0301 	rsbmi	r3, r5, #1
 8006112:	9304      	strmi	r3, [sp, #16]
 8006114:	2300      	movpl	r3, #0
 8006116:	2300      	movmi	r3, #0
 8006118:	bf4c      	ite	mi
 800611a:	9305      	strmi	r3, [sp, #20]
 800611c:	9304      	strpl	r3, [sp, #16]
 800611e:	9b00      	ldr	r3, [sp, #0]
 8006120:	2b00      	cmp	r3, #0
 8006122:	db3d      	blt.n	80061a0 <_dtoa_r+0x248>
 8006124:	9b05      	ldr	r3, [sp, #20]
 8006126:	9a00      	ldr	r2, [sp, #0]
 8006128:	920a      	str	r2, [sp, #40]	; 0x28
 800612a:	4413      	add	r3, r2
 800612c:	9305      	str	r3, [sp, #20]
 800612e:	2300      	movs	r3, #0
 8006130:	9307      	str	r3, [sp, #28]
 8006132:	9b06      	ldr	r3, [sp, #24]
 8006134:	2b09      	cmp	r3, #9
 8006136:	f200 8089 	bhi.w	800624c <_dtoa_r+0x2f4>
 800613a:	2b05      	cmp	r3, #5
 800613c:	bfc4      	itt	gt
 800613e:	3b04      	subgt	r3, #4
 8006140:	9306      	strgt	r3, [sp, #24]
 8006142:	9b06      	ldr	r3, [sp, #24]
 8006144:	f1a3 0302 	sub.w	r3, r3, #2
 8006148:	bfcc      	ite	gt
 800614a:	2500      	movgt	r5, #0
 800614c:	2501      	movle	r5, #1
 800614e:	2b03      	cmp	r3, #3
 8006150:	f200 8087 	bhi.w	8006262 <_dtoa_r+0x30a>
 8006154:	e8df f003 	tbb	[pc, r3]
 8006158:	59383a2d 	.word	0x59383a2d
 800615c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006160:	441d      	add	r5, r3
 8006162:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006166:	2b20      	cmp	r3, #32
 8006168:	bfc1      	itttt	gt
 800616a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800616e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006172:	fa0b f303 	lslgt.w	r3, fp, r3
 8006176:	fa26 f000 	lsrgt.w	r0, r6, r0
 800617a:	bfda      	itte	le
 800617c:	f1c3 0320 	rsble	r3, r3, #32
 8006180:	fa06 f003 	lslle.w	r0, r6, r3
 8006184:	4318      	orrgt	r0, r3
 8006186:	f7fa f9d5 	bl	8000534 <__aeabi_ui2d>
 800618a:	2301      	movs	r3, #1
 800618c:	4606      	mov	r6, r0
 800618e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006192:	3d01      	subs	r5, #1
 8006194:	930e      	str	r3, [sp, #56]	; 0x38
 8006196:	e76a      	b.n	800606e <_dtoa_r+0x116>
 8006198:	2301      	movs	r3, #1
 800619a:	e7b2      	b.n	8006102 <_dtoa_r+0x1aa>
 800619c:	900b      	str	r0, [sp, #44]	; 0x2c
 800619e:	e7b1      	b.n	8006104 <_dtoa_r+0x1ac>
 80061a0:	9b04      	ldr	r3, [sp, #16]
 80061a2:	9a00      	ldr	r2, [sp, #0]
 80061a4:	1a9b      	subs	r3, r3, r2
 80061a6:	9304      	str	r3, [sp, #16]
 80061a8:	4253      	negs	r3, r2
 80061aa:	9307      	str	r3, [sp, #28]
 80061ac:	2300      	movs	r3, #0
 80061ae:	930a      	str	r3, [sp, #40]	; 0x28
 80061b0:	e7bf      	b.n	8006132 <_dtoa_r+0x1da>
 80061b2:	2300      	movs	r3, #0
 80061b4:	9308      	str	r3, [sp, #32]
 80061b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	dc55      	bgt.n	8006268 <_dtoa_r+0x310>
 80061bc:	2301      	movs	r3, #1
 80061be:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80061c2:	461a      	mov	r2, r3
 80061c4:	9209      	str	r2, [sp, #36]	; 0x24
 80061c6:	e00c      	b.n	80061e2 <_dtoa_r+0x28a>
 80061c8:	2301      	movs	r3, #1
 80061ca:	e7f3      	b.n	80061b4 <_dtoa_r+0x25c>
 80061cc:	2300      	movs	r3, #0
 80061ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061d0:	9308      	str	r3, [sp, #32]
 80061d2:	9b00      	ldr	r3, [sp, #0]
 80061d4:	4413      	add	r3, r2
 80061d6:	9302      	str	r3, [sp, #8]
 80061d8:	3301      	adds	r3, #1
 80061da:	2b01      	cmp	r3, #1
 80061dc:	9303      	str	r3, [sp, #12]
 80061de:	bfb8      	it	lt
 80061e0:	2301      	movlt	r3, #1
 80061e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80061e4:	2200      	movs	r2, #0
 80061e6:	6042      	str	r2, [r0, #4]
 80061e8:	2204      	movs	r2, #4
 80061ea:	f102 0614 	add.w	r6, r2, #20
 80061ee:	429e      	cmp	r6, r3
 80061f0:	6841      	ldr	r1, [r0, #4]
 80061f2:	d93d      	bls.n	8006270 <_dtoa_r+0x318>
 80061f4:	4620      	mov	r0, r4
 80061f6:	f001 f84b 	bl	8007290 <_Balloc>
 80061fa:	9001      	str	r0, [sp, #4]
 80061fc:	2800      	cmp	r0, #0
 80061fe:	d13b      	bne.n	8006278 <_dtoa_r+0x320>
 8006200:	4b11      	ldr	r3, [pc, #68]	; (8006248 <_dtoa_r+0x2f0>)
 8006202:	4602      	mov	r2, r0
 8006204:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006208:	e6c0      	b.n	8005f8c <_dtoa_r+0x34>
 800620a:	2301      	movs	r3, #1
 800620c:	e7df      	b.n	80061ce <_dtoa_r+0x276>
 800620e:	bf00      	nop
 8006210:	636f4361 	.word	0x636f4361
 8006214:	3fd287a7 	.word	0x3fd287a7
 8006218:	8b60c8b3 	.word	0x8b60c8b3
 800621c:	3fc68a28 	.word	0x3fc68a28
 8006220:	509f79fb 	.word	0x509f79fb
 8006224:	3fd34413 	.word	0x3fd34413
 8006228:	080096de 	.word	0x080096de
 800622c:	080096f5 	.word	0x080096f5
 8006230:	7ff00000 	.word	0x7ff00000
 8006234:	080096da 	.word	0x080096da
 8006238:	080096d1 	.word	0x080096d1
 800623c:	0800994a 	.word	0x0800994a
 8006240:	3ff80000 	.word	0x3ff80000
 8006244:	08009860 	.word	0x08009860
 8006248:	08009750 	.word	0x08009750
 800624c:	2501      	movs	r5, #1
 800624e:	2300      	movs	r3, #0
 8006250:	9306      	str	r3, [sp, #24]
 8006252:	9508      	str	r5, [sp, #32]
 8006254:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006258:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800625c:	2200      	movs	r2, #0
 800625e:	2312      	movs	r3, #18
 8006260:	e7b0      	b.n	80061c4 <_dtoa_r+0x26c>
 8006262:	2301      	movs	r3, #1
 8006264:	9308      	str	r3, [sp, #32]
 8006266:	e7f5      	b.n	8006254 <_dtoa_r+0x2fc>
 8006268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800626a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800626e:	e7b8      	b.n	80061e2 <_dtoa_r+0x28a>
 8006270:	3101      	adds	r1, #1
 8006272:	6041      	str	r1, [r0, #4]
 8006274:	0052      	lsls	r2, r2, #1
 8006276:	e7b8      	b.n	80061ea <_dtoa_r+0x292>
 8006278:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800627a:	9a01      	ldr	r2, [sp, #4]
 800627c:	601a      	str	r2, [r3, #0]
 800627e:	9b03      	ldr	r3, [sp, #12]
 8006280:	2b0e      	cmp	r3, #14
 8006282:	f200 809d 	bhi.w	80063c0 <_dtoa_r+0x468>
 8006286:	2d00      	cmp	r5, #0
 8006288:	f000 809a 	beq.w	80063c0 <_dtoa_r+0x468>
 800628c:	9b00      	ldr	r3, [sp, #0]
 800628e:	2b00      	cmp	r3, #0
 8006290:	dd32      	ble.n	80062f8 <_dtoa_r+0x3a0>
 8006292:	4ab7      	ldr	r2, [pc, #732]	; (8006570 <_dtoa_r+0x618>)
 8006294:	f003 030f 	and.w	r3, r3, #15
 8006298:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800629c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80062a0:	9b00      	ldr	r3, [sp, #0]
 80062a2:	05d8      	lsls	r0, r3, #23
 80062a4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80062a8:	d516      	bpl.n	80062d8 <_dtoa_r+0x380>
 80062aa:	4bb2      	ldr	r3, [pc, #712]	; (8006574 <_dtoa_r+0x61c>)
 80062ac:	ec51 0b19 	vmov	r0, r1, d9
 80062b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80062b4:	f7fa fae2 	bl	800087c <__aeabi_ddiv>
 80062b8:	f007 070f 	and.w	r7, r7, #15
 80062bc:	4682      	mov	sl, r0
 80062be:	468b      	mov	fp, r1
 80062c0:	2503      	movs	r5, #3
 80062c2:	4eac      	ldr	r6, [pc, #688]	; (8006574 <_dtoa_r+0x61c>)
 80062c4:	b957      	cbnz	r7, 80062dc <_dtoa_r+0x384>
 80062c6:	4642      	mov	r2, r8
 80062c8:	464b      	mov	r3, r9
 80062ca:	4650      	mov	r0, sl
 80062cc:	4659      	mov	r1, fp
 80062ce:	f7fa fad5 	bl	800087c <__aeabi_ddiv>
 80062d2:	4682      	mov	sl, r0
 80062d4:	468b      	mov	fp, r1
 80062d6:	e028      	b.n	800632a <_dtoa_r+0x3d2>
 80062d8:	2502      	movs	r5, #2
 80062da:	e7f2      	b.n	80062c2 <_dtoa_r+0x36a>
 80062dc:	07f9      	lsls	r1, r7, #31
 80062de:	d508      	bpl.n	80062f2 <_dtoa_r+0x39a>
 80062e0:	4640      	mov	r0, r8
 80062e2:	4649      	mov	r1, r9
 80062e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80062e8:	f7fa f99e 	bl	8000628 <__aeabi_dmul>
 80062ec:	3501      	adds	r5, #1
 80062ee:	4680      	mov	r8, r0
 80062f0:	4689      	mov	r9, r1
 80062f2:	107f      	asrs	r7, r7, #1
 80062f4:	3608      	adds	r6, #8
 80062f6:	e7e5      	b.n	80062c4 <_dtoa_r+0x36c>
 80062f8:	f000 809b 	beq.w	8006432 <_dtoa_r+0x4da>
 80062fc:	9b00      	ldr	r3, [sp, #0]
 80062fe:	4f9d      	ldr	r7, [pc, #628]	; (8006574 <_dtoa_r+0x61c>)
 8006300:	425e      	negs	r6, r3
 8006302:	4b9b      	ldr	r3, [pc, #620]	; (8006570 <_dtoa_r+0x618>)
 8006304:	f006 020f 	and.w	r2, r6, #15
 8006308:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800630c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006310:	ec51 0b19 	vmov	r0, r1, d9
 8006314:	f7fa f988 	bl	8000628 <__aeabi_dmul>
 8006318:	1136      	asrs	r6, r6, #4
 800631a:	4682      	mov	sl, r0
 800631c:	468b      	mov	fp, r1
 800631e:	2300      	movs	r3, #0
 8006320:	2502      	movs	r5, #2
 8006322:	2e00      	cmp	r6, #0
 8006324:	d17a      	bne.n	800641c <_dtoa_r+0x4c4>
 8006326:	2b00      	cmp	r3, #0
 8006328:	d1d3      	bne.n	80062d2 <_dtoa_r+0x37a>
 800632a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800632c:	2b00      	cmp	r3, #0
 800632e:	f000 8082 	beq.w	8006436 <_dtoa_r+0x4de>
 8006332:	4b91      	ldr	r3, [pc, #580]	; (8006578 <_dtoa_r+0x620>)
 8006334:	2200      	movs	r2, #0
 8006336:	4650      	mov	r0, sl
 8006338:	4659      	mov	r1, fp
 800633a:	f7fa fbe7 	bl	8000b0c <__aeabi_dcmplt>
 800633e:	2800      	cmp	r0, #0
 8006340:	d079      	beq.n	8006436 <_dtoa_r+0x4de>
 8006342:	9b03      	ldr	r3, [sp, #12]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d076      	beq.n	8006436 <_dtoa_r+0x4de>
 8006348:	9b02      	ldr	r3, [sp, #8]
 800634a:	2b00      	cmp	r3, #0
 800634c:	dd36      	ble.n	80063bc <_dtoa_r+0x464>
 800634e:	9b00      	ldr	r3, [sp, #0]
 8006350:	4650      	mov	r0, sl
 8006352:	4659      	mov	r1, fp
 8006354:	1e5f      	subs	r7, r3, #1
 8006356:	2200      	movs	r2, #0
 8006358:	4b88      	ldr	r3, [pc, #544]	; (800657c <_dtoa_r+0x624>)
 800635a:	f7fa f965 	bl	8000628 <__aeabi_dmul>
 800635e:	9e02      	ldr	r6, [sp, #8]
 8006360:	4682      	mov	sl, r0
 8006362:	468b      	mov	fp, r1
 8006364:	3501      	adds	r5, #1
 8006366:	4628      	mov	r0, r5
 8006368:	f7fa f8f4 	bl	8000554 <__aeabi_i2d>
 800636c:	4652      	mov	r2, sl
 800636e:	465b      	mov	r3, fp
 8006370:	f7fa f95a 	bl	8000628 <__aeabi_dmul>
 8006374:	4b82      	ldr	r3, [pc, #520]	; (8006580 <_dtoa_r+0x628>)
 8006376:	2200      	movs	r2, #0
 8006378:	f7f9 ffa0 	bl	80002bc <__adddf3>
 800637c:	46d0      	mov	r8, sl
 800637e:	46d9      	mov	r9, fp
 8006380:	4682      	mov	sl, r0
 8006382:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006386:	2e00      	cmp	r6, #0
 8006388:	d158      	bne.n	800643c <_dtoa_r+0x4e4>
 800638a:	4b7e      	ldr	r3, [pc, #504]	; (8006584 <_dtoa_r+0x62c>)
 800638c:	2200      	movs	r2, #0
 800638e:	4640      	mov	r0, r8
 8006390:	4649      	mov	r1, r9
 8006392:	f7f9 ff91 	bl	80002b8 <__aeabi_dsub>
 8006396:	4652      	mov	r2, sl
 8006398:	465b      	mov	r3, fp
 800639a:	4680      	mov	r8, r0
 800639c:	4689      	mov	r9, r1
 800639e:	f7fa fbd3 	bl	8000b48 <__aeabi_dcmpgt>
 80063a2:	2800      	cmp	r0, #0
 80063a4:	f040 8295 	bne.w	80068d2 <_dtoa_r+0x97a>
 80063a8:	4652      	mov	r2, sl
 80063aa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80063ae:	4640      	mov	r0, r8
 80063b0:	4649      	mov	r1, r9
 80063b2:	f7fa fbab 	bl	8000b0c <__aeabi_dcmplt>
 80063b6:	2800      	cmp	r0, #0
 80063b8:	f040 8289 	bne.w	80068ce <_dtoa_r+0x976>
 80063bc:	ec5b ab19 	vmov	sl, fp, d9
 80063c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	f2c0 8148 	blt.w	8006658 <_dtoa_r+0x700>
 80063c8:	9a00      	ldr	r2, [sp, #0]
 80063ca:	2a0e      	cmp	r2, #14
 80063cc:	f300 8144 	bgt.w	8006658 <_dtoa_r+0x700>
 80063d0:	4b67      	ldr	r3, [pc, #412]	; (8006570 <_dtoa_r+0x618>)
 80063d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80063d6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80063da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063dc:	2b00      	cmp	r3, #0
 80063de:	f280 80d5 	bge.w	800658c <_dtoa_r+0x634>
 80063e2:	9b03      	ldr	r3, [sp, #12]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	f300 80d1 	bgt.w	800658c <_dtoa_r+0x634>
 80063ea:	f040 826f 	bne.w	80068cc <_dtoa_r+0x974>
 80063ee:	4b65      	ldr	r3, [pc, #404]	; (8006584 <_dtoa_r+0x62c>)
 80063f0:	2200      	movs	r2, #0
 80063f2:	4640      	mov	r0, r8
 80063f4:	4649      	mov	r1, r9
 80063f6:	f7fa f917 	bl	8000628 <__aeabi_dmul>
 80063fa:	4652      	mov	r2, sl
 80063fc:	465b      	mov	r3, fp
 80063fe:	f7fa fb99 	bl	8000b34 <__aeabi_dcmpge>
 8006402:	9e03      	ldr	r6, [sp, #12]
 8006404:	4637      	mov	r7, r6
 8006406:	2800      	cmp	r0, #0
 8006408:	f040 8245 	bne.w	8006896 <_dtoa_r+0x93e>
 800640c:	9d01      	ldr	r5, [sp, #4]
 800640e:	2331      	movs	r3, #49	; 0x31
 8006410:	f805 3b01 	strb.w	r3, [r5], #1
 8006414:	9b00      	ldr	r3, [sp, #0]
 8006416:	3301      	adds	r3, #1
 8006418:	9300      	str	r3, [sp, #0]
 800641a:	e240      	b.n	800689e <_dtoa_r+0x946>
 800641c:	07f2      	lsls	r2, r6, #31
 800641e:	d505      	bpl.n	800642c <_dtoa_r+0x4d4>
 8006420:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006424:	f7fa f900 	bl	8000628 <__aeabi_dmul>
 8006428:	3501      	adds	r5, #1
 800642a:	2301      	movs	r3, #1
 800642c:	1076      	asrs	r6, r6, #1
 800642e:	3708      	adds	r7, #8
 8006430:	e777      	b.n	8006322 <_dtoa_r+0x3ca>
 8006432:	2502      	movs	r5, #2
 8006434:	e779      	b.n	800632a <_dtoa_r+0x3d2>
 8006436:	9f00      	ldr	r7, [sp, #0]
 8006438:	9e03      	ldr	r6, [sp, #12]
 800643a:	e794      	b.n	8006366 <_dtoa_r+0x40e>
 800643c:	9901      	ldr	r1, [sp, #4]
 800643e:	4b4c      	ldr	r3, [pc, #304]	; (8006570 <_dtoa_r+0x618>)
 8006440:	4431      	add	r1, r6
 8006442:	910d      	str	r1, [sp, #52]	; 0x34
 8006444:	9908      	ldr	r1, [sp, #32]
 8006446:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800644a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800644e:	2900      	cmp	r1, #0
 8006450:	d043      	beq.n	80064da <_dtoa_r+0x582>
 8006452:	494d      	ldr	r1, [pc, #308]	; (8006588 <_dtoa_r+0x630>)
 8006454:	2000      	movs	r0, #0
 8006456:	f7fa fa11 	bl	800087c <__aeabi_ddiv>
 800645a:	4652      	mov	r2, sl
 800645c:	465b      	mov	r3, fp
 800645e:	f7f9 ff2b 	bl	80002b8 <__aeabi_dsub>
 8006462:	9d01      	ldr	r5, [sp, #4]
 8006464:	4682      	mov	sl, r0
 8006466:	468b      	mov	fp, r1
 8006468:	4649      	mov	r1, r9
 800646a:	4640      	mov	r0, r8
 800646c:	f7fa fb8c 	bl	8000b88 <__aeabi_d2iz>
 8006470:	4606      	mov	r6, r0
 8006472:	f7fa f86f 	bl	8000554 <__aeabi_i2d>
 8006476:	4602      	mov	r2, r0
 8006478:	460b      	mov	r3, r1
 800647a:	4640      	mov	r0, r8
 800647c:	4649      	mov	r1, r9
 800647e:	f7f9 ff1b 	bl	80002b8 <__aeabi_dsub>
 8006482:	3630      	adds	r6, #48	; 0x30
 8006484:	f805 6b01 	strb.w	r6, [r5], #1
 8006488:	4652      	mov	r2, sl
 800648a:	465b      	mov	r3, fp
 800648c:	4680      	mov	r8, r0
 800648e:	4689      	mov	r9, r1
 8006490:	f7fa fb3c 	bl	8000b0c <__aeabi_dcmplt>
 8006494:	2800      	cmp	r0, #0
 8006496:	d163      	bne.n	8006560 <_dtoa_r+0x608>
 8006498:	4642      	mov	r2, r8
 800649a:	464b      	mov	r3, r9
 800649c:	4936      	ldr	r1, [pc, #216]	; (8006578 <_dtoa_r+0x620>)
 800649e:	2000      	movs	r0, #0
 80064a0:	f7f9 ff0a 	bl	80002b8 <__aeabi_dsub>
 80064a4:	4652      	mov	r2, sl
 80064a6:	465b      	mov	r3, fp
 80064a8:	f7fa fb30 	bl	8000b0c <__aeabi_dcmplt>
 80064ac:	2800      	cmp	r0, #0
 80064ae:	f040 80b5 	bne.w	800661c <_dtoa_r+0x6c4>
 80064b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064b4:	429d      	cmp	r5, r3
 80064b6:	d081      	beq.n	80063bc <_dtoa_r+0x464>
 80064b8:	4b30      	ldr	r3, [pc, #192]	; (800657c <_dtoa_r+0x624>)
 80064ba:	2200      	movs	r2, #0
 80064bc:	4650      	mov	r0, sl
 80064be:	4659      	mov	r1, fp
 80064c0:	f7fa f8b2 	bl	8000628 <__aeabi_dmul>
 80064c4:	4b2d      	ldr	r3, [pc, #180]	; (800657c <_dtoa_r+0x624>)
 80064c6:	4682      	mov	sl, r0
 80064c8:	468b      	mov	fp, r1
 80064ca:	4640      	mov	r0, r8
 80064cc:	4649      	mov	r1, r9
 80064ce:	2200      	movs	r2, #0
 80064d0:	f7fa f8aa 	bl	8000628 <__aeabi_dmul>
 80064d4:	4680      	mov	r8, r0
 80064d6:	4689      	mov	r9, r1
 80064d8:	e7c6      	b.n	8006468 <_dtoa_r+0x510>
 80064da:	4650      	mov	r0, sl
 80064dc:	4659      	mov	r1, fp
 80064de:	f7fa f8a3 	bl	8000628 <__aeabi_dmul>
 80064e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064e4:	9d01      	ldr	r5, [sp, #4]
 80064e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80064e8:	4682      	mov	sl, r0
 80064ea:	468b      	mov	fp, r1
 80064ec:	4649      	mov	r1, r9
 80064ee:	4640      	mov	r0, r8
 80064f0:	f7fa fb4a 	bl	8000b88 <__aeabi_d2iz>
 80064f4:	4606      	mov	r6, r0
 80064f6:	f7fa f82d 	bl	8000554 <__aeabi_i2d>
 80064fa:	3630      	adds	r6, #48	; 0x30
 80064fc:	4602      	mov	r2, r0
 80064fe:	460b      	mov	r3, r1
 8006500:	4640      	mov	r0, r8
 8006502:	4649      	mov	r1, r9
 8006504:	f7f9 fed8 	bl	80002b8 <__aeabi_dsub>
 8006508:	f805 6b01 	strb.w	r6, [r5], #1
 800650c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800650e:	429d      	cmp	r5, r3
 8006510:	4680      	mov	r8, r0
 8006512:	4689      	mov	r9, r1
 8006514:	f04f 0200 	mov.w	r2, #0
 8006518:	d124      	bne.n	8006564 <_dtoa_r+0x60c>
 800651a:	4b1b      	ldr	r3, [pc, #108]	; (8006588 <_dtoa_r+0x630>)
 800651c:	4650      	mov	r0, sl
 800651e:	4659      	mov	r1, fp
 8006520:	f7f9 fecc 	bl	80002bc <__adddf3>
 8006524:	4602      	mov	r2, r0
 8006526:	460b      	mov	r3, r1
 8006528:	4640      	mov	r0, r8
 800652a:	4649      	mov	r1, r9
 800652c:	f7fa fb0c 	bl	8000b48 <__aeabi_dcmpgt>
 8006530:	2800      	cmp	r0, #0
 8006532:	d173      	bne.n	800661c <_dtoa_r+0x6c4>
 8006534:	4652      	mov	r2, sl
 8006536:	465b      	mov	r3, fp
 8006538:	4913      	ldr	r1, [pc, #76]	; (8006588 <_dtoa_r+0x630>)
 800653a:	2000      	movs	r0, #0
 800653c:	f7f9 febc 	bl	80002b8 <__aeabi_dsub>
 8006540:	4602      	mov	r2, r0
 8006542:	460b      	mov	r3, r1
 8006544:	4640      	mov	r0, r8
 8006546:	4649      	mov	r1, r9
 8006548:	f7fa fae0 	bl	8000b0c <__aeabi_dcmplt>
 800654c:	2800      	cmp	r0, #0
 800654e:	f43f af35 	beq.w	80063bc <_dtoa_r+0x464>
 8006552:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006554:	1e6b      	subs	r3, r5, #1
 8006556:	930f      	str	r3, [sp, #60]	; 0x3c
 8006558:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800655c:	2b30      	cmp	r3, #48	; 0x30
 800655e:	d0f8      	beq.n	8006552 <_dtoa_r+0x5fa>
 8006560:	9700      	str	r7, [sp, #0]
 8006562:	e049      	b.n	80065f8 <_dtoa_r+0x6a0>
 8006564:	4b05      	ldr	r3, [pc, #20]	; (800657c <_dtoa_r+0x624>)
 8006566:	f7fa f85f 	bl	8000628 <__aeabi_dmul>
 800656a:	4680      	mov	r8, r0
 800656c:	4689      	mov	r9, r1
 800656e:	e7bd      	b.n	80064ec <_dtoa_r+0x594>
 8006570:	08009860 	.word	0x08009860
 8006574:	08009838 	.word	0x08009838
 8006578:	3ff00000 	.word	0x3ff00000
 800657c:	40240000 	.word	0x40240000
 8006580:	401c0000 	.word	0x401c0000
 8006584:	40140000 	.word	0x40140000
 8006588:	3fe00000 	.word	0x3fe00000
 800658c:	9d01      	ldr	r5, [sp, #4]
 800658e:	4656      	mov	r6, sl
 8006590:	465f      	mov	r7, fp
 8006592:	4642      	mov	r2, r8
 8006594:	464b      	mov	r3, r9
 8006596:	4630      	mov	r0, r6
 8006598:	4639      	mov	r1, r7
 800659a:	f7fa f96f 	bl	800087c <__aeabi_ddiv>
 800659e:	f7fa faf3 	bl	8000b88 <__aeabi_d2iz>
 80065a2:	4682      	mov	sl, r0
 80065a4:	f7f9 ffd6 	bl	8000554 <__aeabi_i2d>
 80065a8:	4642      	mov	r2, r8
 80065aa:	464b      	mov	r3, r9
 80065ac:	f7fa f83c 	bl	8000628 <__aeabi_dmul>
 80065b0:	4602      	mov	r2, r0
 80065b2:	460b      	mov	r3, r1
 80065b4:	4630      	mov	r0, r6
 80065b6:	4639      	mov	r1, r7
 80065b8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80065bc:	f7f9 fe7c 	bl	80002b8 <__aeabi_dsub>
 80065c0:	f805 6b01 	strb.w	r6, [r5], #1
 80065c4:	9e01      	ldr	r6, [sp, #4]
 80065c6:	9f03      	ldr	r7, [sp, #12]
 80065c8:	1bae      	subs	r6, r5, r6
 80065ca:	42b7      	cmp	r7, r6
 80065cc:	4602      	mov	r2, r0
 80065ce:	460b      	mov	r3, r1
 80065d0:	d135      	bne.n	800663e <_dtoa_r+0x6e6>
 80065d2:	f7f9 fe73 	bl	80002bc <__adddf3>
 80065d6:	4642      	mov	r2, r8
 80065d8:	464b      	mov	r3, r9
 80065da:	4606      	mov	r6, r0
 80065dc:	460f      	mov	r7, r1
 80065de:	f7fa fab3 	bl	8000b48 <__aeabi_dcmpgt>
 80065e2:	b9d0      	cbnz	r0, 800661a <_dtoa_r+0x6c2>
 80065e4:	4642      	mov	r2, r8
 80065e6:	464b      	mov	r3, r9
 80065e8:	4630      	mov	r0, r6
 80065ea:	4639      	mov	r1, r7
 80065ec:	f7fa fa84 	bl	8000af8 <__aeabi_dcmpeq>
 80065f0:	b110      	cbz	r0, 80065f8 <_dtoa_r+0x6a0>
 80065f2:	f01a 0f01 	tst.w	sl, #1
 80065f6:	d110      	bne.n	800661a <_dtoa_r+0x6c2>
 80065f8:	4620      	mov	r0, r4
 80065fa:	ee18 1a10 	vmov	r1, s16
 80065fe:	f000 fe87 	bl	8007310 <_Bfree>
 8006602:	2300      	movs	r3, #0
 8006604:	9800      	ldr	r0, [sp, #0]
 8006606:	702b      	strb	r3, [r5, #0]
 8006608:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800660a:	3001      	adds	r0, #1
 800660c:	6018      	str	r0, [r3, #0]
 800660e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006610:	2b00      	cmp	r3, #0
 8006612:	f43f acf1 	beq.w	8005ff8 <_dtoa_r+0xa0>
 8006616:	601d      	str	r5, [r3, #0]
 8006618:	e4ee      	b.n	8005ff8 <_dtoa_r+0xa0>
 800661a:	9f00      	ldr	r7, [sp, #0]
 800661c:	462b      	mov	r3, r5
 800661e:	461d      	mov	r5, r3
 8006620:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006624:	2a39      	cmp	r2, #57	; 0x39
 8006626:	d106      	bne.n	8006636 <_dtoa_r+0x6de>
 8006628:	9a01      	ldr	r2, [sp, #4]
 800662a:	429a      	cmp	r2, r3
 800662c:	d1f7      	bne.n	800661e <_dtoa_r+0x6c6>
 800662e:	9901      	ldr	r1, [sp, #4]
 8006630:	2230      	movs	r2, #48	; 0x30
 8006632:	3701      	adds	r7, #1
 8006634:	700a      	strb	r2, [r1, #0]
 8006636:	781a      	ldrb	r2, [r3, #0]
 8006638:	3201      	adds	r2, #1
 800663a:	701a      	strb	r2, [r3, #0]
 800663c:	e790      	b.n	8006560 <_dtoa_r+0x608>
 800663e:	4ba6      	ldr	r3, [pc, #664]	; (80068d8 <_dtoa_r+0x980>)
 8006640:	2200      	movs	r2, #0
 8006642:	f7f9 fff1 	bl	8000628 <__aeabi_dmul>
 8006646:	2200      	movs	r2, #0
 8006648:	2300      	movs	r3, #0
 800664a:	4606      	mov	r6, r0
 800664c:	460f      	mov	r7, r1
 800664e:	f7fa fa53 	bl	8000af8 <__aeabi_dcmpeq>
 8006652:	2800      	cmp	r0, #0
 8006654:	d09d      	beq.n	8006592 <_dtoa_r+0x63a>
 8006656:	e7cf      	b.n	80065f8 <_dtoa_r+0x6a0>
 8006658:	9a08      	ldr	r2, [sp, #32]
 800665a:	2a00      	cmp	r2, #0
 800665c:	f000 80d7 	beq.w	800680e <_dtoa_r+0x8b6>
 8006660:	9a06      	ldr	r2, [sp, #24]
 8006662:	2a01      	cmp	r2, #1
 8006664:	f300 80ba 	bgt.w	80067dc <_dtoa_r+0x884>
 8006668:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800666a:	2a00      	cmp	r2, #0
 800666c:	f000 80b2 	beq.w	80067d4 <_dtoa_r+0x87c>
 8006670:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006674:	9e07      	ldr	r6, [sp, #28]
 8006676:	9d04      	ldr	r5, [sp, #16]
 8006678:	9a04      	ldr	r2, [sp, #16]
 800667a:	441a      	add	r2, r3
 800667c:	9204      	str	r2, [sp, #16]
 800667e:	9a05      	ldr	r2, [sp, #20]
 8006680:	2101      	movs	r1, #1
 8006682:	441a      	add	r2, r3
 8006684:	4620      	mov	r0, r4
 8006686:	9205      	str	r2, [sp, #20]
 8006688:	f000 ff44 	bl	8007514 <__i2b>
 800668c:	4607      	mov	r7, r0
 800668e:	2d00      	cmp	r5, #0
 8006690:	dd0c      	ble.n	80066ac <_dtoa_r+0x754>
 8006692:	9b05      	ldr	r3, [sp, #20]
 8006694:	2b00      	cmp	r3, #0
 8006696:	dd09      	ble.n	80066ac <_dtoa_r+0x754>
 8006698:	42ab      	cmp	r3, r5
 800669a:	9a04      	ldr	r2, [sp, #16]
 800669c:	bfa8      	it	ge
 800669e:	462b      	movge	r3, r5
 80066a0:	1ad2      	subs	r2, r2, r3
 80066a2:	9204      	str	r2, [sp, #16]
 80066a4:	9a05      	ldr	r2, [sp, #20]
 80066a6:	1aed      	subs	r5, r5, r3
 80066a8:	1ad3      	subs	r3, r2, r3
 80066aa:	9305      	str	r3, [sp, #20]
 80066ac:	9b07      	ldr	r3, [sp, #28]
 80066ae:	b31b      	cbz	r3, 80066f8 <_dtoa_r+0x7a0>
 80066b0:	9b08      	ldr	r3, [sp, #32]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	f000 80af 	beq.w	8006816 <_dtoa_r+0x8be>
 80066b8:	2e00      	cmp	r6, #0
 80066ba:	dd13      	ble.n	80066e4 <_dtoa_r+0x78c>
 80066bc:	4639      	mov	r1, r7
 80066be:	4632      	mov	r2, r6
 80066c0:	4620      	mov	r0, r4
 80066c2:	f000 ffe7 	bl	8007694 <__pow5mult>
 80066c6:	ee18 2a10 	vmov	r2, s16
 80066ca:	4601      	mov	r1, r0
 80066cc:	4607      	mov	r7, r0
 80066ce:	4620      	mov	r0, r4
 80066d0:	f000 ff36 	bl	8007540 <__multiply>
 80066d4:	ee18 1a10 	vmov	r1, s16
 80066d8:	4680      	mov	r8, r0
 80066da:	4620      	mov	r0, r4
 80066dc:	f000 fe18 	bl	8007310 <_Bfree>
 80066e0:	ee08 8a10 	vmov	s16, r8
 80066e4:	9b07      	ldr	r3, [sp, #28]
 80066e6:	1b9a      	subs	r2, r3, r6
 80066e8:	d006      	beq.n	80066f8 <_dtoa_r+0x7a0>
 80066ea:	ee18 1a10 	vmov	r1, s16
 80066ee:	4620      	mov	r0, r4
 80066f0:	f000 ffd0 	bl	8007694 <__pow5mult>
 80066f4:	ee08 0a10 	vmov	s16, r0
 80066f8:	2101      	movs	r1, #1
 80066fa:	4620      	mov	r0, r4
 80066fc:	f000 ff0a 	bl	8007514 <__i2b>
 8006700:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006702:	2b00      	cmp	r3, #0
 8006704:	4606      	mov	r6, r0
 8006706:	f340 8088 	ble.w	800681a <_dtoa_r+0x8c2>
 800670a:	461a      	mov	r2, r3
 800670c:	4601      	mov	r1, r0
 800670e:	4620      	mov	r0, r4
 8006710:	f000 ffc0 	bl	8007694 <__pow5mult>
 8006714:	9b06      	ldr	r3, [sp, #24]
 8006716:	2b01      	cmp	r3, #1
 8006718:	4606      	mov	r6, r0
 800671a:	f340 8081 	ble.w	8006820 <_dtoa_r+0x8c8>
 800671e:	f04f 0800 	mov.w	r8, #0
 8006722:	6933      	ldr	r3, [r6, #16]
 8006724:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006728:	6918      	ldr	r0, [r3, #16]
 800672a:	f000 fea3 	bl	8007474 <__hi0bits>
 800672e:	f1c0 0020 	rsb	r0, r0, #32
 8006732:	9b05      	ldr	r3, [sp, #20]
 8006734:	4418      	add	r0, r3
 8006736:	f010 001f 	ands.w	r0, r0, #31
 800673a:	f000 8092 	beq.w	8006862 <_dtoa_r+0x90a>
 800673e:	f1c0 0320 	rsb	r3, r0, #32
 8006742:	2b04      	cmp	r3, #4
 8006744:	f340 808a 	ble.w	800685c <_dtoa_r+0x904>
 8006748:	f1c0 001c 	rsb	r0, r0, #28
 800674c:	9b04      	ldr	r3, [sp, #16]
 800674e:	4403      	add	r3, r0
 8006750:	9304      	str	r3, [sp, #16]
 8006752:	9b05      	ldr	r3, [sp, #20]
 8006754:	4403      	add	r3, r0
 8006756:	4405      	add	r5, r0
 8006758:	9305      	str	r3, [sp, #20]
 800675a:	9b04      	ldr	r3, [sp, #16]
 800675c:	2b00      	cmp	r3, #0
 800675e:	dd07      	ble.n	8006770 <_dtoa_r+0x818>
 8006760:	ee18 1a10 	vmov	r1, s16
 8006764:	461a      	mov	r2, r3
 8006766:	4620      	mov	r0, r4
 8006768:	f000 ffee 	bl	8007748 <__lshift>
 800676c:	ee08 0a10 	vmov	s16, r0
 8006770:	9b05      	ldr	r3, [sp, #20]
 8006772:	2b00      	cmp	r3, #0
 8006774:	dd05      	ble.n	8006782 <_dtoa_r+0x82a>
 8006776:	4631      	mov	r1, r6
 8006778:	461a      	mov	r2, r3
 800677a:	4620      	mov	r0, r4
 800677c:	f000 ffe4 	bl	8007748 <__lshift>
 8006780:	4606      	mov	r6, r0
 8006782:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006784:	2b00      	cmp	r3, #0
 8006786:	d06e      	beq.n	8006866 <_dtoa_r+0x90e>
 8006788:	ee18 0a10 	vmov	r0, s16
 800678c:	4631      	mov	r1, r6
 800678e:	f001 f84b 	bl	8007828 <__mcmp>
 8006792:	2800      	cmp	r0, #0
 8006794:	da67      	bge.n	8006866 <_dtoa_r+0x90e>
 8006796:	9b00      	ldr	r3, [sp, #0]
 8006798:	3b01      	subs	r3, #1
 800679a:	ee18 1a10 	vmov	r1, s16
 800679e:	9300      	str	r3, [sp, #0]
 80067a0:	220a      	movs	r2, #10
 80067a2:	2300      	movs	r3, #0
 80067a4:	4620      	mov	r0, r4
 80067a6:	f000 fdd5 	bl	8007354 <__multadd>
 80067aa:	9b08      	ldr	r3, [sp, #32]
 80067ac:	ee08 0a10 	vmov	s16, r0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	f000 81b1 	beq.w	8006b18 <_dtoa_r+0xbc0>
 80067b6:	2300      	movs	r3, #0
 80067b8:	4639      	mov	r1, r7
 80067ba:	220a      	movs	r2, #10
 80067bc:	4620      	mov	r0, r4
 80067be:	f000 fdc9 	bl	8007354 <__multadd>
 80067c2:	9b02      	ldr	r3, [sp, #8]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	4607      	mov	r7, r0
 80067c8:	f300 808e 	bgt.w	80068e8 <_dtoa_r+0x990>
 80067cc:	9b06      	ldr	r3, [sp, #24]
 80067ce:	2b02      	cmp	r3, #2
 80067d0:	dc51      	bgt.n	8006876 <_dtoa_r+0x91e>
 80067d2:	e089      	b.n	80068e8 <_dtoa_r+0x990>
 80067d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80067d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80067da:	e74b      	b.n	8006674 <_dtoa_r+0x71c>
 80067dc:	9b03      	ldr	r3, [sp, #12]
 80067de:	1e5e      	subs	r6, r3, #1
 80067e0:	9b07      	ldr	r3, [sp, #28]
 80067e2:	42b3      	cmp	r3, r6
 80067e4:	bfbf      	itttt	lt
 80067e6:	9b07      	ldrlt	r3, [sp, #28]
 80067e8:	9607      	strlt	r6, [sp, #28]
 80067ea:	1af2      	sublt	r2, r6, r3
 80067ec:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80067ee:	bfb6      	itet	lt
 80067f0:	189b      	addlt	r3, r3, r2
 80067f2:	1b9e      	subge	r6, r3, r6
 80067f4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80067f6:	9b03      	ldr	r3, [sp, #12]
 80067f8:	bfb8      	it	lt
 80067fa:	2600      	movlt	r6, #0
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	bfb7      	itett	lt
 8006800:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006804:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006808:	1a9d      	sublt	r5, r3, r2
 800680a:	2300      	movlt	r3, #0
 800680c:	e734      	b.n	8006678 <_dtoa_r+0x720>
 800680e:	9e07      	ldr	r6, [sp, #28]
 8006810:	9d04      	ldr	r5, [sp, #16]
 8006812:	9f08      	ldr	r7, [sp, #32]
 8006814:	e73b      	b.n	800668e <_dtoa_r+0x736>
 8006816:	9a07      	ldr	r2, [sp, #28]
 8006818:	e767      	b.n	80066ea <_dtoa_r+0x792>
 800681a:	9b06      	ldr	r3, [sp, #24]
 800681c:	2b01      	cmp	r3, #1
 800681e:	dc18      	bgt.n	8006852 <_dtoa_r+0x8fa>
 8006820:	f1ba 0f00 	cmp.w	sl, #0
 8006824:	d115      	bne.n	8006852 <_dtoa_r+0x8fa>
 8006826:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800682a:	b993      	cbnz	r3, 8006852 <_dtoa_r+0x8fa>
 800682c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006830:	0d1b      	lsrs	r3, r3, #20
 8006832:	051b      	lsls	r3, r3, #20
 8006834:	b183      	cbz	r3, 8006858 <_dtoa_r+0x900>
 8006836:	9b04      	ldr	r3, [sp, #16]
 8006838:	3301      	adds	r3, #1
 800683a:	9304      	str	r3, [sp, #16]
 800683c:	9b05      	ldr	r3, [sp, #20]
 800683e:	3301      	adds	r3, #1
 8006840:	9305      	str	r3, [sp, #20]
 8006842:	f04f 0801 	mov.w	r8, #1
 8006846:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006848:	2b00      	cmp	r3, #0
 800684a:	f47f af6a 	bne.w	8006722 <_dtoa_r+0x7ca>
 800684e:	2001      	movs	r0, #1
 8006850:	e76f      	b.n	8006732 <_dtoa_r+0x7da>
 8006852:	f04f 0800 	mov.w	r8, #0
 8006856:	e7f6      	b.n	8006846 <_dtoa_r+0x8ee>
 8006858:	4698      	mov	r8, r3
 800685a:	e7f4      	b.n	8006846 <_dtoa_r+0x8ee>
 800685c:	f43f af7d 	beq.w	800675a <_dtoa_r+0x802>
 8006860:	4618      	mov	r0, r3
 8006862:	301c      	adds	r0, #28
 8006864:	e772      	b.n	800674c <_dtoa_r+0x7f4>
 8006866:	9b03      	ldr	r3, [sp, #12]
 8006868:	2b00      	cmp	r3, #0
 800686a:	dc37      	bgt.n	80068dc <_dtoa_r+0x984>
 800686c:	9b06      	ldr	r3, [sp, #24]
 800686e:	2b02      	cmp	r3, #2
 8006870:	dd34      	ble.n	80068dc <_dtoa_r+0x984>
 8006872:	9b03      	ldr	r3, [sp, #12]
 8006874:	9302      	str	r3, [sp, #8]
 8006876:	9b02      	ldr	r3, [sp, #8]
 8006878:	b96b      	cbnz	r3, 8006896 <_dtoa_r+0x93e>
 800687a:	4631      	mov	r1, r6
 800687c:	2205      	movs	r2, #5
 800687e:	4620      	mov	r0, r4
 8006880:	f000 fd68 	bl	8007354 <__multadd>
 8006884:	4601      	mov	r1, r0
 8006886:	4606      	mov	r6, r0
 8006888:	ee18 0a10 	vmov	r0, s16
 800688c:	f000 ffcc 	bl	8007828 <__mcmp>
 8006890:	2800      	cmp	r0, #0
 8006892:	f73f adbb 	bgt.w	800640c <_dtoa_r+0x4b4>
 8006896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006898:	9d01      	ldr	r5, [sp, #4]
 800689a:	43db      	mvns	r3, r3
 800689c:	9300      	str	r3, [sp, #0]
 800689e:	f04f 0800 	mov.w	r8, #0
 80068a2:	4631      	mov	r1, r6
 80068a4:	4620      	mov	r0, r4
 80068a6:	f000 fd33 	bl	8007310 <_Bfree>
 80068aa:	2f00      	cmp	r7, #0
 80068ac:	f43f aea4 	beq.w	80065f8 <_dtoa_r+0x6a0>
 80068b0:	f1b8 0f00 	cmp.w	r8, #0
 80068b4:	d005      	beq.n	80068c2 <_dtoa_r+0x96a>
 80068b6:	45b8      	cmp	r8, r7
 80068b8:	d003      	beq.n	80068c2 <_dtoa_r+0x96a>
 80068ba:	4641      	mov	r1, r8
 80068bc:	4620      	mov	r0, r4
 80068be:	f000 fd27 	bl	8007310 <_Bfree>
 80068c2:	4639      	mov	r1, r7
 80068c4:	4620      	mov	r0, r4
 80068c6:	f000 fd23 	bl	8007310 <_Bfree>
 80068ca:	e695      	b.n	80065f8 <_dtoa_r+0x6a0>
 80068cc:	2600      	movs	r6, #0
 80068ce:	4637      	mov	r7, r6
 80068d0:	e7e1      	b.n	8006896 <_dtoa_r+0x93e>
 80068d2:	9700      	str	r7, [sp, #0]
 80068d4:	4637      	mov	r7, r6
 80068d6:	e599      	b.n	800640c <_dtoa_r+0x4b4>
 80068d8:	40240000 	.word	0x40240000
 80068dc:	9b08      	ldr	r3, [sp, #32]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	f000 80ca 	beq.w	8006a78 <_dtoa_r+0xb20>
 80068e4:	9b03      	ldr	r3, [sp, #12]
 80068e6:	9302      	str	r3, [sp, #8]
 80068e8:	2d00      	cmp	r5, #0
 80068ea:	dd05      	ble.n	80068f8 <_dtoa_r+0x9a0>
 80068ec:	4639      	mov	r1, r7
 80068ee:	462a      	mov	r2, r5
 80068f0:	4620      	mov	r0, r4
 80068f2:	f000 ff29 	bl	8007748 <__lshift>
 80068f6:	4607      	mov	r7, r0
 80068f8:	f1b8 0f00 	cmp.w	r8, #0
 80068fc:	d05b      	beq.n	80069b6 <_dtoa_r+0xa5e>
 80068fe:	6879      	ldr	r1, [r7, #4]
 8006900:	4620      	mov	r0, r4
 8006902:	f000 fcc5 	bl	8007290 <_Balloc>
 8006906:	4605      	mov	r5, r0
 8006908:	b928      	cbnz	r0, 8006916 <_dtoa_r+0x9be>
 800690a:	4b87      	ldr	r3, [pc, #540]	; (8006b28 <_dtoa_r+0xbd0>)
 800690c:	4602      	mov	r2, r0
 800690e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006912:	f7ff bb3b 	b.w	8005f8c <_dtoa_r+0x34>
 8006916:	693a      	ldr	r2, [r7, #16]
 8006918:	3202      	adds	r2, #2
 800691a:	0092      	lsls	r2, r2, #2
 800691c:	f107 010c 	add.w	r1, r7, #12
 8006920:	300c      	adds	r0, #12
 8006922:	f000 fca7 	bl	8007274 <memcpy>
 8006926:	2201      	movs	r2, #1
 8006928:	4629      	mov	r1, r5
 800692a:	4620      	mov	r0, r4
 800692c:	f000 ff0c 	bl	8007748 <__lshift>
 8006930:	9b01      	ldr	r3, [sp, #4]
 8006932:	f103 0901 	add.w	r9, r3, #1
 8006936:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800693a:	4413      	add	r3, r2
 800693c:	9305      	str	r3, [sp, #20]
 800693e:	f00a 0301 	and.w	r3, sl, #1
 8006942:	46b8      	mov	r8, r7
 8006944:	9304      	str	r3, [sp, #16]
 8006946:	4607      	mov	r7, r0
 8006948:	4631      	mov	r1, r6
 800694a:	ee18 0a10 	vmov	r0, s16
 800694e:	f7ff fa75 	bl	8005e3c <quorem>
 8006952:	4641      	mov	r1, r8
 8006954:	9002      	str	r0, [sp, #8]
 8006956:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800695a:	ee18 0a10 	vmov	r0, s16
 800695e:	f000 ff63 	bl	8007828 <__mcmp>
 8006962:	463a      	mov	r2, r7
 8006964:	9003      	str	r0, [sp, #12]
 8006966:	4631      	mov	r1, r6
 8006968:	4620      	mov	r0, r4
 800696a:	f000 ff79 	bl	8007860 <__mdiff>
 800696e:	68c2      	ldr	r2, [r0, #12]
 8006970:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8006974:	4605      	mov	r5, r0
 8006976:	bb02      	cbnz	r2, 80069ba <_dtoa_r+0xa62>
 8006978:	4601      	mov	r1, r0
 800697a:	ee18 0a10 	vmov	r0, s16
 800697e:	f000 ff53 	bl	8007828 <__mcmp>
 8006982:	4602      	mov	r2, r0
 8006984:	4629      	mov	r1, r5
 8006986:	4620      	mov	r0, r4
 8006988:	9207      	str	r2, [sp, #28]
 800698a:	f000 fcc1 	bl	8007310 <_Bfree>
 800698e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006992:	ea43 0102 	orr.w	r1, r3, r2
 8006996:	9b04      	ldr	r3, [sp, #16]
 8006998:	430b      	orrs	r3, r1
 800699a:	464d      	mov	r5, r9
 800699c:	d10f      	bne.n	80069be <_dtoa_r+0xa66>
 800699e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80069a2:	d02a      	beq.n	80069fa <_dtoa_r+0xaa2>
 80069a4:	9b03      	ldr	r3, [sp, #12]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	dd02      	ble.n	80069b0 <_dtoa_r+0xa58>
 80069aa:	9b02      	ldr	r3, [sp, #8]
 80069ac:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80069b0:	f88b a000 	strb.w	sl, [fp]
 80069b4:	e775      	b.n	80068a2 <_dtoa_r+0x94a>
 80069b6:	4638      	mov	r0, r7
 80069b8:	e7ba      	b.n	8006930 <_dtoa_r+0x9d8>
 80069ba:	2201      	movs	r2, #1
 80069bc:	e7e2      	b.n	8006984 <_dtoa_r+0xa2c>
 80069be:	9b03      	ldr	r3, [sp, #12]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	db04      	blt.n	80069ce <_dtoa_r+0xa76>
 80069c4:	9906      	ldr	r1, [sp, #24]
 80069c6:	430b      	orrs	r3, r1
 80069c8:	9904      	ldr	r1, [sp, #16]
 80069ca:	430b      	orrs	r3, r1
 80069cc:	d122      	bne.n	8006a14 <_dtoa_r+0xabc>
 80069ce:	2a00      	cmp	r2, #0
 80069d0:	ddee      	ble.n	80069b0 <_dtoa_r+0xa58>
 80069d2:	ee18 1a10 	vmov	r1, s16
 80069d6:	2201      	movs	r2, #1
 80069d8:	4620      	mov	r0, r4
 80069da:	f000 feb5 	bl	8007748 <__lshift>
 80069de:	4631      	mov	r1, r6
 80069e0:	ee08 0a10 	vmov	s16, r0
 80069e4:	f000 ff20 	bl	8007828 <__mcmp>
 80069e8:	2800      	cmp	r0, #0
 80069ea:	dc03      	bgt.n	80069f4 <_dtoa_r+0xa9c>
 80069ec:	d1e0      	bne.n	80069b0 <_dtoa_r+0xa58>
 80069ee:	f01a 0f01 	tst.w	sl, #1
 80069f2:	d0dd      	beq.n	80069b0 <_dtoa_r+0xa58>
 80069f4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80069f8:	d1d7      	bne.n	80069aa <_dtoa_r+0xa52>
 80069fa:	2339      	movs	r3, #57	; 0x39
 80069fc:	f88b 3000 	strb.w	r3, [fp]
 8006a00:	462b      	mov	r3, r5
 8006a02:	461d      	mov	r5, r3
 8006a04:	3b01      	subs	r3, #1
 8006a06:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006a0a:	2a39      	cmp	r2, #57	; 0x39
 8006a0c:	d071      	beq.n	8006af2 <_dtoa_r+0xb9a>
 8006a0e:	3201      	adds	r2, #1
 8006a10:	701a      	strb	r2, [r3, #0]
 8006a12:	e746      	b.n	80068a2 <_dtoa_r+0x94a>
 8006a14:	2a00      	cmp	r2, #0
 8006a16:	dd07      	ble.n	8006a28 <_dtoa_r+0xad0>
 8006a18:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006a1c:	d0ed      	beq.n	80069fa <_dtoa_r+0xaa2>
 8006a1e:	f10a 0301 	add.w	r3, sl, #1
 8006a22:	f88b 3000 	strb.w	r3, [fp]
 8006a26:	e73c      	b.n	80068a2 <_dtoa_r+0x94a>
 8006a28:	9b05      	ldr	r3, [sp, #20]
 8006a2a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006a2e:	4599      	cmp	r9, r3
 8006a30:	d047      	beq.n	8006ac2 <_dtoa_r+0xb6a>
 8006a32:	ee18 1a10 	vmov	r1, s16
 8006a36:	2300      	movs	r3, #0
 8006a38:	220a      	movs	r2, #10
 8006a3a:	4620      	mov	r0, r4
 8006a3c:	f000 fc8a 	bl	8007354 <__multadd>
 8006a40:	45b8      	cmp	r8, r7
 8006a42:	ee08 0a10 	vmov	s16, r0
 8006a46:	f04f 0300 	mov.w	r3, #0
 8006a4a:	f04f 020a 	mov.w	r2, #10
 8006a4e:	4641      	mov	r1, r8
 8006a50:	4620      	mov	r0, r4
 8006a52:	d106      	bne.n	8006a62 <_dtoa_r+0xb0a>
 8006a54:	f000 fc7e 	bl	8007354 <__multadd>
 8006a58:	4680      	mov	r8, r0
 8006a5a:	4607      	mov	r7, r0
 8006a5c:	f109 0901 	add.w	r9, r9, #1
 8006a60:	e772      	b.n	8006948 <_dtoa_r+0x9f0>
 8006a62:	f000 fc77 	bl	8007354 <__multadd>
 8006a66:	4639      	mov	r1, r7
 8006a68:	4680      	mov	r8, r0
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	220a      	movs	r2, #10
 8006a6e:	4620      	mov	r0, r4
 8006a70:	f000 fc70 	bl	8007354 <__multadd>
 8006a74:	4607      	mov	r7, r0
 8006a76:	e7f1      	b.n	8006a5c <_dtoa_r+0xb04>
 8006a78:	9b03      	ldr	r3, [sp, #12]
 8006a7a:	9302      	str	r3, [sp, #8]
 8006a7c:	9d01      	ldr	r5, [sp, #4]
 8006a7e:	ee18 0a10 	vmov	r0, s16
 8006a82:	4631      	mov	r1, r6
 8006a84:	f7ff f9da 	bl	8005e3c <quorem>
 8006a88:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006a8c:	9b01      	ldr	r3, [sp, #4]
 8006a8e:	f805 ab01 	strb.w	sl, [r5], #1
 8006a92:	1aea      	subs	r2, r5, r3
 8006a94:	9b02      	ldr	r3, [sp, #8]
 8006a96:	4293      	cmp	r3, r2
 8006a98:	dd09      	ble.n	8006aae <_dtoa_r+0xb56>
 8006a9a:	ee18 1a10 	vmov	r1, s16
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	220a      	movs	r2, #10
 8006aa2:	4620      	mov	r0, r4
 8006aa4:	f000 fc56 	bl	8007354 <__multadd>
 8006aa8:	ee08 0a10 	vmov	s16, r0
 8006aac:	e7e7      	b.n	8006a7e <_dtoa_r+0xb26>
 8006aae:	9b02      	ldr	r3, [sp, #8]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	bfc8      	it	gt
 8006ab4:	461d      	movgt	r5, r3
 8006ab6:	9b01      	ldr	r3, [sp, #4]
 8006ab8:	bfd8      	it	le
 8006aba:	2501      	movle	r5, #1
 8006abc:	441d      	add	r5, r3
 8006abe:	f04f 0800 	mov.w	r8, #0
 8006ac2:	ee18 1a10 	vmov	r1, s16
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	4620      	mov	r0, r4
 8006aca:	f000 fe3d 	bl	8007748 <__lshift>
 8006ace:	4631      	mov	r1, r6
 8006ad0:	ee08 0a10 	vmov	s16, r0
 8006ad4:	f000 fea8 	bl	8007828 <__mcmp>
 8006ad8:	2800      	cmp	r0, #0
 8006ada:	dc91      	bgt.n	8006a00 <_dtoa_r+0xaa8>
 8006adc:	d102      	bne.n	8006ae4 <_dtoa_r+0xb8c>
 8006ade:	f01a 0f01 	tst.w	sl, #1
 8006ae2:	d18d      	bne.n	8006a00 <_dtoa_r+0xaa8>
 8006ae4:	462b      	mov	r3, r5
 8006ae6:	461d      	mov	r5, r3
 8006ae8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006aec:	2a30      	cmp	r2, #48	; 0x30
 8006aee:	d0fa      	beq.n	8006ae6 <_dtoa_r+0xb8e>
 8006af0:	e6d7      	b.n	80068a2 <_dtoa_r+0x94a>
 8006af2:	9a01      	ldr	r2, [sp, #4]
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d184      	bne.n	8006a02 <_dtoa_r+0xaaa>
 8006af8:	9b00      	ldr	r3, [sp, #0]
 8006afa:	3301      	adds	r3, #1
 8006afc:	9300      	str	r3, [sp, #0]
 8006afe:	2331      	movs	r3, #49	; 0x31
 8006b00:	7013      	strb	r3, [r2, #0]
 8006b02:	e6ce      	b.n	80068a2 <_dtoa_r+0x94a>
 8006b04:	4b09      	ldr	r3, [pc, #36]	; (8006b2c <_dtoa_r+0xbd4>)
 8006b06:	f7ff ba95 	b.w	8006034 <_dtoa_r+0xdc>
 8006b0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	f47f aa6e 	bne.w	8005fee <_dtoa_r+0x96>
 8006b12:	4b07      	ldr	r3, [pc, #28]	; (8006b30 <_dtoa_r+0xbd8>)
 8006b14:	f7ff ba8e 	b.w	8006034 <_dtoa_r+0xdc>
 8006b18:	9b02      	ldr	r3, [sp, #8]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	dcae      	bgt.n	8006a7c <_dtoa_r+0xb24>
 8006b1e:	9b06      	ldr	r3, [sp, #24]
 8006b20:	2b02      	cmp	r3, #2
 8006b22:	f73f aea8 	bgt.w	8006876 <_dtoa_r+0x91e>
 8006b26:	e7a9      	b.n	8006a7c <_dtoa_r+0xb24>
 8006b28:	08009750 	.word	0x08009750
 8006b2c:	08009949 	.word	0x08009949
 8006b30:	080096d1 	.word	0x080096d1

08006b34 <rshift>:
 8006b34:	6903      	ldr	r3, [r0, #16]
 8006b36:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006b3a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006b3e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006b42:	f100 0414 	add.w	r4, r0, #20
 8006b46:	dd45      	ble.n	8006bd4 <rshift+0xa0>
 8006b48:	f011 011f 	ands.w	r1, r1, #31
 8006b4c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006b50:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006b54:	d10c      	bne.n	8006b70 <rshift+0x3c>
 8006b56:	f100 0710 	add.w	r7, r0, #16
 8006b5a:	4629      	mov	r1, r5
 8006b5c:	42b1      	cmp	r1, r6
 8006b5e:	d334      	bcc.n	8006bca <rshift+0x96>
 8006b60:	1a9b      	subs	r3, r3, r2
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	1eea      	subs	r2, r5, #3
 8006b66:	4296      	cmp	r6, r2
 8006b68:	bf38      	it	cc
 8006b6a:	2300      	movcc	r3, #0
 8006b6c:	4423      	add	r3, r4
 8006b6e:	e015      	b.n	8006b9c <rshift+0x68>
 8006b70:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006b74:	f1c1 0820 	rsb	r8, r1, #32
 8006b78:	40cf      	lsrs	r7, r1
 8006b7a:	f105 0e04 	add.w	lr, r5, #4
 8006b7e:	46a1      	mov	r9, r4
 8006b80:	4576      	cmp	r6, lr
 8006b82:	46f4      	mov	ip, lr
 8006b84:	d815      	bhi.n	8006bb2 <rshift+0x7e>
 8006b86:	1a9a      	subs	r2, r3, r2
 8006b88:	0092      	lsls	r2, r2, #2
 8006b8a:	3a04      	subs	r2, #4
 8006b8c:	3501      	adds	r5, #1
 8006b8e:	42ae      	cmp	r6, r5
 8006b90:	bf38      	it	cc
 8006b92:	2200      	movcc	r2, #0
 8006b94:	18a3      	adds	r3, r4, r2
 8006b96:	50a7      	str	r7, [r4, r2]
 8006b98:	b107      	cbz	r7, 8006b9c <rshift+0x68>
 8006b9a:	3304      	adds	r3, #4
 8006b9c:	1b1a      	subs	r2, r3, r4
 8006b9e:	42a3      	cmp	r3, r4
 8006ba0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006ba4:	bf08      	it	eq
 8006ba6:	2300      	moveq	r3, #0
 8006ba8:	6102      	str	r2, [r0, #16]
 8006baa:	bf08      	it	eq
 8006bac:	6143      	streq	r3, [r0, #20]
 8006bae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006bb2:	f8dc c000 	ldr.w	ip, [ip]
 8006bb6:	fa0c fc08 	lsl.w	ip, ip, r8
 8006bba:	ea4c 0707 	orr.w	r7, ip, r7
 8006bbe:	f849 7b04 	str.w	r7, [r9], #4
 8006bc2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006bc6:	40cf      	lsrs	r7, r1
 8006bc8:	e7da      	b.n	8006b80 <rshift+0x4c>
 8006bca:	f851 cb04 	ldr.w	ip, [r1], #4
 8006bce:	f847 cf04 	str.w	ip, [r7, #4]!
 8006bd2:	e7c3      	b.n	8006b5c <rshift+0x28>
 8006bd4:	4623      	mov	r3, r4
 8006bd6:	e7e1      	b.n	8006b9c <rshift+0x68>

08006bd8 <__hexdig_fun>:
 8006bd8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006bdc:	2b09      	cmp	r3, #9
 8006bde:	d802      	bhi.n	8006be6 <__hexdig_fun+0xe>
 8006be0:	3820      	subs	r0, #32
 8006be2:	b2c0      	uxtb	r0, r0
 8006be4:	4770      	bx	lr
 8006be6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006bea:	2b05      	cmp	r3, #5
 8006bec:	d801      	bhi.n	8006bf2 <__hexdig_fun+0x1a>
 8006bee:	3847      	subs	r0, #71	; 0x47
 8006bf0:	e7f7      	b.n	8006be2 <__hexdig_fun+0xa>
 8006bf2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006bf6:	2b05      	cmp	r3, #5
 8006bf8:	d801      	bhi.n	8006bfe <__hexdig_fun+0x26>
 8006bfa:	3827      	subs	r0, #39	; 0x27
 8006bfc:	e7f1      	b.n	8006be2 <__hexdig_fun+0xa>
 8006bfe:	2000      	movs	r0, #0
 8006c00:	4770      	bx	lr
	...

08006c04 <__gethex>:
 8006c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c08:	ed2d 8b02 	vpush	{d8}
 8006c0c:	b089      	sub	sp, #36	; 0x24
 8006c0e:	ee08 0a10 	vmov	s16, r0
 8006c12:	9304      	str	r3, [sp, #16]
 8006c14:	4bb4      	ldr	r3, [pc, #720]	; (8006ee8 <__gethex+0x2e4>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	9301      	str	r3, [sp, #4]
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	468b      	mov	fp, r1
 8006c1e:	4690      	mov	r8, r2
 8006c20:	f7f9 fae8 	bl	80001f4 <strlen>
 8006c24:	9b01      	ldr	r3, [sp, #4]
 8006c26:	f8db 2000 	ldr.w	r2, [fp]
 8006c2a:	4403      	add	r3, r0
 8006c2c:	4682      	mov	sl, r0
 8006c2e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006c32:	9305      	str	r3, [sp, #20]
 8006c34:	1c93      	adds	r3, r2, #2
 8006c36:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006c3a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006c3e:	32fe      	adds	r2, #254	; 0xfe
 8006c40:	18d1      	adds	r1, r2, r3
 8006c42:	461f      	mov	r7, r3
 8006c44:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006c48:	9100      	str	r1, [sp, #0]
 8006c4a:	2830      	cmp	r0, #48	; 0x30
 8006c4c:	d0f8      	beq.n	8006c40 <__gethex+0x3c>
 8006c4e:	f7ff ffc3 	bl	8006bd8 <__hexdig_fun>
 8006c52:	4604      	mov	r4, r0
 8006c54:	2800      	cmp	r0, #0
 8006c56:	d13a      	bne.n	8006cce <__gethex+0xca>
 8006c58:	9901      	ldr	r1, [sp, #4]
 8006c5a:	4652      	mov	r2, sl
 8006c5c:	4638      	mov	r0, r7
 8006c5e:	f001 fdb3 	bl	80087c8 <strncmp>
 8006c62:	4605      	mov	r5, r0
 8006c64:	2800      	cmp	r0, #0
 8006c66:	d168      	bne.n	8006d3a <__gethex+0x136>
 8006c68:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006c6c:	eb07 060a 	add.w	r6, r7, sl
 8006c70:	f7ff ffb2 	bl	8006bd8 <__hexdig_fun>
 8006c74:	2800      	cmp	r0, #0
 8006c76:	d062      	beq.n	8006d3e <__gethex+0x13a>
 8006c78:	4633      	mov	r3, r6
 8006c7a:	7818      	ldrb	r0, [r3, #0]
 8006c7c:	2830      	cmp	r0, #48	; 0x30
 8006c7e:	461f      	mov	r7, r3
 8006c80:	f103 0301 	add.w	r3, r3, #1
 8006c84:	d0f9      	beq.n	8006c7a <__gethex+0x76>
 8006c86:	f7ff ffa7 	bl	8006bd8 <__hexdig_fun>
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	fab0 f480 	clz	r4, r0
 8006c90:	0964      	lsrs	r4, r4, #5
 8006c92:	4635      	mov	r5, r6
 8006c94:	9300      	str	r3, [sp, #0]
 8006c96:	463a      	mov	r2, r7
 8006c98:	4616      	mov	r6, r2
 8006c9a:	3201      	adds	r2, #1
 8006c9c:	7830      	ldrb	r0, [r6, #0]
 8006c9e:	f7ff ff9b 	bl	8006bd8 <__hexdig_fun>
 8006ca2:	2800      	cmp	r0, #0
 8006ca4:	d1f8      	bne.n	8006c98 <__gethex+0x94>
 8006ca6:	9901      	ldr	r1, [sp, #4]
 8006ca8:	4652      	mov	r2, sl
 8006caa:	4630      	mov	r0, r6
 8006cac:	f001 fd8c 	bl	80087c8 <strncmp>
 8006cb0:	b980      	cbnz	r0, 8006cd4 <__gethex+0xd0>
 8006cb2:	b94d      	cbnz	r5, 8006cc8 <__gethex+0xc4>
 8006cb4:	eb06 050a 	add.w	r5, r6, sl
 8006cb8:	462a      	mov	r2, r5
 8006cba:	4616      	mov	r6, r2
 8006cbc:	3201      	adds	r2, #1
 8006cbe:	7830      	ldrb	r0, [r6, #0]
 8006cc0:	f7ff ff8a 	bl	8006bd8 <__hexdig_fun>
 8006cc4:	2800      	cmp	r0, #0
 8006cc6:	d1f8      	bne.n	8006cba <__gethex+0xb6>
 8006cc8:	1bad      	subs	r5, r5, r6
 8006cca:	00ad      	lsls	r5, r5, #2
 8006ccc:	e004      	b.n	8006cd8 <__gethex+0xd4>
 8006cce:	2400      	movs	r4, #0
 8006cd0:	4625      	mov	r5, r4
 8006cd2:	e7e0      	b.n	8006c96 <__gethex+0x92>
 8006cd4:	2d00      	cmp	r5, #0
 8006cd6:	d1f7      	bne.n	8006cc8 <__gethex+0xc4>
 8006cd8:	7833      	ldrb	r3, [r6, #0]
 8006cda:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006cde:	2b50      	cmp	r3, #80	; 0x50
 8006ce0:	d13b      	bne.n	8006d5a <__gethex+0x156>
 8006ce2:	7873      	ldrb	r3, [r6, #1]
 8006ce4:	2b2b      	cmp	r3, #43	; 0x2b
 8006ce6:	d02c      	beq.n	8006d42 <__gethex+0x13e>
 8006ce8:	2b2d      	cmp	r3, #45	; 0x2d
 8006cea:	d02e      	beq.n	8006d4a <__gethex+0x146>
 8006cec:	1c71      	adds	r1, r6, #1
 8006cee:	f04f 0900 	mov.w	r9, #0
 8006cf2:	7808      	ldrb	r0, [r1, #0]
 8006cf4:	f7ff ff70 	bl	8006bd8 <__hexdig_fun>
 8006cf8:	1e43      	subs	r3, r0, #1
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	2b18      	cmp	r3, #24
 8006cfe:	d82c      	bhi.n	8006d5a <__gethex+0x156>
 8006d00:	f1a0 0210 	sub.w	r2, r0, #16
 8006d04:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006d08:	f7ff ff66 	bl	8006bd8 <__hexdig_fun>
 8006d0c:	1e43      	subs	r3, r0, #1
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	2b18      	cmp	r3, #24
 8006d12:	d91d      	bls.n	8006d50 <__gethex+0x14c>
 8006d14:	f1b9 0f00 	cmp.w	r9, #0
 8006d18:	d000      	beq.n	8006d1c <__gethex+0x118>
 8006d1a:	4252      	negs	r2, r2
 8006d1c:	4415      	add	r5, r2
 8006d1e:	f8cb 1000 	str.w	r1, [fp]
 8006d22:	b1e4      	cbz	r4, 8006d5e <__gethex+0x15a>
 8006d24:	9b00      	ldr	r3, [sp, #0]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	bf14      	ite	ne
 8006d2a:	2700      	movne	r7, #0
 8006d2c:	2706      	moveq	r7, #6
 8006d2e:	4638      	mov	r0, r7
 8006d30:	b009      	add	sp, #36	; 0x24
 8006d32:	ecbd 8b02 	vpop	{d8}
 8006d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d3a:	463e      	mov	r6, r7
 8006d3c:	4625      	mov	r5, r4
 8006d3e:	2401      	movs	r4, #1
 8006d40:	e7ca      	b.n	8006cd8 <__gethex+0xd4>
 8006d42:	f04f 0900 	mov.w	r9, #0
 8006d46:	1cb1      	adds	r1, r6, #2
 8006d48:	e7d3      	b.n	8006cf2 <__gethex+0xee>
 8006d4a:	f04f 0901 	mov.w	r9, #1
 8006d4e:	e7fa      	b.n	8006d46 <__gethex+0x142>
 8006d50:	230a      	movs	r3, #10
 8006d52:	fb03 0202 	mla	r2, r3, r2, r0
 8006d56:	3a10      	subs	r2, #16
 8006d58:	e7d4      	b.n	8006d04 <__gethex+0x100>
 8006d5a:	4631      	mov	r1, r6
 8006d5c:	e7df      	b.n	8006d1e <__gethex+0x11a>
 8006d5e:	1bf3      	subs	r3, r6, r7
 8006d60:	3b01      	subs	r3, #1
 8006d62:	4621      	mov	r1, r4
 8006d64:	2b07      	cmp	r3, #7
 8006d66:	dc0b      	bgt.n	8006d80 <__gethex+0x17c>
 8006d68:	ee18 0a10 	vmov	r0, s16
 8006d6c:	f000 fa90 	bl	8007290 <_Balloc>
 8006d70:	4604      	mov	r4, r0
 8006d72:	b940      	cbnz	r0, 8006d86 <__gethex+0x182>
 8006d74:	4b5d      	ldr	r3, [pc, #372]	; (8006eec <__gethex+0x2e8>)
 8006d76:	4602      	mov	r2, r0
 8006d78:	21de      	movs	r1, #222	; 0xde
 8006d7a:	485d      	ldr	r0, [pc, #372]	; (8006ef0 <__gethex+0x2ec>)
 8006d7c:	f001 fdf4 	bl	8008968 <__assert_func>
 8006d80:	3101      	adds	r1, #1
 8006d82:	105b      	asrs	r3, r3, #1
 8006d84:	e7ee      	b.n	8006d64 <__gethex+0x160>
 8006d86:	f100 0914 	add.w	r9, r0, #20
 8006d8a:	f04f 0b00 	mov.w	fp, #0
 8006d8e:	f1ca 0301 	rsb	r3, sl, #1
 8006d92:	f8cd 9008 	str.w	r9, [sp, #8]
 8006d96:	f8cd b000 	str.w	fp, [sp]
 8006d9a:	9306      	str	r3, [sp, #24]
 8006d9c:	42b7      	cmp	r7, r6
 8006d9e:	d340      	bcc.n	8006e22 <__gethex+0x21e>
 8006da0:	9802      	ldr	r0, [sp, #8]
 8006da2:	9b00      	ldr	r3, [sp, #0]
 8006da4:	f840 3b04 	str.w	r3, [r0], #4
 8006da8:	eba0 0009 	sub.w	r0, r0, r9
 8006dac:	1080      	asrs	r0, r0, #2
 8006dae:	0146      	lsls	r6, r0, #5
 8006db0:	6120      	str	r0, [r4, #16]
 8006db2:	4618      	mov	r0, r3
 8006db4:	f000 fb5e 	bl	8007474 <__hi0bits>
 8006db8:	1a30      	subs	r0, r6, r0
 8006dba:	f8d8 6000 	ldr.w	r6, [r8]
 8006dbe:	42b0      	cmp	r0, r6
 8006dc0:	dd63      	ble.n	8006e8a <__gethex+0x286>
 8006dc2:	1b87      	subs	r7, r0, r6
 8006dc4:	4639      	mov	r1, r7
 8006dc6:	4620      	mov	r0, r4
 8006dc8:	f000 ff02 	bl	8007bd0 <__any_on>
 8006dcc:	4682      	mov	sl, r0
 8006dce:	b1a8      	cbz	r0, 8006dfc <__gethex+0x1f8>
 8006dd0:	1e7b      	subs	r3, r7, #1
 8006dd2:	1159      	asrs	r1, r3, #5
 8006dd4:	f003 021f 	and.w	r2, r3, #31
 8006dd8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006ddc:	f04f 0a01 	mov.w	sl, #1
 8006de0:	fa0a f202 	lsl.w	r2, sl, r2
 8006de4:	420a      	tst	r2, r1
 8006de6:	d009      	beq.n	8006dfc <__gethex+0x1f8>
 8006de8:	4553      	cmp	r3, sl
 8006dea:	dd05      	ble.n	8006df8 <__gethex+0x1f4>
 8006dec:	1eb9      	subs	r1, r7, #2
 8006dee:	4620      	mov	r0, r4
 8006df0:	f000 feee 	bl	8007bd0 <__any_on>
 8006df4:	2800      	cmp	r0, #0
 8006df6:	d145      	bne.n	8006e84 <__gethex+0x280>
 8006df8:	f04f 0a02 	mov.w	sl, #2
 8006dfc:	4639      	mov	r1, r7
 8006dfe:	4620      	mov	r0, r4
 8006e00:	f7ff fe98 	bl	8006b34 <rshift>
 8006e04:	443d      	add	r5, r7
 8006e06:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006e0a:	42ab      	cmp	r3, r5
 8006e0c:	da4c      	bge.n	8006ea8 <__gethex+0x2a4>
 8006e0e:	ee18 0a10 	vmov	r0, s16
 8006e12:	4621      	mov	r1, r4
 8006e14:	f000 fa7c 	bl	8007310 <_Bfree>
 8006e18:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	6013      	str	r3, [r2, #0]
 8006e1e:	27a3      	movs	r7, #163	; 0xa3
 8006e20:	e785      	b.n	8006d2e <__gethex+0x12a>
 8006e22:	1e73      	subs	r3, r6, #1
 8006e24:	9a05      	ldr	r2, [sp, #20]
 8006e26:	9303      	str	r3, [sp, #12]
 8006e28:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d019      	beq.n	8006e64 <__gethex+0x260>
 8006e30:	f1bb 0f20 	cmp.w	fp, #32
 8006e34:	d107      	bne.n	8006e46 <__gethex+0x242>
 8006e36:	9b02      	ldr	r3, [sp, #8]
 8006e38:	9a00      	ldr	r2, [sp, #0]
 8006e3a:	f843 2b04 	str.w	r2, [r3], #4
 8006e3e:	9302      	str	r3, [sp, #8]
 8006e40:	2300      	movs	r3, #0
 8006e42:	9300      	str	r3, [sp, #0]
 8006e44:	469b      	mov	fp, r3
 8006e46:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006e4a:	f7ff fec5 	bl	8006bd8 <__hexdig_fun>
 8006e4e:	9b00      	ldr	r3, [sp, #0]
 8006e50:	f000 000f 	and.w	r0, r0, #15
 8006e54:	fa00 f00b 	lsl.w	r0, r0, fp
 8006e58:	4303      	orrs	r3, r0
 8006e5a:	9300      	str	r3, [sp, #0]
 8006e5c:	f10b 0b04 	add.w	fp, fp, #4
 8006e60:	9b03      	ldr	r3, [sp, #12]
 8006e62:	e00d      	b.n	8006e80 <__gethex+0x27c>
 8006e64:	9b03      	ldr	r3, [sp, #12]
 8006e66:	9a06      	ldr	r2, [sp, #24]
 8006e68:	4413      	add	r3, r2
 8006e6a:	42bb      	cmp	r3, r7
 8006e6c:	d3e0      	bcc.n	8006e30 <__gethex+0x22c>
 8006e6e:	4618      	mov	r0, r3
 8006e70:	9901      	ldr	r1, [sp, #4]
 8006e72:	9307      	str	r3, [sp, #28]
 8006e74:	4652      	mov	r2, sl
 8006e76:	f001 fca7 	bl	80087c8 <strncmp>
 8006e7a:	9b07      	ldr	r3, [sp, #28]
 8006e7c:	2800      	cmp	r0, #0
 8006e7e:	d1d7      	bne.n	8006e30 <__gethex+0x22c>
 8006e80:	461e      	mov	r6, r3
 8006e82:	e78b      	b.n	8006d9c <__gethex+0x198>
 8006e84:	f04f 0a03 	mov.w	sl, #3
 8006e88:	e7b8      	b.n	8006dfc <__gethex+0x1f8>
 8006e8a:	da0a      	bge.n	8006ea2 <__gethex+0x29e>
 8006e8c:	1a37      	subs	r7, r6, r0
 8006e8e:	4621      	mov	r1, r4
 8006e90:	ee18 0a10 	vmov	r0, s16
 8006e94:	463a      	mov	r2, r7
 8006e96:	f000 fc57 	bl	8007748 <__lshift>
 8006e9a:	1bed      	subs	r5, r5, r7
 8006e9c:	4604      	mov	r4, r0
 8006e9e:	f100 0914 	add.w	r9, r0, #20
 8006ea2:	f04f 0a00 	mov.w	sl, #0
 8006ea6:	e7ae      	b.n	8006e06 <__gethex+0x202>
 8006ea8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006eac:	42a8      	cmp	r0, r5
 8006eae:	dd72      	ble.n	8006f96 <__gethex+0x392>
 8006eb0:	1b45      	subs	r5, r0, r5
 8006eb2:	42ae      	cmp	r6, r5
 8006eb4:	dc36      	bgt.n	8006f24 <__gethex+0x320>
 8006eb6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006eba:	2b02      	cmp	r3, #2
 8006ebc:	d02a      	beq.n	8006f14 <__gethex+0x310>
 8006ebe:	2b03      	cmp	r3, #3
 8006ec0:	d02c      	beq.n	8006f1c <__gethex+0x318>
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d11c      	bne.n	8006f00 <__gethex+0x2fc>
 8006ec6:	42ae      	cmp	r6, r5
 8006ec8:	d11a      	bne.n	8006f00 <__gethex+0x2fc>
 8006eca:	2e01      	cmp	r6, #1
 8006ecc:	d112      	bne.n	8006ef4 <__gethex+0x2f0>
 8006ece:	9a04      	ldr	r2, [sp, #16]
 8006ed0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006ed4:	6013      	str	r3, [r2, #0]
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	6123      	str	r3, [r4, #16]
 8006eda:	f8c9 3000 	str.w	r3, [r9]
 8006ede:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006ee0:	2762      	movs	r7, #98	; 0x62
 8006ee2:	601c      	str	r4, [r3, #0]
 8006ee4:	e723      	b.n	8006d2e <__gethex+0x12a>
 8006ee6:	bf00      	nop
 8006ee8:	080097c8 	.word	0x080097c8
 8006eec:	08009750 	.word	0x08009750
 8006ef0:	08009761 	.word	0x08009761
 8006ef4:	1e71      	subs	r1, r6, #1
 8006ef6:	4620      	mov	r0, r4
 8006ef8:	f000 fe6a 	bl	8007bd0 <__any_on>
 8006efc:	2800      	cmp	r0, #0
 8006efe:	d1e6      	bne.n	8006ece <__gethex+0x2ca>
 8006f00:	ee18 0a10 	vmov	r0, s16
 8006f04:	4621      	mov	r1, r4
 8006f06:	f000 fa03 	bl	8007310 <_Bfree>
 8006f0a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	6013      	str	r3, [r2, #0]
 8006f10:	2750      	movs	r7, #80	; 0x50
 8006f12:	e70c      	b.n	8006d2e <__gethex+0x12a>
 8006f14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d1f2      	bne.n	8006f00 <__gethex+0x2fc>
 8006f1a:	e7d8      	b.n	8006ece <__gethex+0x2ca>
 8006f1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d1d5      	bne.n	8006ece <__gethex+0x2ca>
 8006f22:	e7ed      	b.n	8006f00 <__gethex+0x2fc>
 8006f24:	1e6f      	subs	r7, r5, #1
 8006f26:	f1ba 0f00 	cmp.w	sl, #0
 8006f2a:	d131      	bne.n	8006f90 <__gethex+0x38c>
 8006f2c:	b127      	cbz	r7, 8006f38 <__gethex+0x334>
 8006f2e:	4639      	mov	r1, r7
 8006f30:	4620      	mov	r0, r4
 8006f32:	f000 fe4d 	bl	8007bd0 <__any_on>
 8006f36:	4682      	mov	sl, r0
 8006f38:	117b      	asrs	r3, r7, #5
 8006f3a:	2101      	movs	r1, #1
 8006f3c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006f40:	f007 071f 	and.w	r7, r7, #31
 8006f44:	fa01 f707 	lsl.w	r7, r1, r7
 8006f48:	421f      	tst	r7, r3
 8006f4a:	4629      	mov	r1, r5
 8006f4c:	4620      	mov	r0, r4
 8006f4e:	bf18      	it	ne
 8006f50:	f04a 0a02 	orrne.w	sl, sl, #2
 8006f54:	1b76      	subs	r6, r6, r5
 8006f56:	f7ff fded 	bl	8006b34 <rshift>
 8006f5a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006f5e:	2702      	movs	r7, #2
 8006f60:	f1ba 0f00 	cmp.w	sl, #0
 8006f64:	d048      	beq.n	8006ff8 <__gethex+0x3f4>
 8006f66:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006f6a:	2b02      	cmp	r3, #2
 8006f6c:	d015      	beq.n	8006f9a <__gethex+0x396>
 8006f6e:	2b03      	cmp	r3, #3
 8006f70:	d017      	beq.n	8006fa2 <__gethex+0x39e>
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d109      	bne.n	8006f8a <__gethex+0x386>
 8006f76:	f01a 0f02 	tst.w	sl, #2
 8006f7a:	d006      	beq.n	8006f8a <__gethex+0x386>
 8006f7c:	f8d9 0000 	ldr.w	r0, [r9]
 8006f80:	ea4a 0a00 	orr.w	sl, sl, r0
 8006f84:	f01a 0f01 	tst.w	sl, #1
 8006f88:	d10e      	bne.n	8006fa8 <__gethex+0x3a4>
 8006f8a:	f047 0710 	orr.w	r7, r7, #16
 8006f8e:	e033      	b.n	8006ff8 <__gethex+0x3f4>
 8006f90:	f04f 0a01 	mov.w	sl, #1
 8006f94:	e7d0      	b.n	8006f38 <__gethex+0x334>
 8006f96:	2701      	movs	r7, #1
 8006f98:	e7e2      	b.n	8006f60 <__gethex+0x35c>
 8006f9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f9c:	f1c3 0301 	rsb	r3, r3, #1
 8006fa0:	9315      	str	r3, [sp, #84]	; 0x54
 8006fa2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d0f0      	beq.n	8006f8a <__gethex+0x386>
 8006fa8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006fac:	f104 0314 	add.w	r3, r4, #20
 8006fb0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006fb4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006fb8:	f04f 0c00 	mov.w	ip, #0
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fc2:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8006fc6:	d01c      	beq.n	8007002 <__gethex+0x3fe>
 8006fc8:	3201      	adds	r2, #1
 8006fca:	6002      	str	r2, [r0, #0]
 8006fcc:	2f02      	cmp	r7, #2
 8006fce:	f104 0314 	add.w	r3, r4, #20
 8006fd2:	d13f      	bne.n	8007054 <__gethex+0x450>
 8006fd4:	f8d8 2000 	ldr.w	r2, [r8]
 8006fd8:	3a01      	subs	r2, #1
 8006fda:	42b2      	cmp	r2, r6
 8006fdc:	d10a      	bne.n	8006ff4 <__gethex+0x3f0>
 8006fde:	1171      	asrs	r1, r6, #5
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006fe6:	f006 061f 	and.w	r6, r6, #31
 8006fea:	fa02 f606 	lsl.w	r6, r2, r6
 8006fee:	421e      	tst	r6, r3
 8006ff0:	bf18      	it	ne
 8006ff2:	4617      	movne	r7, r2
 8006ff4:	f047 0720 	orr.w	r7, r7, #32
 8006ff8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006ffa:	601c      	str	r4, [r3, #0]
 8006ffc:	9b04      	ldr	r3, [sp, #16]
 8006ffe:	601d      	str	r5, [r3, #0]
 8007000:	e695      	b.n	8006d2e <__gethex+0x12a>
 8007002:	4299      	cmp	r1, r3
 8007004:	f843 cc04 	str.w	ip, [r3, #-4]
 8007008:	d8d8      	bhi.n	8006fbc <__gethex+0x3b8>
 800700a:	68a3      	ldr	r3, [r4, #8]
 800700c:	459b      	cmp	fp, r3
 800700e:	db19      	blt.n	8007044 <__gethex+0x440>
 8007010:	6861      	ldr	r1, [r4, #4]
 8007012:	ee18 0a10 	vmov	r0, s16
 8007016:	3101      	adds	r1, #1
 8007018:	f000 f93a 	bl	8007290 <_Balloc>
 800701c:	4681      	mov	r9, r0
 800701e:	b918      	cbnz	r0, 8007028 <__gethex+0x424>
 8007020:	4b1a      	ldr	r3, [pc, #104]	; (800708c <__gethex+0x488>)
 8007022:	4602      	mov	r2, r0
 8007024:	2184      	movs	r1, #132	; 0x84
 8007026:	e6a8      	b.n	8006d7a <__gethex+0x176>
 8007028:	6922      	ldr	r2, [r4, #16]
 800702a:	3202      	adds	r2, #2
 800702c:	f104 010c 	add.w	r1, r4, #12
 8007030:	0092      	lsls	r2, r2, #2
 8007032:	300c      	adds	r0, #12
 8007034:	f000 f91e 	bl	8007274 <memcpy>
 8007038:	4621      	mov	r1, r4
 800703a:	ee18 0a10 	vmov	r0, s16
 800703e:	f000 f967 	bl	8007310 <_Bfree>
 8007042:	464c      	mov	r4, r9
 8007044:	6923      	ldr	r3, [r4, #16]
 8007046:	1c5a      	adds	r2, r3, #1
 8007048:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800704c:	6122      	str	r2, [r4, #16]
 800704e:	2201      	movs	r2, #1
 8007050:	615a      	str	r2, [r3, #20]
 8007052:	e7bb      	b.n	8006fcc <__gethex+0x3c8>
 8007054:	6922      	ldr	r2, [r4, #16]
 8007056:	455a      	cmp	r2, fp
 8007058:	dd0b      	ble.n	8007072 <__gethex+0x46e>
 800705a:	2101      	movs	r1, #1
 800705c:	4620      	mov	r0, r4
 800705e:	f7ff fd69 	bl	8006b34 <rshift>
 8007062:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007066:	3501      	adds	r5, #1
 8007068:	42ab      	cmp	r3, r5
 800706a:	f6ff aed0 	blt.w	8006e0e <__gethex+0x20a>
 800706e:	2701      	movs	r7, #1
 8007070:	e7c0      	b.n	8006ff4 <__gethex+0x3f0>
 8007072:	f016 061f 	ands.w	r6, r6, #31
 8007076:	d0fa      	beq.n	800706e <__gethex+0x46a>
 8007078:	4453      	add	r3, sl
 800707a:	f1c6 0620 	rsb	r6, r6, #32
 800707e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007082:	f000 f9f7 	bl	8007474 <__hi0bits>
 8007086:	42b0      	cmp	r0, r6
 8007088:	dbe7      	blt.n	800705a <__gethex+0x456>
 800708a:	e7f0      	b.n	800706e <__gethex+0x46a>
 800708c:	08009750 	.word	0x08009750

08007090 <L_shift>:
 8007090:	f1c2 0208 	rsb	r2, r2, #8
 8007094:	0092      	lsls	r2, r2, #2
 8007096:	b570      	push	{r4, r5, r6, lr}
 8007098:	f1c2 0620 	rsb	r6, r2, #32
 800709c:	6843      	ldr	r3, [r0, #4]
 800709e:	6804      	ldr	r4, [r0, #0]
 80070a0:	fa03 f506 	lsl.w	r5, r3, r6
 80070a4:	432c      	orrs	r4, r5
 80070a6:	40d3      	lsrs	r3, r2
 80070a8:	6004      	str	r4, [r0, #0]
 80070aa:	f840 3f04 	str.w	r3, [r0, #4]!
 80070ae:	4288      	cmp	r0, r1
 80070b0:	d3f4      	bcc.n	800709c <L_shift+0xc>
 80070b2:	bd70      	pop	{r4, r5, r6, pc}

080070b4 <__match>:
 80070b4:	b530      	push	{r4, r5, lr}
 80070b6:	6803      	ldr	r3, [r0, #0]
 80070b8:	3301      	adds	r3, #1
 80070ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070be:	b914      	cbnz	r4, 80070c6 <__match+0x12>
 80070c0:	6003      	str	r3, [r0, #0]
 80070c2:	2001      	movs	r0, #1
 80070c4:	bd30      	pop	{r4, r5, pc}
 80070c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070ca:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80070ce:	2d19      	cmp	r5, #25
 80070d0:	bf98      	it	ls
 80070d2:	3220      	addls	r2, #32
 80070d4:	42a2      	cmp	r2, r4
 80070d6:	d0f0      	beq.n	80070ba <__match+0x6>
 80070d8:	2000      	movs	r0, #0
 80070da:	e7f3      	b.n	80070c4 <__match+0x10>

080070dc <__hexnan>:
 80070dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070e0:	680b      	ldr	r3, [r1, #0]
 80070e2:	115e      	asrs	r6, r3, #5
 80070e4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80070e8:	f013 031f 	ands.w	r3, r3, #31
 80070ec:	b087      	sub	sp, #28
 80070ee:	bf18      	it	ne
 80070f0:	3604      	addne	r6, #4
 80070f2:	2500      	movs	r5, #0
 80070f4:	1f37      	subs	r7, r6, #4
 80070f6:	4690      	mov	r8, r2
 80070f8:	6802      	ldr	r2, [r0, #0]
 80070fa:	9301      	str	r3, [sp, #4]
 80070fc:	4682      	mov	sl, r0
 80070fe:	f846 5c04 	str.w	r5, [r6, #-4]
 8007102:	46b9      	mov	r9, r7
 8007104:	463c      	mov	r4, r7
 8007106:	9502      	str	r5, [sp, #8]
 8007108:	46ab      	mov	fp, r5
 800710a:	7851      	ldrb	r1, [r2, #1]
 800710c:	1c53      	adds	r3, r2, #1
 800710e:	9303      	str	r3, [sp, #12]
 8007110:	b341      	cbz	r1, 8007164 <__hexnan+0x88>
 8007112:	4608      	mov	r0, r1
 8007114:	9205      	str	r2, [sp, #20]
 8007116:	9104      	str	r1, [sp, #16]
 8007118:	f7ff fd5e 	bl	8006bd8 <__hexdig_fun>
 800711c:	2800      	cmp	r0, #0
 800711e:	d14f      	bne.n	80071c0 <__hexnan+0xe4>
 8007120:	9904      	ldr	r1, [sp, #16]
 8007122:	9a05      	ldr	r2, [sp, #20]
 8007124:	2920      	cmp	r1, #32
 8007126:	d818      	bhi.n	800715a <__hexnan+0x7e>
 8007128:	9b02      	ldr	r3, [sp, #8]
 800712a:	459b      	cmp	fp, r3
 800712c:	dd13      	ble.n	8007156 <__hexnan+0x7a>
 800712e:	454c      	cmp	r4, r9
 8007130:	d206      	bcs.n	8007140 <__hexnan+0x64>
 8007132:	2d07      	cmp	r5, #7
 8007134:	dc04      	bgt.n	8007140 <__hexnan+0x64>
 8007136:	462a      	mov	r2, r5
 8007138:	4649      	mov	r1, r9
 800713a:	4620      	mov	r0, r4
 800713c:	f7ff ffa8 	bl	8007090 <L_shift>
 8007140:	4544      	cmp	r4, r8
 8007142:	d950      	bls.n	80071e6 <__hexnan+0x10a>
 8007144:	2300      	movs	r3, #0
 8007146:	f1a4 0904 	sub.w	r9, r4, #4
 800714a:	f844 3c04 	str.w	r3, [r4, #-4]
 800714e:	f8cd b008 	str.w	fp, [sp, #8]
 8007152:	464c      	mov	r4, r9
 8007154:	461d      	mov	r5, r3
 8007156:	9a03      	ldr	r2, [sp, #12]
 8007158:	e7d7      	b.n	800710a <__hexnan+0x2e>
 800715a:	2929      	cmp	r1, #41	; 0x29
 800715c:	d156      	bne.n	800720c <__hexnan+0x130>
 800715e:	3202      	adds	r2, #2
 8007160:	f8ca 2000 	str.w	r2, [sl]
 8007164:	f1bb 0f00 	cmp.w	fp, #0
 8007168:	d050      	beq.n	800720c <__hexnan+0x130>
 800716a:	454c      	cmp	r4, r9
 800716c:	d206      	bcs.n	800717c <__hexnan+0xa0>
 800716e:	2d07      	cmp	r5, #7
 8007170:	dc04      	bgt.n	800717c <__hexnan+0xa0>
 8007172:	462a      	mov	r2, r5
 8007174:	4649      	mov	r1, r9
 8007176:	4620      	mov	r0, r4
 8007178:	f7ff ff8a 	bl	8007090 <L_shift>
 800717c:	4544      	cmp	r4, r8
 800717e:	d934      	bls.n	80071ea <__hexnan+0x10e>
 8007180:	f1a8 0204 	sub.w	r2, r8, #4
 8007184:	4623      	mov	r3, r4
 8007186:	f853 1b04 	ldr.w	r1, [r3], #4
 800718a:	f842 1f04 	str.w	r1, [r2, #4]!
 800718e:	429f      	cmp	r7, r3
 8007190:	d2f9      	bcs.n	8007186 <__hexnan+0xaa>
 8007192:	1b3b      	subs	r3, r7, r4
 8007194:	f023 0303 	bic.w	r3, r3, #3
 8007198:	3304      	adds	r3, #4
 800719a:	3401      	adds	r4, #1
 800719c:	3e03      	subs	r6, #3
 800719e:	42b4      	cmp	r4, r6
 80071a0:	bf88      	it	hi
 80071a2:	2304      	movhi	r3, #4
 80071a4:	4443      	add	r3, r8
 80071a6:	2200      	movs	r2, #0
 80071a8:	f843 2b04 	str.w	r2, [r3], #4
 80071ac:	429f      	cmp	r7, r3
 80071ae:	d2fb      	bcs.n	80071a8 <__hexnan+0xcc>
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	b91b      	cbnz	r3, 80071bc <__hexnan+0xe0>
 80071b4:	4547      	cmp	r7, r8
 80071b6:	d127      	bne.n	8007208 <__hexnan+0x12c>
 80071b8:	2301      	movs	r3, #1
 80071ba:	603b      	str	r3, [r7, #0]
 80071bc:	2005      	movs	r0, #5
 80071be:	e026      	b.n	800720e <__hexnan+0x132>
 80071c0:	3501      	adds	r5, #1
 80071c2:	2d08      	cmp	r5, #8
 80071c4:	f10b 0b01 	add.w	fp, fp, #1
 80071c8:	dd06      	ble.n	80071d8 <__hexnan+0xfc>
 80071ca:	4544      	cmp	r4, r8
 80071cc:	d9c3      	bls.n	8007156 <__hexnan+0x7a>
 80071ce:	2300      	movs	r3, #0
 80071d0:	f844 3c04 	str.w	r3, [r4, #-4]
 80071d4:	2501      	movs	r5, #1
 80071d6:	3c04      	subs	r4, #4
 80071d8:	6822      	ldr	r2, [r4, #0]
 80071da:	f000 000f 	and.w	r0, r0, #15
 80071de:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80071e2:	6022      	str	r2, [r4, #0]
 80071e4:	e7b7      	b.n	8007156 <__hexnan+0x7a>
 80071e6:	2508      	movs	r5, #8
 80071e8:	e7b5      	b.n	8007156 <__hexnan+0x7a>
 80071ea:	9b01      	ldr	r3, [sp, #4]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d0df      	beq.n	80071b0 <__hexnan+0xd4>
 80071f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80071f4:	f1c3 0320 	rsb	r3, r3, #32
 80071f8:	fa22 f303 	lsr.w	r3, r2, r3
 80071fc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007200:	401a      	ands	r2, r3
 8007202:	f846 2c04 	str.w	r2, [r6, #-4]
 8007206:	e7d3      	b.n	80071b0 <__hexnan+0xd4>
 8007208:	3f04      	subs	r7, #4
 800720a:	e7d1      	b.n	80071b0 <__hexnan+0xd4>
 800720c:	2004      	movs	r0, #4
 800720e:	b007      	add	sp, #28
 8007210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007214 <_localeconv_r>:
 8007214:	4800      	ldr	r0, [pc, #0]	; (8007218 <_localeconv_r+0x4>)
 8007216:	4770      	bx	lr
 8007218:	2000016c 	.word	0x2000016c

0800721c <_lseek_r>:
 800721c:	b538      	push	{r3, r4, r5, lr}
 800721e:	4d07      	ldr	r5, [pc, #28]	; (800723c <_lseek_r+0x20>)
 8007220:	4604      	mov	r4, r0
 8007222:	4608      	mov	r0, r1
 8007224:	4611      	mov	r1, r2
 8007226:	2200      	movs	r2, #0
 8007228:	602a      	str	r2, [r5, #0]
 800722a:	461a      	mov	r2, r3
 800722c:	f7fa fd58 	bl	8001ce0 <_lseek>
 8007230:	1c43      	adds	r3, r0, #1
 8007232:	d102      	bne.n	800723a <_lseek_r+0x1e>
 8007234:	682b      	ldr	r3, [r5, #0]
 8007236:	b103      	cbz	r3, 800723a <_lseek_r+0x1e>
 8007238:	6023      	str	r3, [r4, #0]
 800723a:	bd38      	pop	{r3, r4, r5, pc}
 800723c:	20000630 	.word	0x20000630

08007240 <malloc>:
 8007240:	4b02      	ldr	r3, [pc, #8]	; (800724c <malloc+0xc>)
 8007242:	4601      	mov	r1, r0
 8007244:	6818      	ldr	r0, [r3, #0]
 8007246:	f000 bd67 	b.w	8007d18 <_malloc_r>
 800724a:	bf00      	nop
 800724c:	20000014 	.word	0x20000014

08007250 <__ascii_mbtowc>:
 8007250:	b082      	sub	sp, #8
 8007252:	b901      	cbnz	r1, 8007256 <__ascii_mbtowc+0x6>
 8007254:	a901      	add	r1, sp, #4
 8007256:	b142      	cbz	r2, 800726a <__ascii_mbtowc+0x1a>
 8007258:	b14b      	cbz	r3, 800726e <__ascii_mbtowc+0x1e>
 800725a:	7813      	ldrb	r3, [r2, #0]
 800725c:	600b      	str	r3, [r1, #0]
 800725e:	7812      	ldrb	r2, [r2, #0]
 8007260:	1e10      	subs	r0, r2, #0
 8007262:	bf18      	it	ne
 8007264:	2001      	movne	r0, #1
 8007266:	b002      	add	sp, #8
 8007268:	4770      	bx	lr
 800726a:	4610      	mov	r0, r2
 800726c:	e7fb      	b.n	8007266 <__ascii_mbtowc+0x16>
 800726e:	f06f 0001 	mvn.w	r0, #1
 8007272:	e7f8      	b.n	8007266 <__ascii_mbtowc+0x16>

08007274 <memcpy>:
 8007274:	440a      	add	r2, r1
 8007276:	4291      	cmp	r1, r2
 8007278:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800727c:	d100      	bne.n	8007280 <memcpy+0xc>
 800727e:	4770      	bx	lr
 8007280:	b510      	push	{r4, lr}
 8007282:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007286:	f803 4f01 	strb.w	r4, [r3, #1]!
 800728a:	4291      	cmp	r1, r2
 800728c:	d1f9      	bne.n	8007282 <memcpy+0xe>
 800728e:	bd10      	pop	{r4, pc}

08007290 <_Balloc>:
 8007290:	b570      	push	{r4, r5, r6, lr}
 8007292:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007294:	4604      	mov	r4, r0
 8007296:	460d      	mov	r5, r1
 8007298:	b976      	cbnz	r6, 80072b8 <_Balloc+0x28>
 800729a:	2010      	movs	r0, #16
 800729c:	f7ff ffd0 	bl	8007240 <malloc>
 80072a0:	4602      	mov	r2, r0
 80072a2:	6260      	str	r0, [r4, #36]	; 0x24
 80072a4:	b920      	cbnz	r0, 80072b0 <_Balloc+0x20>
 80072a6:	4b18      	ldr	r3, [pc, #96]	; (8007308 <_Balloc+0x78>)
 80072a8:	4818      	ldr	r0, [pc, #96]	; (800730c <_Balloc+0x7c>)
 80072aa:	2166      	movs	r1, #102	; 0x66
 80072ac:	f001 fb5c 	bl	8008968 <__assert_func>
 80072b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80072b4:	6006      	str	r6, [r0, #0]
 80072b6:	60c6      	str	r6, [r0, #12]
 80072b8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80072ba:	68f3      	ldr	r3, [r6, #12]
 80072bc:	b183      	cbz	r3, 80072e0 <_Balloc+0x50>
 80072be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072c0:	68db      	ldr	r3, [r3, #12]
 80072c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80072c6:	b9b8      	cbnz	r0, 80072f8 <_Balloc+0x68>
 80072c8:	2101      	movs	r1, #1
 80072ca:	fa01 f605 	lsl.w	r6, r1, r5
 80072ce:	1d72      	adds	r2, r6, #5
 80072d0:	0092      	lsls	r2, r2, #2
 80072d2:	4620      	mov	r0, r4
 80072d4:	f000 fc9d 	bl	8007c12 <_calloc_r>
 80072d8:	b160      	cbz	r0, 80072f4 <_Balloc+0x64>
 80072da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80072de:	e00e      	b.n	80072fe <_Balloc+0x6e>
 80072e0:	2221      	movs	r2, #33	; 0x21
 80072e2:	2104      	movs	r1, #4
 80072e4:	4620      	mov	r0, r4
 80072e6:	f000 fc94 	bl	8007c12 <_calloc_r>
 80072ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072ec:	60f0      	str	r0, [r6, #12]
 80072ee:	68db      	ldr	r3, [r3, #12]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d1e4      	bne.n	80072be <_Balloc+0x2e>
 80072f4:	2000      	movs	r0, #0
 80072f6:	bd70      	pop	{r4, r5, r6, pc}
 80072f8:	6802      	ldr	r2, [r0, #0]
 80072fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80072fe:	2300      	movs	r3, #0
 8007300:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007304:	e7f7      	b.n	80072f6 <_Balloc+0x66>
 8007306:	bf00      	nop
 8007308:	080096de 	.word	0x080096de
 800730c:	080097dc 	.word	0x080097dc

08007310 <_Bfree>:
 8007310:	b570      	push	{r4, r5, r6, lr}
 8007312:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007314:	4605      	mov	r5, r0
 8007316:	460c      	mov	r4, r1
 8007318:	b976      	cbnz	r6, 8007338 <_Bfree+0x28>
 800731a:	2010      	movs	r0, #16
 800731c:	f7ff ff90 	bl	8007240 <malloc>
 8007320:	4602      	mov	r2, r0
 8007322:	6268      	str	r0, [r5, #36]	; 0x24
 8007324:	b920      	cbnz	r0, 8007330 <_Bfree+0x20>
 8007326:	4b09      	ldr	r3, [pc, #36]	; (800734c <_Bfree+0x3c>)
 8007328:	4809      	ldr	r0, [pc, #36]	; (8007350 <_Bfree+0x40>)
 800732a:	218a      	movs	r1, #138	; 0x8a
 800732c:	f001 fb1c 	bl	8008968 <__assert_func>
 8007330:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007334:	6006      	str	r6, [r0, #0]
 8007336:	60c6      	str	r6, [r0, #12]
 8007338:	b13c      	cbz	r4, 800734a <_Bfree+0x3a>
 800733a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800733c:	6862      	ldr	r2, [r4, #4]
 800733e:	68db      	ldr	r3, [r3, #12]
 8007340:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007344:	6021      	str	r1, [r4, #0]
 8007346:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800734a:	bd70      	pop	{r4, r5, r6, pc}
 800734c:	080096de 	.word	0x080096de
 8007350:	080097dc 	.word	0x080097dc

08007354 <__multadd>:
 8007354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007358:	690d      	ldr	r5, [r1, #16]
 800735a:	4607      	mov	r7, r0
 800735c:	460c      	mov	r4, r1
 800735e:	461e      	mov	r6, r3
 8007360:	f101 0c14 	add.w	ip, r1, #20
 8007364:	2000      	movs	r0, #0
 8007366:	f8dc 3000 	ldr.w	r3, [ip]
 800736a:	b299      	uxth	r1, r3
 800736c:	fb02 6101 	mla	r1, r2, r1, r6
 8007370:	0c1e      	lsrs	r6, r3, #16
 8007372:	0c0b      	lsrs	r3, r1, #16
 8007374:	fb02 3306 	mla	r3, r2, r6, r3
 8007378:	b289      	uxth	r1, r1
 800737a:	3001      	adds	r0, #1
 800737c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007380:	4285      	cmp	r5, r0
 8007382:	f84c 1b04 	str.w	r1, [ip], #4
 8007386:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800738a:	dcec      	bgt.n	8007366 <__multadd+0x12>
 800738c:	b30e      	cbz	r6, 80073d2 <__multadd+0x7e>
 800738e:	68a3      	ldr	r3, [r4, #8]
 8007390:	42ab      	cmp	r3, r5
 8007392:	dc19      	bgt.n	80073c8 <__multadd+0x74>
 8007394:	6861      	ldr	r1, [r4, #4]
 8007396:	4638      	mov	r0, r7
 8007398:	3101      	adds	r1, #1
 800739a:	f7ff ff79 	bl	8007290 <_Balloc>
 800739e:	4680      	mov	r8, r0
 80073a0:	b928      	cbnz	r0, 80073ae <__multadd+0x5a>
 80073a2:	4602      	mov	r2, r0
 80073a4:	4b0c      	ldr	r3, [pc, #48]	; (80073d8 <__multadd+0x84>)
 80073a6:	480d      	ldr	r0, [pc, #52]	; (80073dc <__multadd+0x88>)
 80073a8:	21b5      	movs	r1, #181	; 0xb5
 80073aa:	f001 fadd 	bl	8008968 <__assert_func>
 80073ae:	6922      	ldr	r2, [r4, #16]
 80073b0:	3202      	adds	r2, #2
 80073b2:	f104 010c 	add.w	r1, r4, #12
 80073b6:	0092      	lsls	r2, r2, #2
 80073b8:	300c      	adds	r0, #12
 80073ba:	f7ff ff5b 	bl	8007274 <memcpy>
 80073be:	4621      	mov	r1, r4
 80073c0:	4638      	mov	r0, r7
 80073c2:	f7ff ffa5 	bl	8007310 <_Bfree>
 80073c6:	4644      	mov	r4, r8
 80073c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80073cc:	3501      	adds	r5, #1
 80073ce:	615e      	str	r6, [r3, #20]
 80073d0:	6125      	str	r5, [r4, #16]
 80073d2:	4620      	mov	r0, r4
 80073d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073d8:	08009750 	.word	0x08009750
 80073dc:	080097dc 	.word	0x080097dc

080073e0 <__s2b>:
 80073e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073e4:	460c      	mov	r4, r1
 80073e6:	4615      	mov	r5, r2
 80073e8:	461f      	mov	r7, r3
 80073ea:	2209      	movs	r2, #9
 80073ec:	3308      	adds	r3, #8
 80073ee:	4606      	mov	r6, r0
 80073f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80073f4:	2100      	movs	r1, #0
 80073f6:	2201      	movs	r2, #1
 80073f8:	429a      	cmp	r2, r3
 80073fa:	db09      	blt.n	8007410 <__s2b+0x30>
 80073fc:	4630      	mov	r0, r6
 80073fe:	f7ff ff47 	bl	8007290 <_Balloc>
 8007402:	b940      	cbnz	r0, 8007416 <__s2b+0x36>
 8007404:	4602      	mov	r2, r0
 8007406:	4b19      	ldr	r3, [pc, #100]	; (800746c <__s2b+0x8c>)
 8007408:	4819      	ldr	r0, [pc, #100]	; (8007470 <__s2b+0x90>)
 800740a:	21ce      	movs	r1, #206	; 0xce
 800740c:	f001 faac 	bl	8008968 <__assert_func>
 8007410:	0052      	lsls	r2, r2, #1
 8007412:	3101      	adds	r1, #1
 8007414:	e7f0      	b.n	80073f8 <__s2b+0x18>
 8007416:	9b08      	ldr	r3, [sp, #32]
 8007418:	6143      	str	r3, [r0, #20]
 800741a:	2d09      	cmp	r5, #9
 800741c:	f04f 0301 	mov.w	r3, #1
 8007420:	6103      	str	r3, [r0, #16]
 8007422:	dd16      	ble.n	8007452 <__s2b+0x72>
 8007424:	f104 0909 	add.w	r9, r4, #9
 8007428:	46c8      	mov	r8, r9
 800742a:	442c      	add	r4, r5
 800742c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007430:	4601      	mov	r1, r0
 8007432:	3b30      	subs	r3, #48	; 0x30
 8007434:	220a      	movs	r2, #10
 8007436:	4630      	mov	r0, r6
 8007438:	f7ff ff8c 	bl	8007354 <__multadd>
 800743c:	45a0      	cmp	r8, r4
 800743e:	d1f5      	bne.n	800742c <__s2b+0x4c>
 8007440:	f1a5 0408 	sub.w	r4, r5, #8
 8007444:	444c      	add	r4, r9
 8007446:	1b2d      	subs	r5, r5, r4
 8007448:	1963      	adds	r3, r4, r5
 800744a:	42bb      	cmp	r3, r7
 800744c:	db04      	blt.n	8007458 <__s2b+0x78>
 800744e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007452:	340a      	adds	r4, #10
 8007454:	2509      	movs	r5, #9
 8007456:	e7f6      	b.n	8007446 <__s2b+0x66>
 8007458:	f814 3b01 	ldrb.w	r3, [r4], #1
 800745c:	4601      	mov	r1, r0
 800745e:	3b30      	subs	r3, #48	; 0x30
 8007460:	220a      	movs	r2, #10
 8007462:	4630      	mov	r0, r6
 8007464:	f7ff ff76 	bl	8007354 <__multadd>
 8007468:	e7ee      	b.n	8007448 <__s2b+0x68>
 800746a:	bf00      	nop
 800746c:	08009750 	.word	0x08009750
 8007470:	080097dc 	.word	0x080097dc

08007474 <__hi0bits>:
 8007474:	0c03      	lsrs	r3, r0, #16
 8007476:	041b      	lsls	r3, r3, #16
 8007478:	b9d3      	cbnz	r3, 80074b0 <__hi0bits+0x3c>
 800747a:	0400      	lsls	r0, r0, #16
 800747c:	2310      	movs	r3, #16
 800747e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007482:	bf04      	itt	eq
 8007484:	0200      	lsleq	r0, r0, #8
 8007486:	3308      	addeq	r3, #8
 8007488:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800748c:	bf04      	itt	eq
 800748e:	0100      	lsleq	r0, r0, #4
 8007490:	3304      	addeq	r3, #4
 8007492:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007496:	bf04      	itt	eq
 8007498:	0080      	lsleq	r0, r0, #2
 800749a:	3302      	addeq	r3, #2
 800749c:	2800      	cmp	r0, #0
 800749e:	db05      	blt.n	80074ac <__hi0bits+0x38>
 80074a0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80074a4:	f103 0301 	add.w	r3, r3, #1
 80074a8:	bf08      	it	eq
 80074aa:	2320      	moveq	r3, #32
 80074ac:	4618      	mov	r0, r3
 80074ae:	4770      	bx	lr
 80074b0:	2300      	movs	r3, #0
 80074b2:	e7e4      	b.n	800747e <__hi0bits+0xa>

080074b4 <__lo0bits>:
 80074b4:	6803      	ldr	r3, [r0, #0]
 80074b6:	f013 0207 	ands.w	r2, r3, #7
 80074ba:	4601      	mov	r1, r0
 80074bc:	d00b      	beq.n	80074d6 <__lo0bits+0x22>
 80074be:	07da      	lsls	r2, r3, #31
 80074c0:	d423      	bmi.n	800750a <__lo0bits+0x56>
 80074c2:	0798      	lsls	r0, r3, #30
 80074c4:	bf49      	itett	mi
 80074c6:	085b      	lsrmi	r3, r3, #1
 80074c8:	089b      	lsrpl	r3, r3, #2
 80074ca:	2001      	movmi	r0, #1
 80074cc:	600b      	strmi	r3, [r1, #0]
 80074ce:	bf5c      	itt	pl
 80074d0:	600b      	strpl	r3, [r1, #0]
 80074d2:	2002      	movpl	r0, #2
 80074d4:	4770      	bx	lr
 80074d6:	b298      	uxth	r0, r3
 80074d8:	b9a8      	cbnz	r0, 8007506 <__lo0bits+0x52>
 80074da:	0c1b      	lsrs	r3, r3, #16
 80074dc:	2010      	movs	r0, #16
 80074de:	b2da      	uxtb	r2, r3
 80074e0:	b90a      	cbnz	r2, 80074e6 <__lo0bits+0x32>
 80074e2:	3008      	adds	r0, #8
 80074e4:	0a1b      	lsrs	r3, r3, #8
 80074e6:	071a      	lsls	r2, r3, #28
 80074e8:	bf04      	itt	eq
 80074ea:	091b      	lsreq	r3, r3, #4
 80074ec:	3004      	addeq	r0, #4
 80074ee:	079a      	lsls	r2, r3, #30
 80074f0:	bf04      	itt	eq
 80074f2:	089b      	lsreq	r3, r3, #2
 80074f4:	3002      	addeq	r0, #2
 80074f6:	07da      	lsls	r2, r3, #31
 80074f8:	d403      	bmi.n	8007502 <__lo0bits+0x4e>
 80074fa:	085b      	lsrs	r3, r3, #1
 80074fc:	f100 0001 	add.w	r0, r0, #1
 8007500:	d005      	beq.n	800750e <__lo0bits+0x5a>
 8007502:	600b      	str	r3, [r1, #0]
 8007504:	4770      	bx	lr
 8007506:	4610      	mov	r0, r2
 8007508:	e7e9      	b.n	80074de <__lo0bits+0x2a>
 800750a:	2000      	movs	r0, #0
 800750c:	4770      	bx	lr
 800750e:	2020      	movs	r0, #32
 8007510:	4770      	bx	lr
	...

08007514 <__i2b>:
 8007514:	b510      	push	{r4, lr}
 8007516:	460c      	mov	r4, r1
 8007518:	2101      	movs	r1, #1
 800751a:	f7ff feb9 	bl	8007290 <_Balloc>
 800751e:	4602      	mov	r2, r0
 8007520:	b928      	cbnz	r0, 800752e <__i2b+0x1a>
 8007522:	4b05      	ldr	r3, [pc, #20]	; (8007538 <__i2b+0x24>)
 8007524:	4805      	ldr	r0, [pc, #20]	; (800753c <__i2b+0x28>)
 8007526:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800752a:	f001 fa1d 	bl	8008968 <__assert_func>
 800752e:	2301      	movs	r3, #1
 8007530:	6144      	str	r4, [r0, #20]
 8007532:	6103      	str	r3, [r0, #16]
 8007534:	bd10      	pop	{r4, pc}
 8007536:	bf00      	nop
 8007538:	08009750 	.word	0x08009750
 800753c:	080097dc 	.word	0x080097dc

08007540 <__multiply>:
 8007540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007544:	4691      	mov	r9, r2
 8007546:	690a      	ldr	r2, [r1, #16]
 8007548:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800754c:	429a      	cmp	r2, r3
 800754e:	bfb8      	it	lt
 8007550:	460b      	movlt	r3, r1
 8007552:	460c      	mov	r4, r1
 8007554:	bfbc      	itt	lt
 8007556:	464c      	movlt	r4, r9
 8007558:	4699      	movlt	r9, r3
 800755a:	6927      	ldr	r7, [r4, #16]
 800755c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007560:	68a3      	ldr	r3, [r4, #8]
 8007562:	6861      	ldr	r1, [r4, #4]
 8007564:	eb07 060a 	add.w	r6, r7, sl
 8007568:	42b3      	cmp	r3, r6
 800756a:	b085      	sub	sp, #20
 800756c:	bfb8      	it	lt
 800756e:	3101      	addlt	r1, #1
 8007570:	f7ff fe8e 	bl	8007290 <_Balloc>
 8007574:	b930      	cbnz	r0, 8007584 <__multiply+0x44>
 8007576:	4602      	mov	r2, r0
 8007578:	4b44      	ldr	r3, [pc, #272]	; (800768c <__multiply+0x14c>)
 800757a:	4845      	ldr	r0, [pc, #276]	; (8007690 <__multiply+0x150>)
 800757c:	f240 115d 	movw	r1, #349	; 0x15d
 8007580:	f001 f9f2 	bl	8008968 <__assert_func>
 8007584:	f100 0514 	add.w	r5, r0, #20
 8007588:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800758c:	462b      	mov	r3, r5
 800758e:	2200      	movs	r2, #0
 8007590:	4543      	cmp	r3, r8
 8007592:	d321      	bcc.n	80075d8 <__multiply+0x98>
 8007594:	f104 0314 	add.w	r3, r4, #20
 8007598:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800759c:	f109 0314 	add.w	r3, r9, #20
 80075a0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80075a4:	9202      	str	r2, [sp, #8]
 80075a6:	1b3a      	subs	r2, r7, r4
 80075a8:	3a15      	subs	r2, #21
 80075aa:	f022 0203 	bic.w	r2, r2, #3
 80075ae:	3204      	adds	r2, #4
 80075b0:	f104 0115 	add.w	r1, r4, #21
 80075b4:	428f      	cmp	r7, r1
 80075b6:	bf38      	it	cc
 80075b8:	2204      	movcc	r2, #4
 80075ba:	9201      	str	r2, [sp, #4]
 80075bc:	9a02      	ldr	r2, [sp, #8]
 80075be:	9303      	str	r3, [sp, #12]
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d80c      	bhi.n	80075de <__multiply+0x9e>
 80075c4:	2e00      	cmp	r6, #0
 80075c6:	dd03      	ble.n	80075d0 <__multiply+0x90>
 80075c8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d05a      	beq.n	8007686 <__multiply+0x146>
 80075d0:	6106      	str	r6, [r0, #16]
 80075d2:	b005      	add	sp, #20
 80075d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075d8:	f843 2b04 	str.w	r2, [r3], #4
 80075dc:	e7d8      	b.n	8007590 <__multiply+0x50>
 80075de:	f8b3 a000 	ldrh.w	sl, [r3]
 80075e2:	f1ba 0f00 	cmp.w	sl, #0
 80075e6:	d024      	beq.n	8007632 <__multiply+0xf2>
 80075e8:	f104 0e14 	add.w	lr, r4, #20
 80075ec:	46a9      	mov	r9, r5
 80075ee:	f04f 0c00 	mov.w	ip, #0
 80075f2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80075f6:	f8d9 1000 	ldr.w	r1, [r9]
 80075fa:	fa1f fb82 	uxth.w	fp, r2
 80075fe:	b289      	uxth	r1, r1
 8007600:	fb0a 110b 	mla	r1, sl, fp, r1
 8007604:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007608:	f8d9 2000 	ldr.w	r2, [r9]
 800760c:	4461      	add	r1, ip
 800760e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007612:	fb0a c20b 	mla	r2, sl, fp, ip
 8007616:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800761a:	b289      	uxth	r1, r1
 800761c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007620:	4577      	cmp	r7, lr
 8007622:	f849 1b04 	str.w	r1, [r9], #4
 8007626:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800762a:	d8e2      	bhi.n	80075f2 <__multiply+0xb2>
 800762c:	9a01      	ldr	r2, [sp, #4]
 800762e:	f845 c002 	str.w	ip, [r5, r2]
 8007632:	9a03      	ldr	r2, [sp, #12]
 8007634:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007638:	3304      	adds	r3, #4
 800763a:	f1b9 0f00 	cmp.w	r9, #0
 800763e:	d020      	beq.n	8007682 <__multiply+0x142>
 8007640:	6829      	ldr	r1, [r5, #0]
 8007642:	f104 0c14 	add.w	ip, r4, #20
 8007646:	46ae      	mov	lr, r5
 8007648:	f04f 0a00 	mov.w	sl, #0
 800764c:	f8bc b000 	ldrh.w	fp, [ip]
 8007650:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007654:	fb09 220b 	mla	r2, r9, fp, r2
 8007658:	4492      	add	sl, r2
 800765a:	b289      	uxth	r1, r1
 800765c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007660:	f84e 1b04 	str.w	r1, [lr], #4
 8007664:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007668:	f8be 1000 	ldrh.w	r1, [lr]
 800766c:	0c12      	lsrs	r2, r2, #16
 800766e:	fb09 1102 	mla	r1, r9, r2, r1
 8007672:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007676:	4567      	cmp	r7, ip
 8007678:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800767c:	d8e6      	bhi.n	800764c <__multiply+0x10c>
 800767e:	9a01      	ldr	r2, [sp, #4]
 8007680:	50a9      	str	r1, [r5, r2]
 8007682:	3504      	adds	r5, #4
 8007684:	e79a      	b.n	80075bc <__multiply+0x7c>
 8007686:	3e01      	subs	r6, #1
 8007688:	e79c      	b.n	80075c4 <__multiply+0x84>
 800768a:	bf00      	nop
 800768c:	08009750 	.word	0x08009750
 8007690:	080097dc 	.word	0x080097dc

08007694 <__pow5mult>:
 8007694:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007698:	4615      	mov	r5, r2
 800769a:	f012 0203 	ands.w	r2, r2, #3
 800769e:	4606      	mov	r6, r0
 80076a0:	460f      	mov	r7, r1
 80076a2:	d007      	beq.n	80076b4 <__pow5mult+0x20>
 80076a4:	4c25      	ldr	r4, [pc, #148]	; (800773c <__pow5mult+0xa8>)
 80076a6:	3a01      	subs	r2, #1
 80076a8:	2300      	movs	r3, #0
 80076aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80076ae:	f7ff fe51 	bl	8007354 <__multadd>
 80076b2:	4607      	mov	r7, r0
 80076b4:	10ad      	asrs	r5, r5, #2
 80076b6:	d03d      	beq.n	8007734 <__pow5mult+0xa0>
 80076b8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80076ba:	b97c      	cbnz	r4, 80076dc <__pow5mult+0x48>
 80076bc:	2010      	movs	r0, #16
 80076be:	f7ff fdbf 	bl	8007240 <malloc>
 80076c2:	4602      	mov	r2, r0
 80076c4:	6270      	str	r0, [r6, #36]	; 0x24
 80076c6:	b928      	cbnz	r0, 80076d4 <__pow5mult+0x40>
 80076c8:	4b1d      	ldr	r3, [pc, #116]	; (8007740 <__pow5mult+0xac>)
 80076ca:	481e      	ldr	r0, [pc, #120]	; (8007744 <__pow5mult+0xb0>)
 80076cc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80076d0:	f001 f94a 	bl	8008968 <__assert_func>
 80076d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80076d8:	6004      	str	r4, [r0, #0]
 80076da:	60c4      	str	r4, [r0, #12]
 80076dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80076e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80076e4:	b94c      	cbnz	r4, 80076fa <__pow5mult+0x66>
 80076e6:	f240 2171 	movw	r1, #625	; 0x271
 80076ea:	4630      	mov	r0, r6
 80076ec:	f7ff ff12 	bl	8007514 <__i2b>
 80076f0:	2300      	movs	r3, #0
 80076f2:	f8c8 0008 	str.w	r0, [r8, #8]
 80076f6:	4604      	mov	r4, r0
 80076f8:	6003      	str	r3, [r0, #0]
 80076fa:	f04f 0900 	mov.w	r9, #0
 80076fe:	07eb      	lsls	r3, r5, #31
 8007700:	d50a      	bpl.n	8007718 <__pow5mult+0x84>
 8007702:	4639      	mov	r1, r7
 8007704:	4622      	mov	r2, r4
 8007706:	4630      	mov	r0, r6
 8007708:	f7ff ff1a 	bl	8007540 <__multiply>
 800770c:	4639      	mov	r1, r7
 800770e:	4680      	mov	r8, r0
 8007710:	4630      	mov	r0, r6
 8007712:	f7ff fdfd 	bl	8007310 <_Bfree>
 8007716:	4647      	mov	r7, r8
 8007718:	106d      	asrs	r5, r5, #1
 800771a:	d00b      	beq.n	8007734 <__pow5mult+0xa0>
 800771c:	6820      	ldr	r0, [r4, #0]
 800771e:	b938      	cbnz	r0, 8007730 <__pow5mult+0x9c>
 8007720:	4622      	mov	r2, r4
 8007722:	4621      	mov	r1, r4
 8007724:	4630      	mov	r0, r6
 8007726:	f7ff ff0b 	bl	8007540 <__multiply>
 800772a:	6020      	str	r0, [r4, #0]
 800772c:	f8c0 9000 	str.w	r9, [r0]
 8007730:	4604      	mov	r4, r0
 8007732:	e7e4      	b.n	80076fe <__pow5mult+0x6a>
 8007734:	4638      	mov	r0, r7
 8007736:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800773a:	bf00      	nop
 800773c:	08009928 	.word	0x08009928
 8007740:	080096de 	.word	0x080096de
 8007744:	080097dc 	.word	0x080097dc

08007748 <__lshift>:
 8007748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800774c:	460c      	mov	r4, r1
 800774e:	6849      	ldr	r1, [r1, #4]
 8007750:	6923      	ldr	r3, [r4, #16]
 8007752:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007756:	68a3      	ldr	r3, [r4, #8]
 8007758:	4607      	mov	r7, r0
 800775a:	4691      	mov	r9, r2
 800775c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007760:	f108 0601 	add.w	r6, r8, #1
 8007764:	42b3      	cmp	r3, r6
 8007766:	db0b      	blt.n	8007780 <__lshift+0x38>
 8007768:	4638      	mov	r0, r7
 800776a:	f7ff fd91 	bl	8007290 <_Balloc>
 800776e:	4605      	mov	r5, r0
 8007770:	b948      	cbnz	r0, 8007786 <__lshift+0x3e>
 8007772:	4602      	mov	r2, r0
 8007774:	4b2a      	ldr	r3, [pc, #168]	; (8007820 <__lshift+0xd8>)
 8007776:	482b      	ldr	r0, [pc, #172]	; (8007824 <__lshift+0xdc>)
 8007778:	f240 11d9 	movw	r1, #473	; 0x1d9
 800777c:	f001 f8f4 	bl	8008968 <__assert_func>
 8007780:	3101      	adds	r1, #1
 8007782:	005b      	lsls	r3, r3, #1
 8007784:	e7ee      	b.n	8007764 <__lshift+0x1c>
 8007786:	2300      	movs	r3, #0
 8007788:	f100 0114 	add.w	r1, r0, #20
 800778c:	f100 0210 	add.w	r2, r0, #16
 8007790:	4618      	mov	r0, r3
 8007792:	4553      	cmp	r3, sl
 8007794:	db37      	blt.n	8007806 <__lshift+0xbe>
 8007796:	6920      	ldr	r0, [r4, #16]
 8007798:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800779c:	f104 0314 	add.w	r3, r4, #20
 80077a0:	f019 091f 	ands.w	r9, r9, #31
 80077a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80077a8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80077ac:	d02f      	beq.n	800780e <__lshift+0xc6>
 80077ae:	f1c9 0e20 	rsb	lr, r9, #32
 80077b2:	468a      	mov	sl, r1
 80077b4:	f04f 0c00 	mov.w	ip, #0
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	fa02 f209 	lsl.w	r2, r2, r9
 80077be:	ea42 020c 	orr.w	r2, r2, ip
 80077c2:	f84a 2b04 	str.w	r2, [sl], #4
 80077c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80077ca:	4298      	cmp	r0, r3
 80077cc:	fa22 fc0e 	lsr.w	ip, r2, lr
 80077d0:	d8f2      	bhi.n	80077b8 <__lshift+0x70>
 80077d2:	1b03      	subs	r3, r0, r4
 80077d4:	3b15      	subs	r3, #21
 80077d6:	f023 0303 	bic.w	r3, r3, #3
 80077da:	3304      	adds	r3, #4
 80077dc:	f104 0215 	add.w	r2, r4, #21
 80077e0:	4290      	cmp	r0, r2
 80077e2:	bf38      	it	cc
 80077e4:	2304      	movcc	r3, #4
 80077e6:	f841 c003 	str.w	ip, [r1, r3]
 80077ea:	f1bc 0f00 	cmp.w	ip, #0
 80077ee:	d001      	beq.n	80077f4 <__lshift+0xac>
 80077f0:	f108 0602 	add.w	r6, r8, #2
 80077f4:	3e01      	subs	r6, #1
 80077f6:	4638      	mov	r0, r7
 80077f8:	612e      	str	r6, [r5, #16]
 80077fa:	4621      	mov	r1, r4
 80077fc:	f7ff fd88 	bl	8007310 <_Bfree>
 8007800:	4628      	mov	r0, r5
 8007802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007806:	f842 0f04 	str.w	r0, [r2, #4]!
 800780a:	3301      	adds	r3, #1
 800780c:	e7c1      	b.n	8007792 <__lshift+0x4a>
 800780e:	3904      	subs	r1, #4
 8007810:	f853 2b04 	ldr.w	r2, [r3], #4
 8007814:	f841 2f04 	str.w	r2, [r1, #4]!
 8007818:	4298      	cmp	r0, r3
 800781a:	d8f9      	bhi.n	8007810 <__lshift+0xc8>
 800781c:	e7ea      	b.n	80077f4 <__lshift+0xac>
 800781e:	bf00      	nop
 8007820:	08009750 	.word	0x08009750
 8007824:	080097dc 	.word	0x080097dc

08007828 <__mcmp>:
 8007828:	b530      	push	{r4, r5, lr}
 800782a:	6902      	ldr	r2, [r0, #16]
 800782c:	690c      	ldr	r4, [r1, #16]
 800782e:	1b12      	subs	r2, r2, r4
 8007830:	d10e      	bne.n	8007850 <__mcmp+0x28>
 8007832:	f100 0314 	add.w	r3, r0, #20
 8007836:	3114      	adds	r1, #20
 8007838:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800783c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007840:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007844:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007848:	42a5      	cmp	r5, r4
 800784a:	d003      	beq.n	8007854 <__mcmp+0x2c>
 800784c:	d305      	bcc.n	800785a <__mcmp+0x32>
 800784e:	2201      	movs	r2, #1
 8007850:	4610      	mov	r0, r2
 8007852:	bd30      	pop	{r4, r5, pc}
 8007854:	4283      	cmp	r3, r0
 8007856:	d3f3      	bcc.n	8007840 <__mcmp+0x18>
 8007858:	e7fa      	b.n	8007850 <__mcmp+0x28>
 800785a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800785e:	e7f7      	b.n	8007850 <__mcmp+0x28>

08007860 <__mdiff>:
 8007860:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007864:	460c      	mov	r4, r1
 8007866:	4606      	mov	r6, r0
 8007868:	4611      	mov	r1, r2
 800786a:	4620      	mov	r0, r4
 800786c:	4690      	mov	r8, r2
 800786e:	f7ff ffdb 	bl	8007828 <__mcmp>
 8007872:	1e05      	subs	r5, r0, #0
 8007874:	d110      	bne.n	8007898 <__mdiff+0x38>
 8007876:	4629      	mov	r1, r5
 8007878:	4630      	mov	r0, r6
 800787a:	f7ff fd09 	bl	8007290 <_Balloc>
 800787e:	b930      	cbnz	r0, 800788e <__mdiff+0x2e>
 8007880:	4b3a      	ldr	r3, [pc, #232]	; (800796c <__mdiff+0x10c>)
 8007882:	4602      	mov	r2, r0
 8007884:	f240 2132 	movw	r1, #562	; 0x232
 8007888:	4839      	ldr	r0, [pc, #228]	; (8007970 <__mdiff+0x110>)
 800788a:	f001 f86d 	bl	8008968 <__assert_func>
 800788e:	2301      	movs	r3, #1
 8007890:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007894:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007898:	bfa4      	itt	ge
 800789a:	4643      	movge	r3, r8
 800789c:	46a0      	movge	r8, r4
 800789e:	4630      	mov	r0, r6
 80078a0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80078a4:	bfa6      	itte	ge
 80078a6:	461c      	movge	r4, r3
 80078a8:	2500      	movge	r5, #0
 80078aa:	2501      	movlt	r5, #1
 80078ac:	f7ff fcf0 	bl	8007290 <_Balloc>
 80078b0:	b920      	cbnz	r0, 80078bc <__mdiff+0x5c>
 80078b2:	4b2e      	ldr	r3, [pc, #184]	; (800796c <__mdiff+0x10c>)
 80078b4:	4602      	mov	r2, r0
 80078b6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80078ba:	e7e5      	b.n	8007888 <__mdiff+0x28>
 80078bc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80078c0:	6926      	ldr	r6, [r4, #16]
 80078c2:	60c5      	str	r5, [r0, #12]
 80078c4:	f104 0914 	add.w	r9, r4, #20
 80078c8:	f108 0514 	add.w	r5, r8, #20
 80078cc:	f100 0e14 	add.w	lr, r0, #20
 80078d0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80078d4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80078d8:	f108 0210 	add.w	r2, r8, #16
 80078dc:	46f2      	mov	sl, lr
 80078de:	2100      	movs	r1, #0
 80078e0:	f859 3b04 	ldr.w	r3, [r9], #4
 80078e4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80078e8:	fa1f f883 	uxth.w	r8, r3
 80078ec:	fa11 f18b 	uxtah	r1, r1, fp
 80078f0:	0c1b      	lsrs	r3, r3, #16
 80078f2:	eba1 0808 	sub.w	r8, r1, r8
 80078f6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80078fa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80078fe:	fa1f f888 	uxth.w	r8, r8
 8007902:	1419      	asrs	r1, r3, #16
 8007904:	454e      	cmp	r6, r9
 8007906:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800790a:	f84a 3b04 	str.w	r3, [sl], #4
 800790e:	d8e7      	bhi.n	80078e0 <__mdiff+0x80>
 8007910:	1b33      	subs	r3, r6, r4
 8007912:	3b15      	subs	r3, #21
 8007914:	f023 0303 	bic.w	r3, r3, #3
 8007918:	3304      	adds	r3, #4
 800791a:	3415      	adds	r4, #21
 800791c:	42a6      	cmp	r6, r4
 800791e:	bf38      	it	cc
 8007920:	2304      	movcc	r3, #4
 8007922:	441d      	add	r5, r3
 8007924:	4473      	add	r3, lr
 8007926:	469e      	mov	lr, r3
 8007928:	462e      	mov	r6, r5
 800792a:	4566      	cmp	r6, ip
 800792c:	d30e      	bcc.n	800794c <__mdiff+0xec>
 800792e:	f10c 0203 	add.w	r2, ip, #3
 8007932:	1b52      	subs	r2, r2, r5
 8007934:	f022 0203 	bic.w	r2, r2, #3
 8007938:	3d03      	subs	r5, #3
 800793a:	45ac      	cmp	ip, r5
 800793c:	bf38      	it	cc
 800793e:	2200      	movcc	r2, #0
 8007940:	441a      	add	r2, r3
 8007942:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007946:	b17b      	cbz	r3, 8007968 <__mdiff+0x108>
 8007948:	6107      	str	r7, [r0, #16]
 800794a:	e7a3      	b.n	8007894 <__mdiff+0x34>
 800794c:	f856 8b04 	ldr.w	r8, [r6], #4
 8007950:	fa11 f288 	uxtah	r2, r1, r8
 8007954:	1414      	asrs	r4, r2, #16
 8007956:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800795a:	b292      	uxth	r2, r2
 800795c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007960:	f84e 2b04 	str.w	r2, [lr], #4
 8007964:	1421      	asrs	r1, r4, #16
 8007966:	e7e0      	b.n	800792a <__mdiff+0xca>
 8007968:	3f01      	subs	r7, #1
 800796a:	e7ea      	b.n	8007942 <__mdiff+0xe2>
 800796c:	08009750 	.word	0x08009750
 8007970:	080097dc 	.word	0x080097dc

08007974 <__ulp>:
 8007974:	b082      	sub	sp, #8
 8007976:	ed8d 0b00 	vstr	d0, [sp]
 800797a:	9b01      	ldr	r3, [sp, #4]
 800797c:	4912      	ldr	r1, [pc, #72]	; (80079c8 <__ulp+0x54>)
 800797e:	4019      	ands	r1, r3
 8007980:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8007984:	2900      	cmp	r1, #0
 8007986:	dd05      	ble.n	8007994 <__ulp+0x20>
 8007988:	2200      	movs	r2, #0
 800798a:	460b      	mov	r3, r1
 800798c:	ec43 2b10 	vmov	d0, r2, r3
 8007990:	b002      	add	sp, #8
 8007992:	4770      	bx	lr
 8007994:	4249      	negs	r1, r1
 8007996:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800799a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800799e:	f04f 0200 	mov.w	r2, #0
 80079a2:	f04f 0300 	mov.w	r3, #0
 80079a6:	da04      	bge.n	80079b2 <__ulp+0x3e>
 80079a8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80079ac:	fa41 f300 	asr.w	r3, r1, r0
 80079b0:	e7ec      	b.n	800798c <__ulp+0x18>
 80079b2:	f1a0 0114 	sub.w	r1, r0, #20
 80079b6:	291e      	cmp	r1, #30
 80079b8:	bfda      	itte	le
 80079ba:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80079be:	fa20 f101 	lsrle.w	r1, r0, r1
 80079c2:	2101      	movgt	r1, #1
 80079c4:	460a      	mov	r2, r1
 80079c6:	e7e1      	b.n	800798c <__ulp+0x18>
 80079c8:	7ff00000 	.word	0x7ff00000

080079cc <__b2d>:
 80079cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ce:	6905      	ldr	r5, [r0, #16]
 80079d0:	f100 0714 	add.w	r7, r0, #20
 80079d4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80079d8:	1f2e      	subs	r6, r5, #4
 80079da:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80079de:	4620      	mov	r0, r4
 80079e0:	f7ff fd48 	bl	8007474 <__hi0bits>
 80079e4:	f1c0 0320 	rsb	r3, r0, #32
 80079e8:	280a      	cmp	r0, #10
 80079ea:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8007a68 <__b2d+0x9c>
 80079ee:	600b      	str	r3, [r1, #0]
 80079f0:	dc14      	bgt.n	8007a1c <__b2d+0x50>
 80079f2:	f1c0 0e0b 	rsb	lr, r0, #11
 80079f6:	fa24 f10e 	lsr.w	r1, r4, lr
 80079fa:	42b7      	cmp	r7, r6
 80079fc:	ea41 030c 	orr.w	r3, r1, ip
 8007a00:	bf34      	ite	cc
 8007a02:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007a06:	2100      	movcs	r1, #0
 8007a08:	3015      	adds	r0, #21
 8007a0a:	fa04 f000 	lsl.w	r0, r4, r0
 8007a0e:	fa21 f10e 	lsr.w	r1, r1, lr
 8007a12:	ea40 0201 	orr.w	r2, r0, r1
 8007a16:	ec43 2b10 	vmov	d0, r2, r3
 8007a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a1c:	42b7      	cmp	r7, r6
 8007a1e:	bf3a      	itte	cc
 8007a20:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007a24:	f1a5 0608 	subcc.w	r6, r5, #8
 8007a28:	2100      	movcs	r1, #0
 8007a2a:	380b      	subs	r0, #11
 8007a2c:	d017      	beq.n	8007a5e <__b2d+0x92>
 8007a2e:	f1c0 0c20 	rsb	ip, r0, #32
 8007a32:	fa04 f500 	lsl.w	r5, r4, r0
 8007a36:	42be      	cmp	r6, r7
 8007a38:	fa21 f40c 	lsr.w	r4, r1, ip
 8007a3c:	ea45 0504 	orr.w	r5, r5, r4
 8007a40:	bf8c      	ite	hi
 8007a42:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007a46:	2400      	movls	r4, #0
 8007a48:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8007a4c:	fa01 f000 	lsl.w	r0, r1, r0
 8007a50:	fa24 f40c 	lsr.w	r4, r4, ip
 8007a54:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007a58:	ea40 0204 	orr.w	r2, r0, r4
 8007a5c:	e7db      	b.n	8007a16 <__b2d+0x4a>
 8007a5e:	ea44 030c 	orr.w	r3, r4, ip
 8007a62:	460a      	mov	r2, r1
 8007a64:	e7d7      	b.n	8007a16 <__b2d+0x4a>
 8007a66:	bf00      	nop
 8007a68:	3ff00000 	.word	0x3ff00000

08007a6c <__d2b>:
 8007a6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007a70:	4689      	mov	r9, r1
 8007a72:	2101      	movs	r1, #1
 8007a74:	ec57 6b10 	vmov	r6, r7, d0
 8007a78:	4690      	mov	r8, r2
 8007a7a:	f7ff fc09 	bl	8007290 <_Balloc>
 8007a7e:	4604      	mov	r4, r0
 8007a80:	b930      	cbnz	r0, 8007a90 <__d2b+0x24>
 8007a82:	4602      	mov	r2, r0
 8007a84:	4b25      	ldr	r3, [pc, #148]	; (8007b1c <__d2b+0xb0>)
 8007a86:	4826      	ldr	r0, [pc, #152]	; (8007b20 <__d2b+0xb4>)
 8007a88:	f240 310a 	movw	r1, #778	; 0x30a
 8007a8c:	f000 ff6c 	bl	8008968 <__assert_func>
 8007a90:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007a94:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007a98:	bb35      	cbnz	r5, 8007ae8 <__d2b+0x7c>
 8007a9a:	2e00      	cmp	r6, #0
 8007a9c:	9301      	str	r3, [sp, #4]
 8007a9e:	d028      	beq.n	8007af2 <__d2b+0x86>
 8007aa0:	4668      	mov	r0, sp
 8007aa2:	9600      	str	r6, [sp, #0]
 8007aa4:	f7ff fd06 	bl	80074b4 <__lo0bits>
 8007aa8:	9900      	ldr	r1, [sp, #0]
 8007aaa:	b300      	cbz	r0, 8007aee <__d2b+0x82>
 8007aac:	9a01      	ldr	r2, [sp, #4]
 8007aae:	f1c0 0320 	rsb	r3, r0, #32
 8007ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ab6:	430b      	orrs	r3, r1
 8007ab8:	40c2      	lsrs	r2, r0
 8007aba:	6163      	str	r3, [r4, #20]
 8007abc:	9201      	str	r2, [sp, #4]
 8007abe:	9b01      	ldr	r3, [sp, #4]
 8007ac0:	61a3      	str	r3, [r4, #24]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	bf14      	ite	ne
 8007ac6:	2202      	movne	r2, #2
 8007ac8:	2201      	moveq	r2, #1
 8007aca:	6122      	str	r2, [r4, #16]
 8007acc:	b1d5      	cbz	r5, 8007b04 <__d2b+0x98>
 8007ace:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007ad2:	4405      	add	r5, r0
 8007ad4:	f8c9 5000 	str.w	r5, [r9]
 8007ad8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007adc:	f8c8 0000 	str.w	r0, [r8]
 8007ae0:	4620      	mov	r0, r4
 8007ae2:	b003      	add	sp, #12
 8007ae4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ae8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007aec:	e7d5      	b.n	8007a9a <__d2b+0x2e>
 8007aee:	6161      	str	r1, [r4, #20]
 8007af0:	e7e5      	b.n	8007abe <__d2b+0x52>
 8007af2:	a801      	add	r0, sp, #4
 8007af4:	f7ff fcde 	bl	80074b4 <__lo0bits>
 8007af8:	9b01      	ldr	r3, [sp, #4]
 8007afa:	6163      	str	r3, [r4, #20]
 8007afc:	2201      	movs	r2, #1
 8007afe:	6122      	str	r2, [r4, #16]
 8007b00:	3020      	adds	r0, #32
 8007b02:	e7e3      	b.n	8007acc <__d2b+0x60>
 8007b04:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007b08:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007b0c:	f8c9 0000 	str.w	r0, [r9]
 8007b10:	6918      	ldr	r0, [r3, #16]
 8007b12:	f7ff fcaf 	bl	8007474 <__hi0bits>
 8007b16:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007b1a:	e7df      	b.n	8007adc <__d2b+0x70>
 8007b1c:	08009750 	.word	0x08009750
 8007b20:	080097dc 	.word	0x080097dc

08007b24 <__ratio>:
 8007b24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b28:	4688      	mov	r8, r1
 8007b2a:	4669      	mov	r1, sp
 8007b2c:	4681      	mov	r9, r0
 8007b2e:	f7ff ff4d 	bl	80079cc <__b2d>
 8007b32:	a901      	add	r1, sp, #4
 8007b34:	4640      	mov	r0, r8
 8007b36:	ec55 4b10 	vmov	r4, r5, d0
 8007b3a:	f7ff ff47 	bl	80079cc <__b2d>
 8007b3e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007b42:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007b46:	eba3 0c02 	sub.w	ip, r3, r2
 8007b4a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007b4e:	1a9b      	subs	r3, r3, r2
 8007b50:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007b54:	ec51 0b10 	vmov	r0, r1, d0
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	bfd6      	itet	le
 8007b5c:	460a      	movle	r2, r1
 8007b5e:	462a      	movgt	r2, r5
 8007b60:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007b64:	468b      	mov	fp, r1
 8007b66:	462f      	mov	r7, r5
 8007b68:	bfd4      	ite	le
 8007b6a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007b6e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007b72:	4620      	mov	r0, r4
 8007b74:	ee10 2a10 	vmov	r2, s0
 8007b78:	465b      	mov	r3, fp
 8007b7a:	4639      	mov	r1, r7
 8007b7c:	f7f8 fe7e 	bl	800087c <__aeabi_ddiv>
 8007b80:	ec41 0b10 	vmov	d0, r0, r1
 8007b84:	b003      	add	sp, #12
 8007b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007b8a <__copybits>:
 8007b8a:	3901      	subs	r1, #1
 8007b8c:	b570      	push	{r4, r5, r6, lr}
 8007b8e:	1149      	asrs	r1, r1, #5
 8007b90:	6914      	ldr	r4, [r2, #16]
 8007b92:	3101      	adds	r1, #1
 8007b94:	f102 0314 	add.w	r3, r2, #20
 8007b98:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007b9c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007ba0:	1f05      	subs	r5, r0, #4
 8007ba2:	42a3      	cmp	r3, r4
 8007ba4:	d30c      	bcc.n	8007bc0 <__copybits+0x36>
 8007ba6:	1aa3      	subs	r3, r4, r2
 8007ba8:	3b11      	subs	r3, #17
 8007baa:	f023 0303 	bic.w	r3, r3, #3
 8007bae:	3211      	adds	r2, #17
 8007bb0:	42a2      	cmp	r2, r4
 8007bb2:	bf88      	it	hi
 8007bb4:	2300      	movhi	r3, #0
 8007bb6:	4418      	add	r0, r3
 8007bb8:	2300      	movs	r3, #0
 8007bba:	4288      	cmp	r0, r1
 8007bbc:	d305      	bcc.n	8007bca <__copybits+0x40>
 8007bbe:	bd70      	pop	{r4, r5, r6, pc}
 8007bc0:	f853 6b04 	ldr.w	r6, [r3], #4
 8007bc4:	f845 6f04 	str.w	r6, [r5, #4]!
 8007bc8:	e7eb      	b.n	8007ba2 <__copybits+0x18>
 8007bca:	f840 3b04 	str.w	r3, [r0], #4
 8007bce:	e7f4      	b.n	8007bba <__copybits+0x30>

08007bd0 <__any_on>:
 8007bd0:	f100 0214 	add.w	r2, r0, #20
 8007bd4:	6900      	ldr	r0, [r0, #16]
 8007bd6:	114b      	asrs	r3, r1, #5
 8007bd8:	4298      	cmp	r0, r3
 8007bda:	b510      	push	{r4, lr}
 8007bdc:	db11      	blt.n	8007c02 <__any_on+0x32>
 8007bde:	dd0a      	ble.n	8007bf6 <__any_on+0x26>
 8007be0:	f011 011f 	ands.w	r1, r1, #31
 8007be4:	d007      	beq.n	8007bf6 <__any_on+0x26>
 8007be6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007bea:	fa24 f001 	lsr.w	r0, r4, r1
 8007bee:	fa00 f101 	lsl.w	r1, r0, r1
 8007bf2:	428c      	cmp	r4, r1
 8007bf4:	d10b      	bne.n	8007c0e <__any_on+0x3e>
 8007bf6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d803      	bhi.n	8007c06 <__any_on+0x36>
 8007bfe:	2000      	movs	r0, #0
 8007c00:	bd10      	pop	{r4, pc}
 8007c02:	4603      	mov	r3, r0
 8007c04:	e7f7      	b.n	8007bf6 <__any_on+0x26>
 8007c06:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007c0a:	2900      	cmp	r1, #0
 8007c0c:	d0f5      	beq.n	8007bfa <__any_on+0x2a>
 8007c0e:	2001      	movs	r0, #1
 8007c10:	e7f6      	b.n	8007c00 <__any_on+0x30>

08007c12 <_calloc_r>:
 8007c12:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c14:	fba1 2402 	umull	r2, r4, r1, r2
 8007c18:	b94c      	cbnz	r4, 8007c2e <_calloc_r+0x1c>
 8007c1a:	4611      	mov	r1, r2
 8007c1c:	9201      	str	r2, [sp, #4]
 8007c1e:	f000 f87b 	bl	8007d18 <_malloc_r>
 8007c22:	9a01      	ldr	r2, [sp, #4]
 8007c24:	4605      	mov	r5, r0
 8007c26:	b930      	cbnz	r0, 8007c36 <_calloc_r+0x24>
 8007c28:	4628      	mov	r0, r5
 8007c2a:	b003      	add	sp, #12
 8007c2c:	bd30      	pop	{r4, r5, pc}
 8007c2e:	220c      	movs	r2, #12
 8007c30:	6002      	str	r2, [r0, #0]
 8007c32:	2500      	movs	r5, #0
 8007c34:	e7f8      	b.n	8007c28 <_calloc_r+0x16>
 8007c36:	4621      	mov	r1, r4
 8007c38:	f7fc fb18 	bl	800426c <memset>
 8007c3c:	e7f4      	b.n	8007c28 <_calloc_r+0x16>
	...

08007c40 <_free_r>:
 8007c40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c42:	2900      	cmp	r1, #0
 8007c44:	d044      	beq.n	8007cd0 <_free_r+0x90>
 8007c46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c4a:	9001      	str	r0, [sp, #4]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	f1a1 0404 	sub.w	r4, r1, #4
 8007c52:	bfb8      	it	lt
 8007c54:	18e4      	addlt	r4, r4, r3
 8007c56:	f001 f88b 	bl	8008d70 <__malloc_lock>
 8007c5a:	4a1e      	ldr	r2, [pc, #120]	; (8007cd4 <_free_r+0x94>)
 8007c5c:	9801      	ldr	r0, [sp, #4]
 8007c5e:	6813      	ldr	r3, [r2, #0]
 8007c60:	b933      	cbnz	r3, 8007c70 <_free_r+0x30>
 8007c62:	6063      	str	r3, [r4, #4]
 8007c64:	6014      	str	r4, [r2, #0]
 8007c66:	b003      	add	sp, #12
 8007c68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007c6c:	f001 b886 	b.w	8008d7c <__malloc_unlock>
 8007c70:	42a3      	cmp	r3, r4
 8007c72:	d908      	bls.n	8007c86 <_free_r+0x46>
 8007c74:	6825      	ldr	r5, [r4, #0]
 8007c76:	1961      	adds	r1, r4, r5
 8007c78:	428b      	cmp	r3, r1
 8007c7a:	bf01      	itttt	eq
 8007c7c:	6819      	ldreq	r1, [r3, #0]
 8007c7e:	685b      	ldreq	r3, [r3, #4]
 8007c80:	1949      	addeq	r1, r1, r5
 8007c82:	6021      	streq	r1, [r4, #0]
 8007c84:	e7ed      	b.n	8007c62 <_free_r+0x22>
 8007c86:	461a      	mov	r2, r3
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	b10b      	cbz	r3, 8007c90 <_free_r+0x50>
 8007c8c:	42a3      	cmp	r3, r4
 8007c8e:	d9fa      	bls.n	8007c86 <_free_r+0x46>
 8007c90:	6811      	ldr	r1, [r2, #0]
 8007c92:	1855      	adds	r5, r2, r1
 8007c94:	42a5      	cmp	r5, r4
 8007c96:	d10b      	bne.n	8007cb0 <_free_r+0x70>
 8007c98:	6824      	ldr	r4, [r4, #0]
 8007c9a:	4421      	add	r1, r4
 8007c9c:	1854      	adds	r4, r2, r1
 8007c9e:	42a3      	cmp	r3, r4
 8007ca0:	6011      	str	r1, [r2, #0]
 8007ca2:	d1e0      	bne.n	8007c66 <_free_r+0x26>
 8007ca4:	681c      	ldr	r4, [r3, #0]
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	6053      	str	r3, [r2, #4]
 8007caa:	4421      	add	r1, r4
 8007cac:	6011      	str	r1, [r2, #0]
 8007cae:	e7da      	b.n	8007c66 <_free_r+0x26>
 8007cb0:	d902      	bls.n	8007cb8 <_free_r+0x78>
 8007cb2:	230c      	movs	r3, #12
 8007cb4:	6003      	str	r3, [r0, #0]
 8007cb6:	e7d6      	b.n	8007c66 <_free_r+0x26>
 8007cb8:	6825      	ldr	r5, [r4, #0]
 8007cba:	1961      	adds	r1, r4, r5
 8007cbc:	428b      	cmp	r3, r1
 8007cbe:	bf04      	itt	eq
 8007cc0:	6819      	ldreq	r1, [r3, #0]
 8007cc2:	685b      	ldreq	r3, [r3, #4]
 8007cc4:	6063      	str	r3, [r4, #4]
 8007cc6:	bf04      	itt	eq
 8007cc8:	1949      	addeq	r1, r1, r5
 8007cca:	6021      	streq	r1, [r4, #0]
 8007ccc:	6054      	str	r4, [r2, #4]
 8007cce:	e7ca      	b.n	8007c66 <_free_r+0x26>
 8007cd0:	b003      	add	sp, #12
 8007cd2:	bd30      	pop	{r4, r5, pc}
 8007cd4:	20000628 	.word	0x20000628

08007cd8 <sbrk_aligned>:
 8007cd8:	b570      	push	{r4, r5, r6, lr}
 8007cda:	4e0e      	ldr	r6, [pc, #56]	; (8007d14 <sbrk_aligned+0x3c>)
 8007cdc:	460c      	mov	r4, r1
 8007cde:	6831      	ldr	r1, [r6, #0]
 8007ce0:	4605      	mov	r5, r0
 8007ce2:	b911      	cbnz	r1, 8007cea <sbrk_aligned+0x12>
 8007ce4:	f000 fd28 	bl	8008738 <_sbrk_r>
 8007ce8:	6030      	str	r0, [r6, #0]
 8007cea:	4621      	mov	r1, r4
 8007cec:	4628      	mov	r0, r5
 8007cee:	f000 fd23 	bl	8008738 <_sbrk_r>
 8007cf2:	1c43      	adds	r3, r0, #1
 8007cf4:	d00a      	beq.n	8007d0c <sbrk_aligned+0x34>
 8007cf6:	1cc4      	adds	r4, r0, #3
 8007cf8:	f024 0403 	bic.w	r4, r4, #3
 8007cfc:	42a0      	cmp	r0, r4
 8007cfe:	d007      	beq.n	8007d10 <sbrk_aligned+0x38>
 8007d00:	1a21      	subs	r1, r4, r0
 8007d02:	4628      	mov	r0, r5
 8007d04:	f000 fd18 	bl	8008738 <_sbrk_r>
 8007d08:	3001      	adds	r0, #1
 8007d0a:	d101      	bne.n	8007d10 <sbrk_aligned+0x38>
 8007d0c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007d10:	4620      	mov	r0, r4
 8007d12:	bd70      	pop	{r4, r5, r6, pc}
 8007d14:	2000062c 	.word	0x2000062c

08007d18 <_malloc_r>:
 8007d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d1c:	1ccd      	adds	r5, r1, #3
 8007d1e:	f025 0503 	bic.w	r5, r5, #3
 8007d22:	3508      	adds	r5, #8
 8007d24:	2d0c      	cmp	r5, #12
 8007d26:	bf38      	it	cc
 8007d28:	250c      	movcc	r5, #12
 8007d2a:	2d00      	cmp	r5, #0
 8007d2c:	4607      	mov	r7, r0
 8007d2e:	db01      	blt.n	8007d34 <_malloc_r+0x1c>
 8007d30:	42a9      	cmp	r1, r5
 8007d32:	d905      	bls.n	8007d40 <_malloc_r+0x28>
 8007d34:	230c      	movs	r3, #12
 8007d36:	603b      	str	r3, [r7, #0]
 8007d38:	2600      	movs	r6, #0
 8007d3a:	4630      	mov	r0, r6
 8007d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d40:	4e2e      	ldr	r6, [pc, #184]	; (8007dfc <_malloc_r+0xe4>)
 8007d42:	f001 f815 	bl	8008d70 <__malloc_lock>
 8007d46:	6833      	ldr	r3, [r6, #0]
 8007d48:	461c      	mov	r4, r3
 8007d4a:	bb34      	cbnz	r4, 8007d9a <_malloc_r+0x82>
 8007d4c:	4629      	mov	r1, r5
 8007d4e:	4638      	mov	r0, r7
 8007d50:	f7ff ffc2 	bl	8007cd8 <sbrk_aligned>
 8007d54:	1c43      	adds	r3, r0, #1
 8007d56:	4604      	mov	r4, r0
 8007d58:	d14d      	bne.n	8007df6 <_malloc_r+0xde>
 8007d5a:	6834      	ldr	r4, [r6, #0]
 8007d5c:	4626      	mov	r6, r4
 8007d5e:	2e00      	cmp	r6, #0
 8007d60:	d140      	bne.n	8007de4 <_malloc_r+0xcc>
 8007d62:	6823      	ldr	r3, [r4, #0]
 8007d64:	4631      	mov	r1, r6
 8007d66:	4638      	mov	r0, r7
 8007d68:	eb04 0803 	add.w	r8, r4, r3
 8007d6c:	f000 fce4 	bl	8008738 <_sbrk_r>
 8007d70:	4580      	cmp	r8, r0
 8007d72:	d13a      	bne.n	8007dea <_malloc_r+0xd2>
 8007d74:	6821      	ldr	r1, [r4, #0]
 8007d76:	3503      	adds	r5, #3
 8007d78:	1a6d      	subs	r5, r5, r1
 8007d7a:	f025 0503 	bic.w	r5, r5, #3
 8007d7e:	3508      	adds	r5, #8
 8007d80:	2d0c      	cmp	r5, #12
 8007d82:	bf38      	it	cc
 8007d84:	250c      	movcc	r5, #12
 8007d86:	4629      	mov	r1, r5
 8007d88:	4638      	mov	r0, r7
 8007d8a:	f7ff ffa5 	bl	8007cd8 <sbrk_aligned>
 8007d8e:	3001      	adds	r0, #1
 8007d90:	d02b      	beq.n	8007dea <_malloc_r+0xd2>
 8007d92:	6823      	ldr	r3, [r4, #0]
 8007d94:	442b      	add	r3, r5
 8007d96:	6023      	str	r3, [r4, #0]
 8007d98:	e00e      	b.n	8007db8 <_malloc_r+0xa0>
 8007d9a:	6822      	ldr	r2, [r4, #0]
 8007d9c:	1b52      	subs	r2, r2, r5
 8007d9e:	d41e      	bmi.n	8007dde <_malloc_r+0xc6>
 8007da0:	2a0b      	cmp	r2, #11
 8007da2:	d916      	bls.n	8007dd2 <_malloc_r+0xba>
 8007da4:	1961      	adds	r1, r4, r5
 8007da6:	42a3      	cmp	r3, r4
 8007da8:	6025      	str	r5, [r4, #0]
 8007daa:	bf18      	it	ne
 8007dac:	6059      	strne	r1, [r3, #4]
 8007dae:	6863      	ldr	r3, [r4, #4]
 8007db0:	bf08      	it	eq
 8007db2:	6031      	streq	r1, [r6, #0]
 8007db4:	5162      	str	r2, [r4, r5]
 8007db6:	604b      	str	r3, [r1, #4]
 8007db8:	4638      	mov	r0, r7
 8007dba:	f104 060b 	add.w	r6, r4, #11
 8007dbe:	f000 ffdd 	bl	8008d7c <__malloc_unlock>
 8007dc2:	f026 0607 	bic.w	r6, r6, #7
 8007dc6:	1d23      	adds	r3, r4, #4
 8007dc8:	1af2      	subs	r2, r6, r3
 8007dca:	d0b6      	beq.n	8007d3a <_malloc_r+0x22>
 8007dcc:	1b9b      	subs	r3, r3, r6
 8007dce:	50a3      	str	r3, [r4, r2]
 8007dd0:	e7b3      	b.n	8007d3a <_malloc_r+0x22>
 8007dd2:	6862      	ldr	r2, [r4, #4]
 8007dd4:	42a3      	cmp	r3, r4
 8007dd6:	bf0c      	ite	eq
 8007dd8:	6032      	streq	r2, [r6, #0]
 8007dda:	605a      	strne	r2, [r3, #4]
 8007ddc:	e7ec      	b.n	8007db8 <_malloc_r+0xa0>
 8007dde:	4623      	mov	r3, r4
 8007de0:	6864      	ldr	r4, [r4, #4]
 8007de2:	e7b2      	b.n	8007d4a <_malloc_r+0x32>
 8007de4:	4634      	mov	r4, r6
 8007de6:	6876      	ldr	r6, [r6, #4]
 8007de8:	e7b9      	b.n	8007d5e <_malloc_r+0x46>
 8007dea:	230c      	movs	r3, #12
 8007dec:	603b      	str	r3, [r7, #0]
 8007dee:	4638      	mov	r0, r7
 8007df0:	f000 ffc4 	bl	8008d7c <__malloc_unlock>
 8007df4:	e7a1      	b.n	8007d3a <_malloc_r+0x22>
 8007df6:	6025      	str	r5, [r4, #0]
 8007df8:	e7de      	b.n	8007db8 <_malloc_r+0xa0>
 8007dfa:	bf00      	nop
 8007dfc:	20000628 	.word	0x20000628

08007e00 <__ssputs_r>:
 8007e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e04:	688e      	ldr	r6, [r1, #8]
 8007e06:	429e      	cmp	r6, r3
 8007e08:	4682      	mov	sl, r0
 8007e0a:	460c      	mov	r4, r1
 8007e0c:	4690      	mov	r8, r2
 8007e0e:	461f      	mov	r7, r3
 8007e10:	d838      	bhi.n	8007e84 <__ssputs_r+0x84>
 8007e12:	898a      	ldrh	r2, [r1, #12]
 8007e14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007e18:	d032      	beq.n	8007e80 <__ssputs_r+0x80>
 8007e1a:	6825      	ldr	r5, [r4, #0]
 8007e1c:	6909      	ldr	r1, [r1, #16]
 8007e1e:	eba5 0901 	sub.w	r9, r5, r1
 8007e22:	6965      	ldr	r5, [r4, #20]
 8007e24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007e28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007e2c:	3301      	adds	r3, #1
 8007e2e:	444b      	add	r3, r9
 8007e30:	106d      	asrs	r5, r5, #1
 8007e32:	429d      	cmp	r5, r3
 8007e34:	bf38      	it	cc
 8007e36:	461d      	movcc	r5, r3
 8007e38:	0553      	lsls	r3, r2, #21
 8007e3a:	d531      	bpl.n	8007ea0 <__ssputs_r+0xa0>
 8007e3c:	4629      	mov	r1, r5
 8007e3e:	f7ff ff6b 	bl	8007d18 <_malloc_r>
 8007e42:	4606      	mov	r6, r0
 8007e44:	b950      	cbnz	r0, 8007e5c <__ssputs_r+0x5c>
 8007e46:	230c      	movs	r3, #12
 8007e48:	f8ca 3000 	str.w	r3, [sl]
 8007e4c:	89a3      	ldrh	r3, [r4, #12]
 8007e4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e52:	81a3      	strh	r3, [r4, #12]
 8007e54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e5c:	6921      	ldr	r1, [r4, #16]
 8007e5e:	464a      	mov	r2, r9
 8007e60:	f7ff fa08 	bl	8007274 <memcpy>
 8007e64:	89a3      	ldrh	r3, [r4, #12]
 8007e66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007e6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e6e:	81a3      	strh	r3, [r4, #12]
 8007e70:	6126      	str	r6, [r4, #16]
 8007e72:	6165      	str	r5, [r4, #20]
 8007e74:	444e      	add	r6, r9
 8007e76:	eba5 0509 	sub.w	r5, r5, r9
 8007e7a:	6026      	str	r6, [r4, #0]
 8007e7c:	60a5      	str	r5, [r4, #8]
 8007e7e:	463e      	mov	r6, r7
 8007e80:	42be      	cmp	r6, r7
 8007e82:	d900      	bls.n	8007e86 <__ssputs_r+0x86>
 8007e84:	463e      	mov	r6, r7
 8007e86:	6820      	ldr	r0, [r4, #0]
 8007e88:	4632      	mov	r2, r6
 8007e8a:	4641      	mov	r1, r8
 8007e8c:	f000 ff56 	bl	8008d3c <memmove>
 8007e90:	68a3      	ldr	r3, [r4, #8]
 8007e92:	1b9b      	subs	r3, r3, r6
 8007e94:	60a3      	str	r3, [r4, #8]
 8007e96:	6823      	ldr	r3, [r4, #0]
 8007e98:	4433      	add	r3, r6
 8007e9a:	6023      	str	r3, [r4, #0]
 8007e9c:	2000      	movs	r0, #0
 8007e9e:	e7db      	b.n	8007e58 <__ssputs_r+0x58>
 8007ea0:	462a      	mov	r2, r5
 8007ea2:	f000 ff71 	bl	8008d88 <_realloc_r>
 8007ea6:	4606      	mov	r6, r0
 8007ea8:	2800      	cmp	r0, #0
 8007eaa:	d1e1      	bne.n	8007e70 <__ssputs_r+0x70>
 8007eac:	6921      	ldr	r1, [r4, #16]
 8007eae:	4650      	mov	r0, sl
 8007eb0:	f7ff fec6 	bl	8007c40 <_free_r>
 8007eb4:	e7c7      	b.n	8007e46 <__ssputs_r+0x46>
	...

08007eb8 <_svfiprintf_r>:
 8007eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ebc:	4698      	mov	r8, r3
 8007ebe:	898b      	ldrh	r3, [r1, #12]
 8007ec0:	061b      	lsls	r3, r3, #24
 8007ec2:	b09d      	sub	sp, #116	; 0x74
 8007ec4:	4607      	mov	r7, r0
 8007ec6:	460d      	mov	r5, r1
 8007ec8:	4614      	mov	r4, r2
 8007eca:	d50e      	bpl.n	8007eea <_svfiprintf_r+0x32>
 8007ecc:	690b      	ldr	r3, [r1, #16]
 8007ece:	b963      	cbnz	r3, 8007eea <_svfiprintf_r+0x32>
 8007ed0:	2140      	movs	r1, #64	; 0x40
 8007ed2:	f7ff ff21 	bl	8007d18 <_malloc_r>
 8007ed6:	6028      	str	r0, [r5, #0]
 8007ed8:	6128      	str	r0, [r5, #16]
 8007eda:	b920      	cbnz	r0, 8007ee6 <_svfiprintf_r+0x2e>
 8007edc:	230c      	movs	r3, #12
 8007ede:	603b      	str	r3, [r7, #0]
 8007ee0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ee4:	e0d1      	b.n	800808a <_svfiprintf_r+0x1d2>
 8007ee6:	2340      	movs	r3, #64	; 0x40
 8007ee8:	616b      	str	r3, [r5, #20]
 8007eea:	2300      	movs	r3, #0
 8007eec:	9309      	str	r3, [sp, #36]	; 0x24
 8007eee:	2320      	movs	r3, #32
 8007ef0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ef4:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ef8:	2330      	movs	r3, #48	; 0x30
 8007efa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80080a4 <_svfiprintf_r+0x1ec>
 8007efe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f02:	f04f 0901 	mov.w	r9, #1
 8007f06:	4623      	mov	r3, r4
 8007f08:	469a      	mov	sl, r3
 8007f0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f0e:	b10a      	cbz	r2, 8007f14 <_svfiprintf_r+0x5c>
 8007f10:	2a25      	cmp	r2, #37	; 0x25
 8007f12:	d1f9      	bne.n	8007f08 <_svfiprintf_r+0x50>
 8007f14:	ebba 0b04 	subs.w	fp, sl, r4
 8007f18:	d00b      	beq.n	8007f32 <_svfiprintf_r+0x7a>
 8007f1a:	465b      	mov	r3, fp
 8007f1c:	4622      	mov	r2, r4
 8007f1e:	4629      	mov	r1, r5
 8007f20:	4638      	mov	r0, r7
 8007f22:	f7ff ff6d 	bl	8007e00 <__ssputs_r>
 8007f26:	3001      	adds	r0, #1
 8007f28:	f000 80aa 	beq.w	8008080 <_svfiprintf_r+0x1c8>
 8007f2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f2e:	445a      	add	r2, fp
 8007f30:	9209      	str	r2, [sp, #36]	; 0x24
 8007f32:	f89a 3000 	ldrb.w	r3, [sl]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	f000 80a2 	beq.w	8008080 <_svfiprintf_r+0x1c8>
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f46:	f10a 0a01 	add.w	sl, sl, #1
 8007f4a:	9304      	str	r3, [sp, #16]
 8007f4c:	9307      	str	r3, [sp, #28]
 8007f4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f52:	931a      	str	r3, [sp, #104]	; 0x68
 8007f54:	4654      	mov	r4, sl
 8007f56:	2205      	movs	r2, #5
 8007f58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f5c:	4851      	ldr	r0, [pc, #324]	; (80080a4 <_svfiprintf_r+0x1ec>)
 8007f5e:	f7f8 f957 	bl	8000210 <memchr>
 8007f62:	9a04      	ldr	r2, [sp, #16]
 8007f64:	b9d8      	cbnz	r0, 8007f9e <_svfiprintf_r+0xe6>
 8007f66:	06d0      	lsls	r0, r2, #27
 8007f68:	bf44      	itt	mi
 8007f6a:	2320      	movmi	r3, #32
 8007f6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f70:	0711      	lsls	r1, r2, #28
 8007f72:	bf44      	itt	mi
 8007f74:	232b      	movmi	r3, #43	; 0x2b
 8007f76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f7a:	f89a 3000 	ldrb.w	r3, [sl]
 8007f7e:	2b2a      	cmp	r3, #42	; 0x2a
 8007f80:	d015      	beq.n	8007fae <_svfiprintf_r+0xf6>
 8007f82:	9a07      	ldr	r2, [sp, #28]
 8007f84:	4654      	mov	r4, sl
 8007f86:	2000      	movs	r0, #0
 8007f88:	f04f 0c0a 	mov.w	ip, #10
 8007f8c:	4621      	mov	r1, r4
 8007f8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f92:	3b30      	subs	r3, #48	; 0x30
 8007f94:	2b09      	cmp	r3, #9
 8007f96:	d94e      	bls.n	8008036 <_svfiprintf_r+0x17e>
 8007f98:	b1b0      	cbz	r0, 8007fc8 <_svfiprintf_r+0x110>
 8007f9a:	9207      	str	r2, [sp, #28]
 8007f9c:	e014      	b.n	8007fc8 <_svfiprintf_r+0x110>
 8007f9e:	eba0 0308 	sub.w	r3, r0, r8
 8007fa2:	fa09 f303 	lsl.w	r3, r9, r3
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	9304      	str	r3, [sp, #16]
 8007faa:	46a2      	mov	sl, r4
 8007fac:	e7d2      	b.n	8007f54 <_svfiprintf_r+0x9c>
 8007fae:	9b03      	ldr	r3, [sp, #12]
 8007fb0:	1d19      	adds	r1, r3, #4
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	9103      	str	r1, [sp, #12]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	bfbb      	ittet	lt
 8007fba:	425b      	neglt	r3, r3
 8007fbc:	f042 0202 	orrlt.w	r2, r2, #2
 8007fc0:	9307      	strge	r3, [sp, #28]
 8007fc2:	9307      	strlt	r3, [sp, #28]
 8007fc4:	bfb8      	it	lt
 8007fc6:	9204      	strlt	r2, [sp, #16]
 8007fc8:	7823      	ldrb	r3, [r4, #0]
 8007fca:	2b2e      	cmp	r3, #46	; 0x2e
 8007fcc:	d10c      	bne.n	8007fe8 <_svfiprintf_r+0x130>
 8007fce:	7863      	ldrb	r3, [r4, #1]
 8007fd0:	2b2a      	cmp	r3, #42	; 0x2a
 8007fd2:	d135      	bne.n	8008040 <_svfiprintf_r+0x188>
 8007fd4:	9b03      	ldr	r3, [sp, #12]
 8007fd6:	1d1a      	adds	r2, r3, #4
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	9203      	str	r2, [sp, #12]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	bfb8      	it	lt
 8007fe0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007fe4:	3402      	adds	r4, #2
 8007fe6:	9305      	str	r3, [sp, #20]
 8007fe8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80080b4 <_svfiprintf_r+0x1fc>
 8007fec:	7821      	ldrb	r1, [r4, #0]
 8007fee:	2203      	movs	r2, #3
 8007ff0:	4650      	mov	r0, sl
 8007ff2:	f7f8 f90d 	bl	8000210 <memchr>
 8007ff6:	b140      	cbz	r0, 800800a <_svfiprintf_r+0x152>
 8007ff8:	2340      	movs	r3, #64	; 0x40
 8007ffa:	eba0 000a 	sub.w	r0, r0, sl
 8007ffe:	fa03 f000 	lsl.w	r0, r3, r0
 8008002:	9b04      	ldr	r3, [sp, #16]
 8008004:	4303      	orrs	r3, r0
 8008006:	3401      	adds	r4, #1
 8008008:	9304      	str	r3, [sp, #16]
 800800a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800800e:	4826      	ldr	r0, [pc, #152]	; (80080a8 <_svfiprintf_r+0x1f0>)
 8008010:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008014:	2206      	movs	r2, #6
 8008016:	f7f8 f8fb 	bl	8000210 <memchr>
 800801a:	2800      	cmp	r0, #0
 800801c:	d038      	beq.n	8008090 <_svfiprintf_r+0x1d8>
 800801e:	4b23      	ldr	r3, [pc, #140]	; (80080ac <_svfiprintf_r+0x1f4>)
 8008020:	bb1b      	cbnz	r3, 800806a <_svfiprintf_r+0x1b2>
 8008022:	9b03      	ldr	r3, [sp, #12]
 8008024:	3307      	adds	r3, #7
 8008026:	f023 0307 	bic.w	r3, r3, #7
 800802a:	3308      	adds	r3, #8
 800802c:	9303      	str	r3, [sp, #12]
 800802e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008030:	4433      	add	r3, r6
 8008032:	9309      	str	r3, [sp, #36]	; 0x24
 8008034:	e767      	b.n	8007f06 <_svfiprintf_r+0x4e>
 8008036:	fb0c 3202 	mla	r2, ip, r2, r3
 800803a:	460c      	mov	r4, r1
 800803c:	2001      	movs	r0, #1
 800803e:	e7a5      	b.n	8007f8c <_svfiprintf_r+0xd4>
 8008040:	2300      	movs	r3, #0
 8008042:	3401      	adds	r4, #1
 8008044:	9305      	str	r3, [sp, #20]
 8008046:	4619      	mov	r1, r3
 8008048:	f04f 0c0a 	mov.w	ip, #10
 800804c:	4620      	mov	r0, r4
 800804e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008052:	3a30      	subs	r2, #48	; 0x30
 8008054:	2a09      	cmp	r2, #9
 8008056:	d903      	bls.n	8008060 <_svfiprintf_r+0x1a8>
 8008058:	2b00      	cmp	r3, #0
 800805a:	d0c5      	beq.n	8007fe8 <_svfiprintf_r+0x130>
 800805c:	9105      	str	r1, [sp, #20]
 800805e:	e7c3      	b.n	8007fe8 <_svfiprintf_r+0x130>
 8008060:	fb0c 2101 	mla	r1, ip, r1, r2
 8008064:	4604      	mov	r4, r0
 8008066:	2301      	movs	r3, #1
 8008068:	e7f0      	b.n	800804c <_svfiprintf_r+0x194>
 800806a:	ab03      	add	r3, sp, #12
 800806c:	9300      	str	r3, [sp, #0]
 800806e:	462a      	mov	r2, r5
 8008070:	4b0f      	ldr	r3, [pc, #60]	; (80080b0 <_svfiprintf_r+0x1f8>)
 8008072:	a904      	add	r1, sp, #16
 8008074:	4638      	mov	r0, r7
 8008076:	f7fc f9a1 	bl	80043bc <_printf_float>
 800807a:	1c42      	adds	r2, r0, #1
 800807c:	4606      	mov	r6, r0
 800807e:	d1d6      	bne.n	800802e <_svfiprintf_r+0x176>
 8008080:	89ab      	ldrh	r3, [r5, #12]
 8008082:	065b      	lsls	r3, r3, #25
 8008084:	f53f af2c 	bmi.w	8007ee0 <_svfiprintf_r+0x28>
 8008088:	9809      	ldr	r0, [sp, #36]	; 0x24
 800808a:	b01d      	add	sp, #116	; 0x74
 800808c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008090:	ab03      	add	r3, sp, #12
 8008092:	9300      	str	r3, [sp, #0]
 8008094:	462a      	mov	r2, r5
 8008096:	4b06      	ldr	r3, [pc, #24]	; (80080b0 <_svfiprintf_r+0x1f8>)
 8008098:	a904      	add	r1, sp, #16
 800809a:	4638      	mov	r0, r7
 800809c:	f7fc fc32 	bl	8004904 <_printf_i>
 80080a0:	e7eb      	b.n	800807a <_svfiprintf_r+0x1c2>
 80080a2:	bf00      	nop
 80080a4:	08009934 	.word	0x08009934
 80080a8:	0800993e 	.word	0x0800993e
 80080ac:	080043bd 	.word	0x080043bd
 80080b0:	08007e01 	.word	0x08007e01
 80080b4:	0800993a 	.word	0x0800993a

080080b8 <_sungetc_r>:
 80080b8:	b538      	push	{r3, r4, r5, lr}
 80080ba:	1c4b      	adds	r3, r1, #1
 80080bc:	4614      	mov	r4, r2
 80080be:	d103      	bne.n	80080c8 <_sungetc_r+0x10>
 80080c0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80080c4:	4628      	mov	r0, r5
 80080c6:	bd38      	pop	{r3, r4, r5, pc}
 80080c8:	8993      	ldrh	r3, [r2, #12]
 80080ca:	f023 0320 	bic.w	r3, r3, #32
 80080ce:	8193      	strh	r3, [r2, #12]
 80080d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80080d2:	6852      	ldr	r2, [r2, #4]
 80080d4:	b2cd      	uxtb	r5, r1
 80080d6:	b18b      	cbz	r3, 80080fc <_sungetc_r+0x44>
 80080d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80080da:	4293      	cmp	r3, r2
 80080dc:	dd08      	ble.n	80080f0 <_sungetc_r+0x38>
 80080de:	6823      	ldr	r3, [r4, #0]
 80080e0:	1e5a      	subs	r2, r3, #1
 80080e2:	6022      	str	r2, [r4, #0]
 80080e4:	f803 5c01 	strb.w	r5, [r3, #-1]
 80080e8:	6863      	ldr	r3, [r4, #4]
 80080ea:	3301      	adds	r3, #1
 80080ec:	6063      	str	r3, [r4, #4]
 80080ee:	e7e9      	b.n	80080c4 <_sungetc_r+0xc>
 80080f0:	4621      	mov	r1, r4
 80080f2:	f000 fbf1 	bl	80088d8 <__submore>
 80080f6:	2800      	cmp	r0, #0
 80080f8:	d0f1      	beq.n	80080de <_sungetc_r+0x26>
 80080fa:	e7e1      	b.n	80080c0 <_sungetc_r+0x8>
 80080fc:	6921      	ldr	r1, [r4, #16]
 80080fe:	6823      	ldr	r3, [r4, #0]
 8008100:	b151      	cbz	r1, 8008118 <_sungetc_r+0x60>
 8008102:	4299      	cmp	r1, r3
 8008104:	d208      	bcs.n	8008118 <_sungetc_r+0x60>
 8008106:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800810a:	42a9      	cmp	r1, r5
 800810c:	d104      	bne.n	8008118 <_sungetc_r+0x60>
 800810e:	3b01      	subs	r3, #1
 8008110:	3201      	adds	r2, #1
 8008112:	6023      	str	r3, [r4, #0]
 8008114:	6062      	str	r2, [r4, #4]
 8008116:	e7d5      	b.n	80080c4 <_sungetc_r+0xc>
 8008118:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800811c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008120:	6363      	str	r3, [r4, #52]	; 0x34
 8008122:	2303      	movs	r3, #3
 8008124:	63a3      	str	r3, [r4, #56]	; 0x38
 8008126:	4623      	mov	r3, r4
 8008128:	f803 5f46 	strb.w	r5, [r3, #70]!
 800812c:	6023      	str	r3, [r4, #0]
 800812e:	2301      	movs	r3, #1
 8008130:	e7dc      	b.n	80080ec <_sungetc_r+0x34>

08008132 <__ssrefill_r>:
 8008132:	b510      	push	{r4, lr}
 8008134:	460c      	mov	r4, r1
 8008136:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008138:	b169      	cbz	r1, 8008156 <__ssrefill_r+0x24>
 800813a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800813e:	4299      	cmp	r1, r3
 8008140:	d001      	beq.n	8008146 <__ssrefill_r+0x14>
 8008142:	f7ff fd7d 	bl	8007c40 <_free_r>
 8008146:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008148:	6063      	str	r3, [r4, #4]
 800814a:	2000      	movs	r0, #0
 800814c:	6360      	str	r0, [r4, #52]	; 0x34
 800814e:	b113      	cbz	r3, 8008156 <__ssrefill_r+0x24>
 8008150:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008152:	6023      	str	r3, [r4, #0]
 8008154:	bd10      	pop	{r4, pc}
 8008156:	6923      	ldr	r3, [r4, #16]
 8008158:	6023      	str	r3, [r4, #0]
 800815a:	2300      	movs	r3, #0
 800815c:	6063      	str	r3, [r4, #4]
 800815e:	89a3      	ldrh	r3, [r4, #12]
 8008160:	f043 0320 	orr.w	r3, r3, #32
 8008164:	81a3      	strh	r3, [r4, #12]
 8008166:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800816a:	e7f3      	b.n	8008154 <__ssrefill_r+0x22>

0800816c <__ssvfiscanf_r>:
 800816c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008170:	460c      	mov	r4, r1
 8008172:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8008176:	2100      	movs	r1, #0
 8008178:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800817c:	49a6      	ldr	r1, [pc, #664]	; (8008418 <__ssvfiscanf_r+0x2ac>)
 800817e:	91a0      	str	r1, [sp, #640]	; 0x280
 8008180:	f10d 0804 	add.w	r8, sp, #4
 8008184:	49a5      	ldr	r1, [pc, #660]	; (800841c <__ssvfiscanf_r+0x2b0>)
 8008186:	4fa6      	ldr	r7, [pc, #664]	; (8008420 <__ssvfiscanf_r+0x2b4>)
 8008188:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8008424 <__ssvfiscanf_r+0x2b8>
 800818c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8008190:	4606      	mov	r6, r0
 8008192:	91a1      	str	r1, [sp, #644]	; 0x284
 8008194:	9300      	str	r3, [sp, #0]
 8008196:	7813      	ldrb	r3, [r2, #0]
 8008198:	2b00      	cmp	r3, #0
 800819a:	f000 815a 	beq.w	8008452 <__ssvfiscanf_r+0x2e6>
 800819e:	5dd9      	ldrb	r1, [r3, r7]
 80081a0:	f011 0108 	ands.w	r1, r1, #8
 80081a4:	f102 0501 	add.w	r5, r2, #1
 80081a8:	d019      	beq.n	80081de <__ssvfiscanf_r+0x72>
 80081aa:	6863      	ldr	r3, [r4, #4]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	dd0f      	ble.n	80081d0 <__ssvfiscanf_r+0x64>
 80081b0:	6823      	ldr	r3, [r4, #0]
 80081b2:	781a      	ldrb	r2, [r3, #0]
 80081b4:	5cba      	ldrb	r2, [r7, r2]
 80081b6:	0712      	lsls	r2, r2, #28
 80081b8:	d401      	bmi.n	80081be <__ssvfiscanf_r+0x52>
 80081ba:	462a      	mov	r2, r5
 80081bc:	e7eb      	b.n	8008196 <__ssvfiscanf_r+0x2a>
 80081be:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80081c0:	3201      	adds	r2, #1
 80081c2:	9245      	str	r2, [sp, #276]	; 0x114
 80081c4:	6862      	ldr	r2, [r4, #4]
 80081c6:	3301      	adds	r3, #1
 80081c8:	3a01      	subs	r2, #1
 80081ca:	6062      	str	r2, [r4, #4]
 80081cc:	6023      	str	r3, [r4, #0]
 80081ce:	e7ec      	b.n	80081aa <__ssvfiscanf_r+0x3e>
 80081d0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80081d2:	4621      	mov	r1, r4
 80081d4:	4630      	mov	r0, r6
 80081d6:	4798      	blx	r3
 80081d8:	2800      	cmp	r0, #0
 80081da:	d0e9      	beq.n	80081b0 <__ssvfiscanf_r+0x44>
 80081dc:	e7ed      	b.n	80081ba <__ssvfiscanf_r+0x4e>
 80081de:	2b25      	cmp	r3, #37	; 0x25
 80081e0:	d012      	beq.n	8008208 <__ssvfiscanf_r+0x9c>
 80081e2:	469a      	mov	sl, r3
 80081e4:	6863      	ldr	r3, [r4, #4]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	f340 8091 	ble.w	800830e <__ssvfiscanf_r+0x1a2>
 80081ec:	6822      	ldr	r2, [r4, #0]
 80081ee:	7813      	ldrb	r3, [r2, #0]
 80081f0:	4553      	cmp	r3, sl
 80081f2:	f040 812e 	bne.w	8008452 <__ssvfiscanf_r+0x2e6>
 80081f6:	6863      	ldr	r3, [r4, #4]
 80081f8:	3b01      	subs	r3, #1
 80081fa:	6063      	str	r3, [r4, #4]
 80081fc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80081fe:	3201      	adds	r2, #1
 8008200:	3301      	adds	r3, #1
 8008202:	6022      	str	r2, [r4, #0]
 8008204:	9345      	str	r3, [sp, #276]	; 0x114
 8008206:	e7d8      	b.n	80081ba <__ssvfiscanf_r+0x4e>
 8008208:	9141      	str	r1, [sp, #260]	; 0x104
 800820a:	9143      	str	r1, [sp, #268]	; 0x10c
 800820c:	7853      	ldrb	r3, [r2, #1]
 800820e:	2b2a      	cmp	r3, #42	; 0x2a
 8008210:	bf02      	ittt	eq
 8008212:	2310      	moveq	r3, #16
 8008214:	1c95      	addeq	r5, r2, #2
 8008216:	9341      	streq	r3, [sp, #260]	; 0x104
 8008218:	220a      	movs	r2, #10
 800821a:	46aa      	mov	sl, r5
 800821c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8008220:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8008224:	2b09      	cmp	r3, #9
 8008226:	d91d      	bls.n	8008264 <__ssvfiscanf_r+0xf8>
 8008228:	487e      	ldr	r0, [pc, #504]	; (8008424 <__ssvfiscanf_r+0x2b8>)
 800822a:	2203      	movs	r2, #3
 800822c:	f7f7 fff0 	bl	8000210 <memchr>
 8008230:	b140      	cbz	r0, 8008244 <__ssvfiscanf_r+0xd8>
 8008232:	2301      	movs	r3, #1
 8008234:	eba0 0009 	sub.w	r0, r0, r9
 8008238:	fa03 f000 	lsl.w	r0, r3, r0
 800823c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800823e:	4318      	orrs	r0, r3
 8008240:	9041      	str	r0, [sp, #260]	; 0x104
 8008242:	4655      	mov	r5, sl
 8008244:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008248:	2b78      	cmp	r3, #120	; 0x78
 800824a:	d806      	bhi.n	800825a <__ssvfiscanf_r+0xee>
 800824c:	2b57      	cmp	r3, #87	; 0x57
 800824e:	d810      	bhi.n	8008272 <__ssvfiscanf_r+0x106>
 8008250:	2b25      	cmp	r3, #37	; 0x25
 8008252:	d0c6      	beq.n	80081e2 <__ssvfiscanf_r+0x76>
 8008254:	d856      	bhi.n	8008304 <__ssvfiscanf_r+0x198>
 8008256:	2b00      	cmp	r3, #0
 8008258:	d064      	beq.n	8008324 <__ssvfiscanf_r+0x1b8>
 800825a:	2303      	movs	r3, #3
 800825c:	9347      	str	r3, [sp, #284]	; 0x11c
 800825e:	230a      	movs	r3, #10
 8008260:	9342      	str	r3, [sp, #264]	; 0x108
 8008262:	e071      	b.n	8008348 <__ssvfiscanf_r+0x1dc>
 8008264:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8008266:	fb02 1103 	mla	r1, r2, r3, r1
 800826a:	3930      	subs	r1, #48	; 0x30
 800826c:	9143      	str	r1, [sp, #268]	; 0x10c
 800826e:	4655      	mov	r5, sl
 8008270:	e7d3      	b.n	800821a <__ssvfiscanf_r+0xae>
 8008272:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8008276:	2a20      	cmp	r2, #32
 8008278:	d8ef      	bhi.n	800825a <__ssvfiscanf_r+0xee>
 800827a:	a101      	add	r1, pc, #4	; (adr r1, 8008280 <__ssvfiscanf_r+0x114>)
 800827c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008280:	08008333 	.word	0x08008333
 8008284:	0800825b 	.word	0x0800825b
 8008288:	0800825b 	.word	0x0800825b
 800828c:	08008391 	.word	0x08008391
 8008290:	0800825b 	.word	0x0800825b
 8008294:	0800825b 	.word	0x0800825b
 8008298:	0800825b 	.word	0x0800825b
 800829c:	0800825b 	.word	0x0800825b
 80082a0:	0800825b 	.word	0x0800825b
 80082a4:	0800825b 	.word	0x0800825b
 80082a8:	0800825b 	.word	0x0800825b
 80082ac:	080083a7 	.word	0x080083a7
 80082b0:	0800837d 	.word	0x0800837d
 80082b4:	0800830b 	.word	0x0800830b
 80082b8:	0800830b 	.word	0x0800830b
 80082bc:	0800830b 	.word	0x0800830b
 80082c0:	0800825b 	.word	0x0800825b
 80082c4:	08008381 	.word	0x08008381
 80082c8:	0800825b 	.word	0x0800825b
 80082cc:	0800825b 	.word	0x0800825b
 80082d0:	0800825b 	.word	0x0800825b
 80082d4:	0800825b 	.word	0x0800825b
 80082d8:	080083b7 	.word	0x080083b7
 80082dc:	08008389 	.word	0x08008389
 80082e0:	0800832b 	.word	0x0800832b
 80082e4:	0800825b 	.word	0x0800825b
 80082e8:	0800825b 	.word	0x0800825b
 80082ec:	080083b3 	.word	0x080083b3
 80082f0:	0800825b 	.word	0x0800825b
 80082f4:	0800837d 	.word	0x0800837d
 80082f8:	0800825b 	.word	0x0800825b
 80082fc:	0800825b 	.word	0x0800825b
 8008300:	08008333 	.word	0x08008333
 8008304:	3b45      	subs	r3, #69	; 0x45
 8008306:	2b02      	cmp	r3, #2
 8008308:	d8a7      	bhi.n	800825a <__ssvfiscanf_r+0xee>
 800830a:	2305      	movs	r3, #5
 800830c:	e01b      	b.n	8008346 <__ssvfiscanf_r+0x1da>
 800830e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008310:	4621      	mov	r1, r4
 8008312:	4630      	mov	r0, r6
 8008314:	4798      	blx	r3
 8008316:	2800      	cmp	r0, #0
 8008318:	f43f af68 	beq.w	80081ec <__ssvfiscanf_r+0x80>
 800831c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800831e:	2800      	cmp	r0, #0
 8008320:	f040 808d 	bne.w	800843e <__ssvfiscanf_r+0x2d2>
 8008324:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008328:	e08f      	b.n	800844a <__ssvfiscanf_r+0x2de>
 800832a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800832c:	f042 0220 	orr.w	r2, r2, #32
 8008330:	9241      	str	r2, [sp, #260]	; 0x104
 8008332:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008334:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008338:	9241      	str	r2, [sp, #260]	; 0x104
 800833a:	2210      	movs	r2, #16
 800833c:	2b6f      	cmp	r3, #111	; 0x6f
 800833e:	9242      	str	r2, [sp, #264]	; 0x108
 8008340:	bf34      	ite	cc
 8008342:	2303      	movcc	r3, #3
 8008344:	2304      	movcs	r3, #4
 8008346:	9347      	str	r3, [sp, #284]	; 0x11c
 8008348:	6863      	ldr	r3, [r4, #4]
 800834a:	2b00      	cmp	r3, #0
 800834c:	dd42      	ble.n	80083d4 <__ssvfiscanf_r+0x268>
 800834e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008350:	0659      	lsls	r1, r3, #25
 8008352:	d404      	bmi.n	800835e <__ssvfiscanf_r+0x1f2>
 8008354:	6823      	ldr	r3, [r4, #0]
 8008356:	781a      	ldrb	r2, [r3, #0]
 8008358:	5cba      	ldrb	r2, [r7, r2]
 800835a:	0712      	lsls	r2, r2, #28
 800835c:	d441      	bmi.n	80083e2 <__ssvfiscanf_r+0x276>
 800835e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8008360:	2b02      	cmp	r3, #2
 8008362:	dc50      	bgt.n	8008406 <__ssvfiscanf_r+0x29a>
 8008364:	466b      	mov	r3, sp
 8008366:	4622      	mov	r2, r4
 8008368:	a941      	add	r1, sp, #260	; 0x104
 800836a:	4630      	mov	r0, r6
 800836c:	f000 f876 	bl	800845c <_scanf_chars>
 8008370:	2801      	cmp	r0, #1
 8008372:	d06e      	beq.n	8008452 <__ssvfiscanf_r+0x2e6>
 8008374:	2802      	cmp	r0, #2
 8008376:	f47f af20 	bne.w	80081ba <__ssvfiscanf_r+0x4e>
 800837a:	e7cf      	b.n	800831c <__ssvfiscanf_r+0x1b0>
 800837c:	220a      	movs	r2, #10
 800837e:	e7dd      	b.n	800833c <__ssvfiscanf_r+0x1d0>
 8008380:	2300      	movs	r3, #0
 8008382:	9342      	str	r3, [sp, #264]	; 0x108
 8008384:	2303      	movs	r3, #3
 8008386:	e7de      	b.n	8008346 <__ssvfiscanf_r+0x1da>
 8008388:	2308      	movs	r3, #8
 800838a:	9342      	str	r3, [sp, #264]	; 0x108
 800838c:	2304      	movs	r3, #4
 800838e:	e7da      	b.n	8008346 <__ssvfiscanf_r+0x1da>
 8008390:	4629      	mov	r1, r5
 8008392:	4640      	mov	r0, r8
 8008394:	f000 f9e0 	bl	8008758 <__sccl>
 8008398:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800839a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800839e:	9341      	str	r3, [sp, #260]	; 0x104
 80083a0:	4605      	mov	r5, r0
 80083a2:	2301      	movs	r3, #1
 80083a4:	e7cf      	b.n	8008346 <__ssvfiscanf_r+0x1da>
 80083a6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80083a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083ac:	9341      	str	r3, [sp, #260]	; 0x104
 80083ae:	2300      	movs	r3, #0
 80083b0:	e7c9      	b.n	8008346 <__ssvfiscanf_r+0x1da>
 80083b2:	2302      	movs	r3, #2
 80083b4:	e7c7      	b.n	8008346 <__ssvfiscanf_r+0x1da>
 80083b6:	9841      	ldr	r0, [sp, #260]	; 0x104
 80083b8:	06c3      	lsls	r3, r0, #27
 80083ba:	f53f aefe 	bmi.w	80081ba <__ssvfiscanf_r+0x4e>
 80083be:	9b00      	ldr	r3, [sp, #0]
 80083c0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80083c2:	1d19      	adds	r1, r3, #4
 80083c4:	9100      	str	r1, [sp, #0]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f010 0f01 	tst.w	r0, #1
 80083cc:	bf14      	ite	ne
 80083ce:	801a      	strhne	r2, [r3, #0]
 80083d0:	601a      	streq	r2, [r3, #0]
 80083d2:	e6f2      	b.n	80081ba <__ssvfiscanf_r+0x4e>
 80083d4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80083d6:	4621      	mov	r1, r4
 80083d8:	4630      	mov	r0, r6
 80083da:	4798      	blx	r3
 80083dc:	2800      	cmp	r0, #0
 80083de:	d0b6      	beq.n	800834e <__ssvfiscanf_r+0x1e2>
 80083e0:	e79c      	b.n	800831c <__ssvfiscanf_r+0x1b0>
 80083e2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80083e4:	3201      	adds	r2, #1
 80083e6:	9245      	str	r2, [sp, #276]	; 0x114
 80083e8:	6862      	ldr	r2, [r4, #4]
 80083ea:	3a01      	subs	r2, #1
 80083ec:	2a00      	cmp	r2, #0
 80083ee:	6062      	str	r2, [r4, #4]
 80083f0:	dd02      	ble.n	80083f8 <__ssvfiscanf_r+0x28c>
 80083f2:	3301      	adds	r3, #1
 80083f4:	6023      	str	r3, [r4, #0]
 80083f6:	e7ad      	b.n	8008354 <__ssvfiscanf_r+0x1e8>
 80083f8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80083fa:	4621      	mov	r1, r4
 80083fc:	4630      	mov	r0, r6
 80083fe:	4798      	blx	r3
 8008400:	2800      	cmp	r0, #0
 8008402:	d0a7      	beq.n	8008354 <__ssvfiscanf_r+0x1e8>
 8008404:	e78a      	b.n	800831c <__ssvfiscanf_r+0x1b0>
 8008406:	2b04      	cmp	r3, #4
 8008408:	dc0e      	bgt.n	8008428 <__ssvfiscanf_r+0x2bc>
 800840a:	466b      	mov	r3, sp
 800840c:	4622      	mov	r2, r4
 800840e:	a941      	add	r1, sp, #260	; 0x104
 8008410:	4630      	mov	r0, r6
 8008412:	f000 f87d 	bl	8008510 <_scanf_i>
 8008416:	e7ab      	b.n	8008370 <__ssvfiscanf_r+0x204>
 8008418:	080080b9 	.word	0x080080b9
 800841c:	08008133 	.word	0x08008133
 8008420:	080095d1 	.word	0x080095d1
 8008424:	0800993a 	.word	0x0800993a
 8008428:	4b0b      	ldr	r3, [pc, #44]	; (8008458 <__ssvfiscanf_r+0x2ec>)
 800842a:	2b00      	cmp	r3, #0
 800842c:	f43f aec5 	beq.w	80081ba <__ssvfiscanf_r+0x4e>
 8008430:	466b      	mov	r3, sp
 8008432:	4622      	mov	r2, r4
 8008434:	a941      	add	r1, sp, #260	; 0x104
 8008436:	4630      	mov	r0, r6
 8008438:	f7fc fb8a 	bl	8004b50 <_scanf_float>
 800843c:	e798      	b.n	8008370 <__ssvfiscanf_r+0x204>
 800843e:	89a3      	ldrh	r3, [r4, #12]
 8008440:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008444:	bf18      	it	ne
 8008446:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800844a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800844e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008452:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008454:	e7f9      	b.n	800844a <__ssvfiscanf_r+0x2de>
 8008456:	bf00      	nop
 8008458:	08004b51 	.word	0x08004b51

0800845c <_scanf_chars>:
 800845c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008460:	4615      	mov	r5, r2
 8008462:	688a      	ldr	r2, [r1, #8]
 8008464:	4680      	mov	r8, r0
 8008466:	460c      	mov	r4, r1
 8008468:	b932      	cbnz	r2, 8008478 <_scanf_chars+0x1c>
 800846a:	698a      	ldr	r2, [r1, #24]
 800846c:	2a00      	cmp	r2, #0
 800846e:	bf0c      	ite	eq
 8008470:	2201      	moveq	r2, #1
 8008472:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8008476:	608a      	str	r2, [r1, #8]
 8008478:	6822      	ldr	r2, [r4, #0]
 800847a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800850c <_scanf_chars+0xb0>
 800847e:	06d1      	lsls	r1, r2, #27
 8008480:	bf5f      	itttt	pl
 8008482:	681a      	ldrpl	r2, [r3, #0]
 8008484:	1d11      	addpl	r1, r2, #4
 8008486:	6019      	strpl	r1, [r3, #0]
 8008488:	6816      	ldrpl	r6, [r2, #0]
 800848a:	2700      	movs	r7, #0
 800848c:	69a0      	ldr	r0, [r4, #24]
 800848e:	b188      	cbz	r0, 80084b4 <_scanf_chars+0x58>
 8008490:	2801      	cmp	r0, #1
 8008492:	d107      	bne.n	80084a4 <_scanf_chars+0x48>
 8008494:	682a      	ldr	r2, [r5, #0]
 8008496:	7811      	ldrb	r1, [r2, #0]
 8008498:	6962      	ldr	r2, [r4, #20]
 800849a:	5c52      	ldrb	r2, [r2, r1]
 800849c:	b952      	cbnz	r2, 80084b4 <_scanf_chars+0x58>
 800849e:	2f00      	cmp	r7, #0
 80084a0:	d031      	beq.n	8008506 <_scanf_chars+0xaa>
 80084a2:	e022      	b.n	80084ea <_scanf_chars+0x8e>
 80084a4:	2802      	cmp	r0, #2
 80084a6:	d120      	bne.n	80084ea <_scanf_chars+0x8e>
 80084a8:	682b      	ldr	r3, [r5, #0]
 80084aa:	781b      	ldrb	r3, [r3, #0]
 80084ac:	f813 3009 	ldrb.w	r3, [r3, r9]
 80084b0:	071b      	lsls	r3, r3, #28
 80084b2:	d41a      	bmi.n	80084ea <_scanf_chars+0x8e>
 80084b4:	6823      	ldr	r3, [r4, #0]
 80084b6:	06da      	lsls	r2, r3, #27
 80084b8:	bf5e      	ittt	pl
 80084ba:	682b      	ldrpl	r3, [r5, #0]
 80084bc:	781b      	ldrbpl	r3, [r3, #0]
 80084be:	f806 3b01 	strbpl.w	r3, [r6], #1
 80084c2:	682a      	ldr	r2, [r5, #0]
 80084c4:	686b      	ldr	r3, [r5, #4]
 80084c6:	3201      	adds	r2, #1
 80084c8:	602a      	str	r2, [r5, #0]
 80084ca:	68a2      	ldr	r2, [r4, #8]
 80084cc:	3b01      	subs	r3, #1
 80084ce:	3a01      	subs	r2, #1
 80084d0:	606b      	str	r3, [r5, #4]
 80084d2:	3701      	adds	r7, #1
 80084d4:	60a2      	str	r2, [r4, #8]
 80084d6:	b142      	cbz	r2, 80084ea <_scanf_chars+0x8e>
 80084d8:	2b00      	cmp	r3, #0
 80084da:	dcd7      	bgt.n	800848c <_scanf_chars+0x30>
 80084dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80084e0:	4629      	mov	r1, r5
 80084e2:	4640      	mov	r0, r8
 80084e4:	4798      	blx	r3
 80084e6:	2800      	cmp	r0, #0
 80084e8:	d0d0      	beq.n	800848c <_scanf_chars+0x30>
 80084ea:	6823      	ldr	r3, [r4, #0]
 80084ec:	f013 0310 	ands.w	r3, r3, #16
 80084f0:	d105      	bne.n	80084fe <_scanf_chars+0xa2>
 80084f2:	68e2      	ldr	r2, [r4, #12]
 80084f4:	3201      	adds	r2, #1
 80084f6:	60e2      	str	r2, [r4, #12]
 80084f8:	69a2      	ldr	r2, [r4, #24]
 80084fa:	b102      	cbz	r2, 80084fe <_scanf_chars+0xa2>
 80084fc:	7033      	strb	r3, [r6, #0]
 80084fe:	6923      	ldr	r3, [r4, #16]
 8008500:	443b      	add	r3, r7
 8008502:	6123      	str	r3, [r4, #16]
 8008504:	2000      	movs	r0, #0
 8008506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800850a:	bf00      	nop
 800850c:	080095d1 	.word	0x080095d1

08008510 <_scanf_i>:
 8008510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008514:	4698      	mov	r8, r3
 8008516:	4b76      	ldr	r3, [pc, #472]	; (80086f0 <_scanf_i+0x1e0>)
 8008518:	460c      	mov	r4, r1
 800851a:	4682      	mov	sl, r0
 800851c:	4616      	mov	r6, r2
 800851e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008522:	b087      	sub	sp, #28
 8008524:	ab03      	add	r3, sp, #12
 8008526:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800852a:	4b72      	ldr	r3, [pc, #456]	; (80086f4 <_scanf_i+0x1e4>)
 800852c:	69a1      	ldr	r1, [r4, #24]
 800852e:	4a72      	ldr	r2, [pc, #456]	; (80086f8 <_scanf_i+0x1e8>)
 8008530:	2903      	cmp	r1, #3
 8008532:	bf18      	it	ne
 8008534:	461a      	movne	r2, r3
 8008536:	68a3      	ldr	r3, [r4, #8]
 8008538:	9201      	str	r2, [sp, #4]
 800853a:	1e5a      	subs	r2, r3, #1
 800853c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008540:	bf88      	it	hi
 8008542:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008546:	4627      	mov	r7, r4
 8008548:	bf82      	ittt	hi
 800854a:	eb03 0905 	addhi.w	r9, r3, r5
 800854e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008552:	60a3      	strhi	r3, [r4, #8]
 8008554:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008558:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800855c:	bf98      	it	ls
 800855e:	f04f 0900 	movls.w	r9, #0
 8008562:	6023      	str	r3, [r4, #0]
 8008564:	463d      	mov	r5, r7
 8008566:	f04f 0b00 	mov.w	fp, #0
 800856a:	6831      	ldr	r1, [r6, #0]
 800856c:	ab03      	add	r3, sp, #12
 800856e:	7809      	ldrb	r1, [r1, #0]
 8008570:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008574:	2202      	movs	r2, #2
 8008576:	f7f7 fe4b 	bl	8000210 <memchr>
 800857a:	b328      	cbz	r0, 80085c8 <_scanf_i+0xb8>
 800857c:	f1bb 0f01 	cmp.w	fp, #1
 8008580:	d159      	bne.n	8008636 <_scanf_i+0x126>
 8008582:	6862      	ldr	r2, [r4, #4]
 8008584:	b92a      	cbnz	r2, 8008592 <_scanf_i+0x82>
 8008586:	6822      	ldr	r2, [r4, #0]
 8008588:	2308      	movs	r3, #8
 800858a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800858e:	6063      	str	r3, [r4, #4]
 8008590:	6022      	str	r2, [r4, #0]
 8008592:	6822      	ldr	r2, [r4, #0]
 8008594:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8008598:	6022      	str	r2, [r4, #0]
 800859a:	68a2      	ldr	r2, [r4, #8]
 800859c:	1e51      	subs	r1, r2, #1
 800859e:	60a1      	str	r1, [r4, #8]
 80085a0:	b192      	cbz	r2, 80085c8 <_scanf_i+0xb8>
 80085a2:	6832      	ldr	r2, [r6, #0]
 80085a4:	1c51      	adds	r1, r2, #1
 80085a6:	6031      	str	r1, [r6, #0]
 80085a8:	7812      	ldrb	r2, [r2, #0]
 80085aa:	f805 2b01 	strb.w	r2, [r5], #1
 80085ae:	6872      	ldr	r2, [r6, #4]
 80085b0:	3a01      	subs	r2, #1
 80085b2:	2a00      	cmp	r2, #0
 80085b4:	6072      	str	r2, [r6, #4]
 80085b6:	dc07      	bgt.n	80085c8 <_scanf_i+0xb8>
 80085b8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80085bc:	4631      	mov	r1, r6
 80085be:	4650      	mov	r0, sl
 80085c0:	4790      	blx	r2
 80085c2:	2800      	cmp	r0, #0
 80085c4:	f040 8085 	bne.w	80086d2 <_scanf_i+0x1c2>
 80085c8:	f10b 0b01 	add.w	fp, fp, #1
 80085cc:	f1bb 0f03 	cmp.w	fp, #3
 80085d0:	d1cb      	bne.n	800856a <_scanf_i+0x5a>
 80085d2:	6863      	ldr	r3, [r4, #4]
 80085d4:	b90b      	cbnz	r3, 80085da <_scanf_i+0xca>
 80085d6:	230a      	movs	r3, #10
 80085d8:	6063      	str	r3, [r4, #4]
 80085da:	6863      	ldr	r3, [r4, #4]
 80085dc:	4947      	ldr	r1, [pc, #284]	; (80086fc <_scanf_i+0x1ec>)
 80085de:	6960      	ldr	r0, [r4, #20]
 80085e0:	1ac9      	subs	r1, r1, r3
 80085e2:	f000 f8b9 	bl	8008758 <__sccl>
 80085e6:	f04f 0b00 	mov.w	fp, #0
 80085ea:	68a3      	ldr	r3, [r4, #8]
 80085ec:	6822      	ldr	r2, [r4, #0]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d03d      	beq.n	800866e <_scanf_i+0x15e>
 80085f2:	6831      	ldr	r1, [r6, #0]
 80085f4:	6960      	ldr	r0, [r4, #20]
 80085f6:	f891 c000 	ldrb.w	ip, [r1]
 80085fa:	f810 000c 	ldrb.w	r0, [r0, ip]
 80085fe:	2800      	cmp	r0, #0
 8008600:	d035      	beq.n	800866e <_scanf_i+0x15e>
 8008602:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8008606:	d124      	bne.n	8008652 <_scanf_i+0x142>
 8008608:	0510      	lsls	r0, r2, #20
 800860a:	d522      	bpl.n	8008652 <_scanf_i+0x142>
 800860c:	f10b 0b01 	add.w	fp, fp, #1
 8008610:	f1b9 0f00 	cmp.w	r9, #0
 8008614:	d003      	beq.n	800861e <_scanf_i+0x10e>
 8008616:	3301      	adds	r3, #1
 8008618:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800861c:	60a3      	str	r3, [r4, #8]
 800861e:	6873      	ldr	r3, [r6, #4]
 8008620:	3b01      	subs	r3, #1
 8008622:	2b00      	cmp	r3, #0
 8008624:	6073      	str	r3, [r6, #4]
 8008626:	dd1b      	ble.n	8008660 <_scanf_i+0x150>
 8008628:	6833      	ldr	r3, [r6, #0]
 800862a:	3301      	adds	r3, #1
 800862c:	6033      	str	r3, [r6, #0]
 800862e:	68a3      	ldr	r3, [r4, #8]
 8008630:	3b01      	subs	r3, #1
 8008632:	60a3      	str	r3, [r4, #8]
 8008634:	e7d9      	b.n	80085ea <_scanf_i+0xda>
 8008636:	f1bb 0f02 	cmp.w	fp, #2
 800863a:	d1ae      	bne.n	800859a <_scanf_i+0x8a>
 800863c:	6822      	ldr	r2, [r4, #0]
 800863e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8008642:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008646:	d1bf      	bne.n	80085c8 <_scanf_i+0xb8>
 8008648:	2310      	movs	r3, #16
 800864a:	6063      	str	r3, [r4, #4]
 800864c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008650:	e7a2      	b.n	8008598 <_scanf_i+0x88>
 8008652:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8008656:	6022      	str	r2, [r4, #0]
 8008658:	780b      	ldrb	r3, [r1, #0]
 800865a:	f805 3b01 	strb.w	r3, [r5], #1
 800865e:	e7de      	b.n	800861e <_scanf_i+0x10e>
 8008660:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008664:	4631      	mov	r1, r6
 8008666:	4650      	mov	r0, sl
 8008668:	4798      	blx	r3
 800866a:	2800      	cmp	r0, #0
 800866c:	d0df      	beq.n	800862e <_scanf_i+0x11e>
 800866e:	6823      	ldr	r3, [r4, #0]
 8008670:	05db      	lsls	r3, r3, #23
 8008672:	d50d      	bpl.n	8008690 <_scanf_i+0x180>
 8008674:	42bd      	cmp	r5, r7
 8008676:	d909      	bls.n	800868c <_scanf_i+0x17c>
 8008678:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800867c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008680:	4632      	mov	r2, r6
 8008682:	4650      	mov	r0, sl
 8008684:	4798      	blx	r3
 8008686:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800868a:	464d      	mov	r5, r9
 800868c:	42bd      	cmp	r5, r7
 800868e:	d02d      	beq.n	80086ec <_scanf_i+0x1dc>
 8008690:	6822      	ldr	r2, [r4, #0]
 8008692:	f012 0210 	ands.w	r2, r2, #16
 8008696:	d113      	bne.n	80086c0 <_scanf_i+0x1b0>
 8008698:	702a      	strb	r2, [r5, #0]
 800869a:	6863      	ldr	r3, [r4, #4]
 800869c:	9e01      	ldr	r6, [sp, #4]
 800869e:	4639      	mov	r1, r7
 80086a0:	4650      	mov	r0, sl
 80086a2:	47b0      	blx	r6
 80086a4:	6821      	ldr	r1, [r4, #0]
 80086a6:	f8d8 3000 	ldr.w	r3, [r8]
 80086aa:	f011 0f20 	tst.w	r1, #32
 80086ae:	d013      	beq.n	80086d8 <_scanf_i+0x1c8>
 80086b0:	1d1a      	adds	r2, r3, #4
 80086b2:	f8c8 2000 	str.w	r2, [r8]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	6018      	str	r0, [r3, #0]
 80086ba:	68e3      	ldr	r3, [r4, #12]
 80086bc:	3301      	adds	r3, #1
 80086be:	60e3      	str	r3, [r4, #12]
 80086c0:	1bed      	subs	r5, r5, r7
 80086c2:	44ab      	add	fp, r5
 80086c4:	6925      	ldr	r5, [r4, #16]
 80086c6:	445d      	add	r5, fp
 80086c8:	6125      	str	r5, [r4, #16]
 80086ca:	2000      	movs	r0, #0
 80086cc:	b007      	add	sp, #28
 80086ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086d2:	f04f 0b00 	mov.w	fp, #0
 80086d6:	e7ca      	b.n	800866e <_scanf_i+0x15e>
 80086d8:	1d1a      	adds	r2, r3, #4
 80086da:	f8c8 2000 	str.w	r2, [r8]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f011 0f01 	tst.w	r1, #1
 80086e4:	bf14      	ite	ne
 80086e6:	8018      	strhne	r0, [r3, #0]
 80086e8:	6018      	streq	r0, [r3, #0]
 80086ea:	e7e6      	b.n	80086ba <_scanf_i+0x1aa>
 80086ec:	2001      	movs	r0, #1
 80086ee:	e7ed      	b.n	80086cc <_scanf_i+0x1bc>
 80086f0:	08009534 	.word	0x08009534
 80086f4:	080088d5 	.word	0x080088d5
 80086f8:	08005df5 	.word	0x08005df5
 80086fc:	0800995e 	.word	0x0800995e

08008700 <_read_r>:
 8008700:	b538      	push	{r3, r4, r5, lr}
 8008702:	4d07      	ldr	r5, [pc, #28]	; (8008720 <_read_r+0x20>)
 8008704:	4604      	mov	r4, r0
 8008706:	4608      	mov	r0, r1
 8008708:	4611      	mov	r1, r2
 800870a:	2200      	movs	r2, #0
 800870c:	602a      	str	r2, [r5, #0]
 800870e:	461a      	mov	r2, r3
 8008710:	f7f9 fa86 	bl	8001c20 <_read>
 8008714:	1c43      	adds	r3, r0, #1
 8008716:	d102      	bne.n	800871e <_read_r+0x1e>
 8008718:	682b      	ldr	r3, [r5, #0]
 800871a:	b103      	cbz	r3, 800871e <_read_r+0x1e>
 800871c:	6023      	str	r3, [r4, #0]
 800871e:	bd38      	pop	{r3, r4, r5, pc}
 8008720:	20000630 	.word	0x20000630
 8008724:	00000000 	.word	0x00000000

08008728 <nan>:
 8008728:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008730 <nan+0x8>
 800872c:	4770      	bx	lr
 800872e:	bf00      	nop
 8008730:	00000000 	.word	0x00000000
 8008734:	7ff80000 	.word	0x7ff80000

08008738 <_sbrk_r>:
 8008738:	b538      	push	{r3, r4, r5, lr}
 800873a:	4d06      	ldr	r5, [pc, #24]	; (8008754 <_sbrk_r+0x1c>)
 800873c:	2300      	movs	r3, #0
 800873e:	4604      	mov	r4, r0
 8008740:	4608      	mov	r0, r1
 8008742:	602b      	str	r3, [r5, #0]
 8008744:	f7f9 fada 	bl	8001cfc <_sbrk>
 8008748:	1c43      	adds	r3, r0, #1
 800874a:	d102      	bne.n	8008752 <_sbrk_r+0x1a>
 800874c:	682b      	ldr	r3, [r5, #0]
 800874e:	b103      	cbz	r3, 8008752 <_sbrk_r+0x1a>
 8008750:	6023      	str	r3, [r4, #0]
 8008752:	bd38      	pop	{r3, r4, r5, pc}
 8008754:	20000630 	.word	0x20000630

08008758 <__sccl>:
 8008758:	b570      	push	{r4, r5, r6, lr}
 800875a:	780b      	ldrb	r3, [r1, #0]
 800875c:	4604      	mov	r4, r0
 800875e:	2b5e      	cmp	r3, #94	; 0x5e
 8008760:	bf0b      	itete	eq
 8008762:	784b      	ldrbeq	r3, [r1, #1]
 8008764:	1c48      	addne	r0, r1, #1
 8008766:	1c88      	addeq	r0, r1, #2
 8008768:	2200      	movne	r2, #0
 800876a:	bf08      	it	eq
 800876c:	2201      	moveq	r2, #1
 800876e:	1e61      	subs	r1, r4, #1
 8008770:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8008774:	f801 2f01 	strb.w	r2, [r1, #1]!
 8008778:	42a9      	cmp	r1, r5
 800877a:	d1fb      	bne.n	8008774 <__sccl+0x1c>
 800877c:	b90b      	cbnz	r3, 8008782 <__sccl+0x2a>
 800877e:	3801      	subs	r0, #1
 8008780:	bd70      	pop	{r4, r5, r6, pc}
 8008782:	f082 0201 	eor.w	r2, r2, #1
 8008786:	54e2      	strb	r2, [r4, r3]
 8008788:	4605      	mov	r5, r0
 800878a:	4628      	mov	r0, r5
 800878c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8008790:	292d      	cmp	r1, #45	; 0x2d
 8008792:	d006      	beq.n	80087a2 <__sccl+0x4a>
 8008794:	295d      	cmp	r1, #93	; 0x5d
 8008796:	d0f3      	beq.n	8008780 <__sccl+0x28>
 8008798:	b909      	cbnz	r1, 800879e <__sccl+0x46>
 800879a:	4628      	mov	r0, r5
 800879c:	e7f0      	b.n	8008780 <__sccl+0x28>
 800879e:	460b      	mov	r3, r1
 80087a0:	e7f1      	b.n	8008786 <__sccl+0x2e>
 80087a2:	786e      	ldrb	r6, [r5, #1]
 80087a4:	2e5d      	cmp	r6, #93	; 0x5d
 80087a6:	d0fa      	beq.n	800879e <__sccl+0x46>
 80087a8:	42b3      	cmp	r3, r6
 80087aa:	dcf8      	bgt.n	800879e <__sccl+0x46>
 80087ac:	3502      	adds	r5, #2
 80087ae:	4619      	mov	r1, r3
 80087b0:	3101      	adds	r1, #1
 80087b2:	428e      	cmp	r6, r1
 80087b4:	5462      	strb	r2, [r4, r1]
 80087b6:	dcfb      	bgt.n	80087b0 <__sccl+0x58>
 80087b8:	1af1      	subs	r1, r6, r3
 80087ba:	3901      	subs	r1, #1
 80087bc:	1c58      	adds	r0, r3, #1
 80087be:	42b3      	cmp	r3, r6
 80087c0:	bfa8      	it	ge
 80087c2:	2100      	movge	r1, #0
 80087c4:	1843      	adds	r3, r0, r1
 80087c6:	e7e0      	b.n	800878a <__sccl+0x32>

080087c8 <strncmp>:
 80087c8:	b510      	push	{r4, lr}
 80087ca:	b17a      	cbz	r2, 80087ec <strncmp+0x24>
 80087cc:	4603      	mov	r3, r0
 80087ce:	3901      	subs	r1, #1
 80087d0:	1884      	adds	r4, r0, r2
 80087d2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80087d6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80087da:	4290      	cmp	r0, r2
 80087dc:	d101      	bne.n	80087e2 <strncmp+0x1a>
 80087de:	42a3      	cmp	r3, r4
 80087e0:	d101      	bne.n	80087e6 <strncmp+0x1e>
 80087e2:	1a80      	subs	r0, r0, r2
 80087e4:	bd10      	pop	{r4, pc}
 80087e6:	2800      	cmp	r0, #0
 80087e8:	d1f3      	bne.n	80087d2 <strncmp+0xa>
 80087ea:	e7fa      	b.n	80087e2 <strncmp+0x1a>
 80087ec:	4610      	mov	r0, r2
 80087ee:	e7f9      	b.n	80087e4 <strncmp+0x1c>

080087f0 <_strtoul_l.constprop.0>:
 80087f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80087f4:	4f36      	ldr	r7, [pc, #216]	; (80088d0 <_strtoul_l.constprop.0+0xe0>)
 80087f6:	4686      	mov	lr, r0
 80087f8:	460d      	mov	r5, r1
 80087fa:	4628      	mov	r0, r5
 80087fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008800:	5de6      	ldrb	r6, [r4, r7]
 8008802:	f016 0608 	ands.w	r6, r6, #8
 8008806:	d1f8      	bne.n	80087fa <_strtoul_l.constprop.0+0xa>
 8008808:	2c2d      	cmp	r4, #45	; 0x2d
 800880a:	d12f      	bne.n	800886c <_strtoul_l.constprop.0+0x7c>
 800880c:	782c      	ldrb	r4, [r5, #0]
 800880e:	2601      	movs	r6, #1
 8008810:	1c85      	adds	r5, r0, #2
 8008812:	2b00      	cmp	r3, #0
 8008814:	d057      	beq.n	80088c6 <_strtoul_l.constprop.0+0xd6>
 8008816:	2b10      	cmp	r3, #16
 8008818:	d109      	bne.n	800882e <_strtoul_l.constprop.0+0x3e>
 800881a:	2c30      	cmp	r4, #48	; 0x30
 800881c:	d107      	bne.n	800882e <_strtoul_l.constprop.0+0x3e>
 800881e:	7828      	ldrb	r0, [r5, #0]
 8008820:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008824:	2858      	cmp	r0, #88	; 0x58
 8008826:	d149      	bne.n	80088bc <_strtoul_l.constprop.0+0xcc>
 8008828:	786c      	ldrb	r4, [r5, #1]
 800882a:	2310      	movs	r3, #16
 800882c:	3502      	adds	r5, #2
 800882e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8008832:	2700      	movs	r7, #0
 8008834:	fbb8 f8f3 	udiv	r8, r8, r3
 8008838:	fb03 f908 	mul.w	r9, r3, r8
 800883c:	ea6f 0909 	mvn.w	r9, r9
 8008840:	4638      	mov	r0, r7
 8008842:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008846:	f1bc 0f09 	cmp.w	ip, #9
 800884a:	d814      	bhi.n	8008876 <_strtoul_l.constprop.0+0x86>
 800884c:	4664      	mov	r4, ip
 800884e:	42a3      	cmp	r3, r4
 8008850:	dd22      	ble.n	8008898 <_strtoul_l.constprop.0+0xa8>
 8008852:	2f00      	cmp	r7, #0
 8008854:	db1d      	blt.n	8008892 <_strtoul_l.constprop.0+0xa2>
 8008856:	4580      	cmp	r8, r0
 8008858:	d31b      	bcc.n	8008892 <_strtoul_l.constprop.0+0xa2>
 800885a:	d101      	bne.n	8008860 <_strtoul_l.constprop.0+0x70>
 800885c:	45a1      	cmp	r9, r4
 800885e:	db18      	blt.n	8008892 <_strtoul_l.constprop.0+0xa2>
 8008860:	fb00 4003 	mla	r0, r0, r3, r4
 8008864:	2701      	movs	r7, #1
 8008866:	f815 4b01 	ldrb.w	r4, [r5], #1
 800886a:	e7ea      	b.n	8008842 <_strtoul_l.constprop.0+0x52>
 800886c:	2c2b      	cmp	r4, #43	; 0x2b
 800886e:	bf04      	itt	eq
 8008870:	782c      	ldrbeq	r4, [r5, #0]
 8008872:	1c85      	addeq	r5, r0, #2
 8008874:	e7cd      	b.n	8008812 <_strtoul_l.constprop.0+0x22>
 8008876:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800887a:	f1bc 0f19 	cmp.w	ip, #25
 800887e:	d801      	bhi.n	8008884 <_strtoul_l.constprop.0+0x94>
 8008880:	3c37      	subs	r4, #55	; 0x37
 8008882:	e7e4      	b.n	800884e <_strtoul_l.constprop.0+0x5e>
 8008884:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008888:	f1bc 0f19 	cmp.w	ip, #25
 800888c:	d804      	bhi.n	8008898 <_strtoul_l.constprop.0+0xa8>
 800888e:	3c57      	subs	r4, #87	; 0x57
 8008890:	e7dd      	b.n	800884e <_strtoul_l.constprop.0+0x5e>
 8008892:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008896:	e7e6      	b.n	8008866 <_strtoul_l.constprop.0+0x76>
 8008898:	2f00      	cmp	r7, #0
 800889a:	da07      	bge.n	80088ac <_strtoul_l.constprop.0+0xbc>
 800889c:	2322      	movs	r3, #34	; 0x22
 800889e:	f8ce 3000 	str.w	r3, [lr]
 80088a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088a6:	b932      	cbnz	r2, 80088b6 <_strtoul_l.constprop.0+0xc6>
 80088a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80088ac:	b106      	cbz	r6, 80088b0 <_strtoul_l.constprop.0+0xc0>
 80088ae:	4240      	negs	r0, r0
 80088b0:	2a00      	cmp	r2, #0
 80088b2:	d0f9      	beq.n	80088a8 <_strtoul_l.constprop.0+0xb8>
 80088b4:	b107      	cbz	r7, 80088b8 <_strtoul_l.constprop.0+0xc8>
 80088b6:	1e69      	subs	r1, r5, #1
 80088b8:	6011      	str	r1, [r2, #0]
 80088ba:	e7f5      	b.n	80088a8 <_strtoul_l.constprop.0+0xb8>
 80088bc:	2430      	movs	r4, #48	; 0x30
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d1b5      	bne.n	800882e <_strtoul_l.constprop.0+0x3e>
 80088c2:	2308      	movs	r3, #8
 80088c4:	e7b3      	b.n	800882e <_strtoul_l.constprop.0+0x3e>
 80088c6:	2c30      	cmp	r4, #48	; 0x30
 80088c8:	d0a9      	beq.n	800881e <_strtoul_l.constprop.0+0x2e>
 80088ca:	230a      	movs	r3, #10
 80088cc:	e7af      	b.n	800882e <_strtoul_l.constprop.0+0x3e>
 80088ce:	bf00      	nop
 80088d0:	080095d1 	.word	0x080095d1

080088d4 <_strtoul_r>:
 80088d4:	f7ff bf8c 	b.w	80087f0 <_strtoul_l.constprop.0>

080088d8 <__submore>:
 80088d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088dc:	460c      	mov	r4, r1
 80088de:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80088e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088e4:	4299      	cmp	r1, r3
 80088e6:	d11d      	bne.n	8008924 <__submore+0x4c>
 80088e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80088ec:	f7ff fa14 	bl	8007d18 <_malloc_r>
 80088f0:	b918      	cbnz	r0, 80088fa <__submore+0x22>
 80088f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088fe:	63a3      	str	r3, [r4, #56]	; 0x38
 8008900:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8008904:	6360      	str	r0, [r4, #52]	; 0x34
 8008906:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800890a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800890e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8008912:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008916:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800891a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800891e:	6020      	str	r0, [r4, #0]
 8008920:	2000      	movs	r0, #0
 8008922:	e7e8      	b.n	80088f6 <__submore+0x1e>
 8008924:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8008926:	0077      	lsls	r7, r6, #1
 8008928:	463a      	mov	r2, r7
 800892a:	f000 fa2d 	bl	8008d88 <_realloc_r>
 800892e:	4605      	mov	r5, r0
 8008930:	2800      	cmp	r0, #0
 8008932:	d0de      	beq.n	80088f2 <__submore+0x1a>
 8008934:	eb00 0806 	add.w	r8, r0, r6
 8008938:	4601      	mov	r1, r0
 800893a:	4632      	mov	r2, r6
 800893c:	4640      	mov	r0, r8
 800893e:	f7fe fc99 	bl	8007274 <memcpy>
 8008942:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8008946:	f8c4 8000 	str.w	r8, [r4]
 800894a:	e7e9      	b.n	8008920 <__submore+0x48>

0800894c <__ascii_wctomb>:
 800894c:	b149      	cbz	r1, 8008962 <__ascii_wctomb+0x16>
 800894e:	2aff      	cmp	r2, #255	; 0xff
 8008950:	bf85      	ittet	hi
 8008952:	238a      	movhi	r3, #138	; 0x8a
 8008954:	6003      	strhi	r3, [r0, #0]
 8008956:	700a      	strbls	r2, [r1, #0]
 8008958:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800895c:	bf98      	it	ls
 800895e:	2001      	movls	r0, #1
 8008960:	4770      	bx	lr
 8008962:	4608      	mov	r0, r1
 8008964:	4770      	bx	lr
	...

08008968 <__assert_func>:
 8008968:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800896a:	4614      	mov	r4, r2
 800896c:	461a      	mov	r2, r3
 800896e:	4b09      	ldr	r3, [pc, #36]	; (8008994 <__assert_func+0x2c>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4605      	mov	r5, r0
 8008974:	68d8      	ldr	r0, [r3, #12]
 8008976:	b14c      	cbz	r4, 800898c <__assert_func+0x24>
 8008978:	4b07      	ldr	r3, [pc, #28]	; (8008998 <__assert_func+0x30>)
 800897a:	9100      	str	r1, [sp, #0]
 800897c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008980:	4906      	ldr	r1, [pc, #24]	; (800899c <__assert_func+0x34>)
 8008982:	462b      	mov	r3, r5
 8008984:	f000 f9a6 	bl	8008cd4 <fiprintf>
 8008988:	f000 fc46 	bl	8009218 <abort>
 800898c:	4b04      	ldr	r3, [pc, #16]	; (80089a0 <__assert_func+0x38>)
 800898e:	461c      	mov	r4, r3
 8008990:	e7f3      	b.n	800897a <__assert_func+0x12>
 8008992:	bf00      	nop
 8008994:	20000014 	.word	0x20000014
 8008998:	08009960 	.word	0x08009960
 800899c:	0800996d 	.word	0x0800996d
 80089a0:	0800999b 	.word	0x0800999b

080089a4 <__sflush_r>:
 80089a4:	898a      	ldrh	r2, [r1, #12]
 80089a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089aa:	4605      	mov	r5, r0
 80089ac:	0710      	lsls	r0, r2, #28
 80089ae:	460c      	mov	r4, r1
 80089b0:	d458      	bmi.n	8008a64 <__sflush_r+0xc0>
 80089b2:	684b      	ldr	r3, [r1, #4]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	dc05      	bgt.n	80089c4 <__sflush_r+0x20>
 80089b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	dc02      	bgt.n	80089c4 <__sflush_r+0x20>
 80089be:	2000      	movs	r0, #0
 80089c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80089c6:	2e00      	cmp	r6, #0
 80089c8:	d0f9      	beq.n	80089be <__sflush_r+0x1a>
 80089ca:	2300      	movs	r3, #0
 80089cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80089d0:	682f      	ldr	r7, [r5, #0]
 80089d2:	602b      	str	r3, [r5, #0]
 80089d4:	d032      	beq.n	8008a3c <__sflush_r+0x98>
 80089d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80089d8:	89a3      	ldrh	r3, [r4, #12]
 80089da:	075a      	lsls	r2, r3, #29
 80089dc:	d505      	bpl.n	80089ea <__sflush_r+0x46>
 80089de:	6863      	ldr	r3, [r4, #4]
 80089e0:	1ac0      	subs	r0, r0, r3
 80089e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80089e4:	b10b      	cbz	r3, 80089ea <__sflush_r+0x46>
 80089e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80089e8:	1ac0      	subs	r0, r0, r3
 80089ea:	2300      	movs	r3, #0
 80089ec:	4602      	mov	r2, r0
 80089ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80089f0:	6a21      	ldr	r1, [r4, #32]
 80089f2:	4628      	mov	r0, r5
 80089f4:	47b0      	blx	r6
 80089f6:	1c43      	adds	r3, r0, #1
 80089f8:	89a3      	ldrh	r3, [r4, #12]
 80089fa:	d106      	bne.n	8008a0a <__sflush_r+0x66>
 80089fc:	6829      	ldr	r1, [r5, #0]
 80089fe:	291d      	cmp	r1, #29
 8008a00:	d82c      	bhi.n	8008a5c <__sflush_r+0xb8>
 8008a02:	4a2a      	ldr	r2, [pc, #168]	; (8008aac <__sflush_r+0x108>)
 8008a04:	40ca      	lsrs	r2, r1
 8008a06:	07d6      	lsls	r6, r2, #31
 8008a08:	d528      	bpl.n	8008a5c <__sflush_r+0xb8>
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	6062      	str	r2, [r4, #4]
 8008a0e:	04d9      	lsls	r1, r3, #19
 8008a10:	6922      	ldr	r2, [r4, #16]
 8008a12:	6022      	str	r2, [r4, #0]
 8008a14:	d504      	bpl.n	8008a20 <__sflush_r+0x7c>
 8008a16:	1c42      	adds	r2, r0, #1
 8008a18:	d101      	bne.n	8008a1e <__sflush_r+0x7a>
 8008a1a:	682b      	ldr	r3, [r5, #0]
 8008a1c:	b903      	cbnz	r3, 8008a20 <__sflush_r+0x7c>
 8008a1e:	6560      	str	r0, [r4, #84]	; 0x54
 8008a20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a22:	602f      	str	r7, [r5, #0]
 8008a24:	2900      	cmp	r1, #0
 8008a26:	d0ca      	beq.n	80089be <__sflush_r+0x1a>
 8008a28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a2c:	4299      	cmp	r1, r3
 8008a2e:	d002      	beq.n	8008a36 <__sflush_r+0x92>
 8008a30:	4628      	mov	r0, r5
 8008a32:	f7ff f905 	bl	8007c40 <_free_r>
 8008a36:	2000      	movs	r0, #0
 8008a38:	6360      	str	r0, [r4, #52]	; 0x34
 8008a3a:	e7c1      	b.n	80089c0 <__sflush_r+0x1c>
 8008a3c:	6a21      	ldr	r1, [r4, #32]
 8008a3e:	2301      	movs	r3, #1
 8008a40:	4628      	mov	r0, r5
 8008a42:	47b0      	blx	r6
 8008a44:	1c41      	adds	r1, r0, #1
 8008a46:	d1c7      	bne.n	80089d8 <__sflush_r+0x34>
 8008a48:	682b      	ldr	r3, [r5, #0]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d0c4      	beq.n	80089d8 <__sflush_r+0x34>
 8008a4e:	2b1d      	cmp	r3, #29
 8008a50:	d001      	beq.n	8008a56 <__sflush_r+0xb2>
 8008a52:	2b16      	cmp	r3, #22
 8008a54:	d101      	bne.n	8008a5a <__sflush_r+0xb6>
 8008a56:	602f      	str	r7, [r5, #0]
 8008a58:	e7b1      	b.n	80089be <__sflush_r+0x1a>
 8008a5a:	89a3      	ldrh	r3, [r4, #12]
 8008a5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a60:	81a3      	strh	r3, [r4, #12]
 8008a62:	e7ad      	b.n	80089c0 <__sflush_r+0x1c>
 8008a64:	690f      	ldr	r7, [r1, #16]
 8008a66:	2f00      	cmp	r7, #0
 8008a68:	d0a9      	beq.n	80089be <__sflush_r+0x1a>
 8008a6a:	0793      	lsls	r3, r2, #30
 8008a6c:	680e      	ldr	r6, [r1, #0]
 8008a6e:	bf08      	it	eq
 8008a70:	694b      	ldreq	r3, [r1, #20]
 8008a72:	600f      	str	r7, [r1, #0]
 8008a74:	bf18      	it	ne
 8008a76:	2300      	movne	r3, #0
 8008a78:	eba6 0807 	sub.w	r8, r6, r7
 8008a7c:	608b      	str	r3, [r1, #8]
 8008a7e:	f1b8 0f00 	cmp.w	r8, #0
 8008a82:	dd9c      	ble.n	80089be <__sflush_r+0x1a>
 8008a84:	6a21      	ldr	r1, [r4, #32]
 8008a86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008a88:	4643      	mov	r3, r8
 8008a8a:	463a      	mov	r2, r7
 8008a8c:	4628      	mov	r0, r5
 8008a8e:	47b0      	blx	r6
 8008a90:	2800      	cmp	r0, #0
 8008a92:	dc06      	bgt.n	8008aa2 <__sflush_r+0xfe>
 8008a94:	89a3      	ldrh	r3, [r4, #12]
 8008a96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a9a:	81a3      	strh	r3, [r4, #12]
 8008a9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008aa0:	e78e      	b.n	80089c0 <__sflush_r+0x1c>
 8008aa2:	4407      	add	r7, r0
 8008aa4:	eba8 0800 	sub.w	r8, r8, r0
 8008aa8:	e7e9      	b.n	8008a7e <__sflush_r+0xda>
 8008aaa:	bf00      	nop
 8008aac:	20400001 	.word	0x20400001

08008ab0 <_fflush_r>:
 8008ab0:	b538      	push	{r3, r4, r5, lr}
 8008ab2:	690b      	ldr	r3, [r1, #16]
 8008ab4:	4605      	mov	r5, r0
 8008ab6:	460c      	mov	r4, r1
 8008ab8:	b913      	cbnz	r3, 8008ac0 <_fflush_r+0x10>
 8008aba:	2500      	movs	r5, #0
 8008abc:	4628      	mov	r0, r5
 8008abe:	bd38      	pop	{r3, r4, r5, pc}
 8008ac0:	b118      	cbz	r0, 8008aca <_fflush_r+0x1a>
 8008ac2:	6983      	ldr	r3, [r0, #24]
 8008ac4:	b90b      	cbnz	r3, 8008aca <_fflush_r+0x1a>
 8008ac6:	f000 f887 	bl	8008bd8 <__sinit>
 8008aca:	4b14      	ldr	r3, [pc, #80]	; (8008b1c <_fflush_r+0x6c>)
 8008acc:	429c      	cmp	r4, r3
 8008ace:	d11b      	bne.n	8008b08 <_fflush_r+0x58>
 8008ad0:	686c      	ldr	r4, [r5, #4]
 8008ad2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d0ef      	beq.n	8008aba <_fflush_r+0xa>
 8008ada:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008adc:	07d0      	lsls	r0, r2, #31
 8008ade:	d404      	bmi.n	8008aea <_fflush_r+0x3a>
 8008ae0:	0599      	lsls	r1, r3, #22
 8008ae2:	d402      	bmi.n	8008aea <_fflush_r+0x3a>
 8008ae4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ae6:	f000 f927 	bl	8008d38 <__retarget_lock_acquire_recursive>
 8008aea:	4628      	mov	r0, r5
 8008aec:	4621      	mov	r1, r4
 8008aee:	f7ff ff59 	bl	80089a4 <__sflush_r>
 8008af2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008af4:	07da      	lsls	r2, r3, #31
 8008af6:	4605      	mov	r5, r0
 8008af8:	d4e0      	bmi.n	8008abc <_fflush_r+0xc>
 8008afa:	89a3      	ldrh	r3, [r4, #12]
 8008afc:	059b      	lsls	r3, r3, #22
 8008afe:	d4dd      	bmi.n	8008abc <_fflush_r+0xc>
 8008b00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b02:	f000 f91a 	bl	8008d3a <__retarget_lock_release_recursive>
 8008b06:	e7d9      	b.n	8008abc <_fflush_r+0xc>
 8008b08:	4b05      	ldr	r3, [pc, #20]	; (8008b20 <_fflush_r+0x70>)
 8008b0a:	429c      	cmp	r4, r3
 8008b0c:	d101      	bne.n	8008b12 <_fflush_r+0x62>
 8008b0e:	68ac      	ldr	r4, [r5, #8]
 8008b10:	e7df      	b.n	8008ad2 <_fflush_r+0x22>
 8008b12:	4b04      	ldr	r3, [pc, #16]	; (8008b24 <_fflush_r+0x74>)
 8008b14:	429c      	cmp	r4, r3
 8008b16:	bf08      	it	eq
 8008b18:	68ec      	ldreq	r4, [r5, #12]
 8008b1a:	e7da      	b.n	8008ad2 <_fflush_r+0x22>
 8008b1c:	080099bc 	.word	0x080099bc
 8008b20:	080099dc 	.word	0x080099dc
 8008b24:	0800999c 	.word	0x0800999c

08008b28 <std>:
 8008b28:	2300      	movs	r3, #0
 8008b2a:	b510      	push	{r4, lr}
 8008b2c:	4604      	mov	r4, r0
 8008b2e:	e9c0 3300 	strd	r3, r3, [r0]
 8008b32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008b36:	6083      	str	r3, [r0, #8]
 8008b38:	8181      	strh	r1, [r0, #12]
 8008b3a:	6643      	str	r3, [r0, #100]	; 0x64
 8008b3c:	81c2      	strh	r2, [r0, #14]
 8008b3e:	6183      	str	r3, [r0, #24]
 8008b40:	4619      	mov	r1, r3
 8008b42:	2208      	movs	r2, #8
 8008b44:	305c      	adds	r0, #92	; 0x5c
 8008b46:	f7fb fb91 	bl	800426c <memset>
 8008b4a:	4b05      	ldr	r3, [pc, #20]	; (8008b60 <std+0x38>)
 8008b4c:	6263      	str	r3, [r4, #36]	; 0x24
 8008b4e:	4b05      	ldr	r3, [pc, #20]	; (8008b64 <std+0x3c>)
 8008b50:	62a3      	str	r3, [r4, #40]	; 0x28
 8008b52:	4b05      	ldr	r3, [pc, #20]	; (8008b68 <std+0x40>)
 8008b54:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008b56:	4b05      	ldr	r3, [pc, #20]	; (8008b6c <std+0x44>)
 8008b58:	6224      	str	r4, [r4, #32]
 8008b5a:	6323      	str	r3, [r4, #48]	; 0x30
 8008b5c:	bd10      	pop	{r4, pc}
 8008b5e:	bf00      	nop
 8008b60:	08005015 	.word	0x08005015
 8008b64:	0800503b 	.word	0x0800503b
 8008b68:	08005073 	.word	0x08005073
 8008b6c:	08005097 	.word	0x08005097

08008b70 <_cleanup_r>:
 8008b70:	4901      	ldr	r1, [pc, #4]	; (8008b78 <_cleanup_r+0x8>)
 8008b72:	f000 b8c1 	b.w	8008cf8 <_fwalk_reent>
 8008b76:	bf00      	nop
 8008b78:	08008ab1 	.word	0x08008ab1

08008b7c <__sfmoreglue>:
 8008b7c:	b570      	push	{r4, r5, r6, lr}
 8008b7e:	2268      	movs	r2, #104	; 0x68
 8008b80:	1e4d      	subs	r5, r1, #1
 8008b82:	4355      	muls	r5, r2
 8008b84:	460e      	mov	r6, r1
 8008b86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008b8a:	f7ff f8c5 	bl	8007d18 <_malloc_r>
 8008b8e:	4604      	mov	r4, r0
 8008b90:	b140      	cbz	r0, 8008ba4 <__sfmoreglue+0x28>
 8008b92:	2100      	movs	r1, #0
 8008b94:	e9c0 1600 	strd	r1, r6, [r0]
 8008b98:	300c      	adds	r0, #12
 8008b9a:	60a0      	str	r0, [r4, #8]
 8008b9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008ba0:	f7fb fb64 	bl	800426c <memset>
 8008ba4:	4620      	mov	r0, r4
 8008ba6:	bd70      	pop	{r4, r5, r6, pc}

08008ba8 <__sfp_lock_acquire>:
 8008ba8:	4801      	ldr	r0, [pc, #4]	; (8008bb0 <__sfp_lock_acquire+0x8>)
 8008baa:	f000 b8c5 	b.w	8008d38 <__retarget_lock_acquire_recursive>
 8008bae:	bf00      	nop
 8008bb0:	20000635 	.word	0x20000635

08008bb4 <__sfp_lock_release>:
 8008bb4:	4801      	ldr	r0, [pc, #4]	; (8008bbc <__sfp_lock_release+0x8>)
 8008bb6:	f000 b8c0 	b.w	8008d3a <__retarget_lock_release_recursive>
 8008bba:	bf00      	nop
 8008bbc:	20000635 	.word	0x20000635

08008bc0 <__sinit_lock_acquire>:
 8008bc0:	4801      	ldr	r0, [pc, #4]	; (8008bc8 <__sinit_lock_acquire+0x8>)
 8008bc2:	f000 b8b9 	b.w	8008d38 <__retarget_lock_acquire_recursive>
 8008bc6:	bf00      	nop
 8008bc8:	20000636 	.word	0x20000636

08008bcc <__sinit_lock_release>:
 8008bcc:	4801      	ldr	r0, [pc, #4]	; (8008bd4 <__sinit_lock_release+0x8>)
 8008bce:	f000 b8b4 	b.w	8008d3a <__retarget_lock_release_recursive>
 8008bd2:	bf00      	nop
 8008bd4:	20000636 	.word	0x20000636

08008bd8 <__sinit>:
 8008bd8:	b510      	push	{r4, lr}
 8008bda:	4604      	mov	r4, r0
 8008bdc:	f7ff fff0 	bl	8008bc0 <__sinit_lock_acquire>
 8008be0:	69a3      	ldr	r3, [r4, #24]
 8008be2:	b11b      	cbz	r3, 8008bec <__sinit+0x14>
 8008be4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008be8:	f7ff bff0 	b.w	8008bcc <__sinit_lock_release>
 8008bec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008bf0:	6523      	str	r3, [r4, #80]	; 0x50
 8008bf2:	4b13      	ldr	r3, [pc, #76]	; (8008c40 <__sinit+0x68>)
 8008bf4:	4a13      	ldr	r2, [pc, #76]	; (8008c44 <__sinit+0x6c>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	62a2      	str	r2, [r4, #40]	; 0x28
 8008bfa:	42a3      	cmp	r3, r4
 8008bfc:	bf04      	itt	eq
 8008bfe:	2301      	moveq	r3, #1
 8008c00:	61a3      	streq	r3, [r4, #24]
 8008c02:	4620      	mov	r0, r4
 8008c04:	f000 f820 	bl	8008c48 <__sfp>
 8008c08:	6060      	str	r0, [r4, #4]
 8008c0a:	4620      	mov	r0, r4
 8008c0c:	f000 f81c 	bl	8008c48 <__sfp>
 8008c10:	60a0      	str	r0, [r4, #8]
 8008c12:	4620      	mov	r0, r4
 8008c14:	f000 f818 	bl	8008c48 <__sfp>
 8008c18:	2200      	movs	r2, #0
 8008c1a:	60e0      	str	r0, [r4, #12]
 8008c1c:	2104      	movs	r1, #4
 8008c1e:	6860      	ldr	r0, [r4, #4]
 8008c20:	f7ff ff82 	bl	8008b28 <std>
 8008c24:	68a0      	ldr	r0, [r4, #8]
 8008c26:	2201      	movs	r2, #1
 8008c28:	2109      	movs	r1, #9
 8008c2a:	f7ff ff7d 	bl	8008b28 <std>
 8008c2e:	68e0      	ldr	r0, [r4, #12]
 8008c30:	2202      	movs	r2, #2
 8008c32:	2112      	movs	r1, #18
 8008c34:	f7ff ff78 	bl	8008b28 <std>
 8008c38:	2301      	movs	r3, #1
 8008c3a:	61a3      	str	r3, [r4, #24]
 8008c3c:	e7d2      	b.n	8008be4 <__sinit+0xc>
 8008c3e:	bf00      	nop
 8008c40:	08009540 	.word	0x08009540
 8008c44:	08008b71 	.word	0x08008b71

08008c48 <__sfp>:
 8008c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c4a:	4607      	mov	r7, r0
 8008c4c:	f7ff ffac 	bl	8008ba8 <__sfp_lock_acquire>
 8008c50:	4b1e      	ldr	r3, [pc, #120]	; (8008ccc <__sfp+0x84>)
 8008c52:	681e      	ldr	r6, [r3, #0]
 8008c54:	69b3      	ldr	r3, [r6, #24]
 8008c56:	b913      	cbnz	r3, 8008c5e <__sfp+0x16>
 8008c58:	4630      	mov	r0, r6
 8008c5a:	f7ff ffbd 	bl	8008bd8 <__sinit>
 8008c5e:	3648      	adds	r6, #72	; 0x48
 8008c60:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008c64:	3b01      	subs	r3, #1
 8008c66:	d503      	bpl.n	8008c70 <__sfp+0x28>
 8008c68:	6833      	ldr	r3, [r6, #0]
 8008c6a:	b30b      	cbz	r3, 8008cb0 <__sfp+0x68>
 8008c6c:	6836      	ldr	r6, [r6, #0]
 8008c6e:	e7f7      	b.n	8008c60 <__sfp+0x18>
 8008c70:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008c74:	b9d5      	cbnz	r5, 8008cac <__sfp+0x64>
 8008c76:	4b16      	ldr	r3, [pc, #88]	; (8008cd0 <__sfp+0x88>)
 8008c78:	60e3      	str	r3, [r4, #12]
 8008c7a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008c7e:	6665      	str	r5, [r4, #100]	; 0x64
 8008c80:	f000 f859 	bl	8008d36 <__retarget_lock_init_recursive>
 8008c84:	f7ff ff96 	bl	8008bb4 <__sfp_lock_release>
 8008c88:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008c8c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008c90:	6025      	str	r5, [r4, #0]
 8008c92:	61a5      	str	r5, [r4, #24]
 8008c94:	2208      	movs	r2, #8
 8008c96:	4629      	mov	r1, r5
 8008c98:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008c9c:	f7fb fae6 	bl	800426c <memset>
 8008ca0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008ca4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008ca8:	4620      	mov	r0, r4
 8008caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cac:	3468      	adds	r4, #104	; 0x68
 8008cae:	e7d9      	b.n	8008c64 <__sfp+0x1c>
 8008cb0:	2104      	movs	r1, #4
 8008cb2:	4638      	mov	r0, r7
 8008cb4:	f7ff ff62 	bl	8008b7c <__sfmoreglue>
 8008cb8:	4604      	mov	r4, r0
 8008cba:	6030      	str	r0, [r6, #0]
 8008cbc:	2800      	cmp	r0, #0
 8008cbe:	d1d5      	bne.n	8008c6c <__sfp+0x24>
 8008cc0:	f7ff ff78 	bl	8008bb4 <__sfp_lock_release>
 8008cc4:	230c      	movs	r3, #12
 8008cc6:	603b      	str	r3, [r7, #0]
 8008cc8:	e7ee      	b.n	8008ca8 <__sfp+0x60>
 8008cca:	bf00      	nop
 8008ccc:	08009540 	.word	0x08009540
 8008cd0:	ffff0001 	.word	0xffff0001

08008cd4 <fiprintf>:
 8008cd4:	b40e      	push	{r1, r2, r3}
 8008cd6:	b503      	push	{r0, r1, lr}
 8008cd8:	4601      	mov	r1, r0
 8008cda:	ab03      	add	r3, sp, #12
 8008cdc:	4805      	ldr	r0, [pc, #20]	; (8008cf4 <fiprintf+0x20>)
 8008cde:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ce2:	6800      	ldr	r0, [r0, #0]
 8008ce4:	9301      	str	r3, [sp, #4]
 8008ce6:	f000 f8a7 	bl	8008e38 <_vfiprintf_r>
 8008cea:	b002      	add	sp, #8
 8008cec:	f85d eb04 	ldr.w	lr, [sp], #4
 8008cf0:	b003      	add	sp, #12
 8008cf2:	4770      	bx	lr
 8008cf4:	20000014 	.word	0x20000014

08008cf8 <_fwalk_reent>:
 8008cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cfc:	4606      	mov	r6, r0
 8008cfe:	4688      	mov	r8, r1
 8008d00:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008d04:	2700      	movs	r7, #0
 8008d06:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008d0a:	f1b9 0901 	subs.w	r9, r9, #1
 8008d0e:	d505      	bpl.n	8008d1c <_fwalk_reent+0x24>
 8008d10:	6824      	ldr	r4, [r4, #0]
 8008d12:	2c00      	cmp	r4, #0
 8008d14:	d1f7      	bne.n	8008d06 <_fwalk_reent+0xe>
 8008d16:	4638      	mov	r0, r7
 8008d18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d1c:	89ab      	ldrh	r3, [r5, #12]
 8008d1e:	2b01      	cmp	r3, #1
 8008d20:	d907      	bls.n	8008d32 <_fwalk_reent+0x3a>
 8008d22:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008d26:	3301      	adds	r3, #1
 8008d28:	d003      	beq.n	8008d32 <_fwalk_reent+0x3a>
 8008d2a:	4629      	mov	r1, r5
 8008d2c:	4630      	mov	r0, r6
 8008d2e:	47c0      	blx	r8
 8008d30:	4307      	orrs	r7, r0
 8008d32:	3568      	adds	r5, #104	; 0x68
 8008d34:	e7e9      	b.n	8008d0a <_fwalk_reent+0x12>

08008d36 <__retarget_lock_init_recursive>:
 8008d36:	4770      	bx	lr

08008d38 <__retarget_lock_acquire_recursive>:
 8008d38:	4770      	bx	lr

08008d3a <__retarget_lock_release_recursive>:
 8008d3a:	4770      	bx	lr

08008d3c <memmove>:
 8008d3c:	4288      	cmp	r0, r1
 8008d3e:	b510      	push	{r4, lr}
 8008d40:	eb01 0402 	add.w	r4, r1, r2
 8008d44:	d902      	bls.n	8008d4c <memmove+0x10>
 8008d46:	4284      	cmp	r4, r0
 8008d48:	4623      	mov	r3, r4
 8008d4a:	d807      	bhi.n	8008d5c <memmove+0x20>
 8008d4c:	1e43      	subs	r3, r0, #1
 8008d4e:	42a1      	cmp	r1, r4
 8008d50:	d008      	beq.n	8008d64 <memmove+0x28>
 8008d52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d5a:	e7f8      	b.n	8008d4e <memmove+0x12>
 8008d5c:	4402      	add	r2, r0
 8008d5e:	4601      	mov	r1, r0
 8008d60:	428a      	cmp	r2, r1
 8008d62:	d100      	bne.n	8008d66 <memmove+0x2a>
 8008d64:	bd10      	pop	{r4, pc}
 8008d66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008d6e:	e7f7      	b.n	8008d60 <memmove+0x24>

08008d70 <__malloc_lock>:
 8008d70:	4801      	ldr	r0, [pc, #4]	; (8008d78 <__malloc_lock+0x8>)
 8008d72:	f7ff bfe1 	b.w	8008d38 <__retarget_lock_acquire_recursive>
 8008d76:	bf00      	nop
 8008d78:	20000634 	.word	0x20000634

08008d7c <__malloc_unlock>:
 8008d7c:	4801      	ldr	r0, [pc, #4]	; (8008d84 <__malloc_unlock+0x8>)
 8008d7e:	f7ff bfdc 	b.w	8008d3a <__retarget_lock_release_recursive>
 8008d82:	bf00      	nop
 8008d84:	20000634 	.word	0x20000634

08008d88 <_realloc_r>:
 8008d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d8c:	4680      	mov	r8, r0
 8008d8e:	4614      	mov	r4, r2
 8008d90:	460e      	mov	r6, r1
 8008d92:	b921      	cbnz	r1, 8008d9e <_realloc_r+0x16>
 8008d94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d98:	4611      	mov	r1, r2
 8008d9a:	f7fe bfbd 	b.w	8007d18 <_malloc_r>
 8008d9e:	b92a      	cbnz	r2, 8008dac <_realloc_r+0x24>
 8008da0:	f7fe ff4e 	bl	8007c40 <_free_r>
 8008da4:	4625      	mov	r5, r4
 8008da6:	4628      	mov	r0, r5
 8008da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dac:	f000 faa0 	bl	80092f0 <_malloc_usable_size_r>
 8008db0:	4284      	cmp	r4, r0
 8008db2:	4607      	mov	r7, r0
 8008db4:	d802      	bhi.n	8008dbc <_realloc_r+0x34>
 8008db6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008dba:	d812      	bhi.n	8008de2 <_realloc_r+0x5a>
 8008dbc:	4621      	mov	r1, r4
 8008dbe:	4640      	mov	r0, r8
 8008dc0:	f7fe ffaa 	bl	8007d18 <_malloc_r>
 8008dc4:	4605      	mov	r5, r0
 8008dc6:	2800      	cmp	r0, #0
 8008dc8:	d0ed      	beq.n	8008da6 <_realloc_r+0x1e>
 8008dca:	42bc      	cmp	r4, r7
 8008dcc:	4622      	mov	r2, r4
 8008dce:	4631      	mov	r1, r6
 8008dd0:	bf28      	it	cs
 8008dd2:	463a      	movcs	r2, r7
 8008dd4:	f7fe fa4e 	bl	8007274 <memcpy>
 8008dd8:	4631      	mov	r1, r6
 8008dda:	4640      	mov	r0, r8
 8008ddc:	f7fe ff30 	bl	8007c40 <_free_r>
 8008de0:	e7e1      	b.n	8008da6 <_realloc_r+0x1e>
 8008de2:	4635      	mov	r5, r6
 8008de4:	e7df      	b.n	8008da6 <_realloc_r+0x1e>

08008de6 <__sfputc_r>:
 8008de6:	6893      	ldr	r3, [r2, #8]
 8008de8:	3b01      	subs	r3, #1
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	b410      	push	{r4}
 8008dee:	6093      	str	r3, [r2, #8]
 8008df0:	da08      	bge.n	8008e04 <__sfputc_r+0x1e>
 8008df2:	6994      	ldr	r4, [r2, #24]
 8008df4:	42a3      	cmp	r3, r4
 8008df6:	db01      	blt.n	8008dfc <__sfputc_r+0x16>
 8008df8:	290a      	cmp	r1, #10
 8008dfa:	d103      	bne.n	8008e04 <__sfputc_r+0x1e>
 8008dfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e00:	f000 b94a 	b.w	8009098 <__swbuf_r>
 8008e04:	6813      	ldr	r3, [r2, #0]
 8008e06:	1c58      	adds	r0, r3, #1
 8008e08:	6010      	str	r0, [r2, #0]
 8008e0a:	7019      	strb	r1, [r3, #0]
 8008e0c:	4608      	mov	r0, r1
 8008e0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e12:	4770      	bx	lr

08008e14 <__sfputs_r>:
 8008e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e16:	4606      	mov	r6, r0
 8008e18:	460f      	mov	r7, r1
 8008e1a:	4614      	mov	r4, r2
 8008e1c:	18d5      	adds	r5, r2, r3
 8008e1e:	42ac      	cmp	r4, r5
 8008e20:	d101      	bne.n	8008e26 <__sfputs_r+0x12>
 8008e22:	2000      	movs	r0, #0
 8008e24:	e007      	b.n	8008e36 <__sfputs_r+0x22>
 8008e26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e2a:	463a      	mov	r2, r7
 8008e2c:	4630      	mov	r0, r6
 8008e2e:	f7ff ffda 	bl	8008de6 <__sfputc_r>
 8008e32:	1c43      	adds	r3, r0, #1
 8008e34:	d1f3      	bne.n	8008e1e <__sfputs_r+0xa>
 8008e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008e38 <_vfiprintf_r>:
 8008e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e3c:	460d      	mov	r5, r1
 8008e3e:	b09d      	sub	sp, #116	; 0x74
 8008e40:	4614      	mov	r4, r2
 8008e42:	4698      	mov	r8, r3
 8008e44:	4606      	mov	r6, r0
 8008e46:	b118      	cbz	r0, 8008e50 <_vfiprintf_r+0x18>
 8008e48:	6983      	ldr	r3, [r0, #24]
 8008e4a:	b90b      	cbnz	r3, 8008e50 <_vfiprintf_r+0x18>
 8008e4c:	f7ff fec4 	bl	8008bd8 <__sinit>
 8008e50:	4b89      	ldr	r3, [pc, #548]	; (8009078 <_vfiprintf_r+0x240>)
 8008e52:	429d      	cmp	r5, r3
 8008e54:	d11b      	bne.n	8008e8e <_vfiprintf_r+0x56>
 8008e56:	6875      	ldr	r5, [r6, #4]
 8008e58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e5a:	07d9      	lsls	r1, r3, #31
 8008e5c:	d405      	bmi.n	8008e6a <_vfiprintf_r+0x32>
 8008e5e:	89ab      	ldrh	r3, [r5, #12]
 8008e60:	059a      	lsls	r2, r3, #22
 8008e62:	d402      	bmi.n	8008e6a <_vfiprintf_r+0x32>
 8008e64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e66:	f7ff ff67 	bl	8008d38 <__retarget_lock_acquire_recursive>
 8008e6a:	89ab      	ldrh	r3, [r5, #12]
 8008e6c:	071b      	lsls	r3, r3, #28
 8008e6e:	d501      	bpl.n	8008e74 <_vfiprintf_r+0x3c>
 8008e70:	692b      	ldr	r3, [r5, #16]
 8008e72:	b9eb      	cbnz	r3, 8008eb0 <_vfiprintf_r+0x78>
 8008e74:	4629      	mov	r1, r5
 8008e76:	4630      	mov	r0, r6
 8008e78:	f000 f960 	bl	800913c <__swsetup_r>
 8008e7c:	b1c0      	cbz	r0, 8008eb0 <_vfiprintf_r+0x78>
 8008e7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e80:	07dc      	lsls	r4, r3, #31
 8008e82:	d50e      	bpl.n	8008ea2 <_vfiprintf_r+0x6a>
 8008e84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e88:	b01d      	add	sp, #116	; 0x74
 8008e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e8e:	4b7b      	ldr	r3, [pc, #492]	; (800907c <_vfiprintf_r+0x244>)
 8008e90:	429d      	cmp	r5, r3
 8008e92:	d101      	bne.n	8008e98 <_vfiprintf_r+0x60>
 8008e94:	68b5      	ldr	r5, [r6, #8]
 8008e96:	e7df      	b.n	8008e58 <_vfiprintf_r+0x20>
 8008e98:	4b79      	ldr	r3, [pc, #484]	; (8009080 <_vfiprintf_r+0x248>)
 8008e9a:	429d      	cmp	r5, r3
 8008e9c:	bf08      	it	eq
 8008e9e:	68f5      	ldreq	r5, [r6, #12]
 8008ea0:	e7da      	b.n	8008e58 <_vfiprintf_r+0x20>
 8008ea2:	89ab      	ldrh	r3, [r5, #12]
 8008ea4:	0598      	lsls	r0, r3, #22
 8008ea6:	d4ed      	bmi.n	8008e84 <_vfiprintf_r+0x4c>
 8008ea8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008eaa:	f7ff ff46 	bl	8008d3a <__retarget_lock_release_recursive>
 8008eae:	e7e9      	b.n	8008e84 <_vfiprintf_r+0x4c>
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	9309      	str	r3, [sp, #36]	; 0x24
 8008eb4:	2320      	movs	r3, #32
 8008eb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008eba:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ebe:	2330      	movs	r3, #48	; 0x30
 8008ec0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009084 <_vfiprintf_r+0x24c>
 8008ec4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ec8:	f04f 0901 	mov.w	r9, #1
 8008ecc:	4623      	mov	r3, r4
 8008ece:	469a      	mov	sl, r3
 8008ed0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ed4:	b10a      	cbz	r2, 8008eda <_vfiprintf_r+0xa2>
 8008ed6:	2a25      	cmp	r2, #37	; 0x25
 8008ed8:	d1f9      	bne.n	8008ece <_vfiprintf_r+0x96>
 8008eda:	ebba 0b04 	subs.w	fp, sl, r4
 8008ede:	d00b      	beq.n	8008ef8 <_vfiprintf_r+0xc0>
 8008ee0:	465b      	mov	r3, fp
 8008ee2:	4622      	mov	r2, r4
 8008ee4:	4629      	mov	r1, r5
 8008ee6:	4630      	mov	r0, r6
 8008ee8:	f7ff ff94 	bl	8008e14 <__sfputs_r>
 8008eec:	3001      	adds	r0, #1
 8008eee:	f000 80aa 	beq.w	8009046 <_vfiprintf_r+0x20e>
 8008ef2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ef4:	445a      	add	r2, fp
 8008ef6:	9209      	str	r2, [sp, #36]	; 0x24
 8008ef8:	f89a 3000 	ldrb.w	r3, [sl]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	f000 80a2 	beq.w	8009046 <_vfiprintf_r+0x20e>
 8008f02:	2300      	movs	r3, #0
 8008f04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f0c:	f10a 0a01 	add.w	sl, sl, #1
 8008f10:	9304      	str	r3, [sp, #16]
 8008f12:	9307      	str	r3, [sp, #28]
 8008f14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f18:	931a      	str	r3, [sp, #104]	; 0x68
 8008f1a:	4654      	mov	r4, sl
 8008f1c:	2205      	movs	r2, #5
 8008f1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f22:	4858      	ldr	r0, [pc, #352]	; (8009084 <_vfiprintf_r+0x24c>)
 8008f24:	f7f7 f974 	bl	8000210 <memchr>
 8008f28:	9a04      	ldr	r2, [sp, #16]
 8008f2a:	b9d8      	cbnz	r0, 8008f64 <_vfiprintf_r+0x12c>
 8008f2c:	06d1      	lsls	r1, r2, #27
 8008f2e:	bf44      	itt	mi
 8008f30:	2320      	movmi	r3, #32
 8008f32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f36:	0713      	lsls	r3, r2, #28
 8008f38:	bf44      	itt	mi
 8008f3a:	232b      	movmi	r3, #43	; 0x2b
 8008f3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f40:	f89a 3000 	ldrb.w	r3, [sl]
 8008f44:	2b2a      	cmp	r3, #42	; 0x2a
 8008f46:	d015      	beq.n	8008f74 <_vfiprintf_r+0x13c>
 8008f48:	9a07      	ldr	r2, [sp, #28]
 8008f4a:	4654      	mov	r4, sl
 8008f4c:	2000      	movs	r0, #0
 8008f4e:	f04f 0c0a 	mov.w	ip, #10
 8008f52:	4621      	mov	r1, r4
 8008f54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f58:	3b30      	subs	r3, #48	; 0x30
 8008f5a:	2b09      	cmp	r3, #9
 8008f5c:	d94e      	bls.n	8008ffc <_vfiprintf_r+0x1c4>
 8008f5e:	b1b0      	cbz	r0, 8008f8e <_vfiprintf_r+0x156>
 8008f60:	9207      	str	r2, [sp, #28]
 8008f62:	e014      	b.n	8008f8e <_vfiprintf_r+0x156>
 8008f64:	eba0 0308 	sub.w	r3, r0, r8
 8008f68:	fa09 f303 	lsl.w	r3, r9, r3
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	9304      	str	r3, [sp, #16]
 8008f70:	46a2      	mov	sl, r4
 8008f72:	e7d2      	b.n	8008f1a <_vfiprintf_r+0xe2>
 8008f74:	9b03      	ldr	r3, [sp, #12]
 8008f76:	1d19      	adds	r1, r3, #4
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	9103      	str	r1, [sp, #12]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	bfbb      	ittet	lt
 8008f80:	425b      	neglt	r3, r3
 8008f82:	f042 0202 	orrlt.w	r2, r2, #2
 8008f86:	9307      	strge	r3, [sp, #28]
 8008f88:	9307      	strlt	r3, [sp, #28]
 8008f8a:	bfb8      	it	lt
 8008f8c:	9204      	strlt	r2, [sp, #16]
 8008f8e:	7823      	ldrb	r3, [r4, #0]
 8008f90:	2b2e      	cmp	r3, #46	; 0x2e
 8008f92:	d10c      	bne.n	8008fae <_vfiprintf_r+0x176>
 8008f94:	7863      	ldrb	r3, [r4, #1]
 8008f96:	2b2a      	cmp	r3, #42	; 0x2a
 8008f98:	d135      	bne.n	8009006 <_vfiprintf_r+0x1ce>
 8008f9a:	9b03      	ldr	r3, [sp, #12]
 8008f9c:	1d1a      	adds	r2, r3, #4
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	9203      	str	r2, [sp, #12]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	bfb8      	it	lt
 8008fa6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008faa:	3402      	adds	r4, #2
 8008fac:	9305      	str	r3, [sp, #20]
 8008fae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009094 <_vfiprintf_r+0x25c>
 8008fb2:	7821      	ldrb	r1, [r4, #0]
 8008fb4:	2203      	movs	r2, #3
 8008fb6:	4650      	mov	r0, sl
 8008fb8:	f7f7 f92a 	bl	8000210 <memchr>
 8008fbc:	b140      	cbz	r0, 8008fd0 <_vfiprintf_r+0x198>
 8008fbe:	2340      	movs	r3, #64	; 0x40
 8008fc0:	eba0 000a 	sub.w	r0, r0, sl
 8008fc4:	fa03 f000 	lsl.w	r0, r3, r0
 8008fc8:	9b04      	ldr	r3, [sp, #16]
 8008fca:	4303      	orrs	r3, r0
 8008fcc:	3401      	adds	r4, #1
 8008fce:	9304      	str	r3, [sp, #16]
 8008fd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fd4:	482c      	ldr	r0, [pc, #176]	; (8009088 <_vfiprintf_r+0x250>)
 8008fd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008fda:	2206      	movs	r2, #6
 8008fdc:	f7f7 f918 	bl	8000210 <memchr>
 8008fe0:	2800      	cmp	r0, #0
 8008fe2:	d03f      	beq.n	8009064 <_vfiprintf_r+0x22c>
 8008fe4:	4b29      	ldr	r3, [pc, #164]	; (800908c <_vfiprintf_r+0x254>)
 8008fe6:	bb1b      	cbnz	r3, 8009030 <_vfiprintf_r+0x1f8>
 8008fe8:	9b03      	ldr	r3, [sp, #12]
 8008fea:	3307      	adds	r3, #7
 8008fec:	f023 0307 	bic.w	r3, r3, #7
 8008ff0:	3308      	adds	r3, #8
 8008ff2:	9303      	str	r3, [sp, #12]
 8008ff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ff6:	443b      	add	r3, r7
 8008ff8:	9309      	str	r3, [sp, #36]	; 0x24
 8008ffa:	e767      	b.n	8008ecc <_vfiprintf_r+0x94>
 8008ffc:	fb0c 3202 	mla	r2, ip, r2, r3
 8009000:	460c      	mov	r4, r1
 8009002:	2001      	movs	r0, #1
 8009004:	e7a5      	b.n	8008f52 <_vfiprintf_r+0x11a>
 8009006:	2300      	movs	r3, #0
 8009008:	3401      	adds	r4, #1
 800900a:	9305      	str	r3, [sp, #20]
 800900c:	4619      	mov	r1, r3
 800900e:	f04f 0c0a 	mov.w	ip, #10
 8009012:	4620      	mov	r0, r4
 8009014:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009018:	3a30      	subs	r2, #48	; 0x30
 800901a:	2a09      	cmp	r2, #9
 800901c:	d903      	bls.n	8009026 <_vfiprintf_r+0x1ee>
 800901e:	2b00      	cmp	r3, #0
 8009020:	d0c5      	beq.n	8008fae <_vfiprintf_r+0x176>
 8009022:	9105      	str	r1, [sp, #20]
 8009024:	e7c3      	b.n	8008fae <_vfiprintf_r+0x176>
 8009026:	fb0c 2101 	mla	r1, ip, r1, r2
 800902a:	4604      	mov	r4, r0
 800902c:	2301      	movs	r3, #1
 800902e:	e7f0      	b.n	8009012 <_vfiprintf_r+0x1da>
 8009030:	ab03      	add	r3, sp, #12
 8009032:	9300      	str	r3, [sp, #0]
 8009034:	462a      	mov	r2, r5
 8009036:	4b16      	ldr	r3, [pc, #88]	; (8009090 <_vfiprintf_r+0x258>)
 8009038:	a904      	add	r1, sp, #16
 800903a:	4630      	mov	r0, r6
 800903c:	f7fb f9be 	bl	80043bc <_printf_float>
 8009040:	4607      	mov	r7, r0
 8009042:	1c78      	adds	r0, r7, #1
 8009044:	d1d6      	bne.n	8008ff4 <_vfiprintf_r+0x1bc>
 8009046:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009048:	07d9      	lsls	r1, r3, #31
 800904a:	d405      	bmi.n	8009058 <_vfiprintf_r+0x220>
 800904c:	89ab      	ldrh	r3, [r5, #12]
 800904e:	059a      	lsls	r2, r3, #22
 8009050:	d402      	bmi.n	8009058 <_vfiprintf_r+0x220>
 8009052:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009054:	f7ff fe71 	bl	8008d3a <__retarget_lock_release_recursive>
 8009058:	89ab      	ldrh	r3, [r5, #12]
 800905a:	065b      	lsls	r3, r3, #25
 800905c:	f53f af12 	bmi.w	8008e84 <_vfiprintf_r+0x4c>
 8009060:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009062:	e711      	b.n	8008e88 <_vfiprintf_r+0x50>
 8009064:	ab03      	add	r3, sp, #12
 8009066:	9300      	str	r3, [sp, #0]
 8009068:	462a      	mov	r2, r5
 800906a:	4b09      	ldr	r3, [pc, #36]	; (8009090 <_vfiprintf_r+0x258>)
 800906c:	a904      	add	r1, sp, #16
 800906e:	4630      	mov	r0, r6
 8009070:	f7fb fc48 	bl	8004904 <_printf_i>
 8009074:	e7e4      	b.n	8009040 <_vfiprintf_r+0x208>
 8009076:	bf00      	nop
 8009078:	080099bc 	.word	0x080099bc
 800907c:	080099dc 	.word	0x080099dc
 8009080:	0800999c 	.word	0x0800999c
 8009084:	08009934 	.word	0x08009934
 8009088:	0800993e 	.word	0x0800993e
 800908c:	080043bd 	.word	0x080043bd
 8009090:	08008e15 	.word	0x08008e15
 8009094:	0800993a 	.word	0x0800993a

08009098 <__swbuf_r>:
 8009098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800909a:	460e      	mov	r6, r1
 800909c:	4614      	mov	r4, r2
 800909e:	4605      	mov	r5, r0
 80090a0:	b118      	cbz	r0, 80090aa <__swbuf_r+0x12>
 80090a2:	6983      	ldr	r3, [r0, #24]
 80090a4:	b90b      	cbnz	r3, 80090aa <__swbuf_r+0x12>
 80090a6:	f7ff fd97 	bl	8008bd8 <__sinit>
 80090aa:	4b21      	ldr	r3, [pc, #132]	; (8009130 <__swbuf_r+0x98>)
 80090ac:	429c      	cmp	r4, r3
 80090ae:	d12b      	bne.n	8009108 <__swbuf_r+0x70>
 80090b0:	686c      	ldr	r4, [r5, #4]
 80090b2:	69a3      	ldr	r3, [r4, #24]
 80090b4:	60a3      	str	r3, [r4, #8]
 80090b6:	89a3      	ldrh	r3, [r4, #12]
 80090b8:	071a      	lsls	r2, r3, #28
 80090ba:	d52f      	bpl.n	800911c <__swbuf_r+0x84>
 80090bc:	6923      	ldr	r3, [r4, #16]
 80090be:	b36b      	cbz	r3, 800911c <__swbuf_r+0x84>
 80090c0:	6923      	ldr	r3, [r4, #16]
 80090c2:	6820      	ldr	r0, [r4, #0]
 80090c4:	1ac0      	subs	r0, r0, r3
 80090c6:	6963      	ldr	r3, [r4, #20]
 80090c8:	b2f6      	uxtb	r6, r6
 80090ca:	4283      	cmp	r3, r0
 80090cc:	4637      	mov	r7, r6
 80090ce:	dc04      	bgt.n	80090da <__swbuf_r+0x42>
 80090d0:	4621      	mov	r1, r4
 80090d2:	4628      	mov	r0, r5
 80090d4:	f7ff fcec 	bl	8008ab0 <_fflush_r>
 80090d8:	bb30      	cbnz	r0, 8009128 <__swbuf_r+0x90>
 80090da:	68a3      	ldr	r3, [r4, #8]
 80090dc:	3b01      	subs	r3, #1
 80090de:	60a3      	str	r3, [r4, #8]
 80090e0:	6823      	ldr	r3, [r4, #0]
 80090e2:	1c5a      	adds	r2, r3, #1
 80090e4:	6022      	str	r2, [r4, #0]
 80090e6:	701e      	strb	r6, [r3, #0]
 80090e8:	6963      	ldr	r3, [r4, #20]
 80090ea:	3001      	adds	r0, #1
 80090ec:	4283      	cmp	r3, r0
 80090ee:	d004      	beq.n	80090fa <__swbuf_r+0x62>
 80090f0:	89a3      	ldrh	r3, [r4, #12]
 80090f2:	07db      	lsls	r3, r3, #31
 80090f4:	d506      	bpl.n	8009104 <__swbuf_r+0x6c>
 80090f6:	2e0a      	cmp	r6, #10
 80090f8:	d104      	bne.n	8009104 <__swbuf_r+0x6c>
 80090fa:	4621      	mov	r1, r4
 80090fc:	4628      	mov	r0, r5
 80090fe:	f7ff fcd7 	bl	8008ab0 <_fflush_r>
 8009102:	b988      	cbnz	r0, 8009128 <__swbuf_r+0x90>
 8009104:	4638      	mov	r0, r7
 8009106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009108:	4b0a      	ldr	r3, [pc, #40]	; (8009134 <__swbuf_r+0x9c>)
 800910a:	429c      	cmp	r4, r3
 800910c:	d101      	bne.n	8009112 <__swbuf_r+0x7a>
 800910e:	68ac      	ldr	r4, [r5, #8]
 8009110:	e7cf      	b.n	80090b2 <__swbuf_r+0x1a>
 8009112:	4b09      	ldr	r3, [pc, #36]	; (8009138 <__swbuf_r+0xa0>)
 8009114:	429c      	cmp	r4, r3
 8009116:	bf08      	it	eq
 8009118:	68ec      	ldreq	r4, [r5, #12]
 800911a:	e7ca      	b.n	80090b2 <__swbuf_r+0x1a>
 800911c:	4621      	mov	r1, r4
 800911e:	4628      	mov	r0, r5
 8009120:	f000 f80c 	bl	800913c <__swsetup_r>
 8009124:	2800      	cmp	r0, #0
 8009126:	d0cb      	beq.n	80090c0 <__swbuf_r+0x28>
 8009128:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800912c:	e7ea      	b.n	8009104 <__swbuf_r+0x6c>
 800912e:	bf00      	nop
 8009130:	080099bc 	.word	0x080099bc
 8009134:	080099dc 	.word	0x080099dc
 8009138:	0800999c 	.word	0x0800999c

0800913c <__swsetup_r>:
 800913c:	4b32      	ldr	r3, [pc, #200]	; (8009208 <__swsetup_r+0xcc>)
 800913e:	b570      	push	{r4, r5, r6, lr}
 8009140:	681d      	ldr	r5, [r3, #0]
 8009142:	4606      	mov	r6, r0
 8009144:	460c      	mov	r4, r1
 8009146:	b125      	cbz	r5, 8009152 <__swsetup_r+0x16>
 8009148:	69ab      	ldr	r3, [r5, #24]
 800914a:	b913      	cbnz	r3, 8009152 <__swsetup_r+0x16>
 800914c:	4628      	mov	r0, r5
 800914e:	f7ff fd43 	bl	8008bd8 <__sinit>
 8009152:	4b2e      	ldr	r3, [pc, #184]	; (800920c <__swsetup_r+0xd0>)
 8009154:	429c      	cmp	r4, r3
 8009156:	d10f      	bne.n	8009178 <__swsetup_r+0x3c>
 8009158:	686c      	ldr	r4, [r5, #4]
 800915a:	89a3      	ldrh	r3, [r4, #12]
 800915c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009160:	0719      	lsls	r1, r3, #28
 8009162:	d42c      	bmi.n	80091be <__swsetup_r+0x82>
 8009164:	06dd      	lsls	r5, r3, #27
 8009166:	d411      	bmi.n	800918c <__swsetup_r+0x50>
 8009168:	2309      	movs	r3, #9
 800916a:	6033      	str	r3, [r6, #0]
 800916c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009170:	81a3      	strh	r3, [r4, #12]
 8009172:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009176:	e03e      	b.n	80091f6 <__swsetup_r+0xba>
 8009178:	4b25      	ldr	r3, [pc, #148]	; (8009210 <__swsetup_r+0xd4>)
 800917a:	429c      	cmp	r4, r3
 800917c:	d101      	bne.n	8009182 <__swsetup_r+0x46>
 800917e:	68ac      	ldr	r4, [r5, #8]
 8009180:	e7eb      	b.n	800915a <__swsetup_r+0x1e>
 8009182:	4b24      	ldr	r3, [pc, #144]	; (8009214 <__swsetup_r+0xd8>)
 8009184:	429c      	cmp	r4, r3
 8009186:	bf08      	it	eq
 8009188:	68ec      	ldreq	r4, [r5, #12]
 800918a:	e7e6      	b.n	800915a <__swsetup_r+0x1e>
 800918c:	0758      	lsls	r0, r3, #29
 800918e:	d512      	bpl.n	80091b6 <__swsetup_r+0x7a>
 8009190:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009192:	b141      	cbz	r1, 80091a6 <__swsetup_r+0x6a>
 8009194:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009198:	4299      	cmp	r1, r3
 800919a:	d002      	beq.n	80091a2 <__swsetup_r+0x66>
 800919c:	4630      	mov	r0, r6
 800919e:	f7fe fd4f 	bl	8007c40 <_free_r>
 80091a2:	2300      	movs	r3, #0
 80091a4:	6363      	str	r3, [r4, #52]	; 0x34
 80091a6:	89a3      	ldrh	r3, [r4, #12]
 80091a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80091ac:	81a3      	strh	r3, [r4, #12]
 80091ae:	2300      	movs	r3, #0
 80091b0:	6063      	str	r3, [r4, #4]
 80091b2:	6923      	ldr	r3, [r4, #16]
 80091b4:	6023      	str	r3, [r4, #0]
 80091b6:	89a3      	ldrh	r3, [r4, #12]
 80091b8:	f043 0308 	orr.w	r3, r3, #8
 80091bc:	81a3      	strh	r3, [r4, #12]
 80091be:	6923      	ldr	r3, [r4, #16]
 80091c0:	b94b      	cbnz	r3, 80091d6 <__swsetup_r+0x9a>
 80091c2:	89a3      	ldrh	r3, [r4, #12]
 80091c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80091c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091cc:	d003      	beq.n	80091d6 <__swsetup_r+0x9a>
 80091ce:	4621      	mov	r1, r4
 80091d0:	4630      	mov	r0, r6
 80091d2:	f000 f84d 	bl	8009270 <__smakebuf_r>
 80091d6:	89a0      	ldrh	r0, [r4, #12]
 80091d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80091dc:	f010 0301 	ands.w	r3, r0, #1
 80091e0:	d00a      	beq.n	80091f8 <__swsetup_r+0xbc>
 80091e2:	2300      	movs	r3, #0
 80091e4:	60a3      	str	r3, [r4, #8]
 80091e6:	6963      	ldr	r3, [r4, #20]
 80091e8:	425b      	negs	r3, r3
 80091ea:	61a3      	str	r3, [r4, #24]
 80091ec:	6923      	ldr	r3, [r4, #16]
 80091ee:	b943      	cbnz	r3, 8009202 <__swsetup_r+0xc6>
 80091f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80091f4:	d1ba      	bne.n	800916c <__swsetup_r+0x30>
 80091f6:	bd70      	pop	{r4, r5, r6, pc}
 80091f8:	0781      	lsls	r1, r0, #30
 80091fa:	bf58      	it	pl
 80091fc:	6963      	ldrpl	r3, [r4, #20]
 80091fe:	60a3      	str	r3, [r4, #8]
 8009200:	e7f4      	b.n	80091ec <__swsetup_r+0xb0>
 8009202:	2000      	movs	r0, #0
 8009204:	e7f7      	b.n	80091f6 <__swsetup_r+0xba>
 8009206:	bf00      	nop
 8009208:	20000014 	.word	0x20000014
 800920c:	080099bc 	.word	0x080099bc
 8009210:	080099dc 	.word	0x080099dc
 8009214:	0800999c 	.word	0x0800999c

08009218 <abort>:
 8009218:	b508      	push	{r3, lr}
 800921a:	2006      	movs	r0, #6
 800921c:	f000 f898 	bl	8009350 <raise>
 8009220:	2001      	movs	r0, #1
 8009222:	f7f8 fcf3 	bl	8001c0c <_exit>

08009226 <__swhatbuf_r>:
 8009226:	b570      	push	{r4, r5, r6, lr}
 8009228:	460e      	mov	r6, r1
 800922a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800922e:	2900      	cmp	r1, #0
 8009230:	b096      	sub	sp, #88	; 0x58
 8009232:	4614      	mov	r4, r2
 8009234:	461d      	mov	r5, r3
 8009236:	da08      	bge.n	800924a <__swhatbuf_r+0x24>
 8009238:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800923c:	2200      	movs	r2, #0
 800923e:	602a      	str	r2, [r5, #0]
 8009240:	061a      	lsls	r2, r3, #24
 8009242:	d410      	bmi.n	8009266 <__swhatbuf_r+0x40>
 8009244:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009248:	e00e      	b.n	8009268 <__swhatbuf_r+0x42>
 800924a:	466a      	mov	r2, sp
 800924c:	f000 f89c 	bl	8009388 <_fstat_r>
 8009250:	2800      	cmp	r0, #0
 8009252:	dbf1      	blt.n	8009238 <__swhatbuf_r+0x12>
 8009254:	9a01      	ldr	r2, [sp, #4]
 8009256:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800925a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800925e:	425a      	negs	r2, r3
 8009260:	415a      	adcs	r2, r3
 8009262:	602a      	str	r2, [r5, #0]
 8009264:	e7ee      	b.n	8009244 <__swhatbuf_r+0x1e>
 8009266:	2340      	movs	r3, #64	; 0x40
 8009268:	2000      	movs	r0, #0
 800926a:	6023      	str	r3, [r4, #0]
 800926c:	b016      	add	sp, #88	; 0x58
 800926e:	bd70      	pop	{r4, r5, r6, pc}

08009270 <__smakebuf_r>:
 8009270:	898b      	ldrh	r3, [r1, #12]
 8009272:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009274:	079d      	lsls	r5, r3, #30
 8009276:	4606      	mov	r6, r0
 8009278:	460c      	mov	r4, r1
 800927a:	d507      	bpl.n	800928c <__smakebuf_r+0x1c>
 800927c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009280:	6023      	str	r3, [r4, #0]
 8009282:	6123      	str	r3, [r4, #16]
 8009284:	2301      	movs	r3, #1
 8009286:	6163      	str	r3, [r4, #20]
 8009288:	b002      	add	sp, #8
 800928a:	bd70      	pop	{r4, r5, r6, pc}
 800928c:	ab01      	add	r3, sp, #4
 800928e:	466a      	mov	r2, sp
 8009290:	f7ff ffc9 	bl	8009226 <__swhatbuf_r>
 8009294:	9900      	ldr	r1, [sp, #0]
 8009296:	4605      	mov	r5, r0
 8009298:	4630      	mov	r0, r6
 800929a:	f7fe fd3d 	bl	8007d18 <_malloc_r>
 800929e:	b948      	cbnz	r0, 80092b4 <__smakebuf_r+0x44>
 80092a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092a4:	059a      	lsls	r2, r3, #22
 80092a6:	d4ef      	bmi.n	8009288 <__smakebuf_r+0x18>
 80092a8:	f023 0303 	bic.w	r3, r3, #3
 80092ac:	f043 0302 	orr.w	r3, r3, #2
 80092b0:	81a3      	strh	r3, [r4, #12]
 80092b2:	e7e3      	b.n	800927c <__smakebuf_r+0xc>
 80092b4:	4b0d      	ldr	r3, [pc, #52]	; (80092ec <__smakebuf_r+0x7c>)
 80092b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80092b8:	89a3      	ldrh	r3, [r4, #12]
 80092ba:	6020      	str	r0, [r4, #0]
 80092bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092c0:	81a3      	strh	r3, [r4, #12]
 80092c2:	9b00      	ldr	r3, [sp, #0]
 80092c4:	6163      	str	r3, [r4, #20]
 80092c6:	9b01      	ldr	r3, [sp, #4]
 80092c8:	6120      	str	r0, [r4, #16]
 80092ca:	b15b      	cbz	r3, 80092e4 <__smakebuf_r+0x74>
 80092cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092d0:	4630      	mov	r0, r6
 80092d2:	f000 f86b 	bl	80093ac <_isatty_r>
 80092d6:	b128      	cbz	r0, 80092e4 <__smakebuf_r+0x74>
 80092d8:	89a3      	ldrh	r3, [r4, #12]
 80092da:	f023 0303 	bic.w	r3, r3, #3
 80092de:	f043 0301 	orr.w	r3, r3, #1
 80092e2:	81a3      	strh	r3, [r4, #12]
 80092e4:	89a0      	ldrh	r0, [r4, #12]
 80092e6:	4305      	orrs	r5, r0
 80092e8:	81a5      	strh	r5, [r4, #12]
 80092ea:	e7cd      	b.n	8009288 <__smakebuf_r+0x18>
 80092ec:	08008b71 	.word	0x08008b71

080092f0 <_malloc_usable_size_r>:
 80092f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092f4:	1f18      	subs	r0, r3, #4
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	bfbc      	itt	lt
 80092fa:	580b      	ldrlt	r3, [r1, r0]
 80092fc:	18c0      	addlt	r0, r0, r3
 80092fe:	4770      	bx	lr

08009300 <_raise_r>:
 8009300:	291f      	cmp	r1, #31
 8009302:	b538      	push	{r3, r4, r5, lr}
 8009304:	4604      	mov	r4, r0
 8009306:	460d      	mov	r5, r1
 8009308:	d904      	bls.n	8009314 <_raise_r+0x14>
 800930a:	2316      	movs	r3, #22
 800930c:	6003      	str	r3, [r0, #0]
 800930e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009312:	bd38      	pop	{r3, r4, r5, pc}
 8009314:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009316:	b112      	cbz	r2, 800931e <_raise_r+0x1e>
 8009318:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800931c:	b94b      	cbnz	r3, 8009332 <_raise_r+0x32>
 800931e:	4620      	mov	r0, r4
 8009320:	f000 f830 	bl	8009384 <_getpid_r>
 8009324:	462a      	mov	r2, r5
 8009326:	4601      	mov	r1, r0
 8009328:	4620      	mov	r0, r4
 800932a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800932e:	f000 b817 	b.w	8009360 <_kill_r>
 8009332:	2b01      	cmp	r3, #1
 8009334:	d00a      	beq.n	800934c <_raise_r+0x4c>
 8009336:	1c59      	adds	r1, r3, #1
 8009338:	d103      	bne.n	8009342 <_raise_r+0x42>
 800933a:	2316      	movs	r3, #22
 800933c:	6003      	str	r3, [r0, #0]
 800933e:	2001      	movs	r0, #1
 8009340:	e7e7      	b.n	8009312 <_raise_r+0x12>
 8009342:	2400      	movs	r4, #0
 8009344:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009348:	4628      	mov	r0, r5
 800934a:	4798      	blx	r3
 800934c:	2000      	movs	r0, #0
 800934e:	e7e0      	b.n	8009312 <_raise_r+0x12>

08009350 <raise>:
 8009350:	4b02      	ldr	r3, [pc, #8]	; (800935c <raise+0xc>)
 8009352:	4601      	mov	r1, r0
 8009354:	6818      	ldr	r0, [r3, #0]
 8009356:	f7ff bfd3 	b.w	8009300 <_raise_r>
 800935a:	bf00      	nop
 800935c:	20000014 	.word	0x20000014

08009360 <_kill_r>:
 8009360:	b538      	push	{r3, r4, r5, lr}
 8009362:	4d07      	ldr	r5, [pc, #28]	; (8009380 <_kill_r+0x20>)
 8009364:	2300      	movs	r3, #0
 8009366:	4604      	mov	r4, r0
 8009368:	4608      	mov	r0, r1
 800936a:	4611      	mov	r1, r2
 800936c:	602b      	str	r3, [r5, #0]
 800936e:	f7f8 fc3d 	bl	8001bec <_kill>
 8009372:	1c43      	adds	r3, r0, #1
 8009374:	d102      	bne.n	800937c <_kill_r+0x1c>
 8009376:	682b      	ldr	r3, [r5, #0]
 8009378:	b103      	cbz	r3, 800937c <_kill_r+0x1c>
 800937a:	6023      	str	r3, [r4, #0]
 800937c:	bd38      	pop	{r3, r4, r5, pc}
 800937e:	bf00      	nop
 8009380:	20000630 	.word	0x20000630

08009384 <_getpid_r>:
 8009384:	f7f8 bc2a 	b.w	8001bdc <_getpid>

08009388 <_fstat_r>:
 8009388:	b538      	push	{r3, r4, r5, lr}
 800938a:	4d07      	ldr	r5, [pc, #28]	; (80093a8 <_fstat_r+0x20>)
 800938c:	2300      	movs	r3, #0
 800938e:	4604      	mov	r4, r0
 8009390:	4608      	mov	r0, r1
 8009392:	4611      	mov	r1, r2
 8009394:	602b      	str	r3, [r5, #0]
 8009396:	f7f8 fc88 	bl	8001caa <_fstat>
 800939a:	1c43      	adds	r3, r0, #1
 800939c:	d102      	bne.n	80093a4 <_fstat_r+0x1c>
 800939e:	682b      	ldr	r3, [r5, #0]
 80093a0:	b103      	cbz	r3, 80093a4 <_fstat_r+0x1c>
 80093a2:	6023      	str	r3, [r4, #0]
 80093a4:	bd38      	pop	{r3, r4, r5, pc}
 80093a6:	bf00      	nop
 80093a8:	20000630 	.word	0x20000630

080093ac <_isatty_r>:
 80093ac:	b538      	push	{r3, r4, r5, lr}
 80093ae:	4d06      	ldr	r5, [pc, #24]	; (80093c8 <_isatty_r+0x1c>)
 80093b0:	2300      	movs	r3, #0
 80093b2:	4604      	mov	r4, r0
 80093b4:	4608      	mov	r0, r1
 80093b6:	602b      	str	r3, [r5, #0]
 80093b8:	f7f8 fc87 	bl	8001cca <_isatty>
 80093bc:	1c43      	adds	r3, r0, #1
 80093be:	d102      	bne.n	80093c6 <_isatty_r+0x1a>
 80093c0:	682b      	ldr	r3, [r5, #0]
 80093c2:	b103      	cbz	r3, 80093c6 <_isatty_r+0x1a>
 80093c4:	6023      	str	r3, [r4, #0]
 80093c6:	bd38      	pop	{r3, r4, r5, pc}
 80093c8:	20000630 	.word	0x20000630

080093cc <round>:
 80093cc:	ec51 0b10 	vmov	r0, r1, d0
 80093d0:	b570      	push	{r4, r5, r6, lr}
 80093d2:	f3c1 550a 	ubfx	r5, r1, #20, #11
 80093d6:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 80093da:	2c13      	cmp	r4, #19
 80093dc:	ee10 2a10 	vmov	r2, s0
 80093e0:	460b      	mov	r3, r1
 80093e2:	dc19      	bgt.n	8009418 <round+0x4c>
 80093e4:	2c00      	cmp	r4, #0
 80093e6:	da09      	bge.n	80093fc <round+0x30>
 80093e8:	3401      	adds	r4, #1
 80093ea:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80093ee:	d103      	bne.n	80093f8 <round+0x2c>
 80093f0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80093f4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80093f8:	2200      	movs	r2, #0
 80093fa:	e028      	b.n	800944e <round+0x82>
 80093fc:	4d15      	ldr	r5, [pc, #84]	; (8009454 <round+0x88>)
 80093fe:	4125      	asrs	r5, r4
 8009400:	ea01 0605 	and.w	r6, r1, r5
 8009404:	4332      	orrs	r2, r6
 8009406:	d00e      	beq.n	8009426 <round+0x5a>
 8009408:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800940c:	fa42 f404 	asr.w	r4, r2, r4
 8009410:	4423      	add	r3, r4
 8009412:	ea23 0305 	bic.w	r3, r3, r5
 8009416:	e7ef      	b.n	80093f8 <round+0x2c>
 8009418:	2c33      	cmp	r4, #51	; 0x33
 800941a:	dd07      	ble.n	800942c <round+0x60>
 800941c:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8009420:	d101      	bne.n	8009426 <round+0x5a>
 8009422:	f7f6 ff4b 	bl	80002bc <__adddf3>
 8009426:	ec41 0b10 	vmov	d0, r0, r1
 800942a:	bd70      	pop	{r4, r5, r6, pc}
 800942c:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8009430:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009434:	40f5      	lsrs	r5, r6
 8009436:	4228      	tst	r0, r5
 8009438:	d0f5      	beq.n	8009426 <round+0x5a>
 800943a:	2101      	movs	r1, #1
 800943c:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8009440:	fa01 f404 	lsl.w	r4, r1, r4
 8009444:	1912      	adds	r2, r2, r4
 8009446:	bf28      	it	cs
 8009448:	185b      	addcs	r3, r3, r1
 800944a:	ea22 0205 	bic.w	r2, r2, r5
 800944e:	4619      	mov	r1, r3
 8009450:	4610      	mov	r0, r2
 8009452:	e7e8      	b.n	8009426 <round+0x5a>
 8009454:	000fffff 	.word	0x000fffff

08009458 <_init>:
 8009458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800945a:	bf00      	nop
 800945c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800945e:	bc08      	pop	{r3}
 8009460:	469e      	mov	lr, r3
 8009462:	4770      	bx	lr

08009464 <_fini>:
 8009464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009466:	bf00      	nop
 8009468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800946a:	bc08      	pop	{r3}
 800946c:	469e      	mov	lr, r3
 800946e:	4770      	bx	lr
