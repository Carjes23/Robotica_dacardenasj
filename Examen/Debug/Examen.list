
Examen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac54  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000770  0800adf8  0800adf8  0001adf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b568  0800b568  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b568  0800b568  0001b568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b570  0800b570  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b570  0800b570  0001b570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b574  0800b574  0001b574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800b578  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005f4  200001f0  0800b768  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200007e4  0800b768  000207e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004b2b  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000105e  00000000  00000000  00024d4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000480  00000000  00000000  00025db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000400  00000000  00000000  00026230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001093b  00000000  00000000  00026630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000054f1  00000000  00000000  00036f6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00057dd9  00000000  00000000  0003c45c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00094235  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b30  00000000  00000000  00094288  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800addc 	.word	0x0800addc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	0800addc 	.word	0x0800addc

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ccc:	f000 b9aa 	b.w	8001024 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468e      	mov	lr, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d14d      	bne.n	8000dfe <__udivmoddi4+0xaa>
 8000d62:	428a      	cmp	r2, r1
 8000d64:	4694      	mov	ip, r2
 8000d66:	d969      	bls.n	8000e3c <__udivmoddi4+0xe8>
 8000d68:	fab2 f282 	clz	r2, r2
 8000d6c:	b152      	cbz	r2, 8000d84 <__udivmoddi4+0x30>
 8000d6e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d72:	f1c2 0120 	rsb	r1, r2, #32
 8000d76:	fa20 f101 	lsr.w	r1, r0, r1
 8000d7a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d82:	4094      	lsls	r4, r2
 8000d84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d88:	0c21      	lsrs	r1, r4, #16
 8000d8a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d8e:	fa1f f78c 	uxth.w	r7, ip
 8000d92:	fb08 e316 	mls	r3, r8, r6, lr
 8000d96:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d9a:	fb06 f107 	mul.w	r1, r6, r7
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x64>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000daa:	f080 811f 	bcs.w	8000fec <__udivmoddi4+0x298>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 811c 	bls.w	8000fec <__udivmoddi4+0x298>
 8000db4:	3e02      	subs	r6, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a5b      	subs	r3, r3, r1
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc8:	fb00 f707 	mul.w	r7, r0, r7
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	d90a      	bls.n	8000de6 <__udivmoddi4+0x92>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dd8:	f080 810a 	bcs.w	8000ff0 <__udivmoddi4+0x29c>
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	f240 8107 	bls.w	8000ff0 <__udivmoddi4+0x29c>
 8000de2:	4464      	add	r4, ip
 8000de4:	3802      	subs	r0, #2
 8000de6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dea:	1be4      	subs	r4, r4, r7
 8000dec:	2600      	movs	r6, #0
 8000dee:	b11d      	cbz	r5, 8000df8 <__udivmoddi4+0xa4>
 8000df0:	40d4      	lsrs	r4, r2
 8000df2:	2300      	movs	r3, #0
 8000df4:	e9c5 4300 	strd	r4, r3, [r5]
 8000df8:	4631      	mov	r1, r6
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d909      	bls.n	8000e16 <__udivmoddi4+0xc2>
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	f000 80ef 	beq.w	8000fe6 <__udivmoddi4+0x292>
 8000e08:	2600      	movs	r6, #0
 8000e0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e0e:	4630      	mov	r0, r6
 8000e10:	4631      	mov	r1, r6
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	fab3 f683 	clz	r6, r3
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	d14a      	bne.n	8000eb4 <__udivmoddi4+0x160>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d302      	bcc.n	8000e28 <__udivmoddi4+0xd4>
 8000e22:	4282      	cmp	r2, r0
 8000e24:	f200 80f9 	bhi.w	800101a <__udivmoddi4+0x2c6>
 8000e28:	1a84      	subs	r4, r0, r2
 8000e2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e2e:	2001      	movs	r0, #1
 8000e30:	469e      	mov	lr, r3
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	d0e0      	beq.n	8000df8 <__udivmoddi4+0xa4>
 8000e36:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e3a:	e7dd      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000e3c:	b902      	cbnz	r2, 8000e40 <__udivmoddi4+0xec>
 8000e3e:	deff      	udf	#255	; 0xff
 8000e40:	fab2 f282 	clz	r2, r2
 8000e44:	2a00      	cmp	r2, #0
 8000e46:	f040 8092 	bne.w	8000f6e <__udivmoddi4+0x21a>
 8000e4a:	eba1 010c 	sub.w	r1, r1, ip
 8000e4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e52:	fa1f fe8c 	uxth.w	lr, ip
 8000e56:	2601      	movs	r6, #1
 8000e58:	0c20      	lsrs	r0, r4, #16
 8000e5a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e5e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e62:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e66:	fb0e f003 	mul.w	r0, lr, r3
 8000e6a:	4288      	cmp	r0, r1
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x12c>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x12a>
 8000e78:	4288      	cmp	r0, r1
 8000e7a:	f200 80cb 	bhi.w	8001014 <__udivmoddi4+0x2c0>
 8000e7e:	4643      	mov	r3, r8
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e88:	fb07 1110 	mls	r1, r7, r0, r1
 8000e8c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e90:	fb0e fe00 	mul.w	lr, lr, r0
 8000e94:	45a6      	cmp	lr, r4
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x156>
 8000e98:	eb1c 0404 	adds.w	r4, ip, r4
 8000e9c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ea0:	d202      	bcs.n	8000ea8 <__udivmoddi4+0x154>
 8000ea2:	45a6      	cmp	lr, r4
 8000ea4:	f200 80bb 	bhi.w	800101e <__udivmoddi4+0x2ca>
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000eb2:	e79c      	b.n	8000dee <__udivmoddi4+0x9a>
 8000eb4:	f1c6 0720 	rsb	r7, r6, #32
 8000eb8:	40b3      	lsls	r3, r6
 8000eba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ebe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ec2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ec6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eca:	431c      	orrs	r4, r3
 8000ecc:	40f9      	lsrs	r1, r7
 8000ece:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eda:	0c20      	lsrs	r0, r4, #16
 8000edc:	fa1f fe8c 	uxth.w	lr, ip
 8000ee0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ee4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ee8:	fb08 f00e 	mul.w	r0, r8, lr
 8000eec:	4288      	cmp	r0, r1
 8000eee:	fa02 f206 	lsl.w	r2, r2, r6
 8000ef2:	d90b      	bls.n	8000f0c <__udivmoddi4+0x1b8>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000efc:	f080 8088 	bcs.w	8001010 <__udivmoddi4+0x2bc>
 8000f00:	4288      	cmp	r0, r1
 8000f02:	f240 8085 	bls.w	8001010 <__udivmoddi4+0x2bc>
 8000f06:	f1a8 0802 	sub.w	r8, r8, #2
 8000f0a:	4461      	add	r1, ip
 8000f0c:	1a09      	subs	r1, r1, r0
 8000f0e:	b2a4      	uxth	r4, r4
 8000f10:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f14:	fb09 1110 	mls	r1, r9, r0, r1
 8000f18:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f20:	458e      	cmp	lr, r1
 8000f22:	d908      	bls.n	8000f36 <__udivmoddi4+0x1e2>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f2c:	d26c      	bcs.n	8001008 <__udivmoddi4+0x2b4>
 8000f2e:	458e      	cmp	lr, r1
 8000f30:	d96a      	bls.n	8001008 <__udivmoddi4+0x2b4>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4461      	add	r1, ip
 8000f36:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f3a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f3e:	eba1 010e 	sub.w	r1, r1, lr
 8000f42:	42a1      	cmp	r1, r4
 8000f44:	46c8      	mov	r8, r9
 8000f46:	46a6      	mov	lr, r4
 8000f48:	d356      	bcc.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f4a:	d053      	beq.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f4c:	b15d      	cbz	r5, 8000f66 <__udivmoddi4+0x212>
 8000f4e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f52:	eb61 010e 	sbc.w	r1, r1, lr
 8000f56:	fa01 f707 	lsl.w	r7, r1, r7
 8000f5a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f5e:	40f1      	lsrs	r1, r6
 8000f60:	431f      	orrs	r7, r3
 8000f62:	e9c5 7100 	strd	r7, r1, [r5]
 8000f66:	2600      	movs	r6, #0
 8000f68:	4631      	mov	r1, r6
 8000f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f6e:	f1c2 0320 	rsb	r3, r2, #32
 8000f72:	40d8      	lsrs	r0, r3
 8000f74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f78:	fa21 f303 	lsr.w	r3, r1, r3
 8000f7c:	4091      	lsls	r1, r2
 8000f7e:	4301      	orrs	r1, r0
 8000f80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f84:	fa1f fe8c 	uxth.w	lr, ip
 8000f88:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f8c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f90:	0c0b      	lsrs	r3, r1, #16
 8000f92:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f96:	fb00 f60e 	mul.w	r6, r0, lr
 8000f9a:	429e      	cmp	r6, r3
 8000f9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000fa0:	d908      	bls.n	8000fb4 <__udivmoddi4+0x260>
 8000fa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000faa:	d22f      	bcs.n	800100c <__udivmoddi4+0x2b8>
 8000fac:	429e      	cmp	r6, r3
 8000fae:	d92d      	bls.n	800100c <__udivmoddi4+0x2b8>
 8000fb0:	3802      	subs	r0, #2
 8000fb2:	4463      	add	r3, ip
 8000fb4:	1b9b      	subs	r3, r3, r6
 8000fb6:	b289      	uxth	r1, r1
 8000fb8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fbc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fc4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fc8:	428b      	cmp	r3, r1
 8000fca:	d908      	bls.n	8000fde <__udivmoddi4+0x28a>
 8000fcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fd0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fd4:	d216      	bcs.n	8001004 <__udivmoddi4+0x2b0>
 8000fd6:	428b      	cmp	r3, r1
 8000fd8:	d914      	bls.n	8001004 <__udivmoddi4+0x2b0>
 8000fda:	3e02      	subs	r6, #2
 8000fdc:	4461      	add	r1, ip
 8000fde:	1ac9      	subs	r1, r1, r3
 8000fe0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fe4:	e738      	b.n	8000e58 <__udivmoddi4+0x104>
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e705      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e3      	b.n	8000db8 <__udivmoddi4+0x64>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6f8      	b.n	8000de6 <__udivmoddi4+0x92>
 8000ff4:	454b      	cmp	r3, r9
 8000ff6:	d2a9      	bcs.n	8000f4c <__udivmoddi4+0x1f8>
 8000ff8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ffc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001000:	3801      	subs	r0, #1
 8001002:	e7a3      	b.n	8000f4c <__udivmoddi4+0x1f8>
 8001004:	4646      	mov	r6, r8
 8001006:	e7ea      	b.n	8000fde <__udivmoddi4+0x28a>
 8001008:	4620      	mov	r0, r4
 800100a:	e794      	b.n	8000f36 <__udivmoddi4+0x1e2>
 800100c:	4640      	mov	r0, r8
 800100e:	e7d1      	b.n	8000fb4 <__udivmoddi4+0x260>
 8001010:	46d0      	mov	r8, sl
 8001012:	e77b      	b.n	8000f0c <__udivmoddi4+0x1b8>
 8001014:	3b02      	subs	r3, #2
 8001016:	4461      	add	r1, ip
 8001018:	e732      	b.n	8000e80 <__udivmoddi4+0x12c>
 800101a:	4630      	mov	r0, r6
 800101c:	e709      	b.n	8000e32 <__udivmoddi4+0xde>
 800101e:	4464      	add	r4, ip
 8001020:	3802      	subs	r0, #2
 8001022:	e742      	b.n	8000eaa <__udivmoddi4+0x156>

08001024 <__aeabi_idiv0>:
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <main>:
bool newMoveBlue, newMoveYellow;
bool calibrate = 0;

void updatePosition(void);

int main(void) {
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
	//yellow 0, blue 1

	configPeripherals();
 800102e:	f000 f869 	bl	8001104 <configPeripherals>

	/* Loop forever */
	while (1) {
		/* SI llegamos es que algo salio mal... */
		/* El caracter '@' nos indica que es el final de la cadena*/
		if (rxData2 != '\0') {
 8001032:	4b2c      	ldr	r3, [pc, #176]	; (80010e4 <main+0xbc>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d037      	beq.n	80010aa <main+0x82>
//			writeChar(&handlerConexion, rxData2);
			bufferReception[counterReception] = rxData2;
 800103a:	4b2b      	ldr	r3, [pc, #172]	; (80010e8 <main+0xc0>)
 800103c:	881b      	ldrh	r3, [r3, #0]
 800103e:	461a      	mov	r2, r3
 8001040:	4b28      	ldr	r3, [pc, #160]	; (80010e4 <main+0xbc>)
 8001042:	7819      	ldrb	r1, [r3, #0]
 8001044:	4b29      	ldr	r3, [pc, #164]	; (80010ec <main+0xc4>)
 8001046:	5499      	strb	r1, [r3, r2]
			counterReception++;
 8001048:	4b27      	ldr	r3, [pc, #156]	; (80010e8 <main+0xc0>)
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	3301      	adds	r3, #1
 800104e:	b29a      	uxth	r2, r3
 8001050:	4b25      	ldr	r3, [pc, #148]	; (80010e8 <main+0xc0>)
 8001052:	801a      	strh	r2, [r3, #0]

			// If the incoming character is a newline, set a flag
			// so the main loop can do something about it
			if (rxData2 == '@') {
 8001054:	4b23      	ldr	r3, [pc, #140]	; (80010e4 <main+0xbc>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b40      	cmp	r3, #64	; 0x40
 800105a:	d113      	bne.n	8001084 <main+0x5c>
				stringComplete = 1;
 800105c:	4b24      	ldr	r3, [pc, #144]	; (80010f0 <main+0xc8>)
 800105e:	2201      	movs	r2, #1
 8001060:	701a      	strb	r2, [r3, #0]
				sprintf(bufferData, "\n");
 8001062:	4924      	ldr	r1, [pc, #144]	; (80010f4 <main+0xcc>)
 8001064:	4824      	ldr	r0, [pc, #144]	; (80010f8 <main+0xd0>)
 8001066:	f004 fba9 	bl	80057bc <siprintf>
				writeString(&handlerTerminal, bufferData);
 800106a:	4923      	ldr	r1, [pc, #140]	; (80010f8 <main+0xd0>)
 800106c:	4823      	ldr	r0, [pc, #140]	; (80010fc <main+0xd4>)
 800106e:	f003 fcd4 	bl	8004a1a <writeString>
				//Agrego esta linea para crear el string con el null al final
				bufferReception[counterReception] = '\0';
 8001072:	4b1d      	ldr	r3, [pc, #116]	; (80010e8 <main+0xc0>)
 8001074:	881b      	ldrh	r3, [r3, #0]
 8001076:	461a      	mov	r2, r3
 8001078:	4b1c      	ldr	r3, [pc, #112]	; (80010ec <main+0xc4>)
 800107a:	2100      	movs	r1, #0
 800107c:	5499      	strb	r1, [r3, r2]
				counterReception = 0;
 800107e:	4b1a      	ldr	r3, [pc, #104]	; (80010e8 <main+0xc0>)
 8001080:	2200      	movs	r2, #0
 8001082:	801a      	strh	r2, [r3, #0]
			}
			if (rxData2 == '\b') {
 8001084:	4b17      	ldr	r3, [pc, #92]	; (80010e4 <main+0xbc>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b08      	cmp	r3, #8
 800108a:	d10b      	bne.n	80010a4 <main+0x7c>
				counterReception--;
 800108c:	4b16      	ldr	r3, [pc, #88]	; (80010e8 <main+0xc0>)
 800108e:	881b      	ldrh	r3, [r3, #0]
 8001090:	3b01      	subs	r3, #1
 8001092:	b29a      	uxth	r2, r3
 8001094:	4b14      	ldr	r3, [pc, #80]	; (80010e8 <main+0xc0>)
 8001096:	801a      	strh	r2, [r3, #0]
				counterReception--;
 8001098:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <main+0xc0>)
 800109a:	881b      	ldrh	r3, [r3, #0]
 800109c:	3b01      	subs	r3, #1
 800109e:	b29a      	uxth	r2, r3
 80010a0:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <main+0xc0>)
 80010a2:	801a      	strh	r2, [r3, #0]
			}
			//Para que no vuelva entrar. Solo cambia debido a la interrupcion
			rxData2 = '\0';
 80010a4:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <main+0xbc>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	701a      	strb	r2, [r3, #0]
		}

		//Hacemos un analisis de la cadena de datos obtenida
		if (stringComplete) {
 80010aa:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <main+0xc8>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d0bf      	beq.n	8001032 <main+0xa>
			parseCommands(bufferReception);
 80010b2:	480e      	ldr	r0, [pc, #56]	; (80010ec <main+0xc4>)
 80010b4:	f000 fa1c 	bl	80014f0 <parseCommands>
			writeChar(&handlerConexion, '\n');
 80010b8:	210a      	movs	r1, #10
 80010ba:	4811      	ldr	r0, [pc, #68]	; (8001100 <main+0xd8>)
 80010bc:	f003 fc94 	bl	80049e8 <writeChar>
			stringComplete = 0;
 80010c0:	4b0b      	ldr	r3, [pc, #44]	; (80010f0 <main+0xc8>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	701a      	strb	r2, [r3, #0]
			for (int i = 0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	e007      	b.n	80010dc <main+0xb4>
					i < sizeof(bufferReception) / sizeof(bufferReception[0]);
					i++) {
				bufferReception[i] = 0;
 80010cc:	4a07      	ldr	r2, [pc, #28]	; (80010ec <main+0xc4>)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4413      	add	r3, r2
 80010d2:	2200      	movs	r2, #0
 80010d4:	701a      	strb	r2, [r3, #0]
					i++) {
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	3301      	adds	r3, #1
 80010da:	607b      	str	r3, [r7, #4]
					i < sizeof(bufferReception) / sizeof(bufferReception[0]);
 80010dc:	687b      	ldr	r3, [r7, #4]
			for (int i = 0;
 80010de:	2b13      	cmp	r3, #19
 80010e0:	d9f4      	bls.n	80010cc <main+0xa4>
		if (rxData2 != '\0') {
 80010e2:	e7a6      	b.n	8001032 <main+0xa>
 80010e4:	2000033c 	.word	0x2000033c
 80010e8:	20000358 	.word	0x20000358
 80010ec:	2000035c 	.word	0x2000035c
 80010f0:	200004b8 	.word	0x200004b8
 80010f4:	0800adf8 	.word	0x0800adf8
 80010f8:	200003b0 	.word	0x200003b0
 80010fc:	2000020c 	.word	0x2000020c
 8001100:	200002a4 	.word	0x200002a4

08001104 <configPeripherals>:
			}
		}
	}
}

void configPeripherals(void) {
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0

	//Activacion cooprocesador matematico(importante para esta tarea)
	SCB->CPACR |= (0xF << 20);
 8001108:	4bab      	ldr	r3, [pc, #684]	; (80013b8 <configPeripherals+0x2b4>)
 800110a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800110e:	4aaa      	ldr	r2, [pc, #680]	; (80013b8 <configPeripherals+0x2b4>)
 8001110:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001114:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	configPLL(100);
 8001118:	2064      	movs	r0, #100	; 0x64
 800111a:	f002 fd41 	bl	8003ba0 <configPLL>

	ledUsuario.pGPIOx = GPIOC;
 800111e:	4ba7      	ldr	r3, [pc, #668]	; (80013bc <configPeripherals+0x2b8>)
 8001120:	4aa7      	ldr	r2, [pc, #668]	; (80013c0 <configPeripherals+0x2bc>)
 8001122:	601a      	str	r2, [r3, #0]
	ledUsuario.GPIO_PinConfig_t.GPIO_PinMode = GPIO_MODE_OUT;
 8001124:	4ba5      	ldr	r3, [pc, #660]	; (80013bc <configPeripherals+0x2b8>)
 8001126:	2201      	movs	r2, #1
 8001128:	715a      	strb	r2, [r3, #5]
	ledUsuario.GPIO_PinConfig_t.GPIO_PinNumber = PIN_5;
 800112a:	4ba4      	ldr	r3, [pc, #656]	; (80013bc <configPeripherals+0x2b8>)
 800112c:	2205      	movs	r2, #5
 800112e:	711a      	strb	r2, [r3, #4]
	GPIO_Config(&ledUsuario);
 8001130:	48a2      	ldr	r0, [pc, #648]	; (80013bc <configPeripherals+0x2b8>)
 8001132:	f002 fbad 	bl	8003890 <GPIO_Config>

	dirPinYw.pGPIOx = GPIOD;
 8001136:	4ba3      	ldr	r3, [pc, #652]	; (80013c4 <configPeripherals+0x2c0>)
 8001138:	4aa3      	ldr	r2, [pc, #652]	; (80013c8 <configPeripherals+0x2c4>)
 800113a:	601a      	str	r2, [r3, #0]
	dirPinYw.GPIO_PinConfig_t.GPIO_PinMode = GPIO_MODE_OUT;
 800113c:	4ba1      	ldr	r3, [pc, #644]	; (80013c4 <configPeripherals+0x2c0>)
 800113e:	2201      	movs	r2, #1
 8001140:	715a      	strb	r2, [r3, #5]
	dirPinYw.GPIO_PinConfig_t.GPIO_PinNumber = PIN_2;
 8001142:	4ba0      	ldr	r3, [pc, #640]	; (80013c4 <configPeripherals+0x2c0>)
 8001144:	2202      	movs	r2, #2
 8001146:	711a      	strb	r2, [r3, #4]
	GPIO_Config(&dirPinYw);
 8001148:	489e      	ldr	r0, [pc, #632]	; (80013c4 <configPeripherals+0x2c0>)
 800114a:	f002 fba1 	bl	8003890 <GPIO_Config>
	GPIO_WritePin(&dirPinYw, dirYellowVal);
 800114e:	4b9f      	ldr	r3, [pc, #636]	; (80013cc <configPeripherals+0x2c8>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	4619      	mov	r1, r3
 8001154:	489b      	ldr	r0, [pc, #620]	; (80013c4 <configPeripherals+0x2c0>)
 8001156:	f002 fcc5 	bl	8003ae4 <GPIO_WritePin>

	dirPinBlue.pGPIOx = GPIOC;
 800115a:	4b9d      	ldr	r3, [pc, #628]	; (80013d0 <configPeripherals+0x2cc>)
 800115c:	4a98      	ldr	r2, [pc, #608]	; (80013c0 <configPeripherals+0x2bc>)
 800115e:	601a      	str	r2, [r3, #0]
	dirPinBlue.GPIO_PinConfig_t.GPIO_PinMode = GPIO_MODE_OUT;
 8001160:	4b9b      	ldr	r3, [pc, #620]	; (80013d0 <configPeripherals+0x2cc>)
 8001162:	2201      	movs	r2, #1
 8001164:	715a      	strb	r2, [r3, #5]
	dirPinBlue.GPIO_PinConfig_t.GPIO_PinNumber = PIN_12;
 8001166:	4b9a      	ldr	r3, [pc, #616]	; (80013d0 <configPeripherals+0x2cc>)
 8001168:	220c      	movs	r2, #12
 800116a:	711a      	strb	r2, [r3, #4]
	GPIO_Config(&dirPinBlue);
 800116c:	4898      	ldr	r0, [pc, #608]	; (80013d0 <configPeripherals+0x2cc>)
 800116e:	f002 fb8f 	bl	8003890 <GPIO_Config>
	GPIO_WritePin(&dirPinBlue, dirBlueVal);
 8001172:	4b98      	ldr	r3, [pc, #608]	; (80013d4 <configPeripherals+0x2d0>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	4619      	mov	r1, r3
 8001178:	4895      	ldr	r0, [pc, #596]	; (80013d0 <configPeripherals+0x2cc>)
 800117a:	f002 fcb3 	bl	8003ae4 <GPIO_WritePin>

	//Pines necesarios para el uso del USART2
	tx2pin.pGPIOx = GPIOA;
 800117e:	4b96      	ldr	r3, [pc, #600]	; (80013d8 <configPeripherals+0x2d4>)
 8001180:	4a96      	ldr	r2, [pc, #600]	; (80013dc <configPeripherals+0x2d8>)
 8001182:	601a      	str	r2, [r3, #0]
	tx2pin.GPIO_PinConfig_t.GPIO_PinNumber = PIN_2;
 8001184:	4b94      	ldr	r3, [pc, #592]	; (80013d8 <configPeripherals+0x2d4>)
 8001186:	2202      	movs	r2, #2
 8001188:	711a      	strb	r2, [r3, #4]
	tx2pin.GPIO_PinConfig_t.GPIO_PinMode = GPIO_MODE_ALTFN;
 800118a:	4b93      	ldr	r3, [pc, #588]	; (80013d8 <configPeripherals+0x2d4>)
 800118c:	2202      	movs	r2, #2
 800118e:	715a      	strb	r2, [r3, #5]
	tx2pin.GPIO_PinConfig_t.GPIO_PinPuPdControl = GPIO_PUPDR_PULLUP;
 8001190:	4b91      	ldr	r3, [pc, #580]	; (80013d8 <configPeripherals+0x2d4>)
 8001192:	2201      	movs	r2, #1
 8001194:	71da      	strb	r2, [r3, #7]
	tx2pin.GPIO_PinConfig_t.GPIO_PinSpeed = GPIO_OSPEED_FAST; //Se usa en velocidad rapida
 8001196:	4b90      	ldr	r3, [pc, #576]	; (80013d8 <configPeripherals+0x2d4>)
 8001198:	2202      	movs	r2, #2
 800119a:	719a      	strb	r2, [r3, #6]
	tx2pin.GPIO_PinConfig_t.GPIO_PinAltFunMode = 7;
 800119c:	4b8e      	ldr	r3, [pc, #568]	; (80013d8 <configPeripherals+0x2d4>)
 800119e:	2207      	movs	r2, #7
 80011a0:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&tx2pin);
 80011a2:	488d      	ldr	r0, [pc, #564]	; (80013d8 <configPeripherals+0x2d4>)
 80011a4:	f002 fb74 	bl	8003890 <GPIO_Config>

	rx2pin.pGPIOx = GPIOA;
 80011a8:	4b8d      	ldr	r3, [pc, #564]	; (80013e0 <configPeripherals+0x2dc>)
 80011aa:	4a8c      	ldr	r2, [pc, #560]	; (80013dc <configPeripherals+0x2d8>)
 80011ac:	601a      	str	r2, [r3, #0]
	rx2pin.GPIO_PinConfig_t.GPIO_PinNumber = PIN_3;
 80011ae:	4b8c      	ldr	r3, [pc, #560]	; (80013e0 <configPeripherals+0x2dc>)
 80011b0:	2203      	movs	r2, #3
 80011b2:	711a      	strb	r2, [r3, #4]
	rx2pin.GPIO_PinConfig_t.GPIO_PinMode = GPIO_MODE_ALTFN;
 80011b4:	4b8a      	ldr	r3, [pc, #552]	; (80013e0 <configPeripherals+0x2dc>)
 80011b6:	2202      	movs	r2, #2
 80011b8:	715a      	strb	r2, [r3, #5]
	rx2pin.GPIO_PinConfig_t.GPIO_PinPuPdControl = GPIO_PUPDR_PULLUP;
 80011ba:	4b89      	ldr	r3, [pc, #548]	; (80013e0 <configPeripherals+0x2dc>)
 80011bc:	2201      	movs	r2, #1
 80011be:	71da      	strb	r2, [r3, #7]
	rx2pin.GPIO_PinConfig_t.GPIO_PinSpeed = GPIO_OSPEED_FAST;
 80011c0:	4b87      	ldr	r3, [pc, #540]	; (80013e0 <configPeripherals+0x2dc>)
 80011c2:	2202      	movs	r2, #2
 80011c4:	719a      	strb	r2, [r3, #6]
	rx2pin.GPIO_PinConfig_t.GPIO_PinAltFunMode = 7;
 80011c6:	4b86      	ldr	r3, [pc, #536]	; (80013e0 <configPeripherals+0x2dc>)
 80011c8:	2207      	movs	r2, #7
 80011ca:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&rx2pin);
 80011cc:	4884      	ldr	r0, [pc, #528]	; (80013e0 <configPeripherals+0x2dc>)
 80011ce:	f002 fb5f 	bl	8003890 <GPIO_Config>

	handlerTerminal.ptrUSARTx = USART2;
 80011d2:	4b84      	ldr	r3, [pc, #528]	; (80013e4 <configPeripherals+0x2e0>)
 80011d4:	4a84      	ldr	r2, [pc, #528]	; (80013e8 <configPeripherals+0x2e4>)
 80011d6:	601a      	str	r2, [r3, #0]
	handlerTerminal.USART_Config.USART_baudrate = 115200;
 80011d8:	4b82      	ldr	r3, [pc, #520]	; (80013e4 <configPeripherals+0x2e0>)
 80011da:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011de:	609a      	str	r2, [r3, #8]
	handlerTerminal.USART_Config.USART_datasize = USART_DATASIZE_8BIT;
 80011e0:	4b80      	ldr	r3, [pc, #512]	; (80013e4 <configPeripherals+0x2e0>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	731a      	strb	r2, [r3, #12]
	handlerTerminal.USART_Config.USART_mode = USART_MODE_RXTX;
 80011e6:	4b7f      	ldr	r3, [pc, #508]	; (80013e4 <configPeripherals+0x2e0>)
 80011e8:	2202      	movs	r2, #2
 80011ea:	711a      	strb	r2, [r3, #4]
	handlerTerminal.USART_Config.USART_parity = USART_PARITY_NONE;
 80011ec:	4b7d      	ldr	r3, [pc, #500]	; (80013e4 <configPeripherals+0x2e0>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	735a      	strb	r2, [r3, #13]
	handlerTerminal.USART_Config.USART_stopbits = USART_STOPBIT_1;
 80011f2:	4b7c      	ldr	r3, [pc, #496]	; (80013e4 <configPeripherals+0x2e0>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	739a      	strb	r2, [r3, #14]
	handlerTerminal.USART_Config.USART_RX_Int_Ena = ENABLE;
 80011f8:	4b7a      	ldr	r3, [pc, #488]	; (80013e4 <configPeripherals+0x2e0>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	73da      	strb	r2, [r3, #15]

	USART_Config(&handlerTerminal);
 80011fe:	4879      	ldr	r0, [pc, #484]	; (80013e4 <configPeripherals+0x2e0>)
 8001200:	f003 f82e 	bl	8004260 <USART_Config>

	tx2pin.pGPIOx = GPIOA;
 8001204:	4b74      	ldr	r3, [pc, #464]	; (80013d8 <configPeripherals+0x2d4>)
 8001206:	4a75      	ldr	r2, [pc, #468]	; (80013dc <configPeripherals+0x2d8>)
 8001208:	601a      	str	r2, [r3, #0]
	tx2pin.GPIO_PinConfig_t.GPIO_PinNumber = PIN_9;
 800120a:	4b73      	ldr	r3, [pc, #460]	; (80013d8 <configPeripherals+0x2d4>)
 800120c:	2209      	movs	r2, #9
 800120e:	711a      	strb	r2, [r3, #4]
	tx2pin.GPIO_PinConfig_t.GPIO_PinMode = GPIO_MODE_ALTFN;
 8001210:	4b71      	ldr	r3, [pc, #452]	; (80013d8 <configPeripherals+0x2d4>)
 8001212:	2202      	movs	r2, #2
 8001214:	715a      	strb	r2, [r3, #5]
	tx2pin.GPIO_PinConfig_t.GPIO_PinPuPdControl = GPIO_PUPDR_PULLUP;
 8001216:	4b70      	ldr	r3, [pc, #448]	; (80013d8 <configPeripherals+0x2d4>)
 8001218:	2201      	movs	r2, #1
 800121a:	71da      	strb	r2, [r3, #7]
	tx2pin.GPIO_PinConfig_t.GPIO_PinSpeed = GPIO_OSPEED_FAST; //Se usa en velocidad rapida
 800121c:	4b6e      	ldr	r3, [pc, #440]	; (80013d8 <configPeripherals+0x2d4>)
 800121e:	2202      	movs	r2, #2
 8001220:	719a      	strb	r2, [r3, #6]
	tx2pin.GPIO_PinConfig_t.GPIO_PinAltFunMode = 7;
 8001222:	4b6d      	ldr	r3, [pc, #436]	; (80013d8 <configPeripherals+0x2d4>)
 8001224:	2207      	movs	r2, #7
 8001226:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&tx2pin);
 8001228:	486b      	ldr	r0, [pc, #428]	; (80013d8 <configPeripherals+0x2d4>)
 800122a:	f002 fb31 	bl	8003890 <GPIO_Config>

	rx2pin.pGPIOx = GPIOA;
 800122e:	4b6c      	ldr	r3, [pc, #432]	; (80013e0 <configPeripherals+0x2dc>)
 8001230:	4a6a      	ldr	r2, [pc, #424]	; (80013dc <configPeripherals+0x2d8>)
 8001232:	601a      	str	r2, [r3, #0]
	rx2pin.GPIO_PinConfig_t.GPIO_PinNumber = PIN_10;
 8001234:	4b6a      	ldr	r3, [pc, #424]	; (80013e0 <configPeripherals+0x2dc>)
 8001236:	220a      	movs	r2, #10
 8001238:	711a      	strb	r2, [r3, #4]
	rx2pin.GPIO_PinConfig_t.GPIO_PinMode = GPIO_MODE_ALTFN;
 800123a:	4b69      	ldr	r3, [pc, #420]	; (80013e0 <configPeripherals+0x2dc>)
 800123c:	2202      	movs	r2, #2
 800123e:	715a      	strb	r2, [r3, #5]
	rx2pin.GPIO_PinConfig_t.GPIO_PinPuPdControl = GPIO_PUPDR_PULLUP;
 8001240:	4b67      	ldr	r3, [pc, #412]	; (80013e0 <configPeripherals+0x2dc>)
 8001242:	2201      	movs	r2, #1
 8001244:	71da      	strb	r2, [r3, #7]
	rx2pin.GPIO_PinConfig_t.GPIO_PinSpeed = GPIO_OSPEED_FAST;
 8001246:	4b66      	ldr	r3, [pc, #408]	; (80013e0 <configPeripherals+0x2dc>)
 8001248:	2202      	movs	r2, #2
 800124a:	719a      	strb	r2, [r3, #6]
	rx2pin.GPIO_PinConfig_t.GPIO_PinAltFunMode = 7;
 800124c:	4b64      	ldr	r3, [pc, #400]	; (80013e0 <configPeripherals+0x2dc>)
 800124e:	2207      	movs	r2, #7
 8001250:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&rx2pin);
 8001252:	4863      	ldr	r0, [pc, #396]	; (80013e0 <configPeripherals+0x2dc>)
 8001254:	f002 fb1c 	bl	8003890 <GPIO_Config>

	handlerConexion.ptrUSARTx = USART1;
 8001258:	4b64      	ldr	r3, [pc, #400]	; (80013ec <configPeripherals+0x2e8>)
 800125a:	4a65      	ldr	r2, [pc, #404]	; (80013f0 <configPeripherals+0x2ec>)
 800125c:	601a      	str	r2, [r3, #0]
	handlerConexion.USART_Config.USART_baudrate = 19200;
 800125e:	4b63      	ldr	r3, [pc, #396]	; (80013ec <configPeripherals+0x2e8>)
 8001260:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001264:	609a      	str	r2, [r3, #8]
	handlerConexion.USART_Config.USART_datasize = USART_DATASIZE_8BIT;
 8001266:	4b61      	ldr	r3, [pc, #388]	; (80013ec <configPeripherals+0x2e8>)
 8001268:	2200      	movs	r2, #0
 800126a:	731a      	strb	r2, [r3, #12]
	handlerConexion.USART_Config.USART_mode = USART_MODE_RXTX;
 800126c:	4b5f      	ldr	r3, [pc, #380]	; (80013ec <configPeripherals+0x2e8>)
 800126e:	2202      	movs	r2, #2
 8001270:	711a      	strb	r2, [r3, #4]
	handlerConexion.USART_Config.USART_parity = USART_PARITY_NONE;
 8001272:	4b5e      	ldr	r3, [pc, #376]	; (80013ec <configPeripherals+0x2e8>)
 8001274:	2200      	movs	r2, #0
 8001276:	735a      	strb	r2, [r3, #13]
	handlerConexion.USART_Config.USART_stopbits = USART_STOPBIT_1;
 8001278:	4b5c      	ldr	r3, [pc, #368]	; (80013ec <configPeripherals+0x2e8>)
 800127a:	2200      	movs	r2, #0
 800127c:	739a      	strb	r2, [r3, #14]
	handlerConexion.USART_Config.USART_RX_Int_Ena = ENABLE;
 800127e:	4b5b      	ldr	r3, [pc, #364]	; (80013ec <configPeripherals+0x2e8>)
 8001280:	2201      	movs	r2, #1
 8001282:	73da      	strb	r2, [r3, #15]

	USART_Config(&handlerConexion);
 8001284:	4859      	ldr	r0, [pc, #356]	; (80013ec <configPeripherals+0x2e8>)
 8001286:	f002 ffeb 	bl	8004260 <USART_Config>

	PC7.pGPIOx = GPIOC;
 800128a:	4b5a      	ldr	r3, [pc, #360]	; (80013f4 <configPeripherals+0x2f0>)
 800128c:	4a4c      	ldr	r2, [pc, #304]	; (80013c0 <configPeripherals+0x2bc>)
 800128e:	601a      	str	r2, [r3, #0]
	PC7.GPIO_PinConfig_t.GPIO_PinNumber = PIN_7;
 8001290:	4b58      	ldr	r3, [pc, #352]	; (80013f4 <configPeripherals+0x2f0>)
 8001292:	2207      	movs	r2, #7
 8001294:	711a      	strb	r2, [r3, #4]
	PC7.GPIO_PinConfig_t.GPIO_PinMode = GPIO_MODE_IN;
 8001296:	4b57      	ldr	r3, [pc, #348]	; (80013f4 <configPeripherals+0x2f0>)
 8001298:	2200      	movs	r2, #0
 800129a:	715a      	strb	r2, [r3, #5]

	PC7E.pGPIOHandler = &PC7;
 800129c:	4b56      	ldr	r3, [pc, #344]	; (80013f8 <configPeripherals+0x2f4>)
 800129e:	4a55      	ldr	r2, [pc, #340]	; (80013f4 <configPeripherals+0x2f0>)
 80012a0:	601a      	str	r2, [r3, #0]
	PC7E.edgeType = EXTERNAL_INTERRUPT_RISING_EDGE;
 80012a2:	4b55      	ldr	r3, [pc, #340]	; (80013f8 <configPeripherals+0x2f4>)
 80012a4:	2201      	movs	r2, #1
 80012a6:	711a      	strb	r2, [r3, #4]

	extInt_Config(&PC7E);
 80012a8:	4853      	ldr	r0, [pc, #332]	; (80013f8 <configPeripherals+0x2f4>)
 80012aa:	f001 faff 	bl	80028ac <extInt_Config>

	counterYellow.pGPIOx = GPIOC;
 80012ae:	4b53      	ldr	r3, [pc, #332]	; (80013fc <configPeripherals+0x2f8>)
 80012b0:	4a43      	ldr	r2, [pc, #268]	; (80013c0 <configPeripherals+0x2bc>)
 80012b2:	601a      	str	r2, [r3, #0]
	counterYellow.GPIO_PinConfig_t.GPIO_PinNumber = PIN_1;
 80012b4:	4b51      	ldr	r3, [pc, #324]	; (80013fc <configPeripherals+0x2f8>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	711a      	strb	r2, [r3, #4]
	counterYellow.GPIO_PinConfig_t.GPIO_PinMode = GPIO_MODE_IN;
 80012ba:	4b50      	ldr	r3, [pc, #320]	; (80013fc <configPeripherals+0x2f8>)
 80012bc:	2200      	movs	r2, #0
 80012be:	715a      	strb	r2, [r3, #5]

	counterYellowE.pGPIOHandler = &counterYellow;
 80012c0:	4b4f      	ldr	r3, [pc, #316]	; (8001400 <configPeripherals+0x2fc>)
 80012c2:	4a4e      	ldr	r2, [pc, #312]	; (80013fc <configPeripherals+0x2f8>)
 80012c4:	601a      	str	r2, [r3, #0]
	counterYellowE.edgeType = EXTERNAL_INTERRUPT_FALLING_EDGE;
 80012c6:	4b4e      	ldr	r3, [pc, #312]	; (8001400 <configPeripherals+0x2fc>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	711a      	strb	r2, [r3, #4]

	extInt_Config(&counterYellowE);
 80012cc:	484c      	ldr	r0, [pc, #304]	; (8001400 <configPeripherals+0x2fc>)
 80012ce:	f001 faed 	bl	80028ac <extInt_Config>

	counterYwl.pGPIOx = GPIOC;
 80012d2:	4b4c      	ldr	r3, [pc, #304]	; (8001404 <configPeripherals+0x300>)
 80012d4:	4a3a      	ldr	r2, [pc, #232]	; (80013c0 <configPeripherals+0x2bc>)
 80012d6:	601a      	str	r2, [r3, #0]
	counterYwl.GPIO_PinConfig_t.GPIO_PinNumber = PIN_3;
 80012d8:	4b4a      	ldr	r3, [pc, #296]	; (8001404 <configPeripherals+0x300>)
 80012da:	2203      	movs	r2, #3
 80012dc:	711a      	strb	r2, [r3, #4]
	counterYwl.GPIO_PinConfig_t.GPIO_PinMode = GPIO_MODE_IN;
 80012de:	4b49      	ldr	r3, [pc, #292]	; (8001404 <configPeripherals+0x300>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	715a      	strb	r2, [r3, #5]

	counterYwlE.pGPIOHandler = &counterYwl;
 80012e4:	4b48      	ldr	r3, [pc, #288]	; (8001408 <configPeripherals+0x304>)
 80012e6:	4a47      	ldr	r2, [pc, #284]	; (8001404 <configPeripherals+0x300>)
 80012e8:	601a      	str	r2, [r3, #0]
	counterYwlE.edgeType = EXTERNAL_INTERRUPT_FALLING_EDGE;
 80012ea:	4b47      	ldr	r3, [pc, #284]	; (8001408 <configPeripherals+0x304>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	711a      	strb	r2, [r3, #4]

	extInt_Config(&counterYwlE);
 80012f0:	4845      	ldr	r0, [pc, #276]	; (8001408 <configPeripherals+0x304>)
 80012f2:	f001 fadb 	bl	80028ac <extInt_Config>

	PC0.pGPIOx = GPIOC;
 80012f6:	4b45      	ldr	r3, [pc, #276]	; (800140c <configPeripherals+0x308>)
 80012f8:	4a31      	ldr	r2, [pc, #196]	; (80013c0 <configPeripherals+0x2bc>)
 80012fa:	601a      	str	r2, [r3, #0]
	PC0.GPIO_PinConfig_t.GPIO_PinNumber = PIN_0;
 80012fc:	4b43      	ldr	r3, [pc, #268]	; (800140c <configPeripherals+0x308>)
 80012fe:	2200      	movs	r2, #0
 8001300:	711a      	strb	r2, [r3, #4]
	PC0.GPIO_PinConfig_t.GPIO_PinMode = GPIO_MODE_IN;
 8001302:	4b42      	ldr	r3, [pc, #264]	; (800140c <configPeripherals+0x308>)
 8001304:	2200      	movs	r2, #0
 8001306:	715a      	strb	r2, [r3, #5]

	PC0E.pGPIOHandler = &PC0;
 8001308:	4b41      	ldr	r3, [pc, #260]	; (8001410 <configPeripherals+0x30c>)
 800130a:	4a40      	ldr	r2, [pc, #256]	; (800140c <configPeripherals+0x308>)
 800130c:	601a      	str	r2, [r3, #0]
	PC0E.edgeType = EXTERNAL_INTERRUPT_FALLING_EDGE;
 800130e:	4b40      	ldr	r3, [pc, #256]	; (8001410 <configPeripherals+0x30c>)
 8001310:	2200      	movs	r2, #0
 8001312:	711a      	strb	r2, [r3, #4]

	extInt_Config(&PC0E);
 8001314:	483e      	ldr	r0, [pc, #248]	; (8001410 <configPeripherals+0x30c>)
 8001316:	f001 fac9 	bl	80028ac <extInt_Config>

	pwprueba.pGPIOx = GPIOA;
 800131a:	4b3e      	ldr	r3, [pc, #248]	; (8001414 <configPeripherals+0x310>)
 800131c:	4a2f      	ldr	r2, [pc, #188]	; (80013dc <configPeripherals+0x2d8>)
 800131e:	601a      	str	r2, [r3, #0]
	pwprueba.GPIO_PinConfig_t.GPIO_PinNumber = PIN_0;
 8001320:	4b3c      	ldr	r3, [pc, #240]	; (8001414 <configPeripherals+0x310>)
 8001322:	2200      	movs	r2, #0
 8001324:	711a      	strb	r2, [r3, #4]
	pwprueba.GPIO_PinConfig_t.GPIO_PinMode = GPIO_MODE_ALTFN;
 8001326:	4b3b      	ldr	r3, [pc, #236]	; (8001414 <configPeripherals+0x310>)
 8001328:	2202      	movs	r2, #2
 800132a:	715a      	strb	r2, [r3, #5]
	pwprueba.GPIO_PinConfig_t.GPIO_PinOPType = GPIO_OTYPE_PUSHPULL;
 800132c:	4b39      	ldr	r3, [pc, #228]	; (8001414 <configPeripherals+0x310>)
 800132e:	2200      	movs	r2, #0
 8001330:	721a      	strb	r2, [r3, #8]
	pwprueba.GPIO_PinConfig_t.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001332:	4b38      	ldr	r3, [pc, #224]	; (8001414 <configPeripherals+0x310>)
 8001334:	2200      	movs	r2, #0
 8001336:	71da      	strb	r2, [r3, #7]
	pwprueba.GPIO_PinConfig_t.GPIO_PinSpeed = GPIO_OSPEED_FAST;
 8001338:	4b36      	ldr	r3, [pc, #216]	; (8001414 <configPeripherals+0x310>)
 800133a:	2202      	movs	r2, #2
 800133c:	719a      	strb	r2, [r3, #6]
	pwprueba.GPIO_PinConfig_t.GPIO_PinAltFunMode = AF2;
 800133e:	4b35      	ldr	r3, [pc, #212]	; (8001414 <configPeripherals+0x310>)
 8001340:	2202      	movs	r2, #2
 8001342:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&pwprueba);
 8001344:	4833      	ldr	r0, [pc, #204]	; (8001414 <configPeripherals+0x310>)
 8001346:	f002 faa3 	bl	8003890 <GPIO_Config>

	pwprueba.pGPIOx = GPIOA;
 800134a:	4b32      	ldr	r3, [pc, #200]	; (8001414 <configPeripherals+0x310>)
 800134c:	4a23      	ldr	r2, [pc, #140]	; (80013dc <configPeripherals+0x2d8>)
 800134e:	601a      	str	r2, [r3, #0]
	pwprueba.GPIO_PinConfig_t.GPIO_PinNumber = PIN_1;
 8001350:	4b30      	ldr	r3, [pc, #192]	; (8001414 <configPeripherals+0x310>)
 8001352:	2201      	movs	r2, #1
 8001354:	711a      	strb	r2, [r3, #4]
	pwprueba.GPIO_PinConfig_t.GPIO_PinMode = GPIO_MODE_ALTFN;
 8001356:	4b2f      	ldr	r3, [pc, #188]	; (8001414 <configPeripherals+0x310>)
 8001358:	2202      	movs	r2, #2
 800135a:	715a      	strb	r2, [r3, #5]
	pwprueba.GPIO_PinConfig_t.GPIO_PinOPType = GPIO_OTYPE_PUSHPULL;
 800135c:	4b2d      	ldr	r3, [pc, #180]	; (8001414 <configPeripherals+0x310>)
 800135e:	2200      	movs	r2, #0
 8001360:	721a      	strb	r2, [r3, #8]
	pwprueba.GPIO_PinConfig_t.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001362:	4b2c      	ldr	r3, [pc, #176]	; (8001414 <configPeripherals+0x310>)
 8001364:	2200      	movs	r2, #0
 8001366:	71da      	strb	r2, [r3, #7]
	pwprueba.GPIO_PinConfig_t.GPIO_PinSpeed = GPIO_OSPEED_FAST;
 8001368:	4b2a      	ldr	r3, [pc, #168]	; (8001414 <configPeripherals+0x310>)
 800136a:	2202      	movs	r2, #2
 800136c:	719a      	strb	r2, [r3, #6]
	pwprueba.GPIO_PinConfig_t.GPIO_PinAltFunMode = AF2;
 800136e:	4b29      	ldr	r3, [pc, #164]	; (8001414 <configPeripherals+0x310>)
 8001370:	2202      	movs	r2, #2
 8001372:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&pwprueba);
 8001374:	4827      	ldr	r0, [pc, #156]	; (8001414 <configPeripherals+0x310>)
 8001376:	f002 fa8b 	bl	8003890 <GPIO_Config>

	pwmYellow.ptrTIMx = TIM5;
 800137a:	4b27      	ldr	r3, [pc, #156]	; (8001418 <configPeripherals+0x314>)
 800137c:	4a27      	ldr	r2, [pc, #156]	; (800141c <configPeripherals+0x318>)
 800137e:	601a      	str	r2, [r3, #0]
	pwmYellow.config.channel = PWM_CHANNEL_2;
 8001380:	4b25      	ldr	r3, [pc, #148]	; (8001418 <configPeripherals+0x314>)
 8001382:	2201      	movs	r2, #1
 8001384:	711a      	strb	r2, [r3, #4]
	pwmYellow.config.duttyCicle = duttyYwl;
 8001386:	4b26      	ldr	r3, [pc, #152]	; (8001420 <configPeripherals+0x31c>)
 8001388:	881a      	ldrh	r2, [r3, #0]
 800138a:	4b23      	ldr	r3, [pc, #140]	; (8001418 <configPeripherals+0x314>)
 800138c:	81da      	strh	r2, [r3, #14]
	pwmYellow.config.periodo = periodo;
 800138e:	4b25      	ldr	r3, [pc, #148]	; (8001424 <configPeripherals+0x320>)
 8001390:	881a      	ldrh	r2, [r3, #0]
 8001392:	4b21      	ldr	r3, [pc, #132]	; (8001418 <configPeripherals+0x314>)
 8001394:	819a      	strh	r2, [r3, #12]
	pwmYellow.config.prescaler = prescaler;
 8001396:	4b24      	ldr	r3, [pc, #144]	; (8001428 <configPeripherals+0x324>)
 8001398:	881b      	ldrh	r3, [r3, #0]
 800139a:	461a      	mov	r2, r3
 800139c:	4b1e      	ldr	r3, [pc, #120]	; (8001418 <configPeripherals+0x314>)
 800139e:	609a      	str	r2, [r3, #8]
	pwmYellow.config.polarity = dirYellowVal;
 80013a0:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <configPeripherals+0x2c8>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	461a      	mov	r2, r3
 80013a6:	4b1c      	ldr	r3, [pc, #112]	; (8001418 <configPeripherals+0x314>)
 80013a8:	741a      	strb	r2, [r3, #16]

	pwm_Config(&pwmYellow);
 80013aa:	481b      	ldr	r0, [pc, #108]	; (8001418 <configPeripherals+0x314>)
 80013ac:	f002 fd0c 	bl	8003dc8 <pwm_Config>
	enableOutput(&pwmYellow);
 80013b0:	4819      	ldr	r0, [pc, #100]	; (8001418 <configPeripherals+0x314>)
 80013b2:	f002 fe31 	bl	8004018 <enableOutput>
 80013b6:	e039      	b.n	800142c <configPeripherals+0x328>
 80013b8:	e000ed00 	.word	0xe000ed00
 80013bc:	200004d4 	.word	0x200004d4
 80013c0:	40020800 	.word	0x40020800
 80013c4:	200005c8 	.word	0x200005c8
 80013c8:	40020c00 	.word	0x40020c00
 80013cc:	20000000 	.word	0x20000000
 80013d0:	200005d4 	.word	0x200005d4
 80013d4:	2000053c 	.word	0x2000053c
 80013d8:	200004bc 	.word	0x200004bc
 80013dc:	40020000 	.word	0x40020000
 80013e0:	200004c8 	.word	0x200004c8
 80013e4:	2000020c 	.word	0x2000020c
 80013e8:	40004400 	.word	0x40004400
 80013ec:	200002a4 	.word	0x200002a4
 80013f0:	40011000 	.word	0x40011000
 80013f4:	20000540 	.word	0x20000540
 80013f8:	2000054c 	.word	0x2000054c
 80013fc:	20000558 	.word	0x20000558
 8001400:	20000564 	.word	0x20000564
 8001404:	20000588 	.word	0x20000588
 8001408:	20000594 	.word	0x20000594
 800140c:	200005a8 	.word	0x200005a8
 8001410:	200005b4 	.word	0x200005b4
 8001414:	200004e0 	.word	0x200004e0
 8001418:	20000528 	.word	0x20000528
 800141c:	40000c00 	.word	0x40000c00
 8001420:	200005c2 	.word	0x200005c2
 8001424:	20000004 	.word	0x20000004
 8001428:	20000002 	.word	0x20000002
	startPwmSignal(&pwmYellow);
 800142c:	4825      	ldr	r0, [pc, #148]	; (80014c4 <configPeripherals+0x3c0>)
 800142e:	f002 fda3 	bl	8003f78 <startPwmSignal>

	pwmBlue.ptrTIMx = TIM5;
 8001432:	4b25      	ldr	r3, [pc, #148]	; (80014c8 <configPeripherals+0x3c4>)
 8001434:	4a25      	ldr	r2, [pc, #148]	; (80014cc <configPeripherals+0x3c8>)
 8001436:	601a      	str	r2, [r3, #0]
	pwmBlue.config.channel = PWM_CHANNEL_1;
 8001438:	4b23      	ldr	r3, [pc, #140]	; (80014c8 <configPeripherals+0x3c4>)
 800143a:	2200      	movs	r2, #0
 800143c:	711a      	strb	r2, [r3, #4]
	pwmBlue.config.duttyCicle = duttyBlue;
 800143e:	4b24      	ldr	r3, [pc, #144]	; (80014d0 <configPeripherals+0x3cc>)
 8001440:	881a      	ldrh	r2, [r3, #0]
 8001442:	4b21      	ldr	r3, [pc, #132]	; (80014c8 <configPeripherals+0x3c4>)
 8001444:	81da      	strh	r2, [r3, #14]
	pwmBlue.config.periodo = periodo;
 8001446:	4b23      	ldr	r3, [pc, #140]	; (80014d4 <configPeripherals+0x3d0>)
 8001448:	881a      	ldrh	r2, [r3, #0]
 800144a:	4b1f      	ldr	r3, [pc, #124]	; (80014c8 <configPeripherals+0x3c4>)
 800144c:	819a      	strh	r2, [r3, #12]
	pwmBlue.config.prescaler = prescaler;
 800144e:	4b22      	ldr	r3, [pc, #136]	; (80014d8 <configPeripherals+0x3d4>)
 8001450:	881b      	ldrh	r3, [r3, #0]
 8001452:	461a      	mov	r2, r3
 8001454:	4b1c      	ldr	r3, [pc, #112]	; (80014c8 <configPeripherals+0x3c4>)
 8001456:	609a      	str	r2, [r3, #8]
	pwmBlue.config.polarity = dirBlueVal;
 8001458:	4b20      	ldr	r3, [pc, #128]	; (80014dc <configPeripherals+0x3d8>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	461a      	mov	r2, r3
 800145e:	4b1a      	ldr	r3, [pc, #104]	; (80014c8 <configPeripherals+0x3c4>)
 8001460:	741a      	strb	r2, [r3, #16]

	pwm_Config(&pwmBlue);
 8001462:	4819      	ldr	r0, [pc, #100]	; (80014c8 <configPeripherals+0x3c4>)
 8001464:	f002 fcb0 	bl	8003dc8 <pwm_Config>
	enableOutput(&pwmBlue);
 8001468:	4817      	ldr	r0, [pc, #92]	; (80014c8 <configPeripherals+0x3c4>)
 800146a:	f002 fdd5 	bl	8004018 <enableOutput>
	startPwmSignal(&pwmBlue);
 800146e:	4816      	ldr	r0, [pc, #88]	; (80014c8 <configPeripherals+0x3c4>)
 8001470:	f002 fd82 	bl	8003f78 <startPwmSignal>

	handlerTimer3.ptrTIMx = TIM3; //El timer que se va a usar
 8001474:	4b1a      	ldr	r3, [pc, #104]	; (80014e0 <configPeripherals+0x3dc>)
 8001476:	4a1b      	ldr	r2, [pc, #108]	; (80014e4 <configPeripherals+0x3e0>)
 8001478:	601a      	str	r2, [r3, #0]
	handlerTimer3.TIMx_Config.TIMx_interruptEnable = 1; //Se habilitan las interrupciones
 800147a:	4b19      	ldr	r3, [pc, #100]	; (80014e0 <configPeripherals+0x3dc>)
 800147c:	2201      	movs	r2, #1
 800147e:	741a      	strb	r2, [r3, #16]
	handlerTimer3.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; //Se usara en modo ascendente
 8001480:	4b17      	ldr	r3, [pc, #92]	; (80014e0 <configPeripherals+0x3dc>)
 8001482:	2200      	movs	r2, #0
 8001484:	711a      	strb	r2, [r3, #4]
	handlerTimer3.TIMx_Config.TIMx_period = 2500; //Se define el periodo en este caso el led cambiara cada 250ms
 8001486:	4b16      	ldr	r3, [pc, #88]	; (80014e0 <configPeripherals+0x3dc>)
 8001488:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800148c:	60da      	str	r2, [r3, #12]
	handlerTimer3.TIMx_Config.TIMx_speed = BTIMER_SPEED_100us; //Se define la "velocidad" que se usara
 800148e:	4b14      	ldr	r3, [pc, #80]	; (80014e0 <configPeripherals+0x3dc>)
 8001490:	2264      	movs	r2, #100	; 0x64
 8001492:	609a      	str	r2, [r3, #8]

	BasicTimer_Config(&handlerTimer3); //Se carga la configuración.
 8001494:	4812      	ldr	r0, [pc, #72]	; (80014e0 <configPeripherals+0x3dc>)
 8001496:	f001 f8d1 	bl	800263c <BasicTimer_Config>

	handlerTimer2.ptrTIMx = TIM2; //El timer que se va a usar
 800149a:	4b13      	ldr	r3, [pc, #76]	; (80014e8 <configPeripherals+0x3e4>)
 800149c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014a0:	601a      	str	r2, [r3, #0]
	handlerTimer2.TIMx_Config.TIMx_interruptEnable = 1; //Se habilitan las interrupciones
 80014a2:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <configPeripherals+0x3e4>)
 80014a4:	2201      	movs	r2, #1
 80014a6:	741a      	strb	r2, [r3, #16]
	handlerTimer2.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; //Se usara en modo ascendente
 80014a8:	4b0f      	ldr	r3, [pc, #60]	; (80014e8 <configPeripherals+0x3e4>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	711a      	strb	r2, [r3, #4]
	handlerTimer2.TIMx_Config.TIMx_period = 10; //Se define el periodo en este caso el led cambiara cada 250ms
 80014ae:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <configPeripherals+0x3e4>)
 80014b0:	220a      	movs	r2, #10
 80014b2:	60da      	str	r2, [r3, #12]
	handlerTimer2.TIMx_Config.TIMx_speed = 10; //Se define la "velocidad" que se usara
 80014b4:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <configPeripherals+0x3e4>)
 80014b6:	220a      	movs	r2, #10
 80014b8:	609a      	str	r2, [r3, #8]

	BasicTimer_Config(&handlerTimer2); //Se carga la configuración.
 80014ba:	480b      	ldr	r0, [pc, #44]	; (80014e8 <configPeripherals+0x3e4>)
 80014bc:	f001 f8be 	bl	800263c <BasicTimer_Config>

}
 80014c0:	bf00      	nop
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	20000528 	.word	0x20000528
 80014c8:	20000514 	.word	0x20000514
 80014cc:	40000c00 	.word	0x40000c00
 80014d0:	200005c0 	.word	0x200005c0
 80014d4:	20000004 	.word	0x20000004
 80014d8:	20000002 	.word	0x20000002
 80014dc:	2000053c 	.word	0x2000053c
 80014e0:	200004ec 	.word	0x200004ec
 80014e4:	40000400 	.word	0x40000400
 80014e8:	20000500 	.word	0x20000500
 80014ec:	00000000 	.word	0x00000000

080014f0 <parseCommands>:

void parseCommands(char *ptrBufferReception) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af02      	add	r7, sp, #8
 80014f6:	6078      	str	r0, [r7, #4]
	/* Lee la cadena de caracteres a la que apunta el "ptrBufferReception
	 * y almacena en tres elementos diferentes: un string llamado "cmd",
	 * y dos integer llamados "firstParameter" y "secondParameter"
	 * De esta forma podemos introducir informacion al micro desde el puerto
	 */
	sscanf(ptrBufferReception, "%s %u %u %u", cmd, &firstParameter,
 80014f8:	4b99      	ldr	r3, [pc, #612]	; (8001760 <parseCommands+0x270>)
 80014fa:	9301      	str	r3, [sp, #4]
 80014fc:	4b99      	ldr	r3, [pc, #612]	; (8001764 <parseCommands+0x274>)
 80014fe:	9300      	str	r3, [sp, #0]
 8001500:	4b99      	ldr	r3, [pc, #612]	; (8001768 <parseCommands+0x278>)
 8001502:	4a9a      	ldr	r2, [pc, #616]	; (800176c <parseCommands+0x27c>)
 8001504:	499a      	ldr	r1, [pc, #616]	; (8001770 <parseCommands+0x280>)
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f004 f978 	bl	80057fc <siscanf>
			&secondParameter, &thirdParameter);
	if (strcmp(cmd, "help") == 0) {
 800150c:	4999      	ldr	r1, [pc, #612]	; (8001774 <parseCommands+0x284>)
 800150e:	4897      	ldr	r0, [pc, #604]	; (800176c <parseCommands+0x27c>)
 8001510:	f7fe fe66 	bl	80001e0 <strcmp>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d108      	bne.n	800152c <parseCommands+0x3c>
		writeString(&handlerTerminal, "Help Menu CMDs: \n");
 800151a:	4997      	ldr	r1, [pc, #604]	; (8001778 <parseCommands+0x288>)
 800151c:	4897      	ldr	r0, [pc, #604]	; (800177c <parseCommands+0x28c>)
 800151e:	f003 fa7c 	bl	8004a1a <writeString>
		writeString(&handlerTerminal, "1)  Help -> Print this menu \n");
 8001522:	4997      	ldr	r1, [pc, #604]	; (8001780 <parseCommands+0x290>)
 8001524:	4895      	ldr	r0, [pc, #596]	; (800177c <parseCommands+0x28c>)
 8001526:	f003 fa78 	bl	8004a1a <writeString>
 800152a:	e207      	b.n	800193c <parseCommands+0x44c>

	}

	else if (strcmp(cmd, "dir") == 0) {
 800152c:	4995      	ldr	r1, [pc, #596]	; (8001784 <parseCommands+0x294>)
 800152e:	488f      	ldr	r0, [pc, #572]	; (800176c <parseCommands+0x27c>)
 8001530:	f7fe fe56 	bl	80001e0 <strcmp>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d133      	bne.n	80015a2 <parseCommands+0xb2>
		if (firstParameter == 0) {
 800153a:	4b8b      	ldr	r3, [pc, #556]	; (8001768 <parseCommands+0x278>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d117      	bne.n	8001572 <parseCommands+0x82>
			dirBlueVal = secondParameter;
 8001542:	4b88      	ldr	r3, [pc, #544]	; (8001764 <parseCommands+0x274>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2b00      	cmp	r3, #0
 8001548:	bf14      	ite	ne
 800154a:	2301      	movne	r3, #1
 800154c:	2300      	moveq	r3, #0
 800154e:	b2da      	uxtb	r2, r3
 8001550:	4b8d      	ldr	r3, [pc, #564]	; (8001788 <parseCommands+0x298>)
 8001552:	701a      	strb	r2, [r3, #0]
			pwmUpdatePolarity(&pwmYellow, secondParameter);
 8001554:	4b83      	ldr	r3, [pc, #524]	; (8001764 <parseCommands+0x274>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	b2db      	uxtb	r3, r3
 800155a:	4619      	mov	r1, r3
 800155c:	488b      	ldr	r0, [pc, #556]	; (800178c <parseCommands+0x29c>)
 800155e:	f002 fe51 	bl	8004204 <pwmUpdatePolarity>
			GPIO_WritePin(&dirPinYw, secondParameter);
 8001562:	4b80      	ldr	r3, [pc, #512]	; (8001764 <parseCommands+0x274>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	b2db      	uxtb	r3, r3
 8001568:	4619      	mov	r1, r3
 800156a:	4889      	ldr	r0, [pc, #548]	; (8001790 <parseCommands+0x2a0>)
 800156c:	f002 faba 	bl	8003ae4 <GPIO_WritePin>
 8001570:	e1e4      	b.n	800193c <parseCommands+0x44c>
		} else {
			dirYellowVal = secondParameter;
 8001572:	4b7c      	ldr	r3, [pc, #496]	; (8001764 <parseCommands+0x274>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2b00      	cmp	r3, #0
 8001578:	bf14      	ite	ne
 800157a:	2301      	movne	r3, #1
 800157c:	2300      	moveq	r3, #0
 800157e:	b2da      	uxtb	r2, r3
 8001580:	4b84      	ldr	r3, [pc, #528]	; (8001794 <parseCommands+0x2a4>)
 8001582:	701a      	strb	r2, [r3, #0]
			pwmUpdatePolarity(&pwmBlue, secondParameter);
 8001584:	4b77      	ldr	r3, [pc, #476]	; (8001764 <parseCommands+0x274>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	b2db      	uxtb	r3, r3
 800158a:	4619      	mov	r1, r3
 800158c:	4882      	ldr	r0, [pc, #520]	; (8001798 <parseCommands+0x2a8>)
 800158e:	f002 fe39 	bl	8004204 <pwmUpdatePolarity>
			GPIO_WritePin(&dirPinBlue, secondParameter);
 8001592:	4b74      	ldr	r3, [pc, #464]	; (8001764 <parseCommands+0x274>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	b2db      	uxtb	r3, r3
 8001598:	4619      	mov	r1, r3
 800159a:	4880      	ldr	r0, [pc, #512]	; (800179c <parseCommands+0x2ac>)
 800159c:	f002 faa2 	bl	8003ae4 <GPIO_WritePin>
 80015a0:	e1cc      	b.n	800193c <parseCommands+0x44c>
		}
	}

	else if (strcmp(cmd, "pwm") == 0) {
 80015a2:	497f      	ldr	r1, [pc, #508]	; (80017a0 <parseCommands+0x2b0>)
 80015a4:	4871      	ldr	r0, [pc, #452]	; (800176c <parseCommands+0x27c>)
 80015a6:	f7fe fe1b 	bl	80001e0 <strcmp>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d132      	bne.n	8001616 <parseCommands+0x126>
		if (firstParameter == 0) {
 80015b0:	4b6d      	ldr	r3, [pc, #436]	; (8001768 <parseCommands+0x278>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d10c      	bne.n	80015d2 <parseCommands+0xe2>
			duttyIYwl = secondParameter;
 80015b8:	4b6a      	ldr	r3, [pc, #424]	; (8001764 <parseCommands+0x274>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	b29a      	uxth	r2, r3
 80015be:	4b79      	ldr	r3, [pc, #484]	; (80017a4 <parseCommands+0x2b4>)
 80015c0:	801a      	strh	r2, [r3, #0]
			pwmYellow.config.duttyCicle = duttyIYwl;
 80015c2:	4b78      	ldr	r3, [pc, #480]	; (80017a4 <parseCommands+0x2b4>)
 80015c4:	881a      	ldrh	r2, [r3, #0]
 80015c6:	4b71      	ldr	r3, [pc, #452]	; (800178c <parseCommands+0x29c>)
 80015c8:	81da      	strh	r2, [r3, #14]
			setDuttyCycle(&pwmYellow);
 80015ca:	4870      	ldr	r0, [pc, #448]	; (800178c <parseCommands+0x29c>)
 80015cc:	f002 fd7a 	bl	80040c4 <setDuttyCycle>
 80015d0:	e1b4      	b.n	800193c <parseCommands+0x44c>
		} else if (firstParameter == 1) {
 80015d2:	4b65      	ldr	r3, [pc, #404]	; (8001768 <parseCommands+0x278>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d10c      	bne.n	80015f4 <parseCommands+0x104>
			duttyInBlue = secondParameter;
 80015da:	4b62      	ldr	r3, [pc, #392]	; (8001764 <parseCommands+0x274>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	b29a      	uxth	r2, r3
 80015e0:	4b71      	ldr	r3, [pc, #452]	; (80017a8 <parseCommands+0x2b8>)
 80015e2:	801a      	strh	r2, [r3, #0]
			pwmBlue.config.duttyCicle = duttyInBlue;
 80015e4:	4b70      	ldr	r3, [pc, #448]	; (80017a8 <parseCommands+0x2b8>)
 80015e6:	881a      	ldrh	r2, [r3, #0]
 80015e8:	4b6b      	ldr	r3, [pc, #428]	; (8001798 <parseCommands+0x2a8>)
 80015ea:	81da      	strh	r2, [r3, #14]
			setDuttyCycle(&pwmBlue);
 80015ec:	486a      	ldr	r0, [pc, #424]	; (8001798 <parseCommands+0x2a8>)
 80015ee:	f002 fd69 	bl	80040c4 <setDuttyCycle>
 80015f2:	e1a3      	b.n	800193c <parseCommands+0x44c>
		} else {
			pwmYellow.config.duttyCicle = secondParameter;
 80015f4:	4b5b      	ldr	r3, [pc, #364]	; (8001764 <parseCommands+0x274>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	4b64      	ldr	r3, [pc, #400]	; (800178c <parseCommands+0x29c>)
 80015fc:	81da      	strh	r2, [r3, #14]
			pwmBlue.config.duttyCicle = secondParameter;
 80015fe:	4b59      	ldr	r3, [pc, #356]	; (8001764 <parseCommands+0x274>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	b29a      	uxth	r2, r3
 8001604:	4b64      	ldr	r3, [pc, #400]	; (8001798 <parseCommands+0x2a8>)
 8001606:	81da      	strh	r2, [r3, #14]
			setDuttyCycle(&pwmYellow);
 8001608:	4860      	ldr	r0, [pc, #384]	; (800178c <parseCommands+0x29c>)
 800160a:	f002 fd5b 	bl	80040c4 <setDuttyCycle>
			setDuttyCycle(&pwmBlue);
 800160e:	4862      	ldr	r0, [pc, #392]	; (8001798 <parseCommands+0x2a8>)
 8001610:	f002 fd58 	bl	80040c4 <setDuttyCycle>
 8001614:	e192      	b.n	800193c <parseCommands+0x44c>
		}

	} else if (strcmp(cmd, "upMode") == 0) {
 8001616:	4965      	ldr	r1, [pc, #404]	; (80017ac <parseCommands+0x2bc>)
 8001618:	4854      	ldr	r0, [pc, #336]	; (800176c <parseCommands+0x27c>)
 800161a:	f7fe fde1 	bl	80001e0 <strcmp>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d109      	bne.n	8001638 <parseCommands+0x148>
		upMode = firstParameter;
 8001624:	4b50      	ldr	r3, [pc, #320]	; (8001768 <parseCommands+0x278>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	bf14      	ite	ne
 800162c:	2301      	movne	r3, #1
 800162e:	2300      	moveq	r3, #0
 8001630:	b2da      	uxtb	r2, r3
 8001632:	4b5f      	ldr	r3, [pc, #380]	; (80017b0 <parseCommands+0x2c0>)
 8001634:	701a      	strb	r2, [r3, #0]
 8001636:	e181      	b.n	800193c <parseCommands+0x44c>
	} else if (strcmp(cmd, "reset") == 0) {
 8001638:	495e      	ldr	r1, [pc, #376]	; (80017b4 <parseCommands+0x2c4>)
 800163a:	484c      	ldr	r0, [pc, #304]	; (800176c <parseCommands+0x27c>)
 800163c:	f7fe fdd0 	bl	80001e0 <strcmp>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d115      	bne.n	8001672 <parseCommands+0x182>
		x = 0;
 8001646:	495c      	ldr	r1, [pc, #368]	; (80017b8 <parseCommands+0x2c8>)
 8001648:	f04f 0200 	mov.w	r2, #0
 800164c:	f04f 0300 	mov.w	r3, #0
 8001650:	e9c1 2300 	strd	r2, r3, [r1]
		theta = 0;
 8001654:	4959      	ldr	r1, [pc, #356]	; (80017bc <parseCommands+0x2cc>)
 8001656:	f04f 0200 	mov.w	r2, #0
 800165a:	f04f 0300 	mov.w	r3, #0
 800165e:	e9c1 2300 	strd	r2, r3, [r1]
		y = 0;
 8001662:	4957      	ldr	r1, [pc, #348]	; (80017c0 <parseCommands+0x2d0>)
 8001664:	f04f 0200 	mov.w	r2, #0
 8001668:	f04f 0300 	mov.w	r3, #0
 800166c:	e9c1 2300 	strd	r2, r3, [r1]
 8001670:	e164      	b.n	800193c <parseCommands+0x44c>
	} else if (strcmp(cmd, "rotate") == 0) {
 8001672:	4954      	ldr	r1, [pc, #336]	; (80017c4 <parseCommands+0x2d4>)
 8001674:	483d      	ldr	r0, [pc, #244]	; (800176c <parseCommands+0x27c>)
 8001676:	f7fe fdb3 	bl	80001e0 <strcmp>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	f040 80b3 	bne.w	80017e8 <parseCommands+0x2f8>
		if (firstParameter != 0) {
 8001682:	4b39      	ldr	r3, [pc, #228]	; (8001768 <parseCommands+0x278>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d017      	beq.n	80016ba <parseCommands+0x1ca>
			rotate = firstParameter / 90 * (M_PI / 2);
 800168a:	4b37      	ldr	r3, [pc, #220]	; (8001768 <parseCommands+0x278>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	085b      	lsrs	r3, r3, #1
 8001690:	4a4d      	ldr	r2, [pc, #308]	; (80017c8 <parseCommands+0x2d8>)
 8001692:	fba2 2303 	umull	r2, r3, r2, r3
 8001696:	095b      	lsrs	r3, r3, #5
 8001698:	4618      	mov	r0, r3
 800169a:	f7fe ff4b 	bl	8000534 <__aeabi_ui2d>
 800169e:	a32e      	add	r3, pc, #184	; (adr r3, 8001758 <parseCommands+0x268>)
 80016a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a4:	f7fe ffc0 	bl	8000628 <__aeabi_dmul>
 80016a8:	4602      	mov	r2, r0
 80016aa:	460b      	mov	r3, r1
 80016ac:	4610      	mov	r0, r2
 80016ae:	4619      	mov	r1, r3
 80016b0:	f7ff fab2 	bl	8000c18 <__aeabi_d2f>
 80016b4:	4603      	mov	r3, r0
 80016b6:	4a45      	ldr	r2, [pc, #276]	; (80017cc <parseCommands+0x2dc>)
 80016b8:	6013      	str	r3, [r2, #0]
		}
		move90 = 1;
 80016ba:	4b45      	ldr	r3, [pc, #276]	; (80017d0 <parseCommands+0x2e0>)
 80016bc:	2201      	movs	r2, #1
 80016be:	701a      	strb	r2, [r3, #0]
		theta = 0;
 80016c0:	493e      	ldr	r1, [pc, #248]	; (80017bc <parseCommands+0x2cc>)
 80016c2:	f04f 0200 	mov.w	r2, #0
 80016c6:	f04f 0300 	mov.w	r3, #0
 80016ca:	e9c1 2300 	strd	r2, r3, [r1]
		x = 0;
 80016ce:	493a      	ldr	r1, [pc, #232]	; (80017b8 <parseCommands+0x2c8>)
 80016d0:	f04f 0200 	mov.w	r2, #0
 80016d4:	f04f 0300 	mov.w	r3, #0
 80016d8:	e9c1 2300 	strd	r2, r3, [r1]
		y = 0;
 80016dc:	4938      	ldr	r1, [pc, #224]	; (80017c0 <parseCommands+0x2d0>)
 80016de:	f04f 0200 	mov.w	r2, #0
 80016e2:	f04f 0300 	mov.w	r3, #0
 80016e6:	e9c1 2300 	strd	r2, r3, [r1]
		pwmBlue.config.duttyCicle = duttyGiroBlue;
 80016ea:	4b3a      	ldr	r3, [pc, #232]	; (80017d4 <parseCommands+0x2e4>)
 80016ec:	881a      	ldrh	r2, [r3, #0]
 80016ee:	4b2a      	ldr	r3, [pc, #168]	; (8001798 <parseCommands+0x2a8>)
 80016f0:	81da      	strh	r2, [r3, #14]
		setDuttyCycle(&pwmBlue);
 80016f2:	4829      	ldr	r0, [pc, #164]	; (8001798 <parseCommands+0x2a8>)
 80016f4:	f002 fce6 	bl	80040c4 <setDuttyCycle>
		pwmYellow.config.duttyCicle = duttyGiroYwl;
 80016f8:	4b37      	ldr	r3, [pc, #220]	; (80017d8 <parseCommands+0x2e8>)
 80016fa:	881a      	ldrh	r2, [r3, #0]
 80016fc:	4b23      	ldr	r3, [pc, #140]	; (800178c <parseCommands+0x29c>)
 80016fe:	81da      	strh	r2, [r3, #14]
		setDuttyCycle(&pwmYellow);
 8001700:	4822      	ldr	r0, [pc, #136]	; (800178c <parseCommands+0x29c>)
 8001702:	f002 fcdf 	bl	80040c4 <setDuttyCycle>
		dirBlueVal = 1;
 8001706:	4b20      	ldr	r3, [pc, #128]	; (8001788 <parseCommands+0x298>)
 8001708:	2201      	movs	r2, #1
 800170a:	701a      	strb	r2, [r3, #0]
		pwmUpdatePolarity(&pwmBlue, dirBlueVal);
 800170c:	4b1e      	ldr	r3, [pc, #120]	; (8001788 <parseCommands+0x298>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	4619      	mov	r1, r3
 8001712:	4821      	ldr	r0, [pc, #132]	; (8001798 <parseCommands+0x2a8>)
 8001714:	f002 fd76 	bl	8004204 <pwmUpdatePolarity>
		GPIO_WritePin(&dirPinBlue, dirBlueVal);
 8001718:	4b1b      	ldr	r3, [pc, #108]	; (8001788 <parseCommands+0x298>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	4619      	mov	r1, r3
 800171e:	481f      	ldr	r0, [pc, #124]	; (800179c <parseCommands+0x2ac>)
 8001720:	f002 f9e0 	bl	8003ae4 <GPIO_WritePin>
		dirYellowVal = 0;
 8001724:	4b1b      	ldr	r3, [pc, #108]	; (8001794 <parseCommands+0x2a4>)
 8001726:	2200      	movs	r2, #0
 8001728:	701a      	strb	r2, [r3, #0]
		pwmUpdatePolarity(&pwmYellow, dirYellowVal);
 800172a:	4b1a      	ldr	r3, [pc, #104]	; (8001794 <parseCommands+0x2a4>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	4619      	mov	r1, r3
 8001730:	4816      	ldr	r0, [pc, #88]	; (800178c <parseCommands+0x29c>)
 8001732:	f002 fd67 	bl	8004204 <pwmUpdatePolarity>
		GPIO_WritePin(&dirPinYw, dirYellowVal);
 8001736:	4b17      	ldr	r3, [pc, #92]	; (8001794 <parseCommands+0x2a4>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	4619      	mov	r1, r3
 800173c:	4814      	ldr	r0, [pc, #80]	; (8001790 <parseCommands+0x2a0>)
 800173e:	f002 f9d1 	bl	8003ae4 <GPIO_WritePin>
		newMoveBlue = 1;
 8001742:	4b26      	ldr	r3, [pc, #152]	; (80017dc <parseCommands+0x2ec>)
 8001744:	2201      	movs	r2, #1
 8001746:	701a      	strb	r2, [r3, #0]
		newMoveYellow = 1;
 8001748:	4b25      	ldr	r3, [pc, #148]	; (80017e0 <parseCommands+0x2f0>)
 800174a:	2201      	movs	r2, #1
 800174c:	701a      	strb	r2, [r3, #0]
		onMove = 1;
 800174e:	4b25      	ldr	r3, [pc, #148]	; (80017e4 <parseCommands+0x2f4>)
 8001750:	2201      	movs	r2, #1
 8001752:	701a      	strb	r2, [r3, #0]
 8001754:	e0f2      	b.n	800193c <parseCommands+0x44c>
 8001756:	bf00      	nop
 8001758:	54442d18 	.word	0x54442d18
 800175c:	3ff921fb 	.word	0x3ff921fb
 8001760:	200004b4 	.word	0x200004b4
 8001764:	200004b0 	.word	0x200004b0
 8001768:	200004ac 	.word	0x200004ac
 800176c:	20000370 	.word	0x20000370
 8001770:	0800adfc 	.word	0x0800adfc
 8001774:	0800ae08 	.word	0x0800ae08
 8001778:	0800ae10 	.word	0x0800ae10
 800177c:	2000020c 	.word	0x2000020c
 8001780:	0800ae24 	.word	0x0800ae24
 8001784:	0800ae44 	.word	0x0800ae44
 8001788:	2000053c 	.word	0x2000053c
 800178c:	20000528 	.word	0x20000528
 8001790:	200005c8 	.word	0x200005c8
 8001794:	20000000 	.word	0x20000000
 8001798:	20000514 	.word	0x20000514
 800179c:	200005d4 	.word	0x200005d4
 80017a0:	0800ae48 	.word	0x0800ae48
 80017a4:	20000008 	.word	0x20000008
 80017a8:	20000006 	.word	0x20000006
 80017ac:	0800ae4c 	.word	0x0800ae4c
 80017b0:	200005c4 	.word	0x200005c4
 80017b4:	0800ae54 	.word	0x0800ae54
 80017b8:	200005f0 	.word	0x200005f0
 80017bc:	20000600 	.word	0x20000600
 80017c0:	200005f8 	.word	0x200005f8
 80017c4:	0800ae5c 	.word	0x0800ae5c
 80017c8:	b60b60b7 	.word	0xb60b60b7
 80017cc:	20000018 	.word	0x20000018
 80017d0:	200005e1 	.word	0x200005e1
 80017d4:	2000000a 	.word	0x2000000a
 80017d8:	2000000c 	.word	0x2000000c
 80017dc:	200007a4 	.word	0x200007a4
 80017e0:	200007a5 	.word	0x200007a5
 80017e4:	200005e2 	.word	0x200005e2
	} else if (strcmp(cmd, "movex") == 0) {
 80017e8:	4958      	ldr	r1, [pc, #352]	; (800194c <parseCommands+0x45c>)
 80017ea:	4859      	ldr	r0, [pc, #356]	; (8001950 <parseCommands+0x460>)
 80017ec:	f7fe fcf8 	bl	80001e0 <strcmp>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d156      	bne.n	80018a4 <parseCommands+0x3b4>
		if (firstParameter != 0) {
 80017f6:	4b57      	ldr	r3, [pc, #348]	; (8001954 <parseCommands+0x464>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d004      	beq.n	8001808 <parseCommands+0x318>
			distancia = firstParameter;
 80017fe:	4b55      	ldr	r3, [pc, #340]	; (8001954 <parseCommands+0x464>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	b29a      	uxth	r2, r3
 8001804:	4b54      	ldr	r3, [pc, #336]	; (8001958 <parseCommands+0x468>)
 8001806:	801a      	strh	r2, [r3, #0]
		}
		moves = 1;
 8001808:	4b54      	ldr	r3, [pc, #336]	; (800195c <parseCommands+0x46c>)
 800180a:	2201      	movs	r2, #1
 800180c:	701a      	strb	r2, [r3, #0]
		theta = 0;
 800180e:	4954      	ldr	r1, [pc, #336]	; (8001960 <parseCommands+0x470>)
 8001810:	f04f 0200 	mov.w	r2, #0
 8001814:	f04f 0300 	mov.w	r3, #0
 8001818:	e9c1 2300 	strd	r2, r3, [r1]
		x = 0;
 800181c:	4951      	ldr	r1, [pc, #324]	; (8001964 <parseCommands+0x474>)
 800181e:	f04f 0200 	mov.w	r2, #0
 8001822:	f04f 0300 	mov.w	r3, #0
 8001826:	e9c1 2300 	strd	r2, r3, [r1]
		y = 0;
 800182a:	494f      	ldr	r1, [pc, #316]	; (8001968 <parseCommands+0x478>)
 800182c:	f04f 0200 	mov.w	r2, #0
 8001830:	f04f 0300 	mov.w	r3, #0
 8001834:	e9c1 2300 	strd	r2, r3, [r1]
		pwmBlue.config.duttyCicle = duttyInBlue;
 8001838:	4b4c      	ldr	r3, [pc, #304]	; (800196c <parseCommands+0x47c>)
 800183a:	881a      	ldrh	r2, [r3, #0]
 800183c:	4b4c      	ldr	r3, [pc, #304]	; (8001970 <parseCommands+0x480>)
 800183e:	81da      	strh	r2, [r3, #14]
		setDuttyCycle(&pwmBlue);
 8001840:	484b      	ldr	r0, [pc, #300]	; (8001970 <parseCommands+0x480>)
 8001842:	f002 fc3f 	bl	80040c4 <setDuttyCycle>
		pwmYellow.config.duttyCicle = duttyIYwl;
 8001846:	4b4b      	ldr	r3, [pc, #300]	; (8001974 <parseCommands+0x484>)
 8001848:	881a      	ldrh	r2, [r3, #0]
 800184a:	4b4b      	ldr	r3, [pc, #300]	; (8001978 <parseCommands+0x488>)
 800184c:	81da      	strh	r2, [r3, #14]
		setDuttyCycle(&pwmYellow);
 800184e:	484a      	ldr	r0, [pc, #296]	; (8001978 <parseCommands+0x488>)
 8001850:	f002 fc38 	bl	80040c4 <setDuttyCycle>
		dirBlueVal = 0;
 8001854:	4b49      	ldr	r3, [pc, #292]	; (800197c <parseCommands+0x48c>)
 8001856:	2200      	movs	r2, #0
 8001858:	701a      	strb	r2, [r3, #0]
		pwmUpdatePolarity(&pwmBlue, dirBlueVal);
 800185a:	4b48      	ldr	r3, [pc, #288]	; (800197c <parseCommands+0x48c>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	4619      	mov	r1, r3
 8001860:	4843      	ldr	r0, [pc, #268]	; (8001970 <parseCommands+0x480>)
 8001862:	f002 fccf 	bl	8004204 <pwmUpdatePolarity>
		GPIO_WritePin(&dirPinBlue, dirBlueVal);
 8001866:	4b45      	ldr	r3, [pc, #276]	; (800197c <parseCommands+0x48c>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	4619      	mov	r1, r3
 800186c:	4844      	ldr	r0, [pc, #272]	; (8001980 <parseCommands+0x490>)
 800186e:	f002 f939 	bl	8003ae4 <GPIO_WritePin>
		dirYellowVal = 0;
 8001872:	4b44      	ldr	r3, [pc, #272]	; (8001984 <parseCommands+0x494>)
 8001874:	2200      	movs	r2, #0
 8001876:	701a      	strb	r2, [r3, #0]
		pwmUpdatePolarity(&pwmYellow, dirYellowVal);
 8001878:	4b42      	ldr	r3, [pc, #264]	; (8001984 <parseCommands+0x494>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	4619      	mov	r1, r3
 800187e:	483e      	ldr	r0, [pc, #248]	; (8001978 <parseCommands+0x488>)
 8001880:	f002 fcc0 	bl	8004204 <pwmUpdatePolarity>
		GPIO_WritePin(&dirPinYw, dirYellowVal);
 8001884:	4b3f      	ldr	r3, [pc, #252]	; (8001984 <parseCommands+0x494>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	4619      	mov	r1, r3
 800188a:	483f      	ldr	r0, [pc, #252]	; (8001988 <parseCommands+0x498>)
 800188c:	f002 f92a 	bl	8003ae4 <GPIO_WritePin>
		newMoveBlue = 1;
 8001890:	4b3e      	ldr	r3, [pc, #248]	; (800198c <parseCommands+0x49c>)
 8001892:	2201      	movs	r2, #1
 8001894:	701a      	strb	r2, [r3, #0]
		newMoveYellow = 1;
 8001896:	4b3e      	ldr	r3, [pc, #248]	; (8001990 <parseCommands+0x4a0>)
 8001898:	2201      	movs	r2, #1
 800189a:	701a      	strb	r2, [r3, #0]
		onMove = 1;
 800189c:	4b3d      	ldr	r3, [pc, #244]	; (8001994 <parseCommands+0x4a4>)
 800189e:	2201      	movs	r2, #1
 80018a0:	701a      	strb	r2, [r3, #0]
 80018a2:	e04b      	b.n	800193c <parseCommands+0x44c>
	}

	else if (strcmp(cmd, "wheel") == 0) {
 80018a4:	493c      	ldr	r1, [pc, #240]	; (8001998 <parseCommands+0x4a8>)
 80018a6:	482a      	ldr	r0, [pc, #168]	; (8001950 <parseCommands+0x460>)
 80018a8:	f7fe fc9a 	bl	80001e0 <strcmp>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d11c      	bne.n	80018ec <parseCommands+0x3fc>
		wheelbase = firstParameter / 10.0f;
 80018b2:	4b28      	ldr	r3, [pc, #160]	; (8001954 <parseCommands+0x464>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	ee07 3a90 	vmov	s15, r3
 80018ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018be:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80018c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018c6:	4b35      	ldr	r3, [pc, #212]	; (800199c <parseCommands+0x4ac>)
 80018c8:	edc3 7a00 	vstr	s15, [r3]
		sprintf(bufferData, "Wheel = %.2f", wheelbase);
 80018cc:	4b33      	ldr	r3, [pc, #204]	; (800199c <parseCommands+0x4ac>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7fe fe51 	bl	8000578 <__aeabi_f2d>
 80018d6:	4602      	mov	r2, r0
 80018d8:	460b      	mov	r3, r1
 80018da:	4931      	ldr	r1, [pc, #196]	; (80019a0 <parseCommands+0x4b0>)
 80018dc:	4831      	ldr	r0, [pc, #196]	; (80019a4 <parseCommands+0x4b4>)
 80018de:	f003 ff6d 	bl	80057bc <siprintf>
		writeString(&handlerConexion, bufferData);
 80018e2:	4930      	ldr	r1, [pc, #192]	; (80019a4 <parseCommands+0x4b4>)
 80018e4:	4830      	ldr	r0, [pc, #192]	; (80019a8 <parseCommands+0x4b8>)
 80018e6:	f003 f898 	bl	8004a1a <writeString>
 80018ea:	e027      	b.n	800193c <parseCommands+0x44c>
	}

	else if (strcmp(cmd, "wheelSize") == 0) {
 80018ec:	492f      	ldr	r1, [pc, #188]	; (80019ac <parseCommands+0x4bc>)
 80018ee:	4818      	ldr	r0, [pc, #96]	; (8001950 <parseCommands+0x460>)
 80018f0:	f7fe fc76 	bl	80001e0 <strcmp>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d11c      	bne.n	8001934 <parseCommands+0x444>
		wheelbase = firstParameter / 100.0f;
 80018fa:	4b16      	ldr	r3, [pc, #88]	; (8001954 <parseCommands+0x464>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	ee07 3a90 	vmov	s15, r3
 8001902:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001906:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80019b0 <parseCommands+0x4c0>
 800190a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800190e:	4b23      	ldr	r3, [pc, #140]	; (800199c <parseCommands+0x4ac>)
 8001910:	edc3 7a00 	vstr	s15, [r3]
		sprintf(bufferData, "Wheel = %.2f", wheelbase);
 8001914:	4b21      	ldr	r3, [pc, #132]	; (800199c <parseCommands+0x4ac>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4618      	mov	r0, r3
 800191a:	f7fe fe2d 	bl	8000578 <__aeabi_f2d>
 800191e:	4602      	mov	r2, r0
 8001920:	460b      	mov	r3, r1
 8001922:	491f      	ldr	r1, [pc, #124]	; (80019a0 <parseCommands+0x4b0>)
 8001924:	481f      	ldr	r0, [pc, #124]	; (80019a4 <parseCommands+0x4b4>)
 8001926:	f003 ff49 	bl	80057bc <siprintf>
		writeString(&handlerConexion, bufferData);
 800192a:	491e      	ldr	r1, [pc, #120]	; (80019a4 <parseCommands+0x4b4>)
 800192c:	481e      	ldr	r0, [pc, #120]	; (80019a8 <parseCommands+0x4b8>)
 800192e:	f003 f874 	bl	8004a1a <writeString>
 8001932:	e003      	b.n	800193c <parseCommands+0x44c>
	}

	else {
		// Se imprime el mensaje "Wrong CMD" si la escritura no corresponde a los CMD implementados
		writeString(&handlerConexion, "Wrong CMD \n");
 8001934:	491f      	ldr	r1, [pc, #124]	; (80019b4 <parseCommands+0x4c4>)
 8001936:	481c      	ldr	r0, [pc, #112]	; (80019a8 <parseCommands+0x4b8>)
 8001938:	f003 f86f 	bl	8004a1a <writeString>
	}
	firstParameter = 0;
 800193c:	4b05      	ldr	r3, [pc, #20]	; (8001954 <parseCommands+0x464>)
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]

}
 8001942:	bf00      	nop
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	0800ae64 	.word	0x0800ae64
 8001950:	20000370 	.word	0x20000370
 8001954:	200004ac 	.word	0x200004ac
 8001958:	2000000e 	.word	0x2000000e
 800195c:	200005e0 	.word	0x200005e0
 8001960:	20000600 	.word	0x20000600
 8001964:	200005f0 	.word	0x200005f0
 8001968:	200005f8 	.word	0x200005f8
 800196c:	20000006 	.word	0x20000006
 8001970:	20000514 	.word	0x20000514
 8001974:	20000008 	.word	0x20000008
 8001978:	20000528 	.word	0x20000528
 800197c:	2000053c 	.word	0x2000053c
 8001980:	200005d4 	.word	0x200005d4
 8001984:	20000000 	.word	0x20000000
 8001988:	200005c8 	.word	0x200005c8
 800198c:	200007a4 	.word	0x200007a4
 8001990:	200007a5 	.word	0x200007a5
 8001994:	200005e2 	.word	0x200005e2
 8001998:	0800ae6c 	.word	0x0800ae6c
 800199c:	20000010 	.word	0x20000010
 80019a0:	0800ae74 	.word	0x0800ae74
 80019a4:	200003b0 	.word	0x200003b0
 80019a8:	200002a4 	.word	0x200002a4
 80019ac:	0800ae84 	.word	0x0800ae84
 80019b0:	42c80000 	.word	0x42c80000
 80019b4:	0800ae90 	.word	0x0800ae90

080019b8 <BasicTimer2_Callback>:
void BasicTimer2_Callback(void) {
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0

	counterTimer2++;
 80019be:	4b4c      	ldr	r3, [pc, #304]	; (8001af0 <BasicTimer2_Callback+0x138>)
 80019c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c4:	1c50      	adds	r0, r2, #1
 80019c6:	f143 0100 	adc.w	r1, r3, #0
 80019ca:	4b49      	ldr	r3, [pc, #292]	; (8001af0 <BasicTimer2_Callback+0x138>)
 80019cc:	e9c3 0100 	strd	r0, r1, [r3]
	if (onMove) {
 80019d0:	4b48      	ldr	r3, [pc, #288]	; (8001af4 <BasicTimer2_Callback+0x13c>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d07f      	beq.n	8001ad8 <BasicTimer2_Callback+0x120>
		if (counterTimer2 % 100 == 0) {
 80019d8:	4b45      	ldr	r3, [pc, #276]	; (8001af0 <BasicTimer2_Callback+0x138>)
 80019da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019de:	f04f 0264 	mov.w	r2, #100	; 0x64
 80019e2:	f04f 0300 	mov.w	r3, #0
 80019e6:	f7ff f967 	bl	8000cb8 <__aeabi_uldivmod>
 80019ea:	4313      	orrs	r3, r2
 80019ec:	d174      	bne.n	8001ad8 <BasicTimer2_Callback+0x120>
			if (calibrate) {
 80019ee:	4b42      	ldr	r3, [pc, #264]	; (8001af8 <BasicTimer2_Callback+0x140>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d06e      	beq.n	8001ad4 <BasicTimer2_Callback+0x11c>
				int aux = timeBlueAvg - timeYwlAvg;
 80019f6:	4b41      	ldr	r3, [pc, #260]	; (8001afc <BasicTimer2_Callback+0x144>)
 80019f8:	ed93 7a00 	vldr	s14, [r3]
 80019fc:	4b40      	ldr	r3, [pc, #256]	; (8001b00 <BasicTimer2_Callback+0x148>)
 80019fe:	edd3 7a00 	vldr	s15, [r3]
 8001a02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a0a:	ee17 3a90 	vmov	r3, s15
 8001a0e:	607b      	str	r3, [r7, #4]
				if (aux > 13) {
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2b0d      	cmp	r3, #13
 8001a14:	dd0d      	ble.n	8001a32 <BasicTimer2_Callback+0x7a>
					duttyIYwl -= 7;
 8001a16:	4b3b      	ldr	r3, [pc, #236]	; (8001b04 <BasicTimer2_Callback+0x14c>)
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	3b07      	subs	r3, #7
 8001a1c:	b29a      	uxth	r2, r3
 8001a1e:	4b39      	ldr	r3, [pc, #228]	; (8001b04 <BasicTimer2_Callback+0x14c>)
 8001a20:	801a      	strh	r2, [r3, #0]
					pwmYellow.config.duttyCicle = duttyIYwl;
 8001a22:	4b38      	ldr	r3, [pc, #224]	; (8001b04 <BasicTimer2_Callback+0x14c>)
 8001a24:	881a      	ldrh	r2, [r3, #0]
 8001a26:	4b38      	ldr	r3, [pc, #224]	; (8001b08 <BasicTimer2_Callback+0x150>)
 8001a28:	81da      	strh	r2, [r3, #14]
					setDuttyCycle(&pwmYellow);
 8001a2a:	4837      	ldr	r0, [pc, #220]	; (8001b08 <BasicTimer2_Callback+0x150>)
 8001a2c:	f002 fb4a 	bl	80040c4 <setDuttyCycle>
 8001a30:	e010      	b.n	8001a54 <BasicTimer2_Callback+0x9c>
				} else if (aux < -13) {
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f113 0f0d 	cmn.w	r3, #13
 8001a38:	da0c      	bge.n	8001a54 <BasicTimer2_Callback+0x9c>
					duttyIYwl += 7;
 8001a3a:	4b32      	ldr	r3, [pc, #200]	; (8001b04 <BasicTimer2_Callback+0x14c>)
 8001a3c:	881b      	ldrh	r3, [r3, #0]
 8001a3e:	3307      	adds	r3, #7
 8001a40:	b29a      	uxth	r2, r3
 8001a42:	4b30      	ldr	r3, [pc, #192]	; (8001b04 <BasicTimer2_Callback+0x14c>)
 8001a44:	801a      	strh	r2, [r3, #0]
					pwmYellow.config.duttyCicle = duttyIYwl;
 8001a46:	4b2f      	ldr	r3, [pc, #188]	; (8001b04 <BasicTimer2_Callback+0x14c>)
 8001a48:	881a      	ldrh	r2, [r3, #0]
 8001a4a:	4b2f      	ldr	r3, [pc, #188]	; (8001b08 <BasicTimer2_Callback+0x150>)
 8001a4c:	81da      	strh	r2, [r3, #14]
					setDuttyCycle(&pwmYellow);
 8001a4e:	482e      	ldr	r0, [pc, #184]	; (8001b08 <BasicTimer2_Callback+0x150>)
 8001a50:	f002 fb38 	bl	80040c4 <setDuttyCycle>

				}
				if (counterTimer2 % 1000 == 0 && moves == 1) {
 8001a54:	4b26      	ldr	r3, [pc, #152]	; (8001af0 <BasicTimer2_Callback+0x138>)
 8001a56:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a5e:	f04f 0300 	mov.w	r3, #0
 8001a62:	f7ff f929 	bl	8000cb8 <__aeabi_uldivmod>
 8001a66:	4313      	orrs	r3, r2
 8001a68:	d134      	bne.n	8001ad4 <BasicTimer2_Callback+0x11c>
 8001a6a:	4b28      	ldr	r3, [pc, #160]	; (8001b0c <BasicTimer2_Callback+0x154>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d030      	beq.n	8001ad4 <BasicTimer2_Callback+0x11c>
					if (theta > 0.02) {
 8001a72:	4b27      	ldr	r3, [pc, #156]	; (8001b10 <BasicTimer2_Callback+0x158>)
 8001a74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a78:	a319      	add	r3, pc, #100	; (adr r3, 8001ae0 <BasicTimer2_Callback+0x128>)
 8001a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7e:	f7ff f863 	bl	8000b48 <__aeabi_dcmpgt>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d00d      	beq.n	8001aa4 <BasicTimer2_Callback+0xec>
						duttyIYwl -= 10;
 8001a88:	4b1e      	ldr	r3, [pc, #120]	; (8001b04 <BasicTimer2_Callback+0x14c>)
 8001a8a:	881b      	ldrh	r3, [r3, #0]
 8001a8c:	3b0a      	subs	r3, #10
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	4b1c      	ldr	r3, [pc, #112]	; (8001b04 <BasicTimer2_Callback+0x14c>)
 8001a92:	801a      	strh	r2, [r3, #0]
						pwmYellow.config.duttyCicle = duttyIYwl;
 8001a94:	4b1b      	ldr	r3, [pc, #108]	; (8001b04 <BasicTimer2_Callback+0x14c>)
 8001a96:	881a      	ldrh	r2, [r3, #0]
 8001a98:	4b1b      	ldr	r3, [pc, #108]	; (8001b08 <BasicTimer2_Callback+0x150>)
 8001a9a:	81da      	strh	r2, [r3, #14]
						setDuttyCycle(&pwmYellow);
 8001a9c:	481a      	ldr	r0, [pc, #104]	; (8001b08 <BasicTimer2_Callback+0x150>)
 8001a9e:	f002 fb11 	bl	80040c4 <setDuttyCycle>
 8001aa2:	e017      	b.n	8001ad4 <BasicTimer2_Callback+0x11c>

					} else if (theta < -0.02) {
 8001aa4:	4b1a      	ldr	r3, [pc, #104]	; (8001b10 <BasicTimer2_Callback+0x158>)
 8001aa6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001aaa:	a30f      	add	r3, pc, #60	; (adr r3, 8001ae8 <BasicTimer2_Callback+0x130>)
 8001aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab0:	f7ff f82c 	bl	8000b0c <__aeabi_dcmplt>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d00c      	beq.n	8001ad4 <BasicTimer2_Callback+0x11c>
						duttyIYwl += 10;
 8001aba:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <BasicTimer2_Callback+0x14c>)
 8001abc:	881b      	ldrh	r3, [r3, #0]
 8001abe:	330a      	adds	r3, #10
 8001ac0:	b29a      	uxth	r2, r3
 8001ac2:	4b10      	ldr	r3, [pc, #64]	; (8001b04 <BasicTimer2_Callback+0x14c>)
 8001ac4:	801a      	strh	r2, [r3, #0]
						pwmYellow.config.duttyCicle = duttyIYwl;
 8001ac6:	4b0f      	ldr	r3, [pc, #60]	; (8001b04 <BasicTimer2_Callback+0x14c>)
 8001ac8:	881a      	ldrh	r2, [r3, #0]
 8001aca:	4b0f      	ldr	r3, [pc, #60]	; (8001b08 <BasicTimer2_Callback+0x150>)
 8001acc:	81da      	strh	r2, [r3, #14]
						setDuttyCycle(&pwmYellow);
 8001ace:	480e      	ldr	r0, [pc, #56]	; (8001b08 <BasicTimer2_Callback+0x150>)
 8001ad0:	f002 faf8 	bl	80040c4 <setDuttyCycle>
					}
				}
			}

			updatePosition();
 8001ad4:	f000 fa8c 	bl	8001ff0 <updatePosition>
////			pwmBlue.config.duttyCicle -= 1;
////			setDuttyCycle(&pwmBlue);
////		}
//		countTimer = 0;
//	}
}
 8001ad8:	bf00      	nop
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	47ae147b 	.word	0x47ae147b
 8001ae4:	3f947ae1 	.word	0x3f947ae1
 8001ae8:	47ae147b 	.word	0x47ae147b
 8001aec:	bf947ae1 	.word	0xbf947ae1
 8001af0:	20000340 	.word	0x20000340
 8001af4:	200005e2 	.word	0x200005e2
 8001af8:	200007a6 	.word	0x200007a6
 8001afc:	2000079c 	.word	0x2000079c
 8001b00:	200007a0 	.word	0x200007a0
 8001b04:	20000008 	.word	0x20000008
 8001b08:	20000528 	.word	0x20000528
 8001b0c:	200005e0 	.word	0x200005e0
 8001b10:	20000600 	.word	0x20000600

08001b14 <BasicTimer3_Callback>:
//Calback del timer3 para el blinking
void BasicTimer3_Callback(void) {
 8001b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b18:	b091      	sub	sp, #68	; 0x44
 8001b1a:	af0c      	add	r7, sp, #48	; 0x30
	GPIOxTooglePin(&ledUsuario);
 8001b1c:	4842      	ldr	r0, [pc, #264]	; (8001c28 <BasicTimer3_Callback+0x114>)
 8001b1e:	f002 f82a 	bl	8003b76 <GPIOxTooglePin>

	counter10seg++;
 8001b22:	4b42      	ldr	r3, [pc, #264]	; (8001c2c <BasicTimer3_Callback+0x118>)
 8001b24:	881b      	ldrh	r3, [r3, #0]
 8001b26:	3301      	adds	r3, #1
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	4b40      	ldr	r3, [pc, #256]	; (8001c2c <BasicTimer3_Callback+0x118>)
 8001b2c:	801a      	strh	r2, [r3, #0]
	if (counter10seg > 4 * 1 - 1) {
 8001b2e:	4b3f      	ldr	r3, [pc, #252]	; (8001c2c <BasicTimer3_Callback+0x118>)
 8001b30:	881b      	ldrh	r3, [r3, #0]
 8001b32:	2b03      	cmp	r3, #3
 8001b34:	d973      	bls.n	8001c1e <BasicTimer3_Callback+0x10a>
		sprintf(bufferData, "%.4f\t%.4f\t%.4f\t%d\t%d\t%.3f\t%.3f\t%d\t%d\n",
 8001b36:	4b3e      	ldr	r3, [pc, #248]	; (8001c30 <BasicTimer3_Callback+0x11c>)
 8001b38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b3c:	f04f 0200 	mov.w	r2, #0
 8001b40:	4b3c      	ldr	r3, [pc, #240]	; (8001c34 <BasicTimer3_Callback+0x120>)
 8001b42:	f7fe fe9b 	bl	800087c <__aeabi_ddiv>
 8001b46:	4602      	mov	r2, r0
 8001b48:	460b      	mov	r3, r1
 8001b4a:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001b4e:	4b3a      	ldr	r3, [pc, #232]	; (8001c38 <BasicTimer3_Callback+0x124>)
 8001b50:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b54:	f04f 0200 	mov.w	r2, #0
 8001b58:	4b36      	ldr	r3, [pc, #216]	; (8001c34 <BasicTimer3_Callback+0x120>)
 8001b5a:	f7fe fe8f 	bl	800087c <__aeabi_ddiv>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	4692      	mov	sl, r2
 8001b64:	469b      	mov	fp, r3
 8001b66:	4b35      	ldr	r3, [pc, #212]	; (8001c3c <BasicTimer3_Callback+0x128>)
 8001b68:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001b6c:	4b34      	ldr	r3, [pc, #208]	; (8001c40 <BasicTimer3_Callback+0x12c>)
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	4b34      	ldr	r3, [pc, #208]	; (8001c44 <BasicTimer3_Callback+0x130>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	1ad6      	subs	r6, r2, r3
 8001b76:	4b34      	ldr	r3, [pc, #208]	; (8001c48 <BasicTimer3_Callback+0x134>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	4b34      	ldr	r3, [pc, #208]	; (8001c4c <BasicTimer3_Callback+0x138>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	607b      	str	r3, [r7, #4]
				x / 100, y / 100, theta, (counterBlueCounterT - lastValBlue),
				(counterYwlCounterT - lastValYwl),
				pwmBlue.config.duttyCicle / 100.0f,
 8001b82:	4b33      	ldr	r3, [pc, #204]	; (8001c50 <BasicTimer3_Callback+0x13c>)
 8001b84:	89db      	ldrh	r3, [r3, #14]
 8001b86:	ee07 3a90 	vmov	s15, r3
 8001b8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b8e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001c54 <BasicTimer3_Callback+0x140>
 8001b92:	eec7 6a87 	vdiv.f32	s13, s15, s14
		sprintf(bufferData, "%.4f\t%.4f\t%.4f\t%d\t%d\t%.3f\t%.3f\t%d\t%d\n",
 8001b96:	ee16 0a90 	vmov	r0, s13
 8001b9a:	f7fe fced 	bl	8000578 <__aeabi_f2d>
 8001b9e:	4680      	mov	r8, r0
 8001ba0:	4689      	mov	r9, r1
				pwmYellow.config.duttyCicle / 100.0f, (int) timeBlueAvg,
 8001ba2:	4b2d      	ldr	r3, [pc, #180]	; (8001c58 <BasicTimer3_Callback+0x144>)
 8001ba4:	89db      	ldrh	r3, [r3, #14]
 8001ba6:	ee07 3a90 	vmov	s15, r3
 8001baa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bae:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001c54 <BasicTimer3_Callback+0x140>
 8001bb2:	eec7 6a87 	vdiv.f32	s13, s15, s14
		sprintf(bufferData, "%.4f\t%.4f\t%.4f\t%d\t%d\t%.3f\t%.3f\t%d\t%d\n",
 8001bb6:	ee16 0a90 	vmov	r0, s13
 8001bba:	f7fe fcdd 	bl	8000578 <__aeabi_f2d>
 8001bbe:	4b27      	ldr	r3, [pc, #156]	; (8001c5c <BasicTimer3_Callback+0x148>)
 8001bc0:	edd3 7a00 	vldr	s15, [r3]
 8001bc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bc8:	ee17 2a90 	vmov	r2, s15
 8001bcc:	4b24      	ldr	r3, [pc, #144]	; (8001c60 <BasicTimer3_Callback+0x14c>)
 8001bce:	edd3 7a00 	vldr	s15, [r3]
 8001bd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bd6:	ee17 3a90 	vmov	r3, s15
 8001bda:	930b      	str	r3, [sp, #44]	; 0x2c
 8001bdc:	920a      	str	r2, [sp, #40]	; 0x28
 8001bde:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8001be2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	9305      	str	r3, [sp, #20]
 8001bea:	9604      	str	r6, [sp, #16]
 8001bec:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001bf0:	e9cd ab00 	strd	sl, fp, [sp]
 8001bf4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001bf8:	491a      	ldr	r1, [pc, #104]	; (8001c64 <BasicTimer3_Callback+0x150>)
 8001bfa:	481b      	ldr	r0, [pc, #108]	; (8001c68 <BasicTimer3_Callback+0x154>)
 8001bfc:	f003 fdde 	bl	80057bc <siprintf>
				(int) timeYwlAvg);
		writeString(&handlerConexion, bufferData);
 8001c00:	4919      	ldr	r1, [pc, #100]	; (8001c68 <BasicTimer3_Callback+0x154>)
 8001c02:	481a      	ldr	r0, [pc, #104]	; (8001c6c <BasicTimer3_Callback+0x158>)
 8001c04:	f002 ff09 	bl	8004a1a <writeString>
		lastValBlue = counterBlueCounterT;
 8001c08:	4b0d      	ldr	r3, [pc, #52]	; (8001c40 <BasicTimer3_Callback+0x12c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a0d      	ldr	r2, [pc, #52]	; (8001c44 <BasicTimer3_Callback+0x130>)
 8001c0e:	6013      	str	r3, [r2, #0]
		lastValYwl = counterYwlCounterT;
 8001c10:	4b0d      	ldr	r3, [pc, #52]	; (8001c48 <BasicTimer3_Callback+0x134>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a0d      	ldr	r2, [pc, #52]	; (8001c4c <BasicTimer3_Callback+0x138>)
 8001c16:	6013      	str	r3, [r2, #0]
		counter10seg = 0;
 8001c18:	4b04      	ldr	r3, [pc, #16]	; (8001c2c <BasicTimer3_Callback+0x118>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	801a      	strh	r2, [r3, #0]
	}

}
 8001c1e:	bf00      	nop
 8001c20:	3714      	adds	r7, #20
 8001c22:	46bd      	mov	sp, r7
 8001c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c28:	200004d4 	.word	0x200004d4
 8001c2c:	20000608 	.word	0x20000608
 8001c30:	200005f0 	.word	0x200005f0
 8001c34:	40590000 	.word	0x40590000
 8001c38:	200005f8 	.word	0x200005f8
 8001c3c:	20000600 	.word	0x20000600
 8001c40:	20000570 	.word	0x20000570
 8001c44:	20000580 	.word	0x20000580
 8001c48:	200005a0 	.word	0x200005a0
 8001c4c:	20000584 	.word	0x20000584
 8001c50:	20000514 	.word	0x20000514
 8001c54:	42c80000 	.word	0x42c80000
 8001c58:	20000528 	.word	0x20000528
 8001c5c:	2000079c 	.word	0x2000079c
 8001c60:	200007a0 	.word	0x200007a0
 8001c64:	0800ae9c 	.word	0x0800ae9c
 8001c68:	200003b0 	.word	0x200003b0
 8001c6c:	200002a4 	.word	0x200002a4

08001c70 <USART1Rx_Callback>:

void USART1Rx_Callback(void) {
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
	rxData2 = (uint8_t) USART1->DR;
 8001c74:	4b04      	ldr	r3, [pc, #16]	; (8001c88 <USART1Rx_Callback+0x18>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	b2da      	uxtb	r2, r3
 8001c7a:	4b04      	ldr	r3, [pc, #16]	; (8001c8c <USART1Rx_Callback+0x1c>)
 8001c7c:	701a      	strb	r2, [r3, #0]
}
 8001c7e:	bf00      	nop
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	40011000 	.word	0x40011000
 8001c8c:	2000033c 	.word	0x2000033c

08001c90 <callback_extInt0>:

void callback_extInt0(void) {
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
	PC0Counter++;
 8001c94:	4b04      	ldr	r3, [pc, #16]	; (8001ca8 <callback_extInt0+0x18>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	4a03      	ldr	r2, [pc, #12]	; (8001ca8 <callback_extInt0+0x18>)
 8001c9c:	6013      	str	r3, [r2, #0]
}
 8001c9e:	bf00      	nop
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	200005bc 	.word	0x200005bc

08001cac <callback_extInt7>:

void callback_extInt7(void) {
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0

	PC7Counter++;
 8001cb0:	4b04      	ldr	r3, [pc, #16]	; (8001cc4 <callback_extInt7+0x18>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	4a03      	ldr	r2, [pc, #12]	; (8001cc4 <callback_extInt7+0x18>)
 8001cb8:	6013      	str	r3, [r2, #0]
}
 8001cba:	bf00      	nop
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr
 8001cc4:	20000554 	.word	0x20000554

08001cc8 <callback_extInt1>:

void callback_extInt1(void) {
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
	int size = sizeof(timeBlueArray) / sizeof(timeBlueArray[0]);
 8001cce:	2364      	movs	r3, #100	; 0x64
 8001cd0:	607b      	str	r3, [r7, #4]
	counterBlueCounterT++;
 8001cd2:	4b49      	ldr	r3, [pc, #292]	; (8001df8 <callback_extInt1+0x130>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	4a47      	ldr	r2, [pc, #284]	; (8001df8 <callback_extInt1+0x130>)
 8001cda:	6013      	str	r3, [r2, #0]
	if (onMove) {
 8001cdc:	4b47      	ldr	r3, [pc, #284]	; (8001dfc <callback_extInt1+0x134>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	f000 8084 	beq.w	8001dee <callback_extInt1+0x126>
		if (newMoveBlue) {
 8001ce6:	4b46      	ldr	r3, [pc, #280]	; (8001e00 <callback_extInt1+0x138>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d009      	beq.n	8001d02 <callback_extInt1+0x3a>
			counterBlueLastIns = 0;
 8001cee:	4b45      	ldr	r3, [pc, #276]	; (8001e04 <callback_extInt1+0x13c>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
			newMoveBlue = 0;
 8001cf4:	4b42      	ldr	r3, [pc, #264]	; (8001e00 <callback_extInt1+0x138>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	701a      	strb	r2, [r3, #0]
			timeBlueAvg = 0;
 8001cfa:	4b43      	ldr	r3, [pc, #268]	; (8001e08 <callback_extInt1+0x140>)
 8001cfc:	f04f 0200 	mov.w	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
		}

		counterBlueCounter++;
 8001d02:	4b42      	ldr	r3, [pc, #264]	; (8001e0c <callback_extInt1+0x144>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	3301      	adds	r3, #1
 8001d08:	4a40      	ldr	r2, [pc, #256]	; (8001e0c <callback_extInt1+0x144>)
 8001d0a:	6013      	str	r3, [r2, #0]

		timeBlue = counterTimer2 - lastBlue;
 8001d0c:	4b40      	ldr	r3, [pc, #256]	; (8001e10 <callback_extInt1+0x148>)
 8001d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d12:	b291      	uxth	r1, r2
 8001d14:	4b3f      	ldr	r3, [pc, #252]	; (8001e14 <callback_extInt1+0x14c>)
 8001d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1a:	b293      	uxth	r3, r2
 8001d1c:	1acb      	subs	r3, r1, r3
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	4b3d      	ldr	r3, [pc, #244]	; (8001e18 <callback_extInt1+0x150>)
 8001d22:	801a      	strh	r2, [r3, #0]
		lastBlue = counterTimer2;
 8001d24:	4b3a      	ldr	r3, [pc, #232]	; (8001e10 <callback_extInt1+0x148>)
 8001d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d2a:	493a      	ldr	r1, [pc, #232]	; (8001e14 <callback_extInt1+0x14c>)
 8001d2c:	e9c1 2300 	strd	r2, r3, [r1]
		if (timeBlue < 800) {
 8001d30:	4b39      	ldr	r3, [pc, #228]	; (8001e18 <callback_extInt1+0x150>)
 8001d32:	881b      	ldrh	r3, [r3, #0]
 8001d34:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001d38:	d259      	bcs.n	8001dee <callback_extInt1+0x126>

			timeBlueArray[counterBlueLastIns % size] = timeBlue;
 8001d3a:	4b32      	ldr	r3, [pc, #200]	; (8001e04 <callback_extInt1+0x13c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	fb93 f2f2 	sdiv	r2, r3, r2
 8001d44:	6879      	ldr	r1, [r7, #4]
 8001d46:	fb01 f202 	mul.w	r2, r1, r2
 8001d4a:	1a9b      	subs	r3, r3, r2
 8001d4c:	4a32      	ldr	r2, [pc, #200]	; (8001e18 <callback_extInt1+0x150>)
 8001d4e:	8811      	ldrh	r1, [r2, #0]
 8001d50:	4a32      	ldr	r2, [pc, #200]	; (8001e1c <callback_extInt1+0x154>)
 8001d52:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			if (counterBlueLastIns <= size) {
 8001d56:	4b2b      	ldr	r3, [pc, #172]	; (8001e04 <callback_extInt1+0x13c>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	db34      	blt.n	8001dca <callback_extInt1+0x102>
				if (!timeBlueAvg) {
 8001d60:	4b29      	ldr	r3, [pc, #164]	; (8001e08 <callback_extInt1+0x140>)
 8001d62:	edd3 7a00 	vldr	s15, [r3]
 8001d66:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d6e:	d109      	bne.n	8001d84 <callback_extInt1+0xbc>
					timeBlueAvg = timeBlue;
 8001d70:	4b29      	ldr	r3, [pc, #164]	; (8001e18 <callback_extInt1+0x150>)
 8001d72:	881b      	ldrh	r3, [r3, #0]
 8001d74:	ee07 3a90 	vmov	s15, r3
 8001d78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d7c:	4b22      	ldr	r3, [pc, #136]	; (8001e08 <callback_extInt1+0x140>)
 8001d7e:	edc3 7a00 	vstr	s15, [r3]
 8001d82:	e02f      	b.n	8001de4 <callback_extInt1+0x11c>
				} else {
					timeBlueAvg = (timeBlueAvg * counterBlueLastIns + timeBlue)
 8001d84:	4b1f      	ldr	r3, [pc, #124]	; (8001e04 <callback_extInt1+0x13c>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	ee07 3a90 	vmov	s15, r3
 8001d8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d90:	4b1d      	ldr	r3, [pc, #116]	; (8001e08 <callback_extInt1+0x140>)
 8001d92:	edd3 7a00 	vldr	s15, [r3]
 8001d96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d9a:	4b1f      	ldr	r3, [pc, #124]	; (8001e18 <callback_extInt1+0x150>)
 8001d9c:	881b      	ldrh	r3, [r3, #0]
 8001d9e:	ee07 3a90 	vmov	s15, r3
 8001da2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001da6:	ee77 6a27 	vadd.f32	s13, s14, s15
							/ (float) (counterBlueLastIns + 1.0f);
 8001daa:	4b16      	ldr	r3, [pc, #88]	; (8001e04 <callback_extInt1+0x13c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	ee07 3a90 	vmov	s15, r3
 8001db2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001db6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001dba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001dbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
					timeBlueAvg = (timeBlueAvg * counterBlueLastIns + timeBlue)
 8001dc2:	4b11      	ldr	r3, [pc, #68]	; (8001e08 <callback_extInt1+0x140>)
 8001dc4:	edc3 7a00 	vstr	s15, [r3]
 8001dc8:	e00c      	b.n	8001de4 <callback_extInt1+0x11c>
				}
			} else {
				timeBlueAvg = getAverage(timeBlueArray, size);
 8001dca:	6879      	ldr	r1, [r7, #4]
 8001dcc:	4813      	ldr	r0, [pc, #76]	; (8001e1c <callback_extInt1+0x154>)
 8001dce:	f000 f8d5 	bl	8001f7c <getAverage>
 8001dd2:	ec53 2b10 	vmov	r2, r3, d0
 8001dd6:	4610      	mov	r0, r2
 8001dd8:	4619      	mov	r1, r3
 8001dda:	f7fe ff1d 	bl	8000c18 <__aeabi_d2f>
 8001dde:	4603      	mov	r3, r0
 8001de0:	4a09      	ldr	r2, [pc, #36]	; (8001e08 <callback_extInt1+0x140>)
 8001de2:	6013      	str	r3, [r2, #0]
			}

			counterBlueLastIns++;
 8001de4:	4b07      	ldr	r3, [pc, #28]	; (8001e04 <callback_extInt1+0x13c>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	3301      	adds	r3, #1
 8001dea:	4a06      	ldr	r2, [pc, #24]	; (8001e04 <callback_extInt1+0x13c>)
 8001dec:	6013      	str	r3, [r2, #0]
		}
	}

}
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	20000570 	.word	0x20000570
 8001dfc:	200005e2 	.word	0x200005e2
 8001e00:	200007a4 	.word	0x200007a4
 8001e04:	20000574 	.word	0x20000574
 8001e08:	2000079c 	.word	0x2000079c
 8001e0c:	2000056c 	.word	0x2000056c
 8001e10:	20000340 	.word	0x20000340
 8001e14:	20000348 	.word	0x20000348
 8001e18:	2000057c 	.word	0x2000057c
 8001e1c:	2000060c 	.word	0x2000060c

08001e20 <callback_extInt3>:

void callback_extInt3(void) {
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
	int size = sizeof(timeYellowArray) / sizeof(timeYellowArray[0]);
 8001e26:	2364      	movs	r3, #100	; 0x64
 8001e28:	607b      	str	r3, [r7, #4]
	counterYwlCounterT++;
 8001e2a:	4b49      	ldr	r3, [pc, #292]	; (8001f50 <callback_extInt3+0x130>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	4a47      	ldr	r2, [pc, #284]	; (8001f50 <callback_extInt3+0x130>)
 8001e32:	6013      	str	r3, [r2, #0]
	if (onMove) {
 8001e34:	4b47      	ldr	r3, [pc, #284]	; (8001f54 <callback_extInt3+0x134>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	f000 8084 	beq.w	8001f46 <callback_extInt3+0x126>
		if (newMoveYellow) {
 8001e3e:	4b46      	ldr	r3, [pc, #280]	; (8001f58 <callback_extInt3+0x138>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d009      	beq.n	8001e5a <callback_extInt3+0x3a>
			counterYellowLastIns = 0;
 8001e46:	4b45      	ldr	r3, [pc, #276]	; (8001f5c <callback_extInt3+0x13c>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
			newMoveYellow = 0;
 8001e4c:	4b42      	ldr	r3, [pc, #264]	; (8001f58 <callback_extInt3+0x138>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	701a      	strb	r2, [r3, #0]
			timeYwlAvg = 0;
 8001e52:	4b43      	ldr	r3, [pc, #268]	; (8001f60 <callback_extInt3+0x140>)
 8001e54:	f04f 0200 	mov.w	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
		}
		timeYwl = counterTimer2 - lastYlw;
 8001e5a:	4b42      	ldr	r3, [pc, #264]	; (8001f64 <callback_extInt3+0x144>)
 8001e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e60:	b291      	uxth	r1, r2
 8001e62:	4b41      	ldr	r3, [pc, #260]	; (8001f68 <callback_extInt3+0x148>)
 8001e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e68:	b293      	uxth	r3, r2
 8001e6a:	1acb      	subs	r3, r1, r3
 8001e6c:	b29a      	uxth	r2, r3
 8001e6e:	4b3f      	ldr	r3, [pc, #252]	; (8001f6c <callback_extInt3+0x14c>)
 8001e70:	801a      	strh	r2, [r3, #0]
		lastYlw = counterTimer2;
 8001e72:	4b3c      	ldr	r3, [pc, #240]	; (8001f64 <callback_extInt3+0x144>)
 8001e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e78:	493b      	ldr	r1, [pc, #236]	; (8001f68 <callback_extInt3+0x148>)
 8001e7a:	e9c1 2300 	strd	r2, r3, [r1]
		counterYwlCounter++;
 8001e7e:	4b3c      	ldr	r3, [pc, #240]	; (8001f70 <callback_extInt3+0x150>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	3301      	adds	r3, #1
 8001e84:	4a3a      	ldr	r2, [pc, #232]	; (8001f70 <callback_extInt3+0x150>)
 8001e86:	6013      	str	r3, [r2, #0]
		if (timeYwl < 800) {
 8001e88:	4b38      	ldr	r3, [pc, #224]	; (8001f6c <callback_extInt3+0x14c>)
 8001e8a:	881b      	ldrh	r3, [r3, #0]
 8001e8c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001e90:	d259      	bcs.n	8001f46 <callback_extInt3+0x126>

			timeYellowArray[counterYellowLastIns % size] = timeYwl;
 8001e92:	4b32      	ldr	r3, [pc, #200]	; (8001f5c <callback_extInt3+0x13c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	fb93 f2f2 	sdiv	r2, r3, r2
 8001e9c:	6879      	ldr	r1, [r7, #4]
 8001e9e:	fb01 f202 	mul.w	r2, r1, r2
 8001ea2:	1a9b      	subs	r3, r3, r2
 8001ea4:	4a31      	ldr	r2, [pc, #196]	; (8001f6c <callback_extInt3+0x14c>)
 8001ea6:	8811      	ldrh	r1, [r2, #0]
 8001ea8:	4a32      	ldr	r2, [pc, #200]	; (8001f74 <callback_extInt3+0x154>)
 8001eaa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			if (counterBlueLastIns <= size) {
 8001eae:	4b32      	ldr	r3, [pc, #200]	; (8001f78 <callback_extInt3+0x158>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	db34      	blt.n	8001f22 <callback_extInt3+0x102>
				if (!timeYwlAvg) {
 8001eb8:	4b29      	ldr	r3, [pc, #164]	; (8001f60 <callback_extInt3+0x140>)
 8001eba:	edd3 7a00 	vldr	s15, [r3]
 8001ebe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec6:	d109      	bne.n	8001edc <callback_extInt3+0xbc>
					timeYwlAvg = timeYwl;
 8001ec8:	4b28      	ldr	r3, [pc, #160]	; (8001f6c <callback_extInt3+0x14c>)
 8001eca:	881b      	ldrh	r3, [r3, #0]
 8001ecc:	ee07 3a90 	vmov	s15, r3
 8001ed0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ed4:	4b22      	ldr	r3, [pc, #136]	; (8001f60 <callback_extInt3+0x140>)
 8001ed6:	edc3 7a00 	vstr	s15, [r3]
 8001eda:	e02f      	b.n	8001f3c <callback_extInt3+0x11c>

				} else {
					timeYwlAvg = (timeYwlAvg * counterYellowLastIns + timeYwl)
 8001edc:	4b1f      	ldr	r3, [pc, #124]	; (8001f5c <callback_extInt3+0x13c>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	ee07 3a90 	vmov	s15, r3
 8001ee4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ee8:	4b1d      	ldr	r3, [pc, #116]	; (8001f60 <callback_extInt3+0x140>)
 8001eea:	edd3 7a00 	vldr	s15, [r3]
 8001eee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ef2:	4b1e      	ldr	r3, [pc, #120]	; (8001f6c <callback_extInt3+0x14c>)
 8001ef4:	881b      	ldrh	r3, [r3, #0]
 8001ef6:	ee07 3a90 	vmov	s15, r3
 8001efa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001efe:	ee77 6a27 	vadd.f32	s13, s14, s15
							/ (float) (counterYellowLastIns + 1.0f);
 8001f02:	4b16      	ldr	r3, [pc, #88]	; (8001f5c <callback_extInt3+0x13c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	ee07 3a90 	vmov	s15, r3
 8001f0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001f12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001f16:	eec6 7a87 	vdiv.f32	s15, s13, s14
					timeYwlAvg = (timeYwlAvg * counterYellowLastIns + timeYwl)
 8001f1a:	4b11      	ldr	r3, [pc, #68]	; (8001f60 <callback_extInt3+0x140>)
 8001f1c:	edc3 7a00 	vstr	s15, [r3]
 8001f20:	e00c      	b.n	8001f3c <callback_extInt3+0x11c>
				}
			} else {
				timeYwlAvg = getAverage(timeYellowArray, size);
 8001f22:	6879      	ldr	r1, [r7, #4]
 8001f24:	4813      	ldr	r0, [pc, #76]	; (8001f74 <callback_extInt3+0x154>)
 8001f26:	f000 f829 	bl	8001f7c <getAverage>
 8001f2a:	ec53 2b10 	vmov	r2, r3, d0
 8001f2e:	4610      	mov	r0, r2
 8001f30:	4619      	mov	r1, r3
 8001f32:	f7fe fe71 	bl	8000c18 <__aeabi_d2f>
 8001f36:	4603      	mov	r3, r0
 8001f38:	4a09      	ldr	r2, [pc, #36]	; (8001f60 <callback_extInt3+0x140>)
 8001f3a:	6013      	str	r3, [r2, #0]
			}

			counterYellowLastIns++;
 8001f3c:	4b07      	ldr	r3, [pc, #28]	; (8001f5c <callback_extInt3+0x13c>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	3301      	adds	r3, #1
 8001f42:	4a06      	ldr	r2, [pc, #24]	; (8001f5c <callback_extInt3+0x13c>)
 8001f44:	6013      	str	r3, [r2, #0]

		}
	}

}
 8001f46:	bf00      	nop
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	200005a0 	.word	0x200005a0
 8001f54:	200005e2 	.word	0x200005e2
 8001f58:	200007a5 	.word	0x200007a5
 8001f5c:	20000578 	.word	0x20000578
 8001f60:	200007a0 	.word	0x200007a0
 8001f64:	20000340 	.word	0x20000340
 8001f68:	20000350 	.word	0x20000350
 8001f6c:	200005a4 	.word	0x200005a4
 8001f70:	2000059c 	.word	0x2000059c
 8001f74:	200006d4 	.word	0x200006d4
 8001f78:	20000574 	.word	0x20000574

08001f7c <getAverage>:

double getAverage(uint16_t arr[], int size) {
 8001f7c:	b5b0      	push	{r4, r5, r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
	int sum = 0;
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]
	double average;

// Sum all elements in the array
	for (int i = 0; i < size; i++) {
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	613b      	str	r3, [r7, #16]
 8001f8e:	e00b      	b.n	8001fa8 <getAverage+0x2c>
		sum += arr[i];
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	4413      	add	r3, r2
 8001f98:	881b      	ldrh	r3, [r3, #0]
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < size; i++) {
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	613b      	str	r3, [r7, #16]
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	dbef      	blt.n	8001f90 <getAverage+0x14>
	}

// Calculate average
	average = (double) sum / size;
 8001fb0:	6978      	ldr	r0, [r7, #20]
 8001fb2:	f7fe facf 	bl	8000554 <__aeabi_i2d>
 8001fb6:	4604      	mov	r4, r0
 8001fb8:	460d      	mov	r5, r1
 8001fba:	6838      	ldr	r0, [r7, #0]
 8001fbc:	f7fe faca 	bl	8000554 <__aeabi_i2d>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	4620      	mov	r0, r4
 8001fc6:	4629      	mov	r1, r5
 8001fc8:	f7fe fc58 	bl	800087c <__aeabi_ddiv>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	460b      	mov	r3, r1
 8001fd0:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return average;
 8001fd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fd8:	ec43 2b17 	vmov	d7, r2, r3
}
 8001fdc:	eeb0 0a47 	vmov.f32	s0, s14
 8001fe0:	eef0 0a67 	vmov.f32	s1, s15
 8001fe4:	3718      	adds	r7, #24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bdb0      	pop	{r4, r5, r7, pc}
 8001fea:	0000      	movs	r0, r0
 8001fec:	0000      	movs	r0, r0
	...

08001ff0 <updatePosition>:

void updatePosition(void) {
 8001ff0:	b5b0      	push	{r4, r5, r7, lr}
 8001ff2:	b08e      	sub	sp, #56	; 0x38
 8001ff4:	af00      	add	r7, sp, #0
	double dLeft, dRight, dCenter, deltaTheta, deltaX, deltaY;
	if (timeBlueAvg != 0 && timeYwlAvg != 0) {
 8001ff6:	4ba8      	ldr	r3, [pc, #672]	; (8002298 <updatePosition+0x2a8>)
 8001ff8:	edd3 7a00 	vldr	s15, [r3]
 8001ffc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002004:	f000 81e9 	beq.w	80023da <updatePosition+0x3ea>
 8002008:	4ba4      	ldr	r3, [pc, #656]	; (800229c <updatePosition+0x2ac>)
 800200a:	edd3 7a00 	vldr	s15, [r3]
 800200e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002016:	f000 81e0 	beq.w	80023da <updatePosition+0x3ea>
		recorridoBlue = 100 * (M_PI / 72) * (wheelsize * (1 / (10*round(timeBlueAvg/10))));
 800201a:	4ba1      	ldr	r3, [pc, #644]	; (80022a0 <updatePosition+0x2b0>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4618      	mov	r0, r3
 8002020:	f7fe faaa 	bl	8000578 <__aeabi_f2d>
 8002024:	4604      	mov	r4, r0
 8002026:	460d      	mov	r5, r1
 8002028:	4b9b      	ldr	r3, [pc, #620]	; (8002298 <updatePosition+0x2a8>)
 800202a:	edd3 7a00 	vldr	s15, [r3]
 800202e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002032:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002036:	ee16 0a90 	vmov	r0, s13
 800203a:	f7fe fa9d 	bl	8000578 <__aeabi_f2d>
 800203e:	4602      	mov	r2, r0
 8002040:	460b      	mov	r3, r1
 8002042:	ec43 2b10 	vmov	d0, r2, r3
 8002046:	f007 fe37 	bl	8009cb8 <round>
 800204a:	ec51 0b10 	vmov	r0, r1, d0
 800204e:	f04f 0200 	mov.w	r2, #0
 8002052:	4b94      	ldr	r3, [pc, #592]	; (80022a4 <updatePosition+0x2b4>)
 8002054:	f7fe fae8 	bl	8000628 <__aeabi_dmul>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	f04f 0000 	mov.w	r0, #0
 8002060:	4991      	ldr	r1, [pc, #580]	; (80022a8 <updatePosition+0x2b8>)
 8002062:	f7fe fc0b 	bl	800087c <__aeabi_ddiv>
 8002066:	4602      	mov	r2, r0
 8002068:	460b      	mov	r3, r1
 800206a:	4620      	mov	r0, r4
 800206c:	4629      	mov	r1, r5
 800206e:	f7fe fadb 	bl	8000628 <__aeabi_dmul>
 8002072:	4602      	mov	r2, r0
 8002074:	460b      	mov	r3, r1
 8002076:	4610      	mov	r0, r2
 8002078:	4619      	mov	r1, r3
 800207a:	a381      	add	r3, pc, #516	; (adr r3, 8002280 <updatePosition+0x290>)
 800207c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002080:	f7fe fad2 	bl	8000628 <__aeabi_dmul>
 8002084:	4602      	mov	r2, r0
 8002086:	460b      	mov	r3, r1
 8002088:	4610      	mov	r0, r2
 800208a:	4619      	mov	r1, r3
 800208c:	f7fe fdc4 	bl	8000c18 <__aeabi_d2f>
 8002090:	4603      	mov	r3, r0
 8002092:	4a86      	ldr	r2, [pc, #536]	; (80022ac <updatePosition+0x2bc>)
 8002094:	6013      	str	r3, [r2, #0]
		recorridoYellow = 100 * (M_PI / 72) * (wheelsize * (1 / (10*round(timeYwlAvg/10))));
 8002096:	4b82      	ldr	r3, [pc, #520]	; (80022a0 <updatePosition+0x2b0>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f7fe fa6c 	bl	8000578 <__aeabi_f2d>
 80020a0:	4604      	mov	r4, r0
 80020a2:	460d      	mov	r5, r1
 80020a4:	4b7d      	ldr	r3, [pc, #500]	; (800229c <updatePosition+0x2ac>)
 80020a6:	edd3 7a00 	vldr	s15, [r3]
 80020aa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80020ae:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80020b2:	ee16 0a90 	vmov	r0, s13
 80020b6:	f7fe fa5f 	bl	8000578 <__aeabi_f2d>
 80020ba:	4602      	mov	r2, r0
 80020bc:	460b      	mov	r3, r1
 80020be:	ec43 2b10 	vmov	d0, r2, r3
 80020c2:	f007 fdf9 	bl	8009cb8 <round>
 80020c6:	ec51 0b10 	vmov	r0, r1, d0
 80020ca:	f04f 0200 	mov.w	r2, #0
 80020ce:	4b75      	ldr	r3, [pc, #468]	; (80022a4 <updatePosition+0x2b4>)
 80020d0:	f7fe faaa 	bl	8000628 <__aeabi_dmul>
 80020d4:	4602      	mov	r2, r0
 80020d6:	460b      	mov	r3, r1
 80020d8:	f04f 0000 	mov.w	r0, #0
 80020dc:	4972      	ldr	r1, [pc, #456]	; (80022a8 <updatePosition+0x2b8>)
 80020de:	f7fe fbcd 	bl	800087c <__aeabi_ddiv>
 80020e2:	4602      	mov	r2, r0
 80020e4:	460b      	mov	r3, r1
 80020e6:	4620      	mov	r0, r4
 80020e8:	4629      	mov	r1, r5
 80020ea:	f7fe fa9d 	bl	8000628 <__aeabi_dmul>
 80020ee:	4602      	mov	r2, r0
 80020f0:	460b      	mov	r3, r1
 80020f2:	4610      	mov	r0, r2
 80020f4:	4619      	mov	r1, r3
 80020f6:	a362      	add	r3, pc, #392	; (adr r3, 8002280 <updatePosition+0x290>)
 80020f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020fc:	f7fe fa94 	bl	8000628 <__aeabi_dmul>
 8002100:	4602      	mov	r2, r0
 8002102:	460b      	mov	r3, r1
 8002104:	4610      	mov	r0, r2
 8002106:	4619      	mov	r1, r3
 8002108:	f7fe fd86 	bl	8000c18 <__aeabi_d2f>
 800210c:	4603      	mov	r3, r0
 800210e:	4a68      	ldr	r2, [pc, #416]	; (80022b0 <updatePosition+0x2c0>)
 8002110:	6013      	str	r3, [r2, #0]
		counterBlueCounter = 0;
 8002112:	4b68      	ldr	r3, [pc, #416]	; (80022b4 <updatePosition+0x2c4>)
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
		counterYwlCounter = 0;
 8002118:	4b67      	ldr	r3, [pc, #412]	; (80022b8 <updatePosition+0x2c8>)
 800211a:	2200      	movs	r2, #0
 800211c:	601a      	str	r2, [r3, #0]
		// Convert directions into forward (1) or backward (-1) multipliers
		int multiplierBlue = (dirBlueVal == 0) ? 1 : -1;
 800211e:	4b67      	ldr	r3, [pc, #412]	; (80022bc <updatePosition+0x2cc>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	f083 0301 	eor.w	r3, r3, #1
 8002126:	b2db      	uxtb	r3, r3
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <updatePosition+0x140>
 800212c:	2301      	movs	r3, #1
 800212e:	e001      	b.n	8002134 <updatePosition+0x144>
 8002130:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002134:	637b      	str	r3, [r7, #52]	; 0x34
		int multiplierYellow = (dirYellowVal == 0) ? 1 : -1;
 8002136:	4b62      	ldr	r3, [pc, #392]	; (80022c0 <updatePosition+0x2d0>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	f083 0301 	eor.w	r3, r3, #1
 800213e:	b2db      	uxtb	r3, r3
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <updatePosition+0x158>
 8002144:	2301      	movs	r3, #1
 8002146:	e001      	b.n	800214c <updatePosition+0x15c>
 8002148:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800214c:	633b      	str	r3, [r7, #48]	; 0x30

		// Calculate distances traveled by each wheel, adjusted by direction
		dLeft = recorridoBlue * multiplierBlue;
 800214e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002150:	ee07 3a90 	vmov	s15, r3
 8002154:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002158:	4b54      	ldr	r3, [pc, #336]	; (80022ac <updatePosition+0x2bc>)
 800215a:	edd3 7a00 	vldr	s15, [r3]
 800215e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002162:	ee17 0a90 	vmov	r0, s15
 8002166:	f7fe fa07 	bl	8000578 <__aeabi_f2d>
 800216a:	4602      	mov	r2, r0
 800216c:	460b      	mov	r3, r1
 800216e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		dRight = recorridoYellow * multiplierYellow;
 8002172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002174:	ee07 3a90 	vmov	s15, r3
 8002178:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800217c:	4b4c      	ldr	r3, [pc, #304]	; (80022b0 <updatePosition+0x2c0>)
 800217e:	edd3 7a00 	vldr	s15, [r3]
 8002182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002186:	ee17 0a90 	vmov	r0, s15
 800218a:	f7fe f9f5 	bl	8000578 <__aeabi_f2d>
 800218e:	4602      	mov	r2, r0
 8002190:	460b      	mov	r3, r1
 8002192:	e9c7 2308 	strd	r2, r3, [r7, #32]

		// Average distance traveled by the robot
		dCenter = (dLeft + dRight) / 2.0;
 8002196:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800219a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800219e:	f7fe f88d 	bl	80002bc <__adddf3>
 80021a2:	4602      	mov	r2, r0
 80021a4:	460b      	mov	r3, r1
 80021a6:	4610      	mov	r0, r2
 80021a8:	4619      	mov	r1, r3
 80021aa:	f04f 0200 	mov.w	r2, #0
 80021ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021b2:	f7fe fb63 	bl	800087c <__aeabi_ddiv>
 80021b6:	4602      	mov	r2, r0
 80021b8:	460b      	mov	r3, r1
 80021ba:	e9c7 2306 	strd	r2, r3, [r7, #24]

		// Calculate change in orientation
		deltaTheta = (dRight - dLeft) / wheelbase;
 80021be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80021c2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80021c6:	f7fe f877 	bl	80002b8 <__aeabi_dsub>
 80021ca:	4602      	mov	r2, r0
 80021cc:	460b      	mov	r3, r1
 80021ce:	4614      	mov	r4, r2
 80021d0:	461d      	mov	r5, r3
 80021d2:	4b3c      	ldr	r3, [pc, #240]	; (80022c4 <updatePosition+0x2d4>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7fe f9ce 	bl	8000578 <__aeabi_f2d>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	4620      	mov	r0, r4
 80021e2:	4629      	mov	r1, r5
 80021e4:	f7fe fb4a 	bl	800087c <__aeabi_ddiv>
 80021e8:	4602      	mov	r2, r0
 80021ea:	460b      	mov	r3, r1
 80021ec:	e9c7 2304 	strd	r2, r3, [r7, #16]

		theta += deltaTheta;
 80021f0:	4b35      	ldr	r3, [pc, #212]	; (80022c8 <updatePosition+0x2d8>)
 80021f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021f6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80021fa:	f7fe f85f 	bl	80002bc <__adddf3>
 80021fe:	4602      	mov	r2, r0
 8002200:	460b      	mov	r3, r1
 8002202:	4931      	ldr	r1, [pc, #196]	; (80022c8 <updatePosition+0x2d8>)
 8002204:	e9c1 2300 	strd	r2, r3, [r1]

		if ((theta >= rotate) && move90 == 1) {
 8002208:	4b30      	ldr	r3, [pc, #192]	; (80022cc <updatePosition+0x2dc>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4618      	mov	r0, r3
 800220e:	f7fe f9b3 	bl	8000578 <__aeabi_f2d>
 8002212:	4b2d      	ldr	r3, [pc, #180]	; (80022c8 <updatePosition+0x2d8>)
 8002214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002218:	f7fe fc82 	bl	8000b20 <__aeabi_dcmple>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d015      	beq.n	800224e <updatePosition+0x25e>
 8002222:	4b2b      	ldr	r3, [pc, #172]	; (80022d0 <updatePosition+0x2e0>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d011      	beq.n	800224e <updatePosition+0x25e>
			onMove = 0;
 800222a:	4b2a      	ldr	r3, [pc, #168]	; (80022d4 <updatePosition+0x2e4>)
 800222c:	2200      	movs	r2, #0
 800222e:	701a      	strb	r2, [r3, #0]
			pwmYellow.config.duttyCicle = 5;
 8002230:	4b29      	ldr	r3, [pc, #164]	; (80022d8 <updatePosition+0x2e8>)
 8002232:	2205      	movs	r2, #5
 8002234:	81da      	strh	r2, [r3, #14]
			pwmBlue.config.duttyCicle = 5;
 8002236:	4b29      	ldr	r3, [pc, #164]	; (80022dc <updatePosition+0x2ec>)
 8002238:	2205      	movs	r2, #5
 800223a:	81da      	strh	r2, [r3, #14]
			setDuttyCycle(&pwmYellow);
 800223c:	4826      	ldr	r0, [pc, #152]	; (80022d8 <updatePosition+0x2e8>)
 800223e:	f001 ff41 	bl	80040c4 <setDuttyCycle>
			setDuttyCycle(&pwmBlue);
 8002242:	4826      	ldr	r0, [pc, #152]	; (80022dc <updatePosition+0x2ec>)
 8002244:	f001 ff3e 	bl	80040c4 <setDuttyCycle>
			move90 = 0;
 8002248:	4b21      	ldr	r3, [pc, #132]	; (80022d0 <updatePosition+0x2e0>)
 800224a:	2200      	movs	r2, #0
 800224c:	701a      	strb	r2, [r3, #0]

		}

		// Ensure theta stays within [-pi, pi]
		if (theta > M_PI)
 800224e:	4b1e      	ldr	r3, [pc, #120]	; (80022c8 <updatePosition+0x2d8>)
 8002250:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002254:	a30c      	add	r3, pc, #48	; (adr r3, 8002288 <updatePosition+0x298>)
 8002256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800225a:	f7fe fc75 	bl	8000b48 <__aeabi_dcmpgt>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d03d      	beq.n	80022e0 <updatePosition+0x2f0>
			theta -= 2 * M_PI;
 8002264:	4b18      	ldr	r3, [pc, #96]	; (80022c8 <updatePosition+0x2d8>)
 8002266:	e9d3 0100 	ldrd	r0, r1, [r3]
 800226a:	a309      	add	r3, pc, #36	; (adr r3, 8002290 <updatePosition+0x2a0>)
 800226c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002270:	f7fe f822 	bl	80002b8 <__aeabi_dsub>
 8002274:	4602      	mov	r2, r0
 8002276:	460b      	mov	r3, r1
 8002278:	4913      	ldr	r1, [pc, #76]	; (80022c8 <updatePosition+0x2d8>)
 800227a:	e9c1 2300 	strd	r2, r3, [r1]
 800227e:	e047      	b.n	8002310 <updatePosition+0x320>
 8002280:	fa84ad89 	.word	0xfa84ad89
 8002284:	4011740a 	.word	0x4011740a
 8002288:	54442d18 	.word	0x54442d18
 800228c:	400921fb 	.word	0x400921fb
 8002290:	54442d18 	.word	0x54442d18
 8002294:	401921fb 	.word	0x401921fb
 8002298:	2000079c 	.word	0x2000079c
 800229c:	200007a0 	.word	0x200007a0
 80022a0:	20000014 	.word	0x20000014
 80022a4:	40240000 	.word	0x40240000
 80022a8:	3ff00000 	.word	0x3ff00000
 80022ac:	200005e4 	.word	0x200005e4
 80022b0:	200005e8 	.word	0x200005e8
 80022b4:	2000056c 	.word	0x2000056c
 80022b8:	2000059c 	.word	0x2000059c
 80022bc:	2000053c 	.word	0x2000053c
 80022c0:	20000000 	.word	0x20000000
 80022c4:	20000010 	.word	0x20000010
 80022c8:	20000600 	.word	0x20000600
 80022cc:	20000018 	.word	0x20000018
 80022d0:	200005e1 	.word	0x200005e1
 80022d4:	200005e2 	.word	0x200005e2
 80022d8:	20000528 	.word	0x20000528
 80022dc:	20000514 	.word	0x20000514
		else if (theta < -M_PI)
 80022e0:	4b45      	ldr	r3, [pc, #276]	; (80023f8 <updatePosition+0x408>)
 80022e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022e6:	a340      	add	r3, pc, #256	; (adr r3, 80023e8 <updatePosition+0x3f8>)
 80022e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ec:	f7fe fc0e 	bl	8000b0c <__aeabi_dcmplt>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00c      	beq.n	8002310 <updatePosition+0x320>
			theta += 2 * M_PI;
 80022f6:	4b40      	ldr	r3, [pc, #256]	; (80023f8 <updatePosition+0x408>)
 80022f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022fc:	a33c      	add	r3, pc, #240	; (adr r3, 80023f0 <updatePosition+0x400>)
 80022fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002302:	f7fd ffdb 	bl	80002bc <__adddf3>
 8002306:	4602      	mov	r2, r0
 8002308:	460b      	mov	r3, r1
 800230a:	493b      	ldr	r1, [pc, #236]	; (80023f8 <updatePosition+0x408>)
 800230c:	e9c1 2300 	strd	r2, r3, [r1]

		// Calculate change in position
		deltaX = dCenter * cos(theta);
 8002310:	4b39      	ldr	r3, [pc, #228]	; (80023f8 <updatePosition+0x408>)
 8002312:	ed93 7b00 	vldr	d7, [r3]
 8002316:	eeb0 0a47 	vmov.f32	s0, s14
 800231a:	eef0 0a67 	vmov.f32	s1, s15
 800231e:	f007 fc77 	bl	8009c10 <cos>
 8002322:	ec53 2b10 	vmov	r2, r3, d0
 8002326:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800232a:	f7fe f97d 	bl	8000628 <__aeabi_dmul>
 800232e:	4602      	mov	r2, r0
 8002330:	460b      	mov	r3, r1
 8002332:	e9c7 2302 	strd	r2, r3, [r7, #8]
		deltaY = dCenter * sin(theta);
 8002336:	4b30      	ldr	r3, [pc, #192]	; (80023f8 <updatePosition+0x408>)
 8002338:	ed93 7b00 	vldr	d7, [r3]
 800233c:	eeb0 0a47 	vmov.f32	s0, s14
 8002340:	eef0 0a67 	vmov.f32	s1, s15
 8002344:	f007 fd00 	bl	8009d48 <sin>
 8002348:	ec53 2b10 	vmov	r2, r3, d0
 800234c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002350:	f7fe f96a 	bl	8000628 <__aeabi_dmul>
 8002354:	4602      	mov	r2, r0
 8002356:	460b      	mov	r3, r1
 8002358:	e9c7 2300 	strd	r2, r3, [r7]

		// Update position
		x += deltaX;
 800235c:	4b27      	ldr	r3, [pc, #156]	; (80023fc <updatePosition+0x40c>)
 800235e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002362:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002366:	f7fd ffa9 	bl	80002bc <__adddf3>
 800236a:	4602      	mov	r2, r0
 800236c:	460b      	mov	r3, r1
 800236e:	4923      	ldr	r1, [pc, #140]	; (80023fc <updatePosition+0x40c>)
 8002370:	e9c1 2300 	strd	r2, r3, [r1]
		y += deltaY;
 8002374:	4b22      	ldr	r3, [pc, #136]	; (8002400 <updatePosition+0x410>)
 8002376:	e9d3 0100 	ldrd	r0, r1, [r3]
 800237a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800237e:	f7fd ff9d 	bl	80002bc <__adddf3>
 8002382:	4602      	mov	r2, r0
 8002384:	460b      	mov	r3, r1
 8002386:	491e      	ldr	r1, [pc, #120]	; (8002400 <updatePosition+0x410>)
 8002388:	e9c1 2300 	strd	r2, r3, [r1]

		if ((x > distancia) && moves == 1) {
 800238c:	4b1d      	ldr	r3, [pc, #116]	; (8002404 <updatePosition+0x414>)
 800238e:	881b      	ldrh	r3, [r3, #0]
 8002390:	4618      	mov	r0, r3
 8002392:	f7fe f8df 	bl	8000554 <__aeabi_i2d>
 8002396:	4b19      	ldr	r3, [pc, #100]	; (80023fc <updatePosition+0x40c>)
 8002398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800239c:	f7fe fbb6 	bl	8000b0c <__aeabi_dcmplt>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d100      	bne.n	80023a8 <updatePosition+0x3b8>
			counterYellowLastIns = 0;

		}
	}

}
 80023a6:	e018      	b.n	80023da <updatePosition+0x3ea>
		if ((x > distancia) && moves == 1) {
 80023a8:	4b17      	ldr	r3, [pc, #92]	; (8002408 <updatePosition+0x418>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d014      	beq.n	80023da <updatePosition+0x3ea>
			onMove = 0;
 80023b0:	4b16      	ldr	r3, [pc, #88]	; (800240c <updatePosition+0x41c>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	701a      	strb	r2, [r3, #0]
			pwmYellow.config.duttyCicle = 5;
 80023b6:	4b16      	ldr	r3, [pc, #88]	; (8002410 <updatePosition+0x420>)
 80023b8:	2205      	movs	r2, #5
 80023ba:	81da      	strh	r2, [r3, #14]
			pwmBlue.config.duttyCicle = 5;
 80023bc:	4b15      	ldr	r3, [pc, #84]	; (8002414 <updatePosition+0x424>)
 80023be:	2205      	movs	r2, #5
 80023c0:	81da      	strh	r2, [r3, #14]
			setDuttyCycle(&pwmYellow);
 80023c2:	4813      	ldr	r0, [pc, #76]	; (8002410 <updatePosition+0x420>)
 80023c4:	f001 fe7e 	bl	80040c4 <setDuttyCycle>
			setDuttyCycle(&pwmBlue);
 80023c8:	4812      	ldr	r0, [pc, #72]	; (8002414 <updatePosition+0x424>)
 80023ca:	f001 fe7b 	bl	80040c4 <setDuttyCycle>
			counterBlueLastIns = 0;
 80023ce:	4b12      	ldr	r3, [pc, #72]	; (8002418 <updatePosition+0x428>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
			counterYellowLastIns = 0;
 80023d4:	4b11      	ldr	r3, [pc, #68]	; (800241c <updatePosition+0x42c>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	601a      	str	r2, [r3, #0]
}
 80023da:	bf00      	nop
 80023dc:	3738      	adds	r7, #56	; 0x38
 80023de:	46bd      	mov	sp, r7
 80023e0:	bdb0      	pop	{r4, r5, r7, pc}
 80023e2:	bf00      	nop
 80023e4:	f3af 8000 	nop.w
 80023e8:	54442d18 	.word	0x54442d18
 80023ec:	c00921fb 	.word	0xc00921fb
 80023f0:	54442d18 	.word	0x54442d18
 80023f4:	401921fb 	.word	0x401921fb
 80023f8:	20000600 	.word	0x20000600
 80023fc:	200005f0 	.word	0x200005f0
 8002400:	200005f8 	.word	0x200005f8
 8002404:	2000000e 	.word	0x2000000e
 8002408:	200005e0 	.word	0x200005e0
 800240c:	200005e2 	.word	0x200005e2
 8002410:	20000528 	.word	0x20000528
 8002414:	20000514 	.word	0x20000514
 8002418:	20000574 	.word	0x20000574
 800241c:	20000578 	.word	0x20000578

08002420 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
	return 1;
 8002424:	2301      	movs	r3, #1
}
 8002426:	4618      	mov	r0, r3
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <_kill>:

int _kill(int pid, int sig)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800243a:	f002 fb0d 	bl	8004a58 <__errno>
 800243e:	4603      	mov	r3, r0
 8002440:	2216      	movs	r2, #22
 8002442:	601a      	str	r2, [r3, #0]
	return -1;
 8002444:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002448:	4618      	mov	r0, r3
 800244a:	3708      	adds	r7, #8
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <_exit>:

void _exit (int status)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002458:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f7ff ffe7 	bl	8002430 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002462:	e7fe      	b.n	8002462 <_exit+0x12>

08002464 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002470:	2300      	movs	r3, #0
 8002472:	617b      	str	r3, [r7, #20]
 8002474:	e00a      	b.n	800248c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002476:	f3af 8000 	nop.w
 800247a:	4601      	mov	r1, r0
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	1c5a      	adds	r2, r3, #1
 8002480:	60ba      	str	r2, [r7, #8]
 8002482:	b2ca      	uxtb	r2, r1
 8002484:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	3301      	adds	r3, #1
 800248a:	617b      	str	r3, [r7, #20]
 800248c:	697a      	ldr	r2, [r7, #20]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	429a      	cmp	r2, r3
 8002492:	dbf0      	blt.n	8002476 <_read+0x12>
	}

return len;
 8002494:	687b      	ldr	r3, [r7, #4]
}
 8002496:	4618      	mov	r0, r3
 8002498:	3718      	adds	r7, #24
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b086      	sub	sp, #24
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	60f8      	str	r0, [r7, #12]
 80024a6:	60b9      	str	r1, [r7, #8]
 80024a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024aa:	2300      	movs	r3, #0
 80024ac:	617b      	str	r3, [r7, #20]
 80024ae:	e009      	b.n	80024c4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	1c5a      	adds	r2, r3, #1
 80024b4:	60ba      	str	r2, [r7, #8]
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	3301      	adds	r3, #1
 80024c2:	617b      	str	r3, [r7, #20]
 80024c4:	697a      	ldr	r2, [r7, #20]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	dbf1      	blt.n	80024b0 <_write+0x12>
	}
	return len;
 80024cc:	687b      	ldr	r3, [r7, #4]
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3718      	adds	r7, #24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <_close>:

int _close(int file)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b083      	sub	sp, #12
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
	return -1;
 80024de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024ee:	b480      	push	{r7}
 80024f0:	b083      	sub	sp, #12
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
 80024f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024fe:	605a      	str	r2, [r3, #4]
	return 0;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr

0800250e <_isatty>:

int _isatty(int file)
{
 800250e:	b480      	push	{r7}
 8002510:	b083      	sub	sp, #12
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
	return 1;
 8002516:	2301      	movs	r3, #1
}
 8002518:	4618      	mov	r0, r3
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
	return 0;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3714      	adds	r7, #20
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
	...

08002540 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b086      	sub	sp, #24
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002548:	4a14      	ldr	r2, [pc, #80]	; (800259c <_sbrk+0x5c>)
 800254a:	4b15      	ldr	r3, [pc, #84]	; (80025a0 <_sbrk+0x60>)
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002554:	4b13      	ldr	r3, [pc, #76]	; (80025a4 <_sbrk+0x64>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d102      	bne.n	8002562 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800255c:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <_sbrk+0x64>)
 800255e:	4a12      	ldr	r2, [pc, #72]	; (80025a8 <_sbrk+0x68>)
 8002560:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002562:	4b10      	ldr	r3, [pc, #64]	; (80025a4 <_sbrk+0x64>)
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4413      	add	r3, r2
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	429a      	cmp	r2, r3
 800256e:	d207      	bcs.n	8002580 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002570:	f002 fa72 	bl	8004a58 <__errno>
 8002574:	4603      	mov	r3, r0
 8002576:	220c      	movs	r2, #12
 8002578:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800257a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800257e:	e009      	b.n	8002594 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002580:	4b08      	ldr	r3, [pc, #32]	; (80025a4 <_sbrk+0x64>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002586:	4b07      	ldr	r3, [pc, #28]	; (80025a4 <_sbrk+0x64>)
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4413      	add	r3, r2
 800258e:	4a05      	ldr	r2, [pc, #20]	; (80025a4 <_sbrk+0x64>)
 8002590:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002592:	68fb      	ldr	r3, [r7, #12]
}
 8002594:	4618      	mov	r0, r3
 8002596:	3718      	adds	r7, #24
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	20020000 	.word	0x20020000
 80025a0:	00000400 	.word	0x00000400
 80025a4:	200007a8 	.word	0x200007a8
 80025a8:	200007e8 	.word	0x200007e8

080025ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80025ac:	480d      	ldr	r0, [pc, #52]	; (80025e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80025ae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80025b0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025b4:	480c      	ldr	r0, [pc, #48]	; (80025e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80025b6:	490d      	ldr	r1, [pc, #52]	; (80025ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80025b8:	4a0d      	ldr	r2, [pc, #52]	; (80025f0 <LoopForever+0xe>)
  movs r3, #0
 80025ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025bc:	e002      	b.n	80025c4 <LoopCopyDataInit>

080025be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025c2:	3304      	adds	r3, #4

080025c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025c8:	d3f9      	bcc.n	80025be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025ca:	4a0a      	ldr	r2, [pc, #40]	; (80025f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80025cc:	4c0a      	ldr	r4, [pc, #40]	; (80025f8 <LoopForever+0x16>)
  movs r3, #0
 80025ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025d0:	e001      	b.n	80025d6 <LoopFillZerobss>

080025d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025d4:	3204      	adds	r2, #4

080025d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025d8:	d3fb      	bcc.n	80025d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80025da:	f002 fa43 	bl	8004a64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80025de:	f7fe fd23 	bl	8001028 <main>

080025e2 <LoopForever>:

LoopForever:
    b LoopForever
 80025e2:	e7fe      	b.n	80025e2 <LoopForever>
  ldr   r0, =_estack
 80025e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80025e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025ec:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80025f0:	0800b578 	.word	0x0800b578
  ldr r2, =_sbss
 80025f4:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80025f8:	200007e4 	.word	0x200007e4

080025fc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80025fc:	e7fe      	b.n	80025fc <ADC_IRQHandler>
	...

08002600 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	4603      	mov	r3, r0
 8002608:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800260a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260e:	2b00      	cmp	r3, #0
 8002610:	db0b      	blt.n	800262a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002612:	79fb      	ldrb	r3, [r7, #7]
 8002614:	f003 021f 	and.w	r2, r3, #31
 8002618:	4907      	ldr	r1, [pc, #28]	; (8002638 <__NVIC_EnableIRQ+0x38>)
 800261a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261e:	095b      	lsrs	r3, r3, #5
 8002620:	2001      	movs	r0, #1
 8002622:	fa00 f202 	lsl.w	r2, r0, r2
 8002626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800262a:	bf00      	nop
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	e000e100 	.word	0xe000e100

0800263c <BasicTimer_Config>:
 *
 *  Como vamos a trabajar con interrupciones, antes de configurar una nueva, debemos desactivar
 *  el sistema global de interrupciones, activar la IRQ específica y luego volver a encender
 *  el sistema.
 */
void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler) {
 800263c:	b590      	push	{r4, r7, lr}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
	// Guardamos una referencia al periferico que estamos utilizando...
	ptrTimerUsed = ptrBTimerHandler->ptrTIMx;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a60      	ldr	r2, [pc, #384]	; (80027cc <BasicTimer_Config+0x190>)
 800264a:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800264c:	b672      	cpsid	i
}
 800264e:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales mientras configuramos el sistema.*/
	__disable_irq();
	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrBTimerHandler->ptrTIMx == TIM2) {
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002658:	d106      	bne.n	8002668 <BasicTimer_Config+0x2c>
		//APB1 primero limpiamos
		// Registro del RCC que nos activa la señal de reloj para el TIM2
		//limpia
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 800265a:	4b5d      	ldr	r3, [pc, #372]	; (80027d0 <BasicTimer_Config+0x194>)
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	4a5c      	ldr	r2, [pc, #368]	; (80027d0 <BasicTimer_Config+0x194>)
 8002660:	f043 0301 	orr.w	r3, r3, #1
 8002664:	6413      	str	r3, [r2, #64]	; 0x40
 8002666:	e024      	b.n	80026b2 <BasicTimer_Config+0x76>
	} else if (ptrBTimerHandler->ptrTIMx == TIM3) {
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a59      	ldr	r2, [pc, #356]	; (80027d4 <BasicTimer_Config+0x198>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d106      	bne.n	8002680 <BasicTimer_Config+0x44>
		// Registro del RCC que nos activa la señal de reloj para el TIM3
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8002672:	4b57      	ldr	r3, [pc, #348]	; (80027d0 <BasicTimer_Config+0x194>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	4a56      	ldr	r2, [pc, #344]	; (80027d0 <BasicTimer_Config+0x194>)
 8002678:	f043 0302 	orr.w	r3, r3, #2
 800267c:	6413      	str	r3, [r2, #64]	; 0x40
 800267e:	e018      	b.n	80026b2 <BasicTimer_Config+0x76>
	} else if (ptrBTimerHandler->ptrTIMx == TIM4) {
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a54      	ldr	r2, [pc, #336]	; (80027d8 <BasicTimer_Config+0x19c>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d106      	bne.n	8002698 <BasicTimer_Config+0x5c>
		// Registro del RCC que nos activa la señal de reloj para el TIM4
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 800268a:	4b51      	ldr	r3, [pc, #324]	; (80027d0 <BasicTimer_Config+0x194>)
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	4a50      	ldr	r2, [pc, #320]	; (80027d0 <BasicTimer_Config+0x194>)
 8002690:	f043 0304 	orr.w	r3, r3, #4
 8002694:	6413      	str	r3, [r2, #64]	; 0x40
 8002696:	e00c      	b.n	80026b2 <BasicTimer_Config+0x76>
	} else if (ptrBTimerHandler->ptrTIMx == TIM5) {
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a4f      	ldr	r2, [pc, #316]	; (80027dc <BasicTimer_Config+0x1a0>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d106      	bne.n	80026b0 <BasicTimer_Config+0x74>
		// Registro del RCC que nos activa la señal de reloj para el TIM5
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 80026a2:	4b4b      	ldr	r3, [pc, #300]	; (80027d0 <BasicTimer_Config+0x194>)
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	4a4a      	ldr	r2, [pc, #296]	; (80027d0 <BasicTimer_Config+0x194>)
 80026a8:	f043 0308 	orr.w	r3, r3, #8
 80026ac:	6413      	str	r3, [r2, #64]	; 0x40
 80026ae:	e000      	b.n	80026b2 <BasicTimer_Config+0x76>
	} else {
		__NOP();
 80026b0:	bf00      	nop
	 */

	/* Escriba codigo aca */
	//Se halla el valor requerido usando el PLL con esto ajustamos a cualquiera dato
	//Tener cuidado con sobrepasar el maximo valor del PLL.
	uint32_t auxData = ptrBTimerHandler->TIMx_Config.TIMx_speed * getFreqPLL();
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	689c      	ldr	r4, [r3, #8]
 80026b6:	f001 fb73 	bl	8003da0 <getFreqPLL>
 80026ba:	4603      	mov	r3, r0
 80026bc:	fb04 f303 	mul.w	r3, r4, r3
 80026c0:	60fb      	str	r3, [r7, #12]
	ptrBTimerHandler->ptrTIMx->PSC = auxData - 1;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	3a01      	subs	r2, #1
 80026ca:	629a      	str	r2, [r3, #40]	; 0x28

	/* 3. Configuramos la dirección del counter (up/down)*/
	if (ptrBTimerHandler->TIMx_Config.TIMx_mode == BTIMER_MODE_UP) {
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	791b      	ldrb	r3, [r3, #4]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d111      	bne.n	80026f8 <BasicTimer_Config+0xbc>

		/* 3a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
		// Configurar el registro que nos controla el modo up or down
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->CR1 &= (RESET << TIM_CR1_DIR_Pos);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar */
		ptrBTimerHandler->ptrTIMx->ARR =
				ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	68da      	ldr	r2, [r3, #12]
		ptrBTimerHandler->ptrTIMx->ARR =
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
				ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 80026ea:	3a01      	subs	r2, #1
		ptrBTimerHandler->ptrTIMx->ARR =
 80026ec:	62da      	str	r2, [r3, #44]	; 0x2c

		/* 3c. Reiniciamos el registro counter*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->CNT = RESET;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2200      	movs	r2, #0
 80026f4:	625a      	str	r2, [r3, #36]	; 0x24
 80026f6:	e018      	b.n	800272a <BasicTimer_Config+0xee>

	} else {
		/* 3a. Estamos en DOWN_Mode, el limite se carga en ARR (0) y se comienza en un valor alto
		 * Trabaja contando en direccion descendente*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->CR1 &= (RESET << TIM_CR1_DIR_Pos);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]
		ptrBTimerHandler->ptrTIMx->CR1 |= (SET << TIM_CR1_DIR_Pos);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f042 0210 	orr.w	r2, r2, #16
 8002714:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar
		 * En modo descendente, con numero positivos, cual es el minimi valor al que ARR puede llegar*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->ARR =
				ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	68da      	ldr	r2, [r3, #12]
		ptrBTimerHandler->ptrTIMx->ARR =
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
				ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 800271e:	3a01      	subs	r2, #1
		ptrBTimerHandler->ptrTIMx->ARR =
 8002720:	62da      	str	r2, [r3, #44]	; 0x2c
		/* 3c. Reiniciamos el registro counter
		 * Este es el valor con el que el counter comienza */
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2200      	movs	r2, #0
 8002728:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* 4. Activamos el Timer (el CNT debe comenzar a contar*/
	//limpiamos
	ptrBTimerHandler->ptrTIMx->CR1 &= ~(TIM_CR1_CEN);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f022 0201 	bic.w	r2, r2, #1
 8002738:	601a      	str	r2, [r3, #0]
	ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f042 0201 	orr.w	r2, r2, #1
 8002748:	601a      	str	r2, [r3, #0]

	/*
	 * x. Activamos la funcion one pulse mode
	 */
	if (ptrBTimerHandler->TIMx_Config.TIMx_OPM == ENABLE) {
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	7c5b      	ldrb	r3, [r3, #17]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d107      	bne.n	8002762 <BasicTimer_Config+0x126>
		ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_OPM;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f042 0208 	orr.w	r2, r2, #8
 8002760:	601a      	str	r2, [r3, #0]
	}

	/* 5. Activamos la interrupción debida al Timerx Utilizado
	 * Modificar el registro encargado de activar la interrupcion generada por el TIMx*/
	ptrBTimerHandler->ptrTIMx->DIER |=
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68da      	ldr	r2, [r3, #12]
			ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	7c1b      	ldrb	r3, [r3, #16]
 800276c:	4619      	mov	r1, r3
	ptrBTimerHandler->ptrTIMx->DIER |=
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	430a      	orrs	r2, r1
 8002774:	60da      	str	r2, [r3, #12]

	/* 6. Activamos el canal del sistema NVIC para que lea la interrupción*/
	if (ptrBTimerHandler->ptrTIMx == TIM2) {
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800277e:	d103      	bne.n	8002788 <BasicTimer_Config+0x14c>
		// Activando en NVIC para la interrupción del TIM2
		NVIC_EnableIRQ(TIM2_IRQn);
 8002780:	201c      	movs	r0, #28
 8002782:	f7ff ff3d 	bl	8002600 <__NVIC_EnableIRQ>
 8002786:	e01b      	b.n	80027c0 <BasicTimer_Config+0x184>
	} else if (ptrBTimerHandler->ptrTIMx == TIM3) {
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a11      	ldr	r2, [pc, #68]	; (80027d4 <BasicTimer_Config+0x198>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d103      	bne.n	800279a <BasicTimer_Config+0x15e>
		// Activando en NVIC para la interrupción del TIM3
		NVIC_EnableIRQ(TIM3_IRQn);
 8002792:	201d      	movs	r0, #29
 8002794:	f7ff ff34 	bl	8002600 <__NVIC_EnableIRQ>
 8002798:	e012      	b.n	80027c0 <BasicTimer_Config+0x184>
	} else if (ptrBTimerHandler->ptrTIMx == TIM4) {
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a0e      	ldr	r2, [pc, #56]	; (80027d8 <BasicTimer_Config+0x19c>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d103      	bne.n	80027ac <BasicTimer_Config+0x170>
		// Activando en NVIC para la interrupción del TIM3
		NVIC_EnableIRQ(TIM4_IRQn);
 80027a4:	201e      	movs	r0, #30
 80027a6:	f7ff ff2b 	bl	8002600 <__NVIC_EnableIRQ>
 80027aa:	e009      	b.n	80027c0 <BasicTimer_Config+0x184>
	} else if (ptrBTimerHandler->ptrTIMx == TIM5) {
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a0a      	ldr	r2, [pc, #40]	; (80027dc <BasicTimer_Config+0x1a0>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d103      	bne.n	80027be <BasicTimer_Config+0x182>
		// Activando en NVIC para la interrupción del TIM3
		NVIC_EnableIRQ(TIM5_IRQn);
 80027b6:	2032      	movs	r0, #50	; 0x32
 80027b8:	f7ff ff22 	bl	8002600 <__NVIC_EnableIRQ>
 80027bc:	e000      	b.n	80027c0 <BasicTimer_Config+0x184>
	} else {
		__NOP();
 80027be:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 80027c0:	b662      	cpsie	i
}
 80027c2:	bf00      	nop
	}

	/* 7. Volvemos a activar las interrupciones del sistema */
	__enable_irq();
}
 80027c4:	bf00      	nop
 80027c6:	3714      	adds	r7, #20
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd90      	pop	{r4, r7, pc}
 80027cc:	200007ac 	.word	0x200007ac
 80027d0:	40023800 	.word	0x40023800
 80027d4:	40000400 	.word	0x40000400
 80027d8:	40000800 	.word	0x40000800
 80027dc:	40000c00 	.word	0x40000c00

080027e0 <BasicTimer4_Callback>:
	/* NOTE : This function should not be modified, when the callback is needed,
	 the BasicTimerX_Callback could be implemented in the main file
	 */
	__NOP();
}
__attribute__((weak)) void BasicTimer4_Callback(void) {
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
	/* NOTE : This function should not be modified, when the callback is needed,
	 the BasicTimerX_Callback could be implemented in the main file
	 */
	__NOP();
 80027e4:	bf00      	nop
}
 80027e6:	bf00      	nop
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <BasicTimer5_Callback>:
__attribute__((weak)) void BasicTimer5_Callback(void) {
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
	/* NOTE : This function should not be modified, when the callback is needed,
	 the BasicTimerX_Callback could be implemented in the main file
	 */
	__NOP();
 80027f4:	bf00      	nop
}
 80027f6:	bf00      	nop
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <TIM2_IRQHandler>:

/* Esta es la función a la que apunta el sistema en el vector de interrupciones.
 * Se debe utilizar usando exactamente el mismo nombre definido en el vector de interrupciones,
 * Al hacerlo correctamente, el sistema apunta a esta función y cuando la interrupción se lanza
 * el sistema inmediatamente salta a este lugar en la memoria*/
void TIM2_IRQHandler(void) {
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	TIM2->SR &= ~TIM_SR_UIF;
 8002804:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800280e:	f023 0301 	bic.w	r3, r3, #1
 8002812:	6113      	str	r3, [r2, #16]

	/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
	BasicTimer2_Callback();
 8002814:	f7ff f8d0 	bl	80019b8 <BasicTimer2_Callback>

}
 8002818:	bf00      	nop
 800281a:	bd80      	pop	{r7, pc}

0800281c <TIM3_IRQHandler>:

void TIM3_IRQHandler(void) {
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	TIM3->SR &= ~TIM_SR_UIF;
 8002820:	4b04      	ldr	r3, [pc, #16]	; (8002834 <TIM3_IRQHandler+0x18>)
 8002822:	691b      	ldr	r3, [r3, #16]
 8002824:	4a03      	ldr	r2, [pc, #12]	; (8002834 <TIM3_IRQHandler+0x18>)
 8002826:	f023 0301 	bic.w	r3, r3, #1
 800282a:	6113      	str	r3, [r2, #16]

	/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
	BasicTimer3_Callback();
 800282c:	f7ff f972 	bl	8001b14 <BasicTimer3_Callback>

}
 8002830:	bf00      	nop
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40000400 	.word	0x40000400

08002838 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void) {
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	TIM4->SR &= ~TIM_SR_UIF;
 800283c:	4b04      	ldr	r3, [pc, #16]	; (8002850 <TIM4_IRQHandler+0x18>)
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	4a03      	ldr	r2, [pc, #12]	; (8002850 <TIM4_IRQHandler+0x18>)
 8002842:	f023 0301 	bic.w	r3, r3, #1
 8002846:	6113      	str	r3, [r2, #16]

	/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
	BasicTimer4_Callback();
 8002848:	f7ff ffca 	bl	80027e0 <BasicTimer4_Callback>

}
 800284c:	bf00      	nop
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40000800 	.word	0x40000800

08002854 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void) {
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	TIM5->SR &= ~TIM_SR_UIF;
 8002858:	4b04      	ldr	r3, [pc, #16]	; (800286c <TIM5_IRQHandler+0x18>)
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	4a03      	ldr	r2, [pc, #12]	; (800286c <TIM5_IRQHandler+0x18>)
 800285e:	f023 0301 	bic.w	r3, r3, #1
 8002862:	6113      	str	r3, [r2, #16]

	/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
	BasicTimer5_Callback();
 8002864:	f7ff ffc4 	bl	80027f0 <BasicTimer5_Callback>

}
 8002868:	bf00      	nop
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40000c00 	.word	0x40000c00

08002870 <__NVIC_EnableIRQ>:
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	4603      	mov	r3, r0
 8002878:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800287a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287e:	2b00      	cmp	r3, #0
 8002880:	db0b      	blt.n	800289a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002882:	79fb      	ldrb	r3, [r7, #7]
 8002884:	f003 021f 	and.w	r2, r3, #31
 8002888:	4907      	ldr	r1, [pc, #28]	; (80028a8 <__NVIC_EnableIRQ+0x38>)
 800288a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288e:	095b      	lsrs	r3, r3, #5
 8002890:	2001      	movs	r0, #1
 8002892:	fa00 f202 	lsl.w	r2, r0, r2
 8002896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	e000e100 	.word	0xe000e100

080028ac <extInt_Config>:
#include "GPIOxDriver.h"



// Haciendo prueba con PC15
void extInt_Config(EXTI_Config_t *extiConfig){
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]

	/* 1.0 Se carga la configuración, que debe ser el PINx como entrada "simple" */
	GPIO_Config(extiConfig -> pGPIOHandler);//Pin objteivo
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f000 ffe9 	bl	8003890 <GPIO_Config>

	/* 2.0 Activamos el acceso al SYSCFG */
	/*Agregue su código acá*/
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80028be:	4b91      	ldr	r3, [pc, #580]	; (8002b04 <extInt_Config+0x258>)
 80028c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c2:	4a90      	ldr	r2, [pc, #576]	; (8002b04 <extInt_Config+0x258>)
 80028c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028c8:	6453      	str	r3, [r2, #68]	; 0x44

	/* 3.0  Asignamos el canal EXTI que corresponde al PIN_y del puerto GPIO_X
	 * Debemos activar la línea PIN_Xy (Y = A, B, C... y x = 0, 1, 2, 3...)
	 * en el módulo EXTI */
	switch (extiConfig->pGPIOHandler->GPIO_PinConfig_t.GPIO_PinNumber) {
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	791b      	ldrb	r3, [r3, #4]
 80028d0:	2b0f      	cmp	r3, #15
 80028d2:	f200 85ab 	bhi.w	800342c <extInt_Config+0xb80>
 80028d6:	a201      	add	r2, pc, #4	; (adr r2, 80028dc <extInt_Config+0x30>)
 80028d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028dc:	0800291d 	.word	0x0800291d
 80028e0:	080029d3 	.word	0x080029d3
 80028e4:	08002a79 	.word	0x08002a79
 80028e8:	08002b41 	.word	0x08002b41
 80028ec:	08002be7 	.word	0x08002be7
 80028f0:	08002c8d 	.word	0x08002c8d
 80028f4:	08002d4f 	.word	0x08002d4f
 80028f8:	08002df5 	.word	0x08002df5
 80028fc:	08002e9b 	.word	0x08002e9b
 8002900:	08002f41 	.word	0x08002f41
 8002904:	08003005 	.word	0x08003005
 8002908:	080030ab 	.word	0x080030ab
 800290c:	08003151 	.word	0x08003151
 8002910:	08003217 	.word	0x08003217
 8002914:	080032bf 	.word	0x080032bf
 8002918:	08003367 	.word	0x08003367
	/* Configurando para el todos los pines GPIOX_0*/
	case 0: {
		/* SYSCFG_EXTICR1 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI0_Pos);
 800291c:	4b7a      	ldr	r3, [pc, #488]	; (8002b08 <extInt_Config+0x25c>)
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	4a79      	ldr	r2, [pc, #484]	; (8002b08 <extInt_Config+0x25c>)
 8002922:	f023 030f 	bic.w	r3, r3, #15
 8002926:	6093      	str	r3, [r2, #8]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a77      	ldr	r2, [pc, #476]	; (8002b0c <extInt_Config+0x260>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d105      	bne.n	8002940 <extInt_Config+0x94>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PA);
 8002934:	4b74      	ldr	r3, [pc, #464]	; (8002b08 <extInt_Config+0x25c>)
 8002936:	4a74      	ldr	r2, [pc, #464]	; (8002b08 <extInt_Config+0x25c>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	6093      	str	r3, [r2, #8]

		} else {
			__NOP();
		}

		break;
 800293c:	f000 bd78 	b.w	8003430 <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a72      	ldr	r2, [pc, #456]	; (8002b10 <extInt_Config+0x264>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d107      	bne.n	800295c <extInt_Config+0xb0>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PB);
 800294c:	4b6e      	ldr	r3, [pc, #440]	; (8002b08 <extInt_Config+0x25c>)
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	4a6d      	ldr	r2, [pc, #436]	; (8002b08 <extInt_Config+0x25c>)
 8002952:	f043 0301 	orr.w	r3, r3, #1
 8002956:	6093      	str	r3, [r2, #8]
		break;
 8002958:	f000 bd6a 	b.w	8003430 <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a6c      	ldr	r2, [pc, #432]	; (8002b14 <extInt_Config+0x268>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d107      	bne.n	8002978 <extInt_Config+0xcc>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PC);
 8002968:	4b67      	ldr	r3, [pc, #412]	; (8002b08 <extInt_Config+0x25c>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	4a66      	ldr	r2, [pc, #408]	; (8002b08 <extInt_Config+0x25c>)
 800296e:	f043 0302 	orr.w	r3, r3, #2
 8002972:	6093      	str	r3, [r2, #8]
		break;
 8002974:	f000 bd5c 	b.w	8003430 <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a66      	ldr	r2, [pc, #408]	; (8002b18 <extInt_Config+0x26c>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d107      	bne.n	8002994 <extInt_Config+0xe8>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PD);
 8002984:	4b60      	ldr	r3, [pc, #384]	; (8002b08 <extInt_Config+0x25c>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	4a5f      	ldr	r2, [pc, #380]	; (8002b08 <extInt_Config+0x25c>)
 800298a:	f043 0303 	orr.w	r3, r3, #3
 800298e:	6093      	str	r3, [r2, #8]
		break;
 8002990:	f000 bd4e 	b.w	8003430 <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a60      	ldr	r2, [pc, #384]	; (8002b1c <extInt_Config+0x270>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d107      	bne.n	80029b0 <extInt_Config+0x104>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PE);
 80029a0:	4b59      	ldr	r3, [pc, #356]	; (8002b08 <extInt_Config+0x25c>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	4a58      	ldr	r2, [pc, #352]	; (8002b08 <extInt_Config+0x25c>)
 80029a6:	f043 0304 	orr.w	r3, r3, #4
 80029aa:	6093      	str	r3, [r2, #8]
		break;
 80029ac:	f000 bd40 	b.w	8003430 <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a5a      	ldr	r2, [pc, #360]	; (8002b20 <extInt_Config+0x274>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d107      	bne.n	80029cc <extInt_Config+0x120>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PH);
 80029bc:	4b52      	ldr	r3, [pc, #328]	; (8002b08 <extInt_Config+0x25c>)
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	4a51      	ldr	r2, [pc, #324]	; (8002b08 <extInt_Config+0x25c>)
 80029c2:	f043 0307 	orr.w	r3, r3, #7
 80029c6:	6093      	str	r3, [r2, #8]
		break;
 80029c8:	f000 bd32 	b.w	8003430 <extInt_Config+0xb84>
			__NOP();
 80029cc:	bf00      	nop
		break;
 80029ce:	f000 bd2f 	b.w	8003430 <extInt_Config+0xb84>

	/* Configurando para el todos los pines GPIOX_1*/
	case 1: {
		/* SYSCFG_EXTICR1 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI1_Pos);
 80029d2:	4b4d      	ldr	r3, [pc, #308]	; (8002b08 <extInt_Config+0x25c>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	4a4c      	ldr	r2, [pc, #304]	; (8002b08 <extInt_Config+0x25c>)
 80029d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029dc:	6093      	str	r3, [r2, #8]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a49      	ldr	r2, [pc, #292]	; (8002b0c <extInt_Config+0x260>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d104      	bne.n	80029f4 <extInt_Config+0x148>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PA);
 80029ea:	4b47      	ldr	r3, [pc, #284]	; (8002b08 <extInt_Config+0x25c>)
 80029ec:	4a46      	ldr	r2, [pc, #280]	; (8002b08 <extInt_Config+0x25c>)
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	6093      	str	r3, [r2, #8]
 80029f2:	e041      	b.n	8002a78 <extInt_Config+0x1cc>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a45      	ldr	r2, [pc, #276]	; (8002b10 <extInt_Config+0x264>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d106      	bne.n	8002a0e <extInt_Config+0x162>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PB);
 8002a00:	4b41      	ldr	r3, [pc, #260]	; (8002b08 <extInt_Config+0x25c>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	4a40      	ldr	r2, [pc, #256]	; (8002b08 <extInt_Config+0x25c>)
 8002a06:	f043 0310 	orr.w	r3, r3, #16
 8002a0a:	6093      	str	r3, [r2, #8]
 8002a0c:	e034      	b.n	8002a78 <extInt_Config+0x1cc>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a3f      	ldr	r2, [pc, #252]	; (8002b14 <extInt_Config+0x268>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d106      	bne.n	8002a28 <extInt_Config+0x17c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PC);
 8002a1a:	4b3b      	ldr	r3, [pc, #236]	; (8002b08 <extInt_Config+0x25c>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	4a3a      	ldr	r2, [pc, #232]	; (8002b08 <extInt_Config+0x25c>)
 8002a20:	f043 0320 	orr.w	r3, r3, #32
 8002a24:	6093      	str	r3, [r2, #8]
 8002a26:	e027      	b.n	8002a78 <extInt_Config+0x1cc>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a3a      	ldr	r2, [pc, #232]	; (8002b18 <extInt_Config+0x26c>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d106      	bne.n	8002a42 <extInt_Config+0x196>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PD);
 8002a34:	4b34      	ldr	r3, [pc, #208]	; (8002b08 <extInt_Config+0x25c>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	4a33      	ldr	r2, [pc, #204]	; (8002b08 <extInt_Config+0x25c>)
 8002a3a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002a3e:	6093      	str	r3, [r2, #8]
 8002a40:	e01a      	b.n	8002a78 <extInt_Config+0x1cc>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a34      	ldr	r2, [pc, #208]	; (8002b1c <extInt_Config+0x270>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d106      	bne.n	8002a5c <extInt_Config+0x1b0>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PE);
 8002a4e:	4b2e      	ldr	r3, [pc, #184]	; (8002b08 <extInt_Config+0x25c>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	4a2d      	ldr	r2, [pc, #180]	; (8002b08 <extInt_Config+0x25c>)
 8002a54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a58:	6093      	str	r3, [r2, #8]
 8002a5a:	e00d      	b.n	8002a78 <extInt_Config+0x1cc>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a2f      	ldr	r2, [pc, #188]	; (8002b20 <extInt_Config+0x274>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d106      	bne.n	8002a76 <extInt_Config+0x1ca>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PH);
 8002a68:	4b27      	ldr	r3, [pc, #156]	; (8002b08 <extInt_Config+0x25c>)
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	4a26      	ldr	r2, [pc, #152]	; (8002b08 <extInt_Config+0x25c>)
 8002a6e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002a72:	6093      	str	r3, [r2, #8]
 8002a74:	e000      	b.n	8002a78 <extInt_Config+0x1cc>

		} else {
			__NOP();
 8002a76:	bf00      	nop

	/* Configurando para el todos los pines GPIOX_2*/
	case 2: {
		/* SYSCFG_EXTICR1 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI2_Pos);
 8002a78:	4b23      	ldr	r3, [pc, #140]	; (8002b08 <extInt_Config+0x25c>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	4a22      	ldr	r2, [pc, #136]	; (8002b08 <extInt_Config+0x25c>)
 8002a7e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a82:	6093      	str	r3, [r2, #8]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a20      	ldr	r2, [pc, #128]	; (8002b0c <extInt_Config+0x260>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d104      	bne.n	8002a9a <extInt_Config+0x1ee>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PA);
 8002a90:	4b1d      	ldr	r3, [pc, #116]	; (8002b08 <extInt_Config+0x25c>)
 8002a92:	4a1d      	ldr	r2, [pc, #116]	; (8002b08 <extInt_Config+0x25c>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	6093      	str	r3, [r2, #8]
 8002a98:	e052      	b.n	8002b40 <extInt_Config+0x294>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a1b      	ldr	r2, [pc, #108]	; (8002b10 <extInt_Config+0x264>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d106      	bne.n	8002ab4 <extInt_Config+0x208>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PB);
 8002aa6:	4b18      	ldr	r3, [pc, #96]	; (8002b08 <extInt_Config+0x25c>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	4a17      	ldr	r2, [pc, #92]	; (8002b08 <extInt_Config+0x25c>)
 8002aac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ab0:	6093      	str	r3, [r2, #8]
 8002ab2:	e045      	b.n	8002b40 <extInt_Config+0x294>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a16      	ldr	r2, [pc, #88]	; (8002b14 <extInt_Config+0x268>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d106      	bne.n	8002ace <extInt_Config+0x222>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PC);
 8002ac0:	4b11      	ldr	r3, [pc, #68]	; (8002b08 <extInt_Config+0x25c>)
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	4a10      	ldr	r2, [pc, #64]	; (8002b08 <extInt_Config+0x25c>)
 8002ac6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002aca:	6093      	str	r3, [r2, #8]
 8002acc:	e038      	b.n	8002b40 <extInt_Config+0x294>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a10      	ldr	r2, [pc, #64]	; (8002b18 <extInt_Config+0x26c>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d106      	bne.n	8002ae8 <extInt_Config+0x23c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PD);
 8002ada:	4b0b      	ldr	r3, [pc, #44]	; (8002b08 <extInt_Config+0x25c>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	4a0a      	ldr	r2, [pc, #40]	; (8002b08 <extInt_Config+0x25c>)
 8002ae0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002ae4:	6093      	str	r3, [r2, #8]
 8002ae6:	e02b      	b.n	8002b40 <extInt_Config+0x294>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a0b      	ldr	r2, [pc, #44]	; (8002b1c <extInt_Config+0x270>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d117      	bne.n	8002b24 <extInt_Config+0x278>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PE);
 8002af4:	4b04      	ldr	r3, [pc, #16]	; (8002b08 <extInt_Config+0x25c>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	4a03      	ldr	r2, [pc, #12]	; (8002b08 <extInt_Config+0x25c>)
 8002afa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002afe:	6093      	str	r3, [r2, #8]
 8002b00:	e01e      	b.n	8002b40 <extInt_Config+0x294>
 8002b02:	bf00      	nop
 8002b04:	40023800 	.word	0x40023800
 8002b08:	40013800 	.word	0x40013800
 8002b0c:	40020000 	.word	0x40020000
 8002b10:	40020400 	.word	0x40020400
 8002b14:	40020800 	.word	0x40020800
 8002b18:	40020c00 	.word	0x40020c00
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	40021c00 	.word	0x40021c00

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a81      	ldr	r2, [pc, #516]	; (8002d30 <extInt_Config+0x484>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d106      	bne.n	8002b3e <extInt_Config+0x292>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PH);
 8002b30:	4b80      	ldr	r3, [pc, #512]	; (8002d34 <extInt_Config+0x488>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	4a7f      	ldr	r2, [pc, #508]	; (8002d34 <extInt_Config+0x488>)
 8002b36:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b3a:	6093      	str	r3, [r2, #8]
 8002b3c:	e000      	b.n	8002b40 <extInt_Config+0x294>

		} else {
			__NOP();
 8002b3e:	bf00      	nop
	}

	case 3: {
		/* SYSCFG_EXTICR1 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI3_Pos);
 8002b40:	4b7c      	ldr	r3, [pc, #496]	; (8002d34 <extInt_Config+0x488>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	4a7b      	ldr	r2, [pc, #492]	; (8002d34 <extInt_Config+0x488>)
 8002b46:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b4a:	6093      	str	r3, [r2, #8]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a79      	ldr	r2, [pc, #484]	; (8002d38 <extInt_Config+0x48c>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d104      	bne.n	8002b62 <extInt_Config+0x2b6>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PA);
 8002b58:	4b76      	ldr	r3, [pc, #472]	; (8002d34 <extInt_Config+0x488>)
 8002b5a:	4a76      	ldr	r2, [pc, #472]	; (8002d34 <extInt_Config+0x488>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	6093      	str	r3, [r2, #8]
 8002b60:	e041      	b.n	8002be6 <extInt_Config+0x33a>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a74      	ldr	r2, [pc, #464]	; (8002d3c <extInt_Config+0x490>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d106      	bne.n	8002b7c <extInt_Config+0x2d0>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PB);
 8002b6e:	4b71      	ldr	r3, [pc, #452]	; (8002d34 <extInt_Config+0x488>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	4a70      	ldr	r2, [pc, #448]	; (8002d34 <extInt_Config+0x488>)
 8002b74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b78:	6093      	str	r3, [r2, #8]
 8002b7a:	e034      	b.n	8002be6 <extInt_Config+0x33a>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a6f      	ldr	r2, [pc, #444]	; (8002d40 <extInt_Config+0x494>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d106      	bne.n	8002b96 <extInt_Config+0x2ea>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PC);
 8002b88:	4b6a      	ldr	r3, [pc, #424]	; (8002d34 <extInt_Config+0x488>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	4a69      	ldr	r2, [pc, #420]	; (8002d34 <extInt_Config+0x488>)
 8002b8e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b92:	6093      	str	r3, [r2, #8]
 8002b94:	e027      	b.n	8002be6 <extInt_Config+0x33a>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a69      	ldr	r2, [pc, #420]	; (8002d44 <extInt_Config+0x498>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d106      	bne.n	8002bb0 <extInt_Config+0x304>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PD);
 8002ba2:	4b64      	ldr	r3, [pc, #400]	; (8002d34 <extInt_Config+0x488>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	4a63      	ldr	r2, [pc, #396]	; (8002d34 <extInt_Config+0x488>)
 8002ba8:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002bac:	6093      	str	r3, [r2, #8]
 8002bae:	e01a      	b.n	8002be6 <extInt_Config+0x33a>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a64      	ldr	r2, [pc, #400]	; (8002d48 <extInt_Config+0x49c>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d106      	bne.n	8002bca <extInt_Config+0x31e>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PE);
 8002bbc:	4b5d      	ldr	r3, [pc, #372]	; (8002d34 <extInt_Config+0x488>)
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	4a5c      	ldr	r2, [pc, #368]	; (8002d34 <extInt_Config+0x488>)
 8002bc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bc6:	6093      	str	r3, [r2, #8]
 8002bc8:	e00d      	b.n	8002be6 <extInt_Config+0x33a>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a57      	ldr	r2, [pc, #348]	; (8002d30 <extInt_Config+0x484>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d106      	bne.n	8002be4 <extInt_Config+0x338>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PH);
 8002bd6:	4b57      	ldr	r3, [pc, #348]	; (8002d34 <extInt_Config+0x488>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	4a56      	ldr	r2, [pc, #344]	; (8002d34 <extInt_Config+0x488>)
 8002bdc:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8002be0:	6093      	str	r3, [r2, #8]
 8002be2:	e000      	b.n	8002be6 <extInt_Config+0x33a>

		} else {
			__NOP();
 8002be4:	bf00      	nop
	}

	case 4: {
		/* SYSCFG_EXTICR2 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI4_Pos);
 8002be6:	4b53      	ldr	r3, [pc, #332]	; (8002d34 <extInt_Config+0x488>)
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	4a52      	ldr	r2, [pc, #328]	; (8002d34 <extInt_Config+0x488>)
 8002bec:	f023 030f 	bic.w	r3, r3, #15
 8002bf0:	60d3      	str	r3, [r2, #12]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a4f      	ldr	r2, [pc, #316]	; (8002d38 <extInt_Config+0x48c>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d104      	bne.n	8002c08 <extInt_Config+0x35c>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PA);
 8002bfe:	4b4d      	ldr	r3, [pc, #308]	; (8002d34 <extInt_Config+0x488>)
 8002c00:	4a4c      	ldr	r2, [pc, #304]	; (8002d34 <extInt_Config+0x488>)
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	60d3      	str	r3, [r2, #12]
 8002c06:	e041      	b.n	8002c8c <extInt_Config+0x3e0>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a4b      	ldr	r2, [pc, #300]	; (8002d3c <extInt_Config+0x490>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d106      	bne.n	8002c22 <extInt_Config+0x376>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PB);
 8002c14:	4b47      	ldr	r3, [pc, #284]	; (8002d34 <extInt_Config+0x488>)
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	4a46      	ldr	r2, [pc, #280]	; (8002d34 <extInt_Config+0x488>)
 8002c1a:	f043 0301 	orr.w	r3, r3, #1
 8002c1e:	60d3      	str	r3, [r2, #12]
 8002c20:	e034      	b.n	8002c8c <extInt_Config+0x3e0>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a45      	ldr	r2, [pc, #276]	; (8002d40 <extInt_Config+0x494>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d106      	bne.n	8002c3c <extInt_Config+0x390>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PC);
 8002c2e:	4b41      	ldr	r3, [pc, #260]	; (8002d34 <extInt_Config+0x488>)
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	4a40      	ldr	r2, [pc, #256]	; (8002d34 <extInt_Config+0x488>)
 8002c34:	f043 0302 	orr.w	r3, r3, #2
 8002c38:	60d3      	str	r3, [r2, #12]
 8002c3a:	e027      	b.n	8002c8c <extInt_Config+0x3e0>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a40      	ldr	r2, [pc, #256]	; (8002d44 <extInt_Config+0x498>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d106      	bne.n	8002c56 <extInt_Config+0x3aa>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PD);
 8002c48:	4b3a      	ldr	r3, [pc, #232]	; (8002d34 <extInt_Config+0x488>)
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	4a39      	ldr	r2, [pc, #228]	; (8002d34 <extInt_Config+0x488>)
 8002c4e:	f043 0303 	orr.w	r3, r3, #3
 8002c52:	60d3      	str	r3, [r2, #12]
 8002c54:	e01a      	b.n	8002c8c <extInt_Config+0x3e0>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a3a      	ldr	r2, [pc, #232]	; (8002d48 <extInt_Config+0x49c>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d106      	bne.n	8002c70 <extInt_Config+0x3c4>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PE);
 8002c62:	4b34      	ldr	r3, [pc, #208]	; (8002d34 <extInt_Config+0x488>)
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	4a33      	ldr	r2, [pc, #204]	; (8002d34 <extInt_Config+0x488>)
 8002c68:	f043 0304 	orr.w	r3, r3, #4
 8002c6c:	60d3      	str	r3, [r2, #12]
 8002c6e:	e00d      	b.n	8002c8c <extInt_Config+0x3e0>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a2e      	ldr	r2, [pc, #184]	; (8002d30 <extInt_Config+0x484>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d106      	bne.n	8002c8a <extInt_Config+0x3de>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PH);
 8002c7c:	4b2d      	ldr	r3, [pc, #180]	; (8002d34 <extInt_Config+0x488>)
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	4a2c      	ldr	r2, [pc, #176]	; (8002d34 <extInt_Config+0x488>)
 8002c82:	f043 0307 	orr.w	r3, r3, #7
 8002c86:	60d3      	str	r3, [r2, #12]
 8002c88:	e000      	b.n	8002c8c <extInt_Config+0x3e0>

		} else {
			__NOP();
 8002c8a:	bf00      	nop
	}
	
	case 5: {
		/* SYSCFG_EXTICR2 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI5_Pos);
 8002c8c:	4b29      	ldr	r3, [pc, #164]	; (8002d34 <extInt_Config+0x488>)
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	4a28      	ldr	r2, [pc, #160]	; (8002d34 <extInt_Config+0x488>)
 8002c92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c96:	60d3      	str	r3, [r2, #12]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a26      	ldr	r2, [pc, #152]	; (8002d38 <extInt_Config+0x48c>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d104      	bne.n	8002cae <extInt_Config+0x402>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PA);
 8002ca4:	4b23      	ldr	r3, [pc, #140]	; (8002d34 <extInt_Config+0x488>)
 8002ca6:	4a23      	ldr	r2, [pc, #140]	; (8002d34 <extInt_Config+0x488>)
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	60d3      	str	r3, [r2, #12]
 8002cac:	e04f      	b.n	8002d4e <extInt_Config+0x4a2>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a21      	ldr	r2, [pc, #132]	; (8002d3c <extInt_Config+0x490>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d106      	bne.n	8002cc8 <extInt_Config+0x41c>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PB);
 8002cba:	4b1e      	ldr	r3, [pc, #120]	; (8002d34 <extInt_Config+0x488>)
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	4a1d      	ldr	r2, [pc, #116]	; (8002d34 <extInt_Config+0x488>)
 8002cc0:	f043 0310 	orr.w	r3, r3, #16
 8002cc4:	60d3      	str	r3, [r2, #12]
 8002cc6:	e042      	b.n	8002d4e <extInt_Config+0x4a2>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a1c      	ldr	r2, [pc, #112]	; (8002d40 <extInt_Config+0x494>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d106      	bne.n	8002ce2 <extInt_Config+0x436>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PC);
 8002cd4:	4b17      	ldr	r3, [pc, #92]	; (8002d34 <extInt_Config+0x488>)
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	4a16      	ldr	r2, [pc, #88]	; (8002d34 <extInt_Config+0x488>)
 8002cda:	f043 0320 	orr.w	r3, r3, #32
 8002cde:	60d3      	str	r3, [r2, #12]
 8002ce0:	e035      	b.n	8002d4e <extInt_Config+0x4a2>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a16      	ldr	r2, [pc, #88]	; (8002d44 <extInt_Config+0x498>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d106      	bne.n	8002cfc <extInt_Config+0x450>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PD);
 8002cee:	4b11      	ldr	r3, [pc, #68]	; (8002d34 <extInt_Config+0x488>)
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	4a10      	ldr	r2, [pc, #64]	; (8002d34 <extInt_Config+0x488>)
 8002cf4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002cf8:	60d3      	str	r3, [r2, #12]
 8002cfa:	e028      	b.n	8002d4e <extInt_Config+0x4a2>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a11      	ldr	r2, [pc, #68]	; (8002d48 <extInt_Config+0x49c>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d106      	bne.n	8002d16 <extInt_Config+0x46a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PE);
 8002d08:	4b0a      	ldr	r3, [pc, #40]	; (8002d34 <extInt_Config+0x488>)
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	4a09      	ldr	r2, [pc, #36]	; (8002d34 <extInt_Config+0x488>)
 8002d0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d12:	60d3      	str	r3, [r2, #12]
 8002d14:	e01b      	b.n	8002d4e <extInt_Config+0x4a2>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a04      	ldr	r2, [pc, #16]	; (8002d30 <extInt_Config+0x484>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d114      	bne.n	8002d4c <extInt_Config+0x4a0>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PH);
 8002d22:	4b04      	ldr	r3, [pc, #16]	; (8002d34 <extInt_Config+0x488>)
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	4a03      	ldr	r2, [pc, #12]	; (8002d34 <extInt_Config+0x488>)
 8002d28:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002d2c:	60d3      	str	r3, [r2, #12]
 8002d2e:	e00e      	b.n	8002d4e <extInt_Config+0x4a2>
 8002d30:	40021c00 	.word	0x40021c00
 8002d34:	40013800 	.word	0x40013800
 8002d38:	40020000 	.word	0x40020000
 8002d3c:	40020400 	.word	0x40020400
 8002d40:	40020800 	.word	0x40020800
 8002d44:	40020c00 	.word	0x40020c00
 8002d48:	40021000 	.word	0x40021000

		} else {
			__NOP();
 8002d4c:	bf00      	nop
	}

		case 6: {
		/* SYSCFG_EXTICR2 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI6_Pos);
 8002d4e:	4b85      	ldr	r3, [pc, #532]	; (8002f64 <extInt_Config+0x6b8>)
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	4a84      	ldr	r2, [pc, #528]	; (8002f64 <extInt_Config+0x6b8>)
 8002d54:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d58:	60d3      	str	r3, [r2, #12]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a81      	ldr	r2, [pc, #516]	; (8002f68 <extInt_Config+0x6bc>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d104      	bne.n	8002d70 <extInt_Config+0x4c4>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PA);
 8002d66:	4b7f      	ldr	r3, [pc, #508]	; (8002f64 <extInt_Config+0x6b8>)
 8002d68:	4a7e      	ldr	r2, [pc, #504]	; (8002f64 <extInt_Config+0x6b8>)
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	60d3      	str	r3, [r2, #12]
 8002d6e:	e041      	b.n	8002df4 <extInt_Config+0x548>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a7d      	ldr	r2, [pc, #500]	; (8002f6c <extInt_Config+0x6c0>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d106      	bne.n	8002d8a <extInt_Config+0x4de>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PB);
 8002d7c:	4b79      	ldr	r3, [pc, #484]	; (8002f64 <extInt_Config+0x6b8>)
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	4a78      	ldr	r2, [pc, #480]	; (8002f64 <extInt_Config+0x6b8>)
 8002d82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d86:	60d3      	str	r3, [r2, #12]
 8002d88:	e034      	b.n	8002df4 <extInt_Config+0x548>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a77      	ldr	r2, [pc, #476]	; (8002f70 <extInt_Config+0x6c4>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d106      	bne.n	8002da4 <extInt_Config+0x4f8>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PC);
 8002d96:	4b73      	ldr	r3, [pc, #460]	; (8002f64 <extInt_Config+0x6b8>)
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	4a72      	ldr	r2, [pc, #456]	; (8002f64 <extInt_Config+0x6b8>)
 8002d9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002da0:	60d3      	str	r3, [r2, #12]
 8002da2:	e027      	b.n	8002df4 <extInt_Config+0x548>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a72      	ldr	r2, [pc, #456]	; (8002f74 <extInt_Config+0x6c8>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d106      	bne.n	8002dbe <extInt_Config+0x512>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PD);
 8002db0:	4b6c      	ldr	r3, [pc, #432]	; (8002f64 <extInt_Config+0x6b8>)
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	4a6b      	ldr	r2, [pc, #428]	; (8002f64 <extInt_Config+0x6b8>)
 8002db6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002dba:	60d3      	str	r3, [r2, #12]
 8002dbc:	e01a      	b.n	8002df4 <extInt_Config+0x548>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a6c      	ldr	r2, [pc, #432]	; (8002f78 <extInt_Config+0x6cc>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d106      	bne.n	8002dd8 <extInt_Config+0x52c>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PE);
 8002dca:	4b66      	ldr	r3, [pc, #408]	; (8002f64 <extInt_Config+0x6b8>)
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	4a65      	ldr	r2, [pc, #404]	; (8002f64 <extInt_Config+0x6b8>)
 8002dd0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dd4:	60d3      	str	r3, [r2, #12]
 8002dd6:	e00d      	b.n	8002df4 <extInt_Config+0x548>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a67      	ldr	r2, [pc, #412]	; (8002f7c <extInt_Config+0x6d0>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d106      	bne.n	8002df2 <extInt_Config+0x546>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PH);
 8002de4:	4b5f      	ldr	r3, [pc, #380]	; (8002f64 <extInt_Config+0x6b8>)
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	4a5e      	ldr	r2, [pc, #376]	; (8002f64 <extInt_Config+0x6b8>)
 8002dea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002dee:	60d3      	str	r3, [r2, #12]
 8002df0:	e000      	b.n	8002df4 <extInt_Config+0x548>

		} else {
			__NOP();
 8002df2:	bf00      	nop
	}

	case 7: {
		/* SYSCFG_EXTICR2 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI7_Pos);
 8002df4:	4b5b      	ldr	r3, [pc, #364]	; (8002f64 <extInt_Config+0x6b8>)
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	4a5a      	ldr	r2, [pc, #360]	; (8002f64 <extInt_Config+0x6b8>)
 8002dfa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002dfe:	60d3      	str	r3, [r2, #12]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a58      	ldr	r2, [pc, #352]	; (8002f68 <extInt_Config+0x6bc>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d104      	bne.n	8002e16 <extInt_Config+0x56a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PA);
 8002e0c:	4b55      	ldr	r3, [pc, #340]	; (8002f64 <extInt_Config+0x6b8>)
 8002e0e:	4a55      	ldr	r2, [pc, #340]	; (8002f64 <extInt_Config+0x6b8>)
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	60d3      	str	r3, [r2, #12]
 8002e14:	e041      	b.n	8002e9a <extInt_Config+0x5ee>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a53      	ldr	r2, [pc, #332]	; (8002f6c <extInt_Config+0x6c0>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d106      	bne.n	8002e30 <extInt_Config+0x584>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PB);
 8002e22:	4b50      	ldr	r3, [pc, #320]	; (8002f64 <extInt_Config+0x6b8>)
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	4a4f      	ldr	r2, [pc, #316]	; (8002f64 <extInt_Config+0x6b8>)
 8002e28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e2c:	60d3      	str	r3, [r2, #12]
 8002e2e:	e034      	b.n	8002e9a <extInt_Config+0x5ee>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a4e      	ldr	r2, [pc, #312]	; (8002f70 <extInt_Config+0x6c4>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d106      	bne.n	8002e4a <extInt_Config+0x59e>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PC);
 8002e3c:	4b49      	ldr	r3, [pc, #292]	; (8002f64 <extInt_Config+0x6b8>)
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	4a48      	ldr	r2, [pc, #288]	; (8002f64 <extInt_Config+0x6b8>)
 8002e42:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e46:	60d3      	str	r3, [r2, #12]
 8002e48:	e027      	b.n	8002e9a <extInt_Config+0x5ee>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a48      	ldr	r2, [pc, #288]	; (8002f74 <extInt_Config+0x6c8>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d106      	bne.n	8002e64 <extInt_Config+0x5b8>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PD);
 8002e56:	4b43      	ldr	r3, [pc, #268]	; (8002f64 <extInt_Config+0x6b8>)
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	4a42      	ldr	r2, [pc, #264]	; (8002f64 <extInt_Config+0x6b8>)
 8002e5c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002e60:	60d3      	str	r3, [r2, #12]
 8002e62:	e01a      	b.n	8002e9a <extInt_Config+0x5ee>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a43      	ldr	r2, [pc, #268]	; (8002f78 <extInt_Config+0x6cc>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d106      	bne.n	8002e7e <extInt_Config+0x5d2>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PE);
 8002e70:	4b3c      	ldr	r3, [pc, #240]	; (8002f64 <extInt_Config+0x6b8>)
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	4a3b      	ldr	r2, [pc, #236]	; (8002f64 <extInt_Config+0x6b8>)
 8002e76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e7a:	60d3      	str	r3, [r2, #12]
 8002e7c:	e00d      	b.n	8002e9a <extInt_Config+0x5ee>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a3d      	ldr	r2, [pc, #244]	; (8002f7c <extInt_Config+0x6d0>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d106      	bne.n	8002e98 <extInt_Config+0x5ec>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PH);
 8002e8a:	4b36      	ldr	r3, [pc, #216]	; (8002f64 <extInt_Config+0x6b8>)
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	4a35      	ldr	r2, [pc, #212]	; (8002f64 <extInt_Config+0x6b8>)
 8002e90:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8002e94:	60d3      	str	r3, [r2, #12]
 8002e96:	e000      	b.n	8002e9a <extInt_Config+0x5ee>

		} else {
			__NOP();
 8002e98:	bf00      	nop
	}

	case 8: {
		/* SYSCFG_EXTICR3 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI8_Pos);
 8002e9a:	4b32      	ldr	r3, [pc, #200]	; (8002f64 <extInt_Config+0x6b8>)
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	4a31      	ldr	r2, [pc, #196]	; (8002f64 <extInt_Config+0x6b8>)
 8002ea0:	f023 030f 	bic.w	r3, r3, #15
 8002ea4:	6113      	str	r3, [r2, #16]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a2e      	ldr	r2, [pc, #184]	; (8002f68 <extInt_Config+0x6bc>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d104      	bne.n	8002ebc <extInt_Config+0x610>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PA);
 8002eb2:	4b2c      	ldr	r3, [pc, #176]	; (8002f64 <extInt_Config+0x6b8>)
 8002eb4:	4a2b      	ldr	r2, [pc, #172]	; (8002f64 <extInt_Config+0x6b8>)
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	6113      	str	r3, [r2, #16]
 8002eba:	e041      	b.n	8002f40 <extInt_Config+0x694>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a2a      	ldr	r2, [pc, #168]	; (8002f6c <extInt_Config+0x6c0>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d106      	bne.n	8002ed6 <extInt_Config+0x62a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PB);
 8002ec8:	4b26      	ldr	r3, [pc, #152]	; (8002f64 <extInt_Config+0x6b8>)
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	4a25      	ldr	r2, [pc, #148]	; (8002f64 <extInt_Config+0x6b8>)
 8002ece:	f043 0301 	orr.w	r3, r3, #1
 8002ed2:	6113      	str	r3, [r2, #16]
 8002ed4:	e034      	b.n	8002f40 <extInt_Config+0x694>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a24      	ldr	r2, [pc, #144]	; (8002f70 <extInt_Config+0x6c4>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d106      	bne.n	8002ef0 <extInt_Config+0x644>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PC);
 8002ee2:	4b20      	ldr	r3, [pc, #128]	; (8002f64 <extInt_Config+0x6b8>)
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	4a1f      	ldr	r2, [pc, #124]	; (8002f64 <extInt_Config+0x6b8>)
 8002ee8:	f043 0302 	orr.w	r3, r3, #2
 8002eec:	6113      	str	r3, [r2, #16]
 8002eee:	e027      	b.n	8002f40 <extInt_Config+0x694>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a1f      	ldr	r2, [pc, #124]	; (8002f74 <extInt_Config+0x6c8>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d106      	bne.n	8002f0a <extInt_Config+0x65e>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PD);
 8002efc:	4b19      	ldr	r3, [pc, #100]	; (8002f64 <extInt_Config+0x6b8>)
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	4a18      	ldr	r2, [pc, #96]	; (8002f64 <extInt_Config+0x6b8>)
 8002f02:	f043 0303 	orr.w	r3, r3, #3
 8002f06:	6113      	str	r3, [r2, #16]
 8002f08:	e01a      	b.n	8002f40 <extInt_Config+0x694>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a19      	ldr	r2, [pc, #100]	; (8002f78 <extInt_Config+0x6cc>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d106      	bne.n	8002f24 <extInt_Config+0x678>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PE);
 8002f16:	4b13      	ldr	r3, [pc, #76]	; (8002f64 <extInt_Config+0x6b8>)
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	4a12      	ldr	r2, [pc, #72]	; (8002f64 <extInt_Config+0x6b8>)
 8002f1c:	f043 0304 	orr.w	r3, r3, #4
 8002f20:	6113      	str	r3, [r2, #16]
 8002f22:	e00d      	b.n	8002f40 <extInt_Config+0x694>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a14      	ldr	r2, [pc, #80]	; (8002f7c <extInt_Config+0x6d0>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d106      	bne.n	8002f3e <extInt_Config+0x692>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PH);
 8002f30:	4b0c      	ldr	r3, [pc, #48]	; (8002f64 <extInt_Config+0x6b8>)
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	4a0b      	ldr	r2, [pc, #44]	; (8002f64 <extInt_Config+0x6b8>)
 8002f36:	f043 0307 	orr.w	r3, r3, #7
 8002f3a:	6113      	str	r3, [r2, #16]
 8002f3c:	e000      	b.n	8002f40 <extInt_Config+0x694>

		} else {
			__NOP();
 8002f3e:	bf00      	nop
	}

	case 9: {
		/* SYSCFG_EXTIC3 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI9_Pos);
 8002f40:	4b08      	ldr	r3, [pc, #32]	; (8002f64 <extInt_Config+0x6b8>)
 8002f42:	691b      	ldr	r3, [r3, #16]
 8002f44:	4a07      	ldr	r2, [pc, #28]	; (8002f64 <extInt_Config+0x6b8>)
 8002f46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f4a:	6113      	str	r3, [r2, #16]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a05      	ldr	r2, [pc, #20]	; (8002f68 <extInt_Config+0x6bc>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d113      	bne.n	8002f80 <extInt_Config+0x6d4>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PA);
 8002f58:	4b02      	ldr	r3, [pc, #8]	; (8002f64 <extInt_Config+0x6b8>)
 8002f5a:	4a02      	ldr	r2, [pc, #8]	; (8002f64 <extInt_Config+0x6b8>)
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	6113      	str	r3, [r2, #16]
 8002f60:	e050      	b.n	8003004 <extInt_Config+0x758>
 8002f62:	bf00      	nop
 8002f64:	40013800 	.word	0x40013800
 8002f68:	40020000 	.word	0x40020000
 8002f6c:	40020400 	.word	0x40020400
 8002f70:	40020800 	.word	0x40020800
 8002f74:	40020c00 	.word	0x40020c00
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	40021c00 	.word	0x40021c00

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a88      	ldr	r2, [pc, #544]	; (80031a8 <extInt_Config+0x8fc>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d106      	bne.n	8002f9a <extInt_Config+0x6ee>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PB);
 8002f8c:	4b87      	ldr	r3, [pc, #540]	; (80031ac <extInt_Config+0x900>)
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	4a86      	ldr	r2, [pc, #536]	; (80031ac <extInt_Config+0x900>)
 8002f92:	f043 0310 	orr.w	r3, r3, #16
 8002f96:	6113      	str	r3, [r2, #16]
 8002f98:	e034      	b.n	8003004 <extInt_Config+0x758>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a83      	ldr	r2, [pc, #524]	; (80031b0 <extInt_Config+0x904>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d106      	bne.n	8002fb4 <extInt_Config+0x708>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PC);
 8002fa6:	4b81      	ldr	r3, [pc, #516]	; (80031ac <extInt_Config+0x900>)
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	4a80      	ldr	r2, [pc, #512]	; (80031ac <extInt_Config+0x900>)
 8002fac:	f043 0320 	orr.w	r3, r3, #32
 8002fb0:	6113      	str	r3, [r2, #16]
 8002fb2:	e027      	b.n	8003004 <extInt_Config+0x758>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a7e      	ldr	r2, [pc, #504]	; (80031b4 <extInt_Config+0x908>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d106      	bne.n	8002fce <extInt_Config+0x722>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PD);
 8002fc0:	4b7a      	ldr	r3, [pc, #488]	; (80031ac <extInt_Config+0x900>)
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	4a79      	ldr	r2, [pc, #484]	; (80031ac <extInt_Config+0x900>)
 8002fc6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002fca:	6113      	str	r3, [r2, #16]
 8002fcc:	e01a      	b.n	8003004 <extInt_Config+0x758>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a78      	ldr	r2, [pc, #480]	; (80031b8 <extInt_Config+0x90c>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d106      	bne.n	8002fe8 <extInt_Config+0x73c>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PE);
 8002fda:	4b74      	ldr	r3, [pc, #464]	; (80031ac <extInt_Config+0x900>)
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	4a73      	ldr	r2, [pc, #460]	; (80031ac <extInt_Config+0x900>)
 8002fe0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fe4:	6113      	str	r3, [r2, #16]
 8002fe6:	e00d      	b.n	8003004 <extInt_Config+0x758>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a73      	ldr	r2, [pc, #460]	; (80031bc <extInt_Config+0x910>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d106      	bne.n	8003002 <extInt_Config+0x756>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PH);
 8002ff4:	4b6d      	ldr	r3, [pc, #436]	; (80031ac <extInt_Config+0x900>)
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	4a6c      	ldr	r2, [pc, #432]	; (80031ac <extInt_Config+0x900>)
 8002ffa:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002ffe:	6113      	str	r3, [r2, #16]
 8003000:	e000      	b.n	8003004 <extInt_Config+0x758>

		} else {
			__NOP();
 8003002:	bf00      	nop
	}

	case 10: {
		/* SYSCFG_EXTICR3 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI10_Pos);
 8003004:	4b69      	ldr	r3, [pc, #420]	; (80031ac <extInt_Config+0x900>)
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	4a68      	ldr	r2, [pc, #416]	; (80031ac <extInt_Config+0x900>)
 800300a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800300e:	6113      	str	r3, [r2, #16]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a6a      	ldr	r2, [pc, #424]	; (80031c0 <extInt_Config+0x914>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d104      	bne.n	8003026 <extInt_Config+0x77a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PA);
 800301c:	4b63      	ldr	r3, [pc, #396]	; (80031ac <extInt_Config+0x900>)
 800301e:	4a63      	ldr	r2, [pc, #396]	; (80031ac <extInt_Config+0x900>)
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	6113      	str	r3, [r2, #16]
 8003024:	e041      	b.n	80030aa <extInt_Config+0x7fe>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a5e      	ldr	r2, [pc, #376]	; (80031a8 <extInt_Config+0x8fc>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d106      	bne.n	8003040 <extInt_Config+0x794>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PB);
 8003032:	4b5e      	ldr	r3, [pc, #376]	; (80031ac <extInt_Config+0x900>)
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	4a5d      	ldr	r2, [pc, #372]	; (80031ac <extInt_Config+0x900>)
 8003038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800303c:	6113      	str	r3, [r2, #16]
 800303e:	e034      	b.n	80030aa <extInt_Config+0x7fe>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a5a      	ldr	r2, [pc, #360]	; (80031b0 <extInt_Config+0x904>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d106      	bne.n	800305a <extInt_Config+0x7ae>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PC);
 800304c:	4b57      	ldr	r3, [pc, #348]	; (80031ac <extInt_Config+0x900>)
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	4a56      	ldr	r2, [pc, #344]	; (80031ac <extInt_Config+0x900>)
 8003052:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003056:	6113      	str	r3, [r2, #16]
 8003058:	e027      	b.n	80030aa <extInt_Config+0x7fe>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a54      	ldr	r2, [pc, #336]	; (80031b4 <extInt_Config+0x908>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d106      	bne.n	8003074 <extInt_Config+0x7c8>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PD);
 8003066:	4b51      	ldr	r3, [pc, #324]	; (80031ac <extInt_Config+0x900>)
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	4a50      	ldr	r2, [pc, #320]	; (80031ac <extInt_Config+0x900>)
 800306c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003070:	6113      	str	r3, [r2, #16]
 8003072:	e01a      	b.n	80030aa <extInt_Config+0x7fe>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a4f      	ldr	r2, [pc, #316]	; (80031b8 <extInt_Config+0x90c>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d106      	bne.n	800308e <extInt_Config+0x7e2>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PE);
 8003080:	4b4a      	ldr	r3, [pc, #296]	; (80031ac <extInt_Config+0x900>)
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	4a49      	ldr	r2, [pc, #292]	; (80031ac <extInt_Config+0x900>)
 8003086:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800308a:	6113      	str	r3, [r2, #16]
 800308c:	e00d      	b.n	80030aa <extInt_Config+0x7fe>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a49      	ldr	r2, [pc, #292]	; (80031bc <extInt_Config+0x910>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d106      	bne.n	80030a8 <extInt_Config+0x7fc>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PH);
 800309a:	4b44      	ldr	r3, [pc, #272]	; (80031ac <extInt_Config+0x900>)
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	4a43      	ldr	r2, [pc, #268]	; (80031ac <extInt_Config+0x900>)
 80030a0:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80030a4:	6113      	str	r3, [r2, #16]
 80030a6:	e000      	b.n	80030aa <extInt_Config+0x7fe>

		} else {
			__NOP();
 80030a8:	bf00      	nop
	}

	case 11: {
		/* SYSCFG_EXTICR3 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI11_Pos);
 80030aa:	4b40      	ldr	r3, [pc, #256]	; (80031ac <extInt_Config+0x900>)
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	4a3f      	ldr	r2, [pc, #252]	; (80031ac <extInt_Config+0x900>)
 80030b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80030b4:	6113      	str	r3, [r2, #16]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a40      	ldr	r2, [pc, #256]	; (80031c0 <extInt_Config+0x914>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d104      	bne.n	80030cc <extInt_Config+0x820>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PA);
 80030c2:	4b3a      	ldr	r3, [pc, #232]	; (80031ac <extInt_Config+0x900>)
 80030c4:	4a39      	ldr	r2, [pc, #228]	; (80031ac <extInt_Config+0x900>)
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	6113      	str	r3, [r2, #16]
 80030ca:	e041      	b.n	8003150 <extInt_Config+0x8a4>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a35      	ldr	r2, [pc, #212]	; (80031a8 <extInt_Config+0x8fc>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d106      	bne.n	80030e6 <extInt_Config+0x83a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PB);
 80030d8:	4b34      	ldr	r3, [pc, #208]	; (80031ac <extInt_Config+0x900>)
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	4a33      	ldr	r2, [pc, #204]	; (80031ac <extInt_Config+0x900>)
 80030de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80030e2:	6113      	str	r3, [r2, #16]
 80030e4:	e034      	b.n	8003150 <extInt_Config+0x8a4>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a30      	ldr	r2, [pc, #192]	; (80031b0 <extInt_Config+0x904>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d106      	bne.n	8003100 <extInt_Config+0x854>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PC);
 80030f2:	4b2e      	ldr	r3, [pc, #184]	; (80031ac <extInt_Config+0x900>)
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	4a2d      	ldr	r2, [pc, #180]	; (80031ac <extInt_Config+0x900>)
 80030f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80030fc:	6113      	str	r3, [r2, #16]
 80030fe:	e027      	b.n	8003150 <extInt_Config+0x8a4>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a2b      	ldr	r2, [pc, #172]	; (80031b4 <extInt_Config+0x908>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d106      	bne.n	800311a <extInt_Config+0x86e>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PD);
 800310c:	4b27      	ldr	r3, [pc, #156]	; (80031ac <extInt_Config+0x900>)
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	4a26      	ldr	r2, [pc, #152]	; (80031ac <extInt_Config+0x900>)
 8003112:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8003116:	6113      	str	r3, [r2, #16]
 8003118:	e01a      	b.n	8003150 <extInt_Config+0x8a4>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a25      	ldr	r2, [pc, #148]	; (80031b8 <extInt_Config+0x90c>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d106      	bne.n	8003134 <extInt_Config+0x888>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PE);
 8003126:	4b21      	ldr	r3, [pc, #132]	; (80031ac <extInt_Config+0x900>)
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	4a20      	ldr	r2, [pc, #128]	; (80031ac <extInt_Config+0x900>)
 800312c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003130:	6113      	str	r3, [r2, #16]
 8003132:	e00d      	b.n	8003150 <extInt_Config+0x8a4>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a20      	ldr	r2, [pc, #128]	; (80031bc <extInt_Config+0x910>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d106      	bne.n	800314e <extInt_Config+0x8a2>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PH);
 8003140:	4b1a      	ldr	r3, [pc, #104]	; (80031ac <extInt_Config+0x900>)
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	4a19      	ldr	r2, [pc, #100]	; (80031ac <extInt_Config+0x900>)
 8003146:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800314a:	6113      	str	r3, [r2, #16]
 800314c:	e000      	b.n	8003150 <extInt_Config+0x8a4>

		} else {
			__NOP();
 800314e:	bf00      	nop
		}
	}
	case 12: {
		/* SYSCFG_EXTICR4 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI12_Pos);
 8003150:	4b16      	ldr	r3, [pc, #88]	; (80031ac <extInt_Config+0x900>)
 8003152:	695b      	ldr	r3, [r3, #20]
 8003154:	4a15      	ldr	r2, [pc, #84]	; (80031ac <extInt_Config+0x900>)
 8003156:	f023 030f 	bic.w	r3, r3, #15
 800315a:	6153      	str	r3, [r2, #20]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a17      	ldr	r2, [pc, #92]	; (80031c0 <extInt_Config+0x914>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d104      	bne.n	8003172 <extInt_Config+0x8c6>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PA);
 8003168:	4b10      	ldr	r3, [pc, #64]	; (80031ac <extInt_Config+0x900>)
 800316a:	4a10      	ldr	r2, [pc, #64]	; (80031ac <extInt_Config+0x900>)
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	6153      	str	r3, [r2, #20]
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PH);

		} else {
			__NOP();
		}
		break;
 8003170:	e15e      	b.n	8003430 <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a0b      	ldr	r2, [pc, #44]	; (80031a8 <extInt_Config+0x8fc>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d106      	bne.n	800318c <extInt_Config+0x8e0>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PB);
 800317e:	4b0b      	ldr	r3, [pc, #44]	; (80031ac <extInt_Config+0x900>)
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	4a0a      	ldr	r2, [pc, #40]	; (80031ac <extInt_Config+0x900>)
 8003184:	f043 0301 	orr.w	r3, r3, #1
 8003188:	6153      	str	r3, [r2, #20]
		break;
 800318a:	e151      	b.n	8003430 <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a07      	ldr	r2, [pc, #28]	; (80031b0 <extInt_Config+0x904>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d115      	bne.n	80031c4 <extInt_Config+0x918>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PC);
 8003198:	4b04      	ldr	r3, [pc, #16]	; (80031ac <extInt_Config+0x900>)
 800319a:	695b      	ldr	r3, [r3, #20]
 800319c:	4a03      	ldr	r2, [pc, #12]	; (80031ac <extInt_Config+0x900>)
 800319e:	f043 0302 	orr.w	r3, r3, #2
 80031a2:	6153      	str	r3, [r2, #20]
		break;
 80031a4:	e144      	b.n	8003430 <extInt_Config+0xb84>
 80031a6:	bf00      	nop
 80031a8:	40020400 	.word	0x40020400
 80031ac:	40013800 	.word	0x40013800
 80031b0:	40020800 	.word	0x40020800
 80031b4:	40020c00 	.word	0x40020c00
 80031b8:	40021000 	.word	0x40021000
 80031bc:	40021c00 	.word	0x40021c00
 80031c0:	40020000 	.word	0x40020000
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a83      	ldr	r2, [pc, #524]	; (80033d8 <extInt_Config+0xb2c>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d106      	bne.n	80031de <extInt_Config+0x932>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PD);
 80031d0:	4b82      	ldr	r3, [pc, #520]	; (80033dc <extInt_Config+0xb30>)
 80031d2:	695b      	ldr	r3, [r3, #20]
 80031d4:	4a81      	ldr	r2, [pc, #516]	; (80033dc <extInt_Config+0xb30>)
 80031d6:	f043 0303 	orr.w	r3, r3, #3
 80031da:	6153      	str	r3, [r2, #20]
		break;
 80031dc:	e128      	b.n	8003430 <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a7e      	ldr	r2, [pc, #504]	; (80033e0 <extInt_Config+0xb34>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d106      	bne.n	80031f8 <extInt_Config+0x94c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PE);
 80031ea:	4b7c      	ldr	r3, [pc, #496]	; (80033dc <extInt_Config+0xb30>)
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	4a7b      	ldr	r2, [pc, #492]	; (80033dc <extInt_Config+0xb30>)
 80031f0:	f043 0304 	orr.w	r3, r3, #4
 80031f4:	6153      	str	r3, [r2, #20]
		break;
 80031f6:	e11b      	b.n	8003430 <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a79      	ldr	r2, [pc, #484]	; (80033e4 <extInt_Config+0xb38>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d106      	bne.n	8003212 <extInt_Config+0x966>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PH);
 8003204:	4b75      	ldr	r3, [pc, #468]	; (80033dc <extInt_Config+0xb30>)
 8003206:	695b      	ldr	r3, [r3, #20]
 8003208:	4a74      	ldr	r2, [pc, #464]	; (80033dc <extInt_Config+0xb30>)
 800320a:	f043 0307 	orr.w	r3, r3, #7
 800320e:	6153      	str	r3, [r2, #20]
		break;
 8003210:	e10e      	b.n	8003430 <extInt_Config+0xb84>
			__NOP();
 8003212:	bf00      	nop
		break;
 8003214:	e10c      	b.n	8003430 <extInt_Config+0xb84>
	}
	case 13: {
		/* SYSCFG_EXTICR4 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI13_Pos);
 8003216:	4b71      	ldr	r3, [pc, #452]	; (80033dc <extInt_Config+0xb30>)
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	4a70      	ldr	r2, [pc, #448]	; (80033dc <extInt_Config+0xb30>)
 800321c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003220:	6153      	str	r3, [r2, #20]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a6f      	ldr	r2, [pc, #444]	; (80033e8 <extInt_Config+0xb3c>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d104      	bne.n	8003238 <extInt_Config+0x98c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PA);
 800322e:	4b6b      	ldr	r3, [pc, #428]	; (80033dc <extInt_Config+0xb30>)
 8003230:	4a6a      	ldr	r2, [pc, #424]	; (80033dc <extInt_Config+0xb30>)
 8003232:	695b      	ldr	r3, [r3, #20]
 8003234:	6153      	str	r3, [r2, #20]
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PH);

		} else {
			__NOP();
		}
		break;
 8003236:	e0fb      	b.n	8003430 <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a6b      	ldr	r2, [pc, #428]	; (80033ec <extInt_Config+0xb40>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d106      	bne.n	8003252 <extInt_Config+0x9a6>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PB);
 8003244:	4b65      	ldr	r3, [pc, #404]	; (80033dc <extInt_Config+0xb30>)
 8003246:	695b      	ldr	r3, [r3, #20]
 8003248:	4a64      	ldr	r2, [pc, #400]	; (80033dc <extInt_Config+0xb30>)
 800324a:	f043 0310 	orr.w	r3, r3, #16
 800324e:	6153      	str	r3, [r2, #20]
		break;
 8003250:	e0ee      	b.n	8003430 <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a65      	ldr	r2, [pc, #404]	; (80033f0 <extInt_Config+0xb44>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d106      	bne.n	800326c <extInt_Config+0x9c0>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PC);
 800325e:	4b5f      	ldr	r3, [pc, #380]	; (80033dc <extInt_Config+0xb30>)
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	4a5e      	ldr	r2, [pc, #376]	; (80033dc <extInt_Config+0xb30>)
 8003264:	f043 0320 	orr.w	r3, r3, #32
 8003268:	6153      	str	r3, [r2, #20]
		break;
 800326a:	e0e1      	b.n	8003430 <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a59      	ldr	r2, [pc, #356]	; (80033d8 <extInt_Config+0xb2c>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d106      	bne.n	8003286 <extInt_Config+0x9da>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PD);
 8003278:	4b58      	ldr	r3, [pc, #352]	; (80033dc <extInt_Config+0xb30>)
 800327a:	695b      	ldr	r3, [r3, #20]
 800327c:	4a57      	ldr	r2, [pc, #348]	; (80033dc <extInt_Config+0xb30>)
 800327e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003282:	6153      	str	r3, [r2, #20]
		break;
 8003284:	e0d4      	b.n	8003430 <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a54      	ldr	r2, [pc, #336]	; (80033e0 <extInt_Config+0xb34>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d106      	bne.n	80032a0 <extInt_Config+0x9f4>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PE);
 8003292:	4b52      	ldr	r3, [pc, #328]	; (80033dc <extInt_Config+0xb30>)
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	4a51      	ldr	r2, [pc, #324]	; (80033dc <extInt_Config+0xb30>)
 8003298:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800329c:	6153      	str	r3, [r2, #20]
		break;
 800329e:	e0c7      	b.n	8003430 <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a4f      	ldr	r2, [pc, #316]	; (80033e4 <extInt_Config+0xb38>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d106      	bne.n	80032ba <extInt_Config+0xa0e>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PH);
 80032ac:	4b4b      	ldr	r3, [pc, #300]	; (80033dc <extInt_Config+0xb30>)
 80032ae:	695b      	ldr	r3, [r3, #20]
 80032b0:	4a4a      	ldr	r2, [pc, #296]	; (80033dc <extInt_Config+0xb30>)
 80032b2:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80032b6:	6153      	str	r3, [r2, #20]
		break;
 80032b8:	e0ba      	b.n	8003430 <extInt_Config+0xb84>
			__NOP();
 80032ba:	bf00      	nop
		break;
 80032bc:	e0b8      	b.n	8003430 <extInt_Config+0xb84>
	}

	case 14: {
		/* SYSCFG_EXTICR4 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI14_Pos);
 80032be:	4b47      	ldr	r3, [pc, #284]	; (80033dc <extInt_Config+0xb30>)
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	4a46      	ldr	r2, [pc, #280]	; (80033dc <extInt_Config+0xb30>)
 80032c4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80032c8:	6153      	str	r3, [r2, #20]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a45      	ldr	r2, [pc, #276]	; (80033e8 <extInt_Config+0xb3c>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d104      	bne.n	80032e0 <extInt_Config+0xa34>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PA);
 80032d6:	4b41      	ldr	r3, [pc, #260]	; (80033dc <extInt_Config+0xb30>)
 80032d8:	4a40      	ldr	r2, [pc, #256]	; (80033dc <extInt_Config+0xb30>)
 80032da:	695b      	ldr	r3, [r3, #20]
 80032dc:	6153      	str	r3, [r2, #20]
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PH);

		} else {
			__NOP();
		}
		break;
 80032de:	e0a7      	b.n	8003430 <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a41      	ldr	r2, [pc, #260]	; (80033ec <extInt_Config+0xb40>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d106      	bne.n	80032fa <extInt_Config+0xa4e>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PB);
 80032ec:	4b3b      	ldr	r3, [pc, #236]	; (80033dc <extInt_Config+0xb30>)
 80032ee:	695b      	ldr	r3, [r3, #20]
 80032f0:	4a3a      	ldr	r2, [pc, #232]	; (80033dc <extInt_Config+0xb30>)
 80032f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032f6:	6153      	str	r3, [r2, #20]
		break;
 80032f8:	e09a      	b.n	8003430 <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a3b      	ldr	r2, [pc, #236]	; (80033f0 <extInt_Config+0xb44>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d106      	bne.n	8003314 <extInt_Config+0xa68>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PC);
 8003306:	4b35      	ldr	r3, [pc, #212]	; (80033dc <extInt_Config+0xb30>)
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	4a34      	ldr	r2, [pc, #208]	; (80033dc <extInt_Config+0xb30>)
 800330c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003310:	6153      	str	r3, [r2, #20]
		break;
 8003312:	e08d      	b.n	8003430 <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a2f      	ldr	r2, [pc, #188]	; (80033d8 <extInt_Config+0xb2c>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d106      	bne.n	800332e <extInt_Config+0xa82>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PD);
 8003320:	4b2e      	ldr	r3, [pc, #184]	; (80033dc <extInt_Config+0xb30>)
 8003322:	695b      	ldr	r3, [r3, #20]
 8003324:	4a2d      	ldr	r2, [pc, #180]	; (80033dc <extInt_Config+0xb30>)
 8003326:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800332a:	6153      	str	r3, [r2, #20]
		break;
 800332c:	e080      	b.n	8003430 <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a2a      	ldr	r2, [pc, #168]	; (80033e0 <extInt_Config+0xb34>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d106      	bne.n	8003348 <extInt_Config+0xa9c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PE);
 800333a:	4b28      	ldr	r3, [pc, #160]	; (80033dc <extInt_Config+0xb30>)
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	4a27      	ldr	r2, [pc, #156]	; (80033dc <extInt_Config+0xb30>)
 8003340:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003344:	6153      	str	r3, [r2, #20]
		break;
 8003346:	e073      	b.n	8003430 <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a25      	ldr	r2, [pc, #148]	; (80033e4 <extInt_Config+0xb38>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d106      	bne.n	8003362 <extInt_Config+0xab6>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PH);
 8003354:	4b21      	ldr	r3, [pc, #132]	; (80033dc <extInt_Config+0xb30>)
 8003356:	695b      	ldr	r3, [r3, #20]
 8003358:	4a20      	ldr	r2, [pc, #128]	; (80033dc <extInt_Config+0xb30>)
 800335a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800335e:	6153      	str	r3, [r2, #20]
		break;
 8003360:	e066      	b.n	8003430 <extInt_Config+0xb84>
			__NOP();
 8003362:	bf00      	nop
		break;
 8003364:	e064      	b.n	8003430 <extInt_Config+0xb84>

	/* Configurando para el todos los pines GPIOX_15 */
	case 15: {
		/* SYSCFG_EXTICR4 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI15_Pos);
 8003366:	4b1d      	ldr	r3, [pc, #116]	; (80033dc <extInt_Config+0xb30>)
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	4a1c      	ldr	r2, [pc, #112]	; (80033dc <extInt_Config+0xb30>)
 800336c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003370:	6153      	str	r3, [r2, #20]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a1b      	ldr	r2, [pc, #108]	; (80033e8 <extInt_Config+0xb3c>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d104      	bne.n	8003388 <extInt_Config+0xadc>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PA);
 800337e:	4b17      	ldr	r3, [pc, #92]	; (80033dc <extInt_Config+0xb30>)
 8003380:	4a16      	ldr	r2, [pc, #88]	; (80033dc <extInt_Config+0xb30>)
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	6153      	str	r3, [r2, #20]
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);

		} else {
			__NOP();
		}
		break;
 8003386:	e053      	b.n	8003430 <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a17      	ldr	r2, [pc, #92]	; (80033ec <extInt_Config+0xb40>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d106      	bne.n	80033a2 <extInt_Config+0xaf6>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PB);
 8003394:	4b11      	ldr	r3, [pc, #68]	; (80033dc <extInt_Config+0xb30>)
 8003396:	695b      	ldr	r3, [r3, #20]
 8003398:	4a10      	ldr	r2, [pc, #64]	; (80033dc <extInt_Config+0xb30>)
 800339a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800339e:	6153      	str	r3, [r2, #20]
		break;
 80033a0:	e046      	b.n	8003430 <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a11      	ldr	r2, [pc, #68]	; (80033f0 <extInt_Config+0xb44>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d106      	bne.n	80033bc <extInt_Config+0xb10>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PC);
 80033ae:	4b0b      	ldr	r3, [pc, #44]	; (80033dc <extInt_Config+0xb30>)
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	4a0a      	ldr	r2, [pc, #40]	; (80033dc <extInt_Config+0xb30>)
 80033b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80033b8:	6153      	str	r3, [r2, #20]
		break;
 80033ba:	e039      	b.n	8003430 <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a05      	ldr	r2, [pc, #20]	; (80033d8 <extInt_Config+0xb2c>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d115      	bne.n	80033f4 <extInt_Config+0xb48>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PD);
 80033c8:	4b04      	ldr	r3, [pc, #16]	; (80033dc <extInt_Config+0xb30>)
 80033ca:	695b      	ldr	r3, [r3, #20]
 80033cc:	4a03      	ldr	r2, [pc, #12]	; (80033dc <extInt_Config+0xb30>)
 80033ce:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80033d2:	6153      	str	r3, [r2, #20]
		break;
 80033d4:	e02c      	b.n	8003430 <extInt_Config+0xb84>
 80033d6:	bf00      	nop
 80033d8:	40020c00 	.word	0x40020c00
 80033dc:	40013800 	.word	0x40013800
 80033e0:	40021000 	.word	0x40021000
 80033e4:	40021c00 	.word	0x40021c00
 80033e8:	40020000 	.word	0x40020000
 80033ec:	40020400 	.word	0x40020400
 80033f0:	40020800 	.word	0x40020800
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a67      	ldr	r2, [pc, #412]	; (8003598 <extInt_Config+0xcec>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d106      	bne.n	800340e <extInt_Config+0xb62>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PE);
 8003400:	4b66      	ldr	r3, [pc, #408]	; (800359c <extInt_Config+0xcf0>)
 8003402:	695b      	ldr	r3, [r3, #20]
 8003404:	4a65      	ldr	r2, [pc, #404]	; (800359c <extInt_Config+0xcf0>)
 8003406:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800340a:	6153      	str	r3, [r2, #20]
		break;
 800340c:	e010      	b.n	8003430 <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a62      	ldr	r2, [pc, #392]	; (80035a0 <extInt_Config+0xcf4>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d106      	bne.n	8003428 <extInt_Config+0xb7c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);
 800341a:	4b60      	ldr	r3, [pc, #384]	; (800359c <extInt_Config+0xcf0>)
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	4a5f      	ldr	r2, [pc, #380]	; (800359c <extInt_Config+0xcf0>)
 8003420:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8003424:	6153      	str	r3, [r2, #20]
		break;
 8003426:	e003      	b.n	8003430 <extInt_Config+0xb84>
			__NOP();
 8003428:	bf00      	nop
		break;
 800342a:	e001      	b.n	8003430 <extInt_Config+0xb84>
	}

	default: {
		__NOP();
 800342c:	bf00      	nop
		break;
 800342e:	bf00      	nop
	}

	}// Fin del switch-case

	/* 4.0 Seleccionamos el tipo de flanco */
	EXTI -> FTSR &= ~(0b1 << extiConfig->pGPIOHandler->GPIO_PinConfig_t.GPIO_PinNumber);
 8003430:	4b5c      	ldr	r3, [pc, #368]	; (80035a4 <extInt_Config+0xcf8>)
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	6812      	ldr	r2, [r2, #0]
 8003438:	7912      	ldrb	r2, [r2, #4]
 800343a:	4611      	mov	r1, r2
 800343c:	2201      	movs	r2, #1
 800343e:	408a      	lsls	r2, r1
 8003440:	43d2      	mvns	r2, r2
 8003442:	4611      	mov	r1, r2
 8003444:	4a57      	ldr	r2, [pc, #348]	; (80035a4 <extInt_Config+0xcf8>)
 8003446:	400b      	ands	r3, r1
 8003448:	60d3      	str	r3, [r2, #12]
	EXTI -> RTSR &= ~(0b1 << extiConfig->pGPIOHandler->GPIO_PinConfig_t.GPIO_PinNumber);
 800344a:	4b56      	ldr	r3, [pc, #344]	; (80035a4 <extInt_Config+0xcf8>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	6812      	ldr	r2, [r2, #0]
 8003452:	7912      	ldrb	r2, [r2, #4]
 8003454:	4611      	mov	r1, r2
 8003456:	2201      	movs	r2, #1
 8003458:	408a      	lsls	r2, r1
 800345a:	43d2      	mvns	r2, r2
 800345c:	4611      	mov	r1, r2
 800345e:	4a51      	ldr	r2, [pc, #324]	; (80035a4 <extInt_Config+0xcf8>)
 8003460:	400b      	ands	r3, r1
 8003462:	6093      	str	r3, [r2, #8]
	/* Falling Trigger selection register*/
    EXTI -> FTSR |= (~extiConfig->edgeType << extiConfig->pGPIOHandler->GPIO_PinConfig_t.GPIO_PinNumber);
 8003464:	4b4f      	ldr	r3, [pc, #316]	; (80035a4 <extInt_Config+0xcf8>)
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	7912      	ldrb	r2, [r2, #4]
 800346c:	43d2      	mvns	r2, r2
 800346e:	6879      	ldr	r1, [r7, #4]
 8003470:	6809      	ldr	r1, [r1, #0]
 8003472:	7909      	ldrb	r1, [r1, #4]
 8003474:	408a      	lsls	r2, r1
 8003476:	4611      	mov	r1, r2
 8003478:	4a4a      	ldr	r2, [pc, #296]	; (80035a4 <extInt_Config+0xcf8>)
 800347a:	430b      	orrs	r3, r1
 800347c:	60d3      	str	r3, [r2, #12]
	EXTI -> RTSR |= (extiConfig->edgeType << extiConfig->pGPIOHandler->GPIO_PinConfig_t.GPIO_PinNumber);
 800347e:	4b49      	ldr	r3, [pc, #292]	; (80035a4 <extInt_Config+0xcf8>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	7912      	ldrb	r2, [r2, #4]
 8003486:	4611      	mov	r1, r2
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	6812      	ldr	r2, [r2, #0]
 800348c:	7912      	ldrb	r2, [r2, #4]
 800348e:	fa01 f202 	lsl.w	r2, r1, r2
 8003492:	4611      	mov	r1, r2
 8003494:	4a43      	ldr	r2, [pc, #268]	; (80035a4 <extInt_Config+0xcf8>)
 8003496:	430b      	orrs	r3, r1
 8003498:	6093      	str	r3, [r2, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 800349a:	b672      	cpsid	i
}
 800349c:	bf00      	nop
	__disable_irq();

	/* 6.0 Activamos la interrupción del canal que estamos configurando */
	// Interrupt Mask register
	/*Agregue su código acá*/
	EXTI -> IMR |= (0b1 << extiConfig->pGPIOHandler->GPIO_PinConfig_t.GPIO_PinNumber); //Activamos la interrupcion EXTI_X
 800349e:	4b41      	ldr	r3, [pc, #260]	; (80035a4 <extInt_Config+0xcf8>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	6812      	ldr	r2, [r2, #0]
 80034a6:	7912      	ldrb	r2, [r2, #4]
 80034a8:	4611      	mov	r1, r2
 80034aa:	2201      	movs	r2, #1
 80034ac:	408a      	lsls	r2, r1
 80034ae:	4611      	mov	r1, r2
 80034b0:	4a3c      	ldr	r2, [pc, #240]	; (80035a4 <extInt_Config+0xcf8>)
 80034b2:	430b      	orrs	r3, r1
 80034b4:	6013      	str	r3, [r2, #0]
	/* 6.1 Matriculamos la interrupción en el NVIC para el canal correspondiente,
	 * donde el canal 0 corresponde al EXTI_0, canal 1 al EXTI_1, etc.
	 *
	 * NOTA: Observar que algunos canales EXTI comparten un mismo vector de interrupción
	 * */
	switch (extiConfig->pGPIOHandler->GPIO_PinConfig_t.GPIO_PinNumber) {
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	791b      	ldrb	r3, [r3, #4]
 80034bc:	2b0f      	cmp	r3, #15
 80034be:	d863      	bhi.n	8003588 <extInt_Config+0xcdc>
 80034c0:	a201      	add	r2, pc, #4	; (adr r2, 80034c8 <extInt_Config+0xc1c>)
 80034c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c6:	bf00      	nop
 80034c8:	08003509 	.word	0x08003509
 80034cc:	08003511 	.word	0x08003511
 80034d0:	08003519 	.word	0x08003519
 80034d4:	08003521 	.word	0x08003521
 80034d8:	08003529 	.word	0x08003529
 80034dc:	08003531 	.word	0x08003531
 80034e0:	08003539 	.word	0x08003539
 80034e4:	08003541 	.word	0x08003541
 80034e8:	08003549 	.word	0x08003549
 80034ec:	08003551 	.word	0x08003551
 80034f0:	08003559 	.word	0x08003559
 80034f4:	08003561 	.word	0x08003561
 80034f8:	08003569 	.word	0x08003569
 80034fc:	08003571 	.word	0x08003571
 8003500:	08003579 	.word	0x08003579
 8003504:	08003581 	.word	0x08003581
	case 0: {
		__NVIC_EnableIRQ(EXTI0_IRQn);
 8003508:	2006      	movs	r0, #6
 800350a:	f7ff f9b1 	bl	8002870 <__NVIC_EnableIRQ>
		break;
 800350e:	e03c      	b.n	800358a <extInt_Config+0xcde>
	}

	case 1: {
		__NVIC_EnableIRQ(EXTI1_IRQn);
 8003510:	2007      	movs	r0, #7
 8003512:	f7ff f9ad 	bl	8002870 <__NVIC_EnableIRQ>
		break;
 8003516:	e038      	b.n	800358a <extInt_Config+0xcde>
	}
	case 2: {
		__NVIC_EnableIRQ(EXTI2_IRQn);
 8003518:	2008      	movs	r0, #8
 800351a:	f7ff f9a9 	bl	8002870 <__NVIC_EnableIRQ>
		break;
 800351e:	e034      	b.n	800358a <extInt_Config+0xcde>
	}
	case 3: {
		__NVIC_EnableIRQ(EXTI3_IRQn);
 8003520:	2009      	movs	r0, #9
 8003522:	f7ff f9a5 	bl	8002870 <__NVIC_EnableIRQ>
		break;
 8003526:	e030      	b.n	800358a <extInt_Config+0xcde>
	}
	case 4: {
		__NVIC_EnableIRQ(EXTI4_IRQn);
 8003528:	200a      	movs	r0, #10
 800352a:	f7ff f9a1 	bl	8002870 <__NVIC_EnableIRQ>
		break;
 800352e:	e02c      	b.n	800358a <extInt_Config+0xcde>
	}
	case 5: {
		__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003530:	2017      	movs	r0, #23
 8003532:	f7ff f99d 	bl	8002870 <__NVIC_EnableIRQ>
		break;
 8003536:	e028      	b.n	800358a <extInt_Config+0xcde>
	}
	case 6: {
		__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003538:	2017      	movs	r0, #23
 800353a:	f7ff f999 	bl	8002870 <__NVIC_EnableIRQ>
		break;
 800353e:	e024      	b.n	800358a <extInt_Config+0xcde>
	}
	case 7: {
		__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003540:	2017      	movs	r0, #23
 8003542:	f7ff f995 	bl	8002870 <__NVIC_EnableIRQ>
		break;
 8003546:	e020      	b.n	800358a <extInt_Config+0xcde>
	}
	case 8: {
		__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003548:	2017      	movs	r0, #23
 800354a:	f7ff f991 	bl	8002870 <__NVIC_EnableIRQ>
		break;
 800354e:	e01c      	b.n	800358a <extInt_Config+0xcde>
	}
	case 9: {
		__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003550:	2017      	movs	r0, #23
 8003552:	f7ff f98d 	bl	8002870 <__NVIC_EnableIRQ>
		break;
 8003556:	e018      	b.n	800358a <extInt_Config+0xcde>
	}
	case 10: {
		__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003558:	2028      	movs	r0, #40	; 0x28
 800355a:	f7ff f989 	bl	8002870 <__NVIC_EnableIRQ>
		break;
 800355e:	e014      	b.n	800358a <extInt_Config+0xcde>
	}
	case 11: {
		__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003560:	2028      	movs	r0, #40	; 0x28
 8003562:	f7ff f985 	bl	8002870 <__NVIC_EnableIRQ>
		break;
 8003566:	e010      	b.n	800358a <extInt_Config+0xcde>
	}
	case 12: {
		__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003568:	2028      	movs	r0, #40	; 0x28
 800356a:	f7ff f981 	bl	8002870 <__NVIC_EnableIRQ>
		break;
 800356e:	e00c      	b.n	800358a <extInt_Config+0xcde>
	}
	case 13: {
		__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003570:	2028      	movs	r0, #40	; 0x28
 8003572:	f7ff f97d 	bl	8002870 <__NVIC_EnableIRQ>
		break;
 8003576:	e008      	b.n	800358a <extInt_Config+0xcde>
	}
	case 14: {
		__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003578:	2028      	movs	r0, #40	; 0x28
 800357a:	f7ff f979 	bl	8002870 <__NVIC_EnableIRQ>
		break;
 800357e:	e004      	b.n	800358a <extInt_Config+0xcde>
     * ..... 
     * y así hasta el ultimo caso */

	case 15: {
		/*Agregue su código acá*/
		__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003580:	2028      	movs	r0, #40	; 0x28
 8003582:	f7ff f975 	bl	8002870 <__NVIC_EnableIRQ>
		break;
 8003586:	e000      	b.n	800358a <extInt_Config+0xcde>
	}

	default: {
		break;
 8003588:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 800358a:	b662      	cpsie	i
}
 800358c:	bf00      	nop

	}

	/* 7.0 Volvemos a activar las interrupciones globales */
	__enable_irq();
}
 800358e:	bf00      	nop
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	40021000 	.word	0x40021000
 800359c:	40013800 	.word	0x40013800
 80035a0:	40021c00 	.word	0x40021c00
 80035a4:	40013c00 	.word	0x40013c00

080035a8 <callback_extInt2>:
	__NOP();
}
__attribute__ ((weak)) void callback_extInt1(void){
	__NOP();
}
__attribute__ ((weak)) void callback_extInt2(void){
 80035a8:	b480      	push	{r7}
 80035aa:	af00      	add	r7, sp, #0
	__NOP();
 80035ac:	bf00      	nop
}
 80035ae:	bf00      	nop
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <callback_extInt4>:
__attribute__ ((weak)) void callback_extInt3(void){
	__NOP();
}
__attribute__ ((weak)) void callback_extInt4(void){
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
	__NOP();
 80035bc:	bf00      	nop
}
 80035be:	bf00      	nop
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <callback_extInt5>:
__attribute__ ((weak)) void callback_extInt5(void){
 80035c8:	b480      	push	{r7}
 80035ca:	af00      	add	r7, sp, #0
	__NOP();
 80035cc:	bf00      	nop
}
 80035ce:	bf00      	nop
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <callback_extInt6>:
__attribute__ ((weak)) void callback_extInt6(void){
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0
	__NOP();
 80035dc:	bf00      	nop
}
 80035de:	bf00      	nop
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <callback_extInt8>:
__attribute__ ((weak)) void callback_extInt7(void){
	__NOP();
}
__attribute__ ((weak)) void callback_extInt8(void){
 80035e8:	b480      	push	{r7}
 80035ea:	af00      	add	r7, sp, #0
	__NOP();
 80035ec:	bf00      	nop
}
 80035ee:	bf00      	nop
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <callback_extInt9>:
__attribute__ ((weak)) void callback_extInt9(void){
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0
	__NOP();
 80035fc:	bf00      	nop
}
 80035fe:	bf00      	nop
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <callback_extInt10>:
__attribute__ ((weak)) void callback_extInt10(void){
 8003608:	b480      	push	{r7}
 800360a:	af00      	add	r7, sp, #0
	__NOP();
 800360c:	bf00      	nop
}
 800360e:	bf00      	nop
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <callback_extInt11>:
__attribute__ ((weak)) void callback_extInt11(void){
 8003618:	b480      	push	{r7}
 800361a:	af00      	add	r7, sp, #0
	__NOP();
 800361c:	bf00      	nop
}
 800361e:	bf00      	nop
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <callback_extInt12>:
__attribute__ ((weak)) void callback_extInt12(void){
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0
	__NOP();
 800362c:	bf00      	nop
}
 800362e:	bf00      	nop
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <callback_extInt13>:
__attribute__ ((weak)) void callback_extInt13(void){
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
	__NOP();
 800363c:	bf00      	nop
}
 800363e:	bf00      	nop
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <callback_extInt14>:
__attribute__ ((weak)) void callback_extInt14(void){
 8003648:	b480      	push	{r7}
 800364a:	af00      	add	r7, sp, #0
	__NOP();
 800364c:	bf00      	nop
}
 800364e:	bf00      	nop
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <callback_extInt15>:
__attribute__ ((weak)) void callback_extInt15(void){
 8003658:	b480      	push	{r7}
 800365a:	af00      	add	r7, sp, #0
	__NOP();
 800365c:	bf00      	nop
}
 800365e:	bf00      	nop
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <EXTI0_IRQHandler>:
 */



/* ISR de la interrupción canal 0*/
void EXTI0_IRQHandler(void){
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR0){
 800366c:	4b07      	ldr	r3, [pc, #28]	; (800368c <EXTI0_IRQHandler+0x24>)
 800366e:	695b      	ldr	r3, [r3, #20]
 8003670:	f003 0301 	and.w	r3, r3, #1
 8003674:	2b00      	cmp	r3, #0
 8003676:	d007      	beq.n	8003688 <EXTI0_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR0;
 8003678:	4b04      	ldr	r3, [pc, #16]	; (800368c <EXTI0_IRQHandler+0x24>)
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	4a03      	ldr	r2, [pc, #12]	; (800368c <EXTI0_IRQHandler+0x24>)
 800367e:	f043 0301 	orr.w	r3, r3, #1
 8003682:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt0();
 8003684:	f7fe fb04 	bl	8001c90 <callback_extInt0>
	}
}
 8003688:	bf00      	nop
 800368a:	bd80      	pop	{r7, pc}
 800368c:	40013c00 	.word	0x40013c00

08003690 <EXTI1_IRQHandler>:

/* Agregue las demas IRQs de las interrupciones EXTI independientes ... 
 * Por favor recuerde que debe agregar el bloque if para verificar que 
 * en efecto esa es la interrupcion que se está atendiendo.
 */
void EXTI1_IRQHandler(void){
 8003690:	b580      	push	{r7, lr}
 8003692:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR1){
 8003694:	4b07      	ldr	r3, [pc, #28]	; (80036b4 <EXTI1_IRQHandler+0x24>)
 8003696:	695b      	ldr	r3, [r3, #20]
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d007      	beq.n	80036b0 <EXTI1_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR1;
 80036a0:	4b04      	ldr	r3, [pc, #16]	; (80036b4 <EXTI1_IRQHandler+0x24>)
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	4a03      	ldr	r2, [pc, #12]	; (80036b4 <EXTI1_IRQHandler+0x24>)
 80036a6:	f043 0302 	orr.w	r3, r3, #2
 80036aa:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt1();
 80036ac:	f7fe fb0c 	bl	8001cc8 <callback_extInt1>
	}
}
 80036b0:	bf00      	nop
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	40013c00 	.word	0x40013c00

080036b8 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void){
 80036b8:	b580      	push	{r7, lr}
 80036ba:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR2){
 80036bc:	4b07      	ldr	r3, [pc, #28]	; (80036dc <EXTI2_IRQHandler+0x24>)
 80036be:	695b      	ldr	r3, [r3, #20]
 80036c0:	f003 0304 	and.w	r3, r3, #4
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d007      	beq.n	80036d8 <EXTI2_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR2;
 80036c8:	4b04      	ldr	r3, [pc, #16]	; (80036dc <EXTI2_IRQHandler+0x24>)
 80036ca:	695b      	ldr	r3, [r3, #20]
 80036cc:	4a03      	ldr	r2, [pc, #12]	; (80036dc <EXTI2_IRQHandler+0x24>)
 80036ce:	f043 0304 	orr.w	r3, r3, #4
 80036d2:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt2();
 80036d4:	f7ff ff68 	bl	80035a8 <callback_extInt2>
	}
}
 80036d8:	bf00      	nop
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	40013c00 	.word	0x40013c00

080036e0 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void){
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR3){
 80036e4:	4b07      	ldr	r3, [pc, #28]	; (8003704 <EXTI3_IRQHandler+0x24>)
 80036e6:	695b      	ldr	r3, [r3, #20]
 80036e8:	f003 0308 	and.w	r3, r3, #8
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d007      	beq.n	8003700 <EXTI3_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR3;
 80036f0:	4b04      	ldr	r3, [pc, #16]	; (8003704 <EXTI3_IRQHandler+0x24>)
 80036f2:	695b      	ldr	r3, [r3, #20]
 80036f4:	4a03      	ldr	r2, [pc, #12]	; (8003704 <EXTI3_IRQHandler+0x24>)
 80036f6:	f043 0308 	orr.w	r3, r3, #8
 80036fa:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt3();
 80036fc:	f7fe fb90 	bl	8001e20 <callback_extInt3>
	}
}
 8003700:	bf00      	nop
 8003702:	bd80      	pop	{r7, pc}
 8003704:	40013c00 	.word	0x40013c00

08003708 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void){
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR4){
 800370c:	4b07      	ldr	r3, [pc, #28]	; (800372c <EXTI4_IRQHandler+0x24>)
 800370e:	695b      	ldr	r3, [r3, #20]
 8003710:	f003 0310 	and.w	r3, r3, #16
 8003714:	2b00      	cmp	r3, #0
 8003716:	d007      	beq.n	8003728 <EXTI4_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR4;
 8003718:	4b04      	ldr	r3, [pc, #16]	; (800372c <EXTI4_IRQHandler+0x24>)
 800371a:	695b      	ldr	r3, [r3, #20]
 800371c:	4a03      	ldr	r2, [pc, #12]	; (800372c <EXTI4_IRQHandler+0x24>)
 800371e:	f043 0310 	orr.w	r3, r3, #16
 8003722:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt4();
 8003724:	f7ff ff48 	bl	80035b8 <callback_extInt4>
	}
}
 8003728:	bf00      	nop
 800372a:	bd80      	pop	{r7, pc}
 800372c:	40013c00 	.word	0x40013c00

08003730 <EXTI9_5_IRQHandler>:
/* ISR de la interrupción canales 9_5
 * Observe que debe agregar totos los posibles casos, los cuales
 * son identificados por un bloque if() y el analisis de la bandera
 * (pending register -> EXTI_PR)
 */
void EXTI9_5_IRQHandler(void){
 8003730:	b580      	push	{r7, lr}
 8003732:	af00      	add	r7, sp, #0
    if(EXTI->PR & EXTI_PR_PR5){
 8003734:	4b25      	ldr	r3, [pc, #148]	; (80037cc <EXTI9_5_IRQHandler+0x9c>)
 8003736:	695b      	ldr	r3, [r3, #20]
 8003738:	f003 0320 	and.w	r3, r3, #32
 800373c:	2b00      	cmp	r3, #0
 800373e:	d008      	beq.n	8003752 <EXTI9_5_IRQHandler+0x22>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR5;
 8003740:	4b22      	ldr	r3, [pc, #136]	; (80037cc <EXTI9_5_IRQHandler+0x9c>)
 8003742:	695b      	ldr	r3, [r3, #20]
 8003744:	4a21      	ldr	r2, [pc, #132]	; (80037cc <EXTI9_5_IRQHandler+0x9c>)
 8003746:	f043 0320 	orr.w	r3, r3, #32
 800374a:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt5();
 800374c:	f7ff ff3c 	bl	80035c8 <callback_extInt5>
		EXTI->PR |= EXTI_PR_PR9;

		// llamamos al callback
		callback_extInt9();
	}
}
 8003750:	e03a      	b.n	80037c8 <EXTI9_5_IRQHandler+0x98>
    else if(EXTI->PR & EXTI_PR_PR6){
 8003752:	4b1e      	ldr	r3, [pc, #120]	; (80037cc <EXTI9_5_IRQHandler+0x9c>)
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800375a:	2b00      	cmp	r3, #0
 800375c:	d008      	beq.n	8003770 <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR6;
 800375e:	4b1b      	ldr	r3, [pc, #108]	; (80037cc <EXTI9_5_IRQHandler+0x9c>)
 8003760:	695b      	ldr	r3, [r3, #20]
 8003762:	4a1a      	ldr	r2, [pc, #104]	; (80037cc <EXTI9_5_IRQHandler+0x9c>)
 8003764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003768:	6153      	str	r3, [r2, #20]
		callback_extInt6();
 800376a:	f7ff ff35 	bl	80035d8 <callback_extInt6>
}
 800376e:	e02b      	b.n	80037c8 <EXTI9_5_IRQHandler+0x98>
    else if(EXTI->PR & EXTI_PR_PR7){
 8003770:	4b16      	ldr	r3, [pc, #88]	; (80037cc <EXTI9_5_IRQHandler+0x9c>)
 8003772:	695b      	ldr	r3, [r3, #20]
 8003774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003778:	2b00      	cmp	r3, #0
 800377a:	d008      	beq.n	800378e <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR7;
 800377c:	4b13      	ldr	r3, [pc, #76]	; (80037cc <EXTI9_5_IRQHandler+0x9c>)
 800377e:	695b      	ldr	r3, [r3, #20]
 8003780:	4a12      	ldr	r2, [pc, #72]	; (80037cc <EXTI9_5_IRQHandler+0x9c>)
 8003782:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003786:	6153      	str	r3, [r2, #20]
		callback_extInt7();
 8003788:	f7fe fa90 	bl	8001cac <callback_extInt7>
}
 800378c:	e01c      	b.n	80037c8 <EXTI9_5_IRQHandler+0x98>
    else if(EXTI->PR & EXTI_PR_PR8){
 800378e:	4b0f      	ldr	r3, [pc, #60]	; (80037cc <EXTI9_5_IRQHandler+0x9c>)
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003796:	2b00      	cmp	r3, #0
 8003798:	d008      	beq.n	80037ac <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR8;
 800379a:	4b0c      	ldr	r3, [pc, #48]	; (80037cc <EXTI9_5_IRQHandler+0x9c>)
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	4a0b      	ldr	r2, [pc, #44]	; (80037cc <EXTI9_5_IRQHandler+0x9c>)
 80037a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037a4:	6153      	str	r3, [r2, #20]
		callback_extInt8();
 80037a6:	f7ff ff1f 	bl	80035e8 <callback_extInt8>
}
 80037aa:	e00d      	b.n	80037c8 <EXTI9_5_IRQHandler+0x98>
    else if(EXTI->PR & EXTI_PR_PR9){
 80037ac:	4b07      	ldr	r3, [pc, #28]	; (80037cc <EXTI9_5_IRQHandler+0x9c>)
 80037ae:	695b      	ldr	r3, [r3, #20]
 80037b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d007      	beq.n	80037c8 <EXTI9_5_IRQHandler+0x98>
		EXTI->PR |= EXTI_PR_PR9;
 80037b8:	4b04      	ldr	r3, [pc, #16]	; (80037cc <EXTI9_5_IRQHandler+0x9c>)
 80037ba:	695b      	ldr	r3, [r3, #20]
 80037bc:	4a03      	ldr	r2, [pc, #12]	; (80037cc <EXTI9_5_IRQHandler+0x9c>)
 80037be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037c2:	6153      	str	r3, [r2, #20]
		callback_extInt9();
 80037c4:	f7ff ff18 	bl	80035f8 <callback_extInt9>
}
 80037c8:	bf00      	nop
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	40013c00 	.word	0x40013c00

080037d0 <EXTI15_10_IRQHandler>:
/* ISR de la interrupción canales 15_10
 * Observe que debe agregar totos los posibles casos, los cuales
 * son identificados por un bloque if() y el analisis de la bandera
 * (pending register -> EXTI_PR)
 */
void EXTI15_10_IRQHandler(void){
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_Y_15
	if(EXTI->PR & EXTI_PR_PR10){
 80037d4:	4b2d      	ldr	r3, [pc, #180]	; (800388c <EXTI15_10_IRQHandler+0xbc>)
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d008      	beq.n	80037f2 <EXTI15_10_IRQHandler+0x22>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR10;
 80037e0:	4b2a      	ldr	r3, [pc, #168]	; (800388c <EXTI15_10_IRQHandler+0xbc>)
 80037e2:	695b      	ldr	r3, [r3, #20]
 80037e4:	4a29      	ldr	r2, [pc, #164]	; (800388c <EXTI15_10_IRQHandler+0xbc>)
 80037e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037ea:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt10();
 80037ec:	f7ff ff0c 	bl	8003608 <callback_extInt10>
    /* .....
     * .....
     * ..... 
     * y así hasta el ultimo caso */
	
}
 80037f0:	e049      	b.n	8003886 <EXTI15_10_IRQHandler+0xb6>
	else if(EXTI->PR & EXTI_PR_PR11){
 80037f2:	4b26      	ldr	r3, [pc, #152]	; (800388c <EXTI15_10_IRQHandler+0xbc>)
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d008      	beq.n	8003810 <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR11;
 80037fe:	4b23      	ldr	r3, [pc, #140]	; (800388c <EXTI15_10_IRQHandler+0xbc>)
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	4a22      	ldr	r2, [pc, #136]	; (800388c <EXTI15_10_IRQHandler+0xbc>)
 8003804:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003808:	6153      	str	r3, [r2, #20]
		callback_extInt11();
 800380a:	f7ff ff05 	bl	8003618 <callback_extInt11>
}
 800380e:	e03a      	b.n	8003886 <EXTI15_10_IRQHandler+0xb6>
	else if(EXTI->PR & EXTI_PR_PR12){
 8003810:	4b1e      	ldr	r3, [pc, #120]	; (800388c <EXTI15_10_IRQHandler+0xbc>)
 8003812:	695b      	ldr	r3, [r3, #20]
 8003814:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d008      	beq.n	800382e <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR12;
 800381c:	4b1b      	ldr	r3, [pc, #108]	; (800388c <EXTI15_10_IRQHandler+0xbc>)
 800381e:	695b      	ldr	r3, [r3, #20]
 8003820:	4a1a      	ldr	r2, [pc, #104]	; (800388c <EXTI15_10_IRQHandler+0xbc>)
 8003822:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003826:	6153      	str	r3, [r2, #20]
		callback_extInt12();
 8003828:	f7ff fefe 	bl	8003628 <callback_extInt12>
}
 800382c:	e02b      	b.n	8003886 <EXTI15_10_IRQHandler+0xb6>
	else if(EXTI->PR & EXTI_PR_PR13){
 800382e:	4b17      	ldr	r3, [pc, #92]	; (800388c <EXTI15_10_IRQHandler+0xbc>)
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d008      	beq.n	800384c <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR13;
 800383a:	4b14      	ldr	r3, [pc, #80]	; (800388c <EXTI15_10_IRQHandler+0xbc>)
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	4a13      	ldr	r2, [pc, #76]	; (800388c <EXTI15_10_IRQHandler+0xbc>)
 8003840:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003844:	6153      	str	r3, [r2, #20]
		callback_extInt13();
 8003846:	f7ff fef7 	bl	8003638 <callback_extInt13>
}
 800384a:	e01c      	b.n	8003886 <EXTI15_10_IRQHandler+0xb6>
	else if(EXTI->PR & EXTI_PR_PR14){
 800384c:	4b0f      	ldr	r3, [pc, #60]	; (800388c <EXTI15_10_IRQHandler+0xbc>)
 800384e:	695b      	ldr	r3, [r3, #20]
 8003850:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d008      	beq.n	800386a <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= EXTI_PR_PR14;
 8003858:	4b0c      	ldr	r3, [pc, #48]	; (800388c <EXTI15_10_IRQHandler+0xbc>)
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	4a0b      	ldr	r2, [pc, #44]	; (800388c <EXTI15_10_IRQHandler+0xbc>)
 800385e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003862:	6153      	str	r3, [r2, #20]
		callback_extInt14();
 8003864:	f7ff fef0 	bl	8003648 <callback_extInt14>
}
 8003868:	e00d      	b.n	8003886 <EXTI15_10_IRQHandler+0xb6>
	else if(EXTI->PR & EXTI_PR_PR15){
 800386a:	4b08      	ldr	r3, [pc, #32]	; (800388c <EXTI15_10_IRQHandler+0xbc>)
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d007      	beq.n	8003886 <EXTI15_10_IRQHandler+0xb6>
		EXTI->PR |= EXTI_PR_PR15;
 8003876:	4b05      	ldr	r3, [pc, #20]	; (800388c <EXTI15_10_IRQHandler+0xbc>)
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	4a04      	ldr	r2, [pc, #16]	; (800388c <EXTI15_10_IRQHandler+0xbc>)
 800387c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003880:	6153      	str	r3, [r2, #20]
		callback_extInt15();
 8003882:	f7ff fee9 	bl	8003658 <callback_extInt15>
}
 8003886:	bf00      	nop
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	40013c00 	.word	0x40013c00

08003890 <GPIO_Config>:
 * Para cualquier prefierico hay unos pasos estrictos que siempre
 * se tienen que seguir en un orden. Lo primero sería activar la señal
 * de reloj
 */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
	//Variable para hacer  paso a paso.
	uint32_t auxConfig = 	0;
 8003898:	2300      	movs	r3, #0
 800389a:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 	0;
 800389c:	2300      	movs	r3, #0
 800389e:	60bb      	str	r3, [r7, #8]
	// 1) activar el periferico.
	//Verificar que pin.
	if(pGPIOHandler -> pGPIOx == GPIOA){
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a88      	ldr	r2, [pc, #544]	; (8003ac8 <GPIO_Config+0x238>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d106      	bne.n	80038b8 <GPIO_Config+0x28>
		RCC -> AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80038aa:	4b88      	ldr	r3, [pc, #544]	; (8003acc <GPIO_Config+0x23c>)
 80038ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ae:	4a87      	ldr	r2, [pc, #540]	; (8003acc <GPIO_Config+0x23c>)
 80038b0:	f043 0301 	orr.w	r3, r3, #1
 80038b4:	6313      	str	r3, [r2, #48]	; 0x30
 80038b6:	e03a      	b.n	800392e <GPIO_Config+0x9e>
	}
	else if(pGPIOHandler -> pGPIOx == GPIOB){
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a84      	ldr	r2, [pc, #528]	; (8003ad0 <GPIO_Config+0x240>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d106      	bne.n	80038d0 <GPIO_Config+0x40>
		RCC -> AHB1ENR |=  RCC_AHB1ENR_GPIOBEN;
 80038c2:	4b82      	ldr	r3, [pc, #520]	; (8003acc <GPIO_Config+0x23c>)
 80038c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c6:	4a81      	ldr	r2, [pc, #516]	; (8003acc <GPIO_Config+0x23c>)
 80038c8:	f043 0302 	orr.w	r3, r3, #2
 80038cc:	6313      	str	r3, [r2, #48]	; 0x30
 80038ce:	e02e      	b.n	800392e <GPIO_Config+0x9e>
	}
	else if(pGPIOHandler -> pGPIOx == GPIOC){
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a7f      	ldr	r2, [pc, #508]	; (8003ad4 <GPIO_Config+0x244>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d106      	bne.n	80038e8 <GPIO_Config+0x58>
		RCC -> AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 80038da:	4b7c      	ldr	r3, [pc, #496]	; (8003acc <GPIO_Config+0x23c>)
 80038dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038de:	4a7b      	ldr	r2, [pc, #492]	; (8003acc <GPIO_Config+0x23c>)
 80038e0:	f043 0304 	orr.w	r3, r3, #4
 80038e4:	6313      	str	r3, [r2, #48]	; 0x30
 80038e6:	e022      	b.n	800392e <GPIO_Config+0x9e>
	}
	else if(pGPIOHandler -> pGPIOx == GPIOD){
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a7a      	ldr	r2, [pc, #488]	; (8003ad8 <GPIO_Config+0x248>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d106      	bne.n	8003900 <GPIO_Config+0x70>
		RCC -> AHB1ENR |=  RCC_AHB1ENR_GPIODEN;
 80038f2:	4b76      	ldr	r3, [pc, #472]	; (8003acc <GPIO_Config+0x23c>)
 80038f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f6:	4a75      	ldr	r2, [pc, #468]	; (8003acc <GPIO_Config+0x23c>)
 80038f8:	f043 0308 	orr.w	r3, r3, #8
 80038fc:	6313      	str	r3, [r2, #48]	; 0x30
 80038fe:	e016      	b.n	800392e <GPIO_Config+0x9e>
	}
	else if(pGPIOHandler -> pGPIOx == GPIOE){
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a75      	ldr	r2, [pc, #468]	; (8003adc <GPIO_Config+0x24c>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d106      	bne.n	8003918 <GPIO_Config+0x88>
		RCC -> AHB1ENR |=  RCC_AHB1ENR_GPIOEEN;
 800390a:	4b70      	ldr	r3, [pc, #448]	; (8003acc <GPIO_Config+0x23c>)
 800390c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390e:	4a6f      	ldr	r2, [pc, #444]	; (8003acc <GPIO_Config+0x23c>)
 8003910:	f043 0310 	orr.w	r3, r3, #16
 8003914:	6313      	str	r3, [r2, #48]	; 0x30
 8003916:	e00a      	b.n	800392e <GPIO_Config+0x9e>
	}
	else if(pGPIOHandler -> pGPIOx == GPIOH){
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a70      	ldr	r2, [pc, #448]	; (8003ae0 <GPIO_Config+0x250>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d105      	bne.n	800392e <GPIO_Config+0x9e>
		RCC -> AHB1ENR |= RCC_AHB1ENR_GPIOHEN;
 8003922:	4b6a      	ldr	r3, [pc, #424]	; (8003acc <GPIO_Config+0x23c>)
 8003924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003926:	4a69      	ldr	r2, [pc, #420]	; (8003acc <GPIO_Config+0x23c>)
 8003928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800392c:	6313      	str	r3, [r2, #48]	; 0x30
	}

	//Despues de activado podemos comenzar a configurar.
	// 2) Configurar el registro GPIOx_MODER
	auxConfig = (pGPIOHandler -> GPIO_PinConfig_t.GPIO_PinMode << 2 * pGPIOHandler -> GPIO_PinConfig_t.GPIO_PinNumber);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	795b      	ldrb	r3, [r3, #5]
 8003932:	461a      	mov	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	791b      	ldrb	r3, [r3, #4]
 8003938:	005b      	lsls	r3, r3, #1
 800393a:	fa02 f303 	lsl.w	r3, r2, r3
 800393e:	60fb      	str	r3, [r7, #12]
	//Antes de cargar el nuevo valor, limpiamos los bits especificos de ese registro
	//para lo cual aplicamos.
	pGPIOHandler -> pGPIOx -> MODER &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig_t.GPIO_PinNumber);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	791b      	ldrb	r3, [r3, #4]
 800394a:	005b      	lsls	r3, r3, #1
 800394c:	2103      	movs	r1, #3
 800394e:	fa01 f303 	lsl.w	r3, r1, r3
 8003952:	43db      	mvns	r3, r3
 8003954:	4619      	mov	r1, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	400a      	ands	r2, r1
 800395c:	601a      	str	r2, [r3, #0]

	//Cargamos a auxConfig en el registro MODER
	pGPIOHandler -> pGPIOx -> MODER |= auxConfig;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	6819      	ldr	r1, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68fa      	ldr	r2, [r7, #12]
 800396a:	430a      	orrs	r2, r1
 800396c:	601a      	str	r2, [r3, #0]

	// 3)configurando el registro OTYPER
	auxConfig = (pGPIOHandler -> GPIO_PinConfig_t.GPIO_PinOPType << pGPIOHandler -> GPIO_PinConfig_t.GPIO_PinNumber);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	7a1b      	ldrb	r3, [r3, #8]
 8003972:	461a      	mov	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	791b      	ldrb	r3, [r3, #4]
 8003978:	fa02 f303 	lsl.w	r3, r2, r3
 800397c:	60fb      	str	r3, [r7, #12]
	//limpiamos
	pGPIOHandler -> pGPIOx -> OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig_t.GPIO_PinNumber);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	685a      	ldr	r2, [r3, #4]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	791b      	ldrb	r3, [r3, #4]
 8003988:	4619      	mov	r1, r3
 800398a:	2301      	movs	r3, #1
 800398c:	408b      	lsls	r3, r1
 800398e:	43db      	mvns	r3, r3
 8003990:	4619      	mov	r1, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	400a      	ands	r2, r1
 8003998:	605a      	str	r2, [r3, #4]
	// cargamos el resultado
	pGPIOHandler -> pGPIOx -> OTYPER |= auxConfig;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	6859      	ldr	r1, [r3, #4]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	430a      	orrs	r2, r1
 80039a8:	605a      	str	r2, [r3, #4]

	// 4) Configurando ahora la velocidad.
	//Realizando el mismo proceso
	auxConfig = (pGPIOHandler -> GPIO_PinConfig_t.GPIO_PinSpeed << 2 * pGPIOHandler -> GPIO_PinConfig_t.GPIO_PinNumber);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	799b      	ldrb	r3, [r3, #6]
 80039ae:	461a      	mov	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	791b      	ldrb	r3, [r3, #4]
 80039b4:	005b      	lsls	r3, r3, #1
 80039b6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ba:	60fb      	str	r3, [r7, #12]
	pGPIOHandler -> pGPIOx -> OSPEEDR &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig_t.GPIO_PinNumber);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	689a      	ldr	r2, [r3, #8]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	791b      	ldrb	r3, [r3, #4]
 80039c6:	005b      	lsls	r3, r3, #1
 80039c8:	2103      	movs	r1, #3
 80039ca:	fa01 f303 	lsl.w	r3, r1, r3
 80039ce:	43db      	mvns	r3, r3
 80039d0:	4619      	mov	r1, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	400a      	ands	r2, r1
 80039d8:	609a      	str	r2, [r3, #8]
	pGPIOHandler -> pGPIOx -> OSPEEDR |= auxConfig;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	6899      	ldr	r1, [r3, #8]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	430a      	orrs	r2, r1
 80039e8:	609a      	str	r2, [r3, #8]

	// 5) confiurando si se desea pull-up, pull-down o flotante.
	auxConfig = (pGPIOHandler -> GPIO_PinConfig_t.GPIO_PinPuPdControl << 2 * pGPIOHandler -> GPIO_PinConfig_t.GPIO_PinNumber);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	79db      	ldrb	r3, [r3, #7]
 80039ee:	461a      	mov	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	791b      	ldrb	r3, [r3, #4]
 80039f4:	005b      	lsls	r3, r3, #1
 80039f6:	fa02 f303 	lsl.w	r3, r2, r3
 80039fa:	60fb      	str	r3, [r7, #12]
	pGPIOHandler -> pGPIOx -> PUPDR &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig_t.GPIO_PinNumber);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68da      	ldr	r2, [r3, #12]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	791b      	ldrb	r3, [r3, #4]
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	2103      	movs	r1, #3
 8003a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a0e:	43db      	mvns	r3, r3
 8003a10:	4619      	mov	r1, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	400a      	ands	r2, r1
 8003a18:	60da      	str	r2, [r3, #12]
	pGPIOHandler -> pGPIOx -> PUPDR |= auxConfig;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68d9      	ldr	r1, [r3, #12]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	430a      	orrs	r2, r1
 8003a28:	60da      	str	r2, [r3, #12]

	//Esta es la parte para la configuración de las funciones alternativs
	if(pGPIOHandler->GPIO_PinConfig_t.GPIO_PinMode == GPIO_MODE_ALTFN){
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	795b      	ldrb	r3, [r3, #5]
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d143      	bne.n	8003aba <GPIO_Config+0x22a>

		//Seleccionamos primero si se debe utilizar el registro bajo (AFRL) o alto (AFRH)
		if(pGPIOHandler->GPIO_PinConfig_t.GPIO_PinNumber < 8){
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	791b      	ldrb	r3, [r3, #4]
 8003a36:	2b07      	cmp	r3, #7
 8003a38:	d81f      	bhi.n	8003a7a <GPIO_Config+0x1ea>
			//Estamos en el registro AFRL, que controla los pines del 0 al 7
			auxPosition = 4 * pGPIOHandler->GPIO_PinConfig_t.GPIO_PinNumber;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	791b      	ldrb	r3, [r3, #4]
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	60bb      	str	r3, [r7, #8]

			//limpiamos
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b111<<auxPosition);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	6a1a      	ldr	r2, [r3, #32]
 8003a48:	2107      	movs	r1, #7
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a50:	43db      	mvns	r3, r3
 8003a52:	4619      	mov	r1, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	400a      	ands	r2, r1
 8003a5a:	621a      	str	r2, [r3, #32]

			// Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig_t.GPIO_PinAltFunMode << auxPosition);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	6a1a      	ldr	r2, [r3, #32]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	7a5b      	ldrb	r3, [r3, #9]
 8003a66:	4619      	mov	r1, r3
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a6e:	4619      	mov	r1, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	430a      	orrs	r2, r1
 8003a76:	621a      	str	r2, [r3, #32]

			// Y escribimos el valor configurado en la posicion seleccionada
						pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig_t.GPIO_PinAltFunMode << auxPosition);
		}
	}
} //Fin del GPIO_config
 8003a78:	e01f      	b.n	8003aba <GPIO_Config+0x22a>
			auxPosition = 4 * (pGPIOHandler->GPIO_PinConfig_t.GPIO_PinNumber - 8);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	791b      	ldrb	r3, [r3, #4]
 8003a7e:	3b08      	subs	r3, #8
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b111<<auxPosition);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a8a:	2107      	movs	r1, #7
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a92:	43db      	mvns	r3, r3
 8003a94:	4619      	mov	r1, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	400a      	ands	r2, r1
 8003a9c:	625a      	str	r2, [r3, #36]	; 0x24
						pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig_t.GPIO_PinAltFunMode << auxPosition);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	7a5b      	ldrb	r3, [r3, #9]
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	fa01 f303 	lsl.w	r3, r1, r3
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	625a      	str	r2, [r3, #36]	; 0x24
} //Fin del GPIO_config
 8003aba:	bf00      	nop
 8003abc:	3714      	adds	r7, #20
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	40020000 	.word	0x40020000
 8003acc:	40023800 	.word	0x40023800
 8003ad0:	40020400 	.word	0x40020400
 8003ad4:	40020800 	.word	0x40020800
 8003ad8:	40020c00 	.word	0x40020c00
 8003adc:	40021000 	.word	0x40021000
 8003ae0:	40021c00 	.word	0x40021c00

08003ae4 <GPIO_WritePin>:
/**
 * Funcion utilizada para cambiar el estado el pin enregado en el hander, asignando
 * el valor entregado en el variable newState
 */

void GPIO_WritePin(GPIO_Handler_t *pPinHandler, uint8_t newState){
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	460b      	mov	r3, r1
 8003aee:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
//	pPinHandler -> pGPIOx -> ODR &= ~(SET << pPinHandler->GPIO_PinConfig_t.GPIO_PinNumber);
	if(newState == SET){
 8003af0:	78fb      	ldrb	r3, [r7, #3]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d10d      	bne.n	8003b12 <GPIO_WritePin+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << pPinHandler->GPIO_PinConfig_t.GPIO_PinNumber);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	699a      	ldr	r2, [r3, #24]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	791b      	ldrb	r3, [r3, #4]
 8003b00:	4619      	mov	r1, r3
 8003b02:	2301      	movs	r3, #1
 8003b04:	408b      	lsls	r3, r1
 8003b06:	4619      	mov	r1, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	619a      	str	r2, [r3, #24]
	} else{
		//trabajando con la parte alta del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler->GPIO_PinConfig_t.GPIO_PinNumber + 16));
	}
}
 8003b10:	e00d      	b.n	8003b2e <GPIO_WritePin+0x4a>
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler->GPIO_PinConfig_t.GPIO_PinNumber + 16));
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	699a      	ldr	r2, [r3, #24]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	791b      	ldrb	r3, [r3, #4]
 8003b1c:	3310      	adds	r3, #16
 8003b1e:	2101      	movs	r1, #1
 8003b20:	fa01 f303 	lsl.w	r3, r1, r3
 8003b24:	4619      	mov	r1, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	619a      	str	r2, [r3, #24]
}
 8003b2e:	bf00      	nop
 8003b30:	370c      	adds	r7, #12
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr

08003b3a <GPIO_ReadPin>:
//Funcion para leer el estado de un pin.
uint32_t GPIO_ReadPin(GPIO_Handler_t *pPinHandler){
 8003b3a:	b480      	push	{r7}
 8003b3c:	b085      	sub	sp, #20
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
	// creamos variable auxiliar para retornarla
	uint32_t pinValue = pPinHandler->pGPIOx->IDR;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	60fb      	str	r3, [r7, #12]
	//Cargamos el valor del registro IDR, desplzadado a derecha tantas veces como la ubicacion del pin
	//especifico
	//limpiar los demas valores
	//Antes:
	// pinValue = (pPinHandler->pGPIOx->IDR>>pPinHandler->GPIO_PinConfig_t.GPIO_PinNumber);
	pinValue &= (SET<<pPinHandler->GPIO_PinConfig_t.GPIO_PinNumber);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	791b      	ldrb	r3, [r3, #4]
 8003b4e:	461a      	mov	r2, r3
 8003b50:	2301      	movs	r3, #1
 8003b52:	4093      	lsls	r3, r2
 8003b54:	461a      	mov	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	60fb      	str	r3, [r7, #12]
	pinValue >>= pPinHandler->GPIO_PinConfig_t.GPIO_PinNumber;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	791b      	ldrb	r3, [r3, #4]
 8003b60:	461a      	mov	r2, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	40d3      	lsrs	r3, r2
 8003b66:	60fb      	str	r3, [r7, #12]
	return pinValue;
 8003b68:	68fb      	ldr	r3, [r7, #12]
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3714      	adds	r7, #20
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr

08003b76 <GPIOxTooglePin>:
 * 		1	  |  1	|		 0
 * 		0	  |  1	| 	 	 1
 */


void GPIOxTooglePin(GPIO_Handler_t *pPinHandler){
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b082      	sub	sp, #8
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
	GPIO_WritePin(pPinHandler,SET^GPIO_ReadPin(pPinHandler));
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f7ff ffdb 	bl	8003b3a <GPIO_ReadPin>
 8003b84:	4603      	mov	r3, r0
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	f083 0301 	eor.w	r3, r3, #1
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	4619      	mov	r1, r3
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f7ff ffa7 	bl	8003ae4 <GPIO_WritePin>
}
 8003b96:	bf00      	nop
 8003b98:	3708      	adds	r7, #8
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
	...

08003ba0 <configPLL>:
 */

#include <stm32f4xx.h>
#include "PLLDriver.h"

int configPLL(uint16_t freqPLL){
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	80fb      	strh	r3, [r7, #6]
	if (freqPLL == 16){
 8003baa:	88fb      	ldrh	r3, [r7, #6]
 8003bac:	2b10      	cmp	r3, #16
 8003bae:	d101      	bne.n	8003bb4 <configPLL+0x14>
		return 0;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	e0c2      	b.n	8003d3a <configPLL+0x19a>
	}
	//Selecionamos HSI como la fuente para el PLL
	RCC -> PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC);
 8003bb4:	4b64      	ldr	r3, [pc, #400]	; (8003d48 <configPLL+0x1a8>)
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	4a63      	ldr	r2, [pc, #396]	; (8003d48 <configPLL+0x1a8>)
 8003bba:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003bbe:	6053      	str	r3, [r2, #4]

	//Asignamos el divisor para la señal de entrada que sea facil de manipular
	//Por lo que la pondremos en 2MHz colocando en el registro 8.
	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLM); // Limpiamos
 8003bc0:	4b61      	ldr	r3, [pc, #388]	; (8003d48 <configPLL+0x1a8>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	4a60      	ldr	r2, [pc, #384]	; (8003d48 <configPLL+0x1a8>)
 8003bc6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003bca:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (RCC_PLLCFGR_PLLM_3); // Ponemos un 8 en el PLLM
 8003bcc:	4b5e      	ldr	r3, [pc, #376]	; (8003d48 <configPLL+0x1a8>)
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	4a5d      	ldr	r2, [pc, #372]	; (8003d48 <configPLL+0x1a8>)
 8003bd2:	f043 0308 	orr.w	r3, r3, #8
 8003bd6:	6053      	str	r3, [r2, #4]

	//Ahora conifugraremos la multiplicación
	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLN); // Limpiamos
 8003bd8:	4b5b      	ldr	r3, [pc, #364]	; (8003d48 <configPLL+0x1a8>)
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	4a5a      	ldr	r2, [pc, #360]	; (8003d48 <configPLL+0x1a8>)
 8003bde:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003be2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003be6:	6053      	str	r3, [r2, #4]

	//ponemos el PLLN en 80 para conseguir 160MHz
	RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_2);
 8003be8:	4b57      	ldr	r3, [pc, #348]	; (8003d48 <configPLL+0x1a8>)
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	4a56      	ldr	r2, [pc, #344]	; (8003d48 <configPLL+0x1a8>)
 8003bee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bf2:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_5);
 8003bf4:	4b54      	ldr	r3, [pc, #336]	; (8003d48 <configPLL+0x1a8>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	4a53      	ldr	r2, [pc, #332]	; (8003d48 <configPLL+0x1a8>)
 8003bfa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003bfe:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_6);
 8003c00:	4b51      	ldr	r3, [pc, #324]	; (8003d48 <configPLL+0x1a8>)
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	4a50      	ldr	r2, [pc, #320]	; (8003d48 <configPLL+0x1a8>)
 8003c06:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c0a:	6053      	str	r3, [r2, #4]

	//  Borro el posible valor configurado
	RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLN_Pos);
 8003c0c:	4b4e      	ldr	r3, [pc, #312]	; (8003d48 <configPLL+0x1a8>)
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	4a4d      	ldr	r2, [pc, #308]	; (8003d48 <configPLL+0x1a8>)
 8003c12:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003c16:	6053      	str	r3, [r2, #4]

	// Cargamos el valor del multiplicador el cual al final terminaria siendo la frecuencia
	//Esto teniendo en cuenta que se utilizamos el PLLp para dividir entre 2
	if(freqPLL <= 100 && 50 < freqPLL)
 8003c18:	88fb      	ldrh	r3, [r7, #6]
 8003c1a:	2b64      	cmp	r3, #100	; 0x64
 8003c1c:	d80b      	bhi.n	8003c36 <configPLL+0x96>
 8003c1e:	88fb      	ldrh	r3, [r7, #6]
 8003c20:	2b32      	cmp	r3, #50	; 0x32
 8003c22:	d908      	bls.n	8003c36 <configPLL+0x96>
		RCC->PLLCFGR |= (freqPLL << RCC_PLLCFGR_PLLN_Pos);
 8003c24:	4b48      	ldr	r3, [pc, #288]	; (8003d48 <configPLL+0x1a8>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	88fa      	ldrh	r2, [r7, #6]
 8003c2a:	0192      	lsls	r2, r2, #6
 8003c2c:	4611      	mov	r1, r2
 8003c2e:	4a46      	ldr	r2, [pc, #280]	; (8003d48 <configPLL+0x1a8>)
 8003c30:	430b      	orrs	r3, r1
 8003c32:	6053      	str	r3, [r2, #4]
 8003c34:	e005      	b.n	8003c42 <configPLL+0xa2>
	else
		RCC->PLLCFGR |= (PLL_STANDARD_FREQ << RCC_PLLCFGR_PLLN_Pos);
 8003c36:	4b44      	ldr	r3, [pc, #272]	; (8003d48 <configPLL+0x1a8>)
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	4a43      	ldr	r2, [pc, #268]	; (8003d48 <configPLL+0x1a8>)
 8003c3c:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8003c40:	6053      	str	r3, [r2, #4]

	// La salida del PLL depende del valor VCO y del preescaler PLLP, el cual
	// su minimo valor es de 2 con esto configuramos siempre la frecuencia que le entreguemos
	// entre 50 a 100
	RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos); // Salida DIV2
 8003c42:	4b41      	ldr	r3, [pc, #260]	; (8003d48 <configPLL+0x1a8>)
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	4a40      	ldr	r2, [pc, #256]	; (8003d48 <configPLL+0x1a8>)
 8003c48:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003c4c:	6053      	str	r3, [r2, #4]

	// Cambio el valor VOS (regulador de voltaje) para que se tenga el
	// rendimiento adecuado Esto se debe hacer antes de encender el PLL

	if(freqPLL <= 64)
 8003c4e:	88fb      	ldrh	r3, [r7, #6]
 8003c50:	2b40      	cmp	r3, #64	; 0x40
 8003c52:	d806      	bhi.n	8003c62 <configPLL+0xc2>
		PWR->CR |= (0x1 << PWR_CR_VOS_Pos);
 8003c54:	4b3d      	ldr	r3, [pc, #244]	; (8003d4c <configPLL+0x1ac>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a3c      	ldr	r2, [pc, #240]	; (8003d4c <configPLL+0x1ac>)
 8003c5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c5e:	6013      	str	r3, [r2, #0]
 8003c60:	e012      	b.n	8003c88 <configPLL+0xe8>
	else if(freqPLL <= 84)
 8003c62:	88fb      	ldrh	r3, [r7, #6]
 8003c64:	2b54      	cmp	r3, #84	; 0x54
 8003c66:	d806      	bhi.n	8003c76 <configPLL+0xd6>
		PWR->CR |= (0x2 << PWR_CR_VOS_Pos);
 8003c68:	4b38      	ldr	r3, [pc, #224]	; (8003d4c <configPLL+0x1ac>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a37      	ldr	r2, [pc, #220]	; (8003d4c <configPLL+0x1ac>)
 8003c6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c72:	6013      	str	r3, [r2, #0]
 8003c74:	e008      	b.n	8003c88 <configPLL+0xe8>
	else if(freqPLL <= 100)
 8003c76:	88fb      	ldrh	r3, [r7, #6]
 8003c78:	2b64      	cmp	r3, #100	; 0x64
 8003c7a:	d805      	bhi.n	8003c88 <configPLL+0xe8>
		PWR->CR |= (0x3 << PWR_CR_VOS_Pos);
 8003c7c:	4b33      	ldr	r3, [pc, #204]	; (8003d4c <configPLL+0x1ac>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a32      	ldr	r2, [pc, #200]	; (8003d4c <configPLL+0x1ac>)
 8003c82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c86:	6013      	str	r3, [r2, #0]

	// Activamos el PLL en el control register del RCC
	RCC->CR |= RCC_CR_PLLON;
 8003c88:	4b2f      	ldr	r3, [pc, #188]	; (8003d48 <configPLL+0x1a8>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a2e      	ldr	r2, [pc, #184]	; (8003d48 <configPLL+0x1a8>)
 8003c8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c92:	6013      	str	r3, [r2, #0]

	// Esperamos a que el PLL se cierre (se estabilice)
	while (!(RCC->CR & RCC_CR_PLLRDY)){
 8003c94:	e000      	b.n	8003c98 <configPLL+0xf8>
		__NOP();
 8003c96:	bf00      	nop
	while (!(RCC->CR & RCC_CR_PLLRDY)){
 8003c98:	4b2b      	ldr	r3, [pc, #172]	; (8003d48 <configPLL+0x1a8>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d0f8      	beq.n	8003c96 <configPLL+0xf6>
	/* ---- Configuración de Preescalers para velocidad de los Buses ---- */
	//  Organizamos los preescalers del hardware, de forma que funcionen
	// a la velocidad maxima permitida
	// Preescaler del hardware del procesador, el valor en 0 significa
	// 	 sin preescaler
	RCC->CFGR &= ~(0xF << RCC_CFGR_HPRE_Pos);
 8003ca4:	4b28      	ldr	r3, [pc, #160]	; (8003d48 <configPLL+0x1a8>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	4a27      	ldr	r2, [pc, #156]	; (8003d48 <configPLL+0x1a8>)
 8003caa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cae:	6093      	str	r3, [r2, #8]

	// Preescaler para el APB2 (high speed), el valor en 0 significa
	// sin preescaler
	RCC->CFGR &= ~(0x7 << RCC_CFGR_PPRE2_Pos);
 8003cb0:	4b25      	ldr	r3, [pc, #148]	; (8003d48 <configPLL+0x1a8>)
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	4a24      	ldr	r2, [pc, #144]	; (8003d48 <configPLL+0x1a8>)
 8003cb6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003cba:	6093      	str	r3, [r2, #8]

	// Preescaler para el APB1 (low speed). Se debe poner un preescaler
	// de 2:1, para que la velocidad
	// sea la máxima permitida. Primero lo limpio, luego lo configuro
	RCC->CFGR &= ~(0x7 << RCC_CFGR_PPRE1_Pos); // Limpiar
 8003cbc:	4b22      	ldr	r3, [pc, #136]	; (8003d48 <configPLL+0x1a8>)
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	4a21      	ldr	r2, [pc, #132]	; (8003d48 <configPLL+0x1a8>)
 8003cc2:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8003cc6:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (0x4 << RCC_CFGR_PPRE1_Pos);  // Preescaler 2:1
 8003cc8:	4b1f      	ldr	r3, [pc, #124]	; (8003d48 <configPLL+0x1a8>)
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	4a1e      	ldr	r2, [pc, #120]	; (8003d48 <configPLL+0x1a8>)
 8003cce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003cd2:	6093      	str	r3, [r2, #8]

	// Ahora debemos configurar el periodo de espera para leer la
	// memoria flash (Lantency), tal cual como esta descrito en la seccion
	// 3.4.1, tabla 5, pag 45.

	FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos); // Limpiamos la posicion
 8003cd4:	4b1e      	ldr	r3, [pc, #120]	; (8003d50 <configPLL+0x1b0>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a1d      	ldr	r2, [pc, #116]	; (8003d50 <configPLL+0x1b0>)
 8003cda:	f023 030f 	bic.w	r3, r3, #15
 8003cde:	6013      	str	r3, [r2, #0]

	if(50 <= freqPLL && freqPLL <= 64)
 8003ce0:	88fb      	ldrh	r3, [r7, #6]
 8003ce2:	2b31      	cmp	r3, #49	; 0x31
 8003ce4:	d909      	bls.n	8003cfa <configPLL+0x15a>
 8003ce6:	88fb      	ldrh	r3, [r7, #6]
 8003ce8:	2b40      	cmp	r3, #64	; 0x40
 8003cea:	d806      	bhi.n	8003cfa <configPLL+0x15a>
		FLASH -> ACR |= (0x1 << FLASH_ACR_LATENCY_Pos); // Configurando 1 WS
 8003cec:	4b18      	ldr	r3, [pc, #96]	; (8003d50 <configPLL+0x1b0>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a17      	ldr	r2, [pc, #92]	; (8003d50 <configPLL+0x1b0>)
 8003cf2:	f043 0301 	orr.w	r3, r3, #1
 8003cf6:	6013      	str	r3, [r2, #0]
 8003cf8:	e012      	b.n	8003d20 <configPLL+0x180>
	else if(90 <= freqPLL && freqPLL <= 100)
 8003cfa:	88fb      	ldrh	r3, [r7, #6]
 8003cfc:	2b59      	cmp	r3, #89	; 0x59
 8003cfe:	d909      	bls.n	8003d14 <configPLL+0x174>
 8003d00:	88fb      	ldrh	r3, [r7, #6]
 8003d02:	2b64      	cmp	r3, #100	; 0x64
 8003d04:	d806      	bhi.n	8003d14 <configPLL+0x174>
		FLASH -> ACR |= (0x3 << FLASH_ACR_LATENCY_Pos); // Configurando 3 WS
 8003d06:	4b12      	ldr	r3, [pc, #72]	; (8003d50 <configPLL+0x1b0>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a11      	ldr	r2, [pc, #68]	; (8003d50 <configPLL+0x1b0>)
 8003d0c:	f043 0303 	orr.w	r3, r3, #3
 8003d10:	6013      	str	r3, [r2, #0]
 8003d12:	e005      	b.n	8003d20 <configPLL+0x180>
	else // Default State: (64 <= freqPLL && freqPLL <= 90)
		FLASH -> ACR |= (0x2 << FLASH_ACR_LATENCY_Pos); // Configurando 2 WS
 8003d14:	4b0e      	ldr	r3, [pc, #56]	; (8003d50 <configPLL+0x1b0>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a0d      	ldr	r2, [pc, #52]	; (8003d50 <configPLL+0x1b0>)
 8003d1a:	f043 0302 	orr.w	r3, r3, #2
 8003d1e:	6013      	str	r3, [r2, #0]

	//  Ahora falta hacer el cambio del sistema a que funcione en la nueva frecuencia
	RCC->CFGR &= ~RCC_CFGR_SW_1;  // Borramos la posicion
 8003d20:	4b09      	ldr	r3, [pc, #36]	; (8003d48 <configPLL+0x1a8>)
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	4a08      	ldr	r2, [pc, #32]	; (8003d48 <configPLL+0x1a8>)
 8003d26:	f023 0302 	bic.w	r3, r3, #2
 8003d2a:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_1;   // PLL como reloj principal
 8003d2c:	4b06      	ldr	r3, [pc, #24]	; (8003d48 <configPLL+0x1a8>)
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	4a05      	ldr	r2, [pc, #20]	; (8003d48 <configPLL+0x1a8>)
 8003d32:	f043 0302 	orr.w	r3, r3, #2
 8003d36:	6093      	str	r3, [r2, #8]

	return 1;
 8003d38:	2301      	movs	r3, #1
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	40023800 	.word	0x40023800
 8003d4c:	40007000 	.word	0x40007000
 8003d50:	40023c00 	.word	0x40023c00

08003d54 <getConfigPLL>:

// Obtener  la configuración
uint8_t getConfigPLL(void){
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0

	// Seleccion de los dos valores SWS1 y SWS0, que indican cual es la
	// fuente del reloj principal

	uint32_t auxClockState = (RCC->CFGR & 0b1100) >> 2;
 8003d5a:	4b10      	ldr	r3, [pc, #64]	; (8003d9c <getConfigPLL+0x48>)
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	089b      	lsrs	r3, r3, #2
 8003d60:	f003 0303 	and.w	r3, r3, #3
 8003d64:	607b      	str	r3, [r7, #4]

	switch(auxClockState){
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d00d      	beq.n	8003d88 <getConfigPLL+0x34>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d80c      	bhi.n	8003d8c <getConfigPLL+0x38>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d003      	beq.n	8003d80 <getConfigPLL+0x2c>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d002      	beq.n	8003d84 <getConfigPLL+0x30>
 8003d7e:	e005      	b.n	8003d8c <getConfigPLL+0x38>
	case HSI_CLOCK_CONFIGURED:
		return 0;
 8003d80:	2300      	movs	r3, #0
 8003d82:	e004      	b.n	8003d8e <getConfigPLL+0x3a>
		break;

	case HSE_CLOCK_CONFIGURED:
		return 1;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e002      	b.n	8003d8e <getConfigPLL+0x3a>
		break;

	case PLL_CLOCK_CONFIGURED:
		return 2;
 8003d88:	2302      	movs	r3, #2
 8003d8a:	e000      	b.n	8003d8e <getConfigPLL+0x3a>
		break;

	default:
		return 0;
 8003d8c:	2300      	movs	r3, #0
		break;

	}
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	370c      	adds	r7, #12
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	40023800 	.word	0x40023800

08003da0 <getFreqPLL>:

// Obtener la frecuencia función importante para cualquier aplicaciom.
uint16_t getFreqPLL(void){
 8003da0:	b580      	push	{r7, lr}
 8003da2:	af00      	add	r7, sp, #0

	// Retorno del valor actual de PLL, discriminación del valor actual
	switch(getConfigPLL()){
 8003da4:	f7ff ffd6 	bl	8003d54 <getConfigPLL>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d001      	beq.n	8003db2 <getFreqPLL+0x12>

	default:
	case HSI_CLOCK_CONFIGURED:
		return 16;
 8003dae:	2310      	movs	r3, #16
 8003db0:	e006      	b.n	8003dc0 <getFreqPLL+0x20>
		break;

	case PLL_CLOCK_CONFIGURED:

		return (RCC->PLLCFGR & 0b111111111000000) >> RCC_PLLCFGR_PLLN_Pos;
 8003db2:	4b04      	ldr	r3, [pc, #16]	; (8003dc4 <getFreqPLL+0x24>)
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	099b      	lsrs	r3, r3, #6
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dbe:	b29b      	uxth	r3, r3
		break;

	}
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	40023800 	.word	0x40023800

08003dc8 <pwm_Config>:
 *      Author: namontoy
 */
#include "PwmDriver.h"
void pwmSetPolarity(PWM_Handler_t *ptrPwmHandler);
/**/
void pwm_Config(PWM_Handler_t *ptrPwmHandler) {
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]

	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrPwmHandler->ptrTIMx == TIM2) {
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dd8:	d106      	bne.n	8003de8 <pwm_Config+0x20>
		//APB1 primero limpiamos
		// Registro del RCC que nos activa la señal de reloj para el TIM2
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8003dda:	4b63      	ldr	r3, [pc, #396]	; (8003f68 <pwm_Config+0x1a0>)
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dde:	4a62      	ldr	r2, [pc, #392]	; (8003f68 <pwm_Config+0x1a0>)
 8003de0:	f043 0301 	orr.w	r3, r3, #1
 8003de4:	6413      	str	r3, [r2, #64]	; 0x40
 8003de6:	e024      	b.n	8003e32 <pwm_Config+0x6a>
	} else if (ptrPwmHandler->ptrTIMx == TIM3) {
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a5f      	ldr	r2, [pc, #380]	; (8003f6c <pwm_Config+0x1a4>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d106      	bne.n	8003e00 <pwm_Config+0x38>
		// Registro del RCC que nos activa la señal de reloj para el TIM3
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8003df2:	4b5d      	ldr	r3, [pc, #372]	; (8003f68 <pwm_Config+0x1a0>)
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	4a5c      	ldr	r2, [pc, #368]	; (8003f68 <pwm_Config+0x1a0>)
 8003df8:	f043 0302 	orr.w	r3, r3, #2
 8003dfc:	6413      	str	r3, [r2, #64]	; 0x40
 8003dfe:	e018      	b.n	8003e32 <pwm_Config+0x6a>
	} else if (ptrPwmHandler->ptrTIMx == TIM4) {
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a5a      	ldr	r2, [pc, #360]	; (8003f70 <pwm_Config+0x1a8>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d106      	bne.n	8003e18 <pwm_Config+0x50>
		// Registro del RCC que nos activa la señal de reloj para el TIM4
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8003e0a:	4b57      	ldr	r3, [pc, #348]	; (8003f68 <pwm_Config+0x1a0>)
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0e:	4a56      	ldr	r2, [pc, #344]	; (8003f68 <pwm_Config+0x1a0>)
 8003e10:	f043 0304 	orr.w	r3, r3, #4
 8003e14:	6413      	str	r3, [r2, #64]	; 0x40
 8003e16:	e00c      	b.n	8003e32 <pwm_Config+0x6a>
	} else if (ptrPwmHandler->ptrTIMx == TIM5) {
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a55      	ldr	r2, [pc, #340]	; (8003f74 <pwm_Config+0x1ac>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d106      	bne.n	8003e30 <pwm_Config+0x68>
		// Registro del RCC que nos activa la señal de reloj para el TIM5
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8003e22:	4b51      	ldr	r3, [pc, #324]	; (8003f68 <pwm_Config+0x1a0>)
 8003e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e26:	4a50      	ldr	r2, [pc, #320]	; (8003f68 <pwm_Config+0x1a0>)
 8003e28:	f043 0308 	orr.w	r3, r3, #8
 8003e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e2e:	e000      	b.n	8003e32 <pwm_Config+0x6a>
	} else {
		__NOP();
 8003e30:	bf00      	nop
	}

	/* 1. Cargamos la frecuencia deseada */
	setFrequency(ptrPwmHandler);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f930 	bl	8004098 <setFrequency>

	/* 2. Cargamos el valor del dutty-Cycle*/
	setDuttyCycle(ptrPwmHandler);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 f943 	bl	80040c4 <setDuttyCycle>

	pwmSetPolarity(ptrPwmHandler);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 f974 	bl	800412c <pwmSetPolarity>

	/* 2a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
	// Configurar el registro que nos controla el modo up or down
	ptrPwmHandler->ptrTIMx->CR1 &= (RESET << TIM_CR1_DIR_Pos);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	601a      	str	r2, [r3, #0]
	ptrPwmHandler->ptrTIMx->CR1 |= TIM_CR1_ARPE;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e60:	601a      	str	r2, [r3, #0]
	/* 2b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar */
	ptrPwmHandler->ptrTIMx->ARR = ptrPwmHandler->config.periodo - 1;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	899b      	ldrh	r3, [r3, #12]
 8003e66:	1e5a      	subs	r2, r3, #1
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	62da      	str	r2, [r3, #44]	; 0x2c

	/* 2c. Reiniciamos el registro counter*/
	ptrPwmHandler->ptrTIMx->CNT = RESET;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2200      	movs	r2, #0
 8003e74:	625a      	str	r2, [r3, #36]	; 0x24
	 *
	 * 4. Además, en el mismo "case" podemos configurar el modo del PWM, su polaridad...
	 *
	 * 5. Y además activamos el preload bit, para que cada vez que exista un update-event
	 * el valor cargado en el CCRx será recargado en el registro "shadow" del PWM */
	switch (ptrPwmHandler->config.channel) {
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	791b      	ldrb	r3, [r3, #4]
 8003e7a:	2b03      	cmp	r3, #3
 8003e7c:	d86e      	bhi.n	8003f5c <pwm_Config+0x194>
 8003e7e:	a201      	add	r2, pc, #4	; (adr r2, 8003e84 <pwm_Config+0xbc>)
 8003e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e84:	08003e95 	.word	0x08003e95
 8003e88:	08003ec7 	.word	0x08003ec7
 8003e8c:	08003ef9 	.word	0x08003ef9
 8003e90:	08003f2b 	.word	0x08003f2b
	case PWM_CHANNEL_1: {
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~(0b11 << TIM_CCMR1_CC1S_Pos);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	699a      	ldr	r2, [r3, #24]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f022 0203 	bic.w	r2, r2, #3
 8003ea2:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= (0b110 << TIM_CCMR1_OC1M_Pos);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	699a      	ldr	r2, [r3, #24]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8003eb2:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	699a      	ldr	r2, [r3, #24]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f042 0208 	orr.w	r2, r2, #8
 8003ec2:	619a      	str	r2, [r3, #24]

		break;
 8003ec4:	e04b      	b.n	8003f5e <pwm_Config+0x196>
	}

	case PWM_CHANNEL_2: {
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~(0b11 << TIM_CCMR1_CC2S_Pos);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	699a      	ldr	r2, [r3, #24]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003ed4:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= (0b110 << TIM_CCMR1_OC2M_Pos);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	699a      	ldr	r2, [r3, #24]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8003ee4:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	699a      	ldr	r2, [r3, #24]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ef4:	619a      	str	r2, [r3, #24]

		break;
 8003ef6:	e032      	b.n	8003f5e <pwm_Config+0x196>
	}
	case PWM_CHANNEL_3: {
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~(0b11 << TIM_CCMR2_CC3S_Pos);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	69da      	ldr	r2, [r3, #28]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f022 0203 	bic.w	r2, r2, #3
 8003f06:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= (0b110 << TIM_CCMR2_OC3M_Pos);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	69da      	ldr	r2, [r3, #28]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8003f16:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	69da      	ldr	r2, [r3, #28]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f042 0208 	orr.w	r2, r2, #8
 8003f26:	61da      	str	r2, [r3, #28]

		break;
 8003f28:	e019      	b.n	8003f5e <pwm_Config+0x196>
	}
	case PWM_CHANNEL_4: {
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~(0b11 << TIM_CCMR2_CC4S_Pos);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	69da      	ldr	r2, [r3, #28]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003f38:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= (0b110 << TIM_CCMR2_OC4M_Pos);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	69da      	ldr	r2, [r3, #28]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8003f48:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	69da      	ldr	r2, [r3, #28]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f58:	61da      	str	r2, [r3, #28]

		break;
 8003f5a:	e000      	b.n	8003f5e <pwm_Config+0x196>
	}

	default: {
		break;
 8003f5c:	bf00      	nop
	}

	}		// fin del switch-case
	/* 6. Activamos la salida seleccionada */

}
 8003f5e:	bf00      	nop
 8003f60:	3708      	adds	r7, #8
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	40023800 	.word	0x40023800
 8003f6c:	40000400 	.word	0x40000400
 8003f70:	40000800 	.word	0x40000800
 8003f74:	40000c00 	.word	0x40000c00

08003f78 <startPwmSignal>:

/* Función para activar el Timer y activar todos el módulo PWM */
void startPwmSignal(PWM_Handler_t *ptrPwmHandler) {
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]

	//Activamos el timer

	ptrPwmHandler->ptrTIMx->CR1 &= ~(TIM_CR1_CEN);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f022 0201 	bic.w	r2, r2, #1
 8003f8e:	601a      	str	r2, [r3, #0]
	ptrPwmHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f042 0201 	orr.w	r2, r2, #1
 8003f9e:	601a      	str	r2, [r3, #0]

	//Activamos la salida dependiendo del chanel usado

	switch (ptrPwmHandler->config.channel) {
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	791b      	ldrb	r3, [r3, #4]
 8003fa4:	2b03      	cmp	r3, #3
 8003fa6:	d82f      	bhi.n	8004008 <startPwmSignal+0x90>
 8003fa8:	a201      	add	r2, pc, #4	; (adr r2, 8003fb0 <startPwmSignal+0x38>)
 8003faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fae:	bf00      	nop
 8003fb0:	08003fc1 	.word	0x08003fc1
 8003fb4:	08003fd3 	.word	0x08003fd3
 8003fb8:	08003fe5 	.word	0x08003fe5
 8003fbc:	08003ff7 	.word	0x08003ff7
	case PWM_CHANNEL_1: {
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6a1a      	ldr	r2, [r3, #32]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f042 0201 	orr.w	r2, r2, #1
 8003fce:	621a      	str	r2, [r3, #32]

		break;
 8003fd0:	e01b      	b.n	800400a <startPwmSignal+0x92>
	}

	case PWM_CHANNEL_2: {
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	6a1a      	ldr	r2, [r3, #32]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f042 0210 	orr.w	r2, r2, #16
 8003fe0:	621a      	str	r2, [r3, #32]

		break;
 8003fe2:	e012      	b.n	800400a <startPwmSignal+0x92>
	}
	case PWM_CHANNEL_3: {
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	6a1a      	ldr	r2, [r3, #32]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ff2:	621a      	str	r2, [r3, #32]

		break;
 8003ff4:	e009      	b.n	800400a <startPwmSignal+0x92>
	}
	case PWM_CHANNEL_4: {
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	6a1a      	ldr	r2, [r3, #32]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004004:	621a      	str	r2, [r3, #32]

		break;
 8004006:	e000      	b.n	800400a <startPwmSignal+0x92>
	}

	default: {
		break;
 8004008:	bf00      	nop
	}
	}
}
 800400a:	bf00      	nop
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop

08004018 <enableOutput>:
		break;
	}
	}
}
/* Función encargada de activar cada uno de los canales con los que cuenta el TimerX */
void enableOutput(PWM_Handler_t *ptrPwmHandler) {
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]

	switch (ptrPwmHandler->config.channel) {
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	791b      	ldrb	r3, [r3, #4]
 8004024:	2b03      	cmp	r3, #3
 8004026:	d82f      	bhi.n	8004088 <enableOutput+0x70>
 8004028:	a201      	add	r2, pc, #4	; (adr r2, 8004030 <enableOutput+0x18>)
 800402a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800402e:	bf00      	nop
 8004030:	08004041 	.word	0x08004041
 8004034:	08004053 	.word	0x08004053
 8004038:	08004065 	.word	0x08004065
 800403c:	08004077 	.word	0x08004077
	case PWM_CHANNEL_1: {
		// Activamos la salida del canal 1
		/* agregue acá su código */
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	6a1a      	ldr	r2, [r3, #32]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f042 0201 	orr.w	r2, r2, #1
 800404e:	621a      	str	r2, [r3, #32]

		break;
 8004050:	e01b      	b.n	800408a <enableOutput+0x72>
	}

	case PWM_CHANNEL_2: {
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	6a1a      	ldr	r2, [r3, #32]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f042 0210 	orr.w	r2, r2, #16
 8004060:	621a      	str	r2, [r3, #32]

		break;
 8004062:	e012      	b.n	800408a <enableOutput+0x72>
	}
	case PWM_CHANNEL_3: {
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	6a1a      	ldr	r2, [r3, #32]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004072:	621a      	str	r2, [r3, #32]

		break;
 8004074:	e009      	b.n	800408a <enableOutput+0x72>
	}
	case PWM_CHANNEL_4: {
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	6a1a      	ldr	r2, [r3, #32]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004084:	621a      	str	r2, [r3, #32]

		break;
 8004086:	e000      	b.n	800408a <enableOutput+0x72>
	}

	default: {
		break;
 8004088:	bf00      	nop
	}
	}
}
 800408a:	bf00      	nop
 800408c:	370c      	adds	r7, #12
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop

08004098 <setFrequency>:
/* 
 * La frecuencia es definida por el conjunto formado por el preescaler (PSC)
 * y el valor límite al que llega el Timer (ARR), con estos dos se establece
 * la frecuencia.
 * */
void setFrequency(PWM_Handler_t *ptrPwmHandler) {
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]

	// Cargamos el valor del prescaler, nos define la velocidad (en ns) a la cual
	// se incrementa el Timer
	ptrPwmHandler->ptrTIMx->PSC = ptrPwmHandler->config.prescaler - 1;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	689a      	ldr	r2, [r3, #8]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	3a01      	subs	r2, #1
 80040aa:	629a      	str	r2, [r3, #40]	; 0x28

	// Cargamos el valor del ARR, el cual es el límite de incrementos del Timer
	// antes de hacer un update y reload.
	ptrPwmHandler->ptrTIMx->ARR = ptrPwmHandler->config.periodo - 1;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	899b      	ldrh	r3, [r3, #12]
 80040b0:	1e5a      	subs	r2, r3, #1
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80040b8:	bf00      	nop
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <setDuttyCycle>:
	// Llamamos a la fucnión que cambia la frecuencia
	setFrequency(ptrPwmHandler);
}

/* El valor del dutty debe estar dado en valores de %, entre 0% y 100%*/
void setDuttyCycle(PWM_Handler_t *ptrPwmHandler) {
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch (ptrPwmHandler->config.channel) {
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	791b      	ldrb	r3, [r3, #4]
 80040d0:	2b03      	cmp	r3, #3
 80040d2:	d823      	bhi.n	800411c <setDuttyCycle+0x58>
 80040d4:	a201      	add	r2, pc, #4	; (adr r2, 80040dc <setDuttyCycle+0x18>)
 80040d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040da:	bf00      	nop
 80040dc:	080040ed 	.word	0x080040ed
 80040e0:	080040f9 	.word	0x080040f9
 80040e4:	08004105 	.word	0x08004105
 80040e8:	08004111 	.word	0x08004111
	case PWM_CHANNEL_1: {
		ptrPwmHandler->ptrTIMx->CCR1 = ptrPwmHandler->config.duttyCicle;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	89da      	ldrh	r2, [r3, #14]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	635a      	str	r2, [r3, #52]	; 0x34

		break;
 80040f6:	e012      	b.n	800411e <setDuttyCycle+0x5a>
	}

	case PWM_CHANNEL_2: {
		ptrPwmHandler->ptrTIMx->CCR2 = ptrPwmHandler->config.duttyCicle;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	89da      	ldrh	r2, [r3, #14]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	639a      	str	r2, [r3, #56]	; 0x38

		break;
 8004102:	e00c      	b.n	800411e <setDuttyCycle+0x5a>
	}

	case PWM_CHANNEL_3: {
		ptrPwmHandler->ptrTIMx->CCR3 = ptrPwmHandler->config.duttyCicle;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	89da      	ldrh	r2, [r3, #14]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	63da      	str	r2, [r3, #60]	; 0x3c

		break;
 800410e:	e006      	b.n	800411e <setDuttyCycle+0x5a>
	}

	case PWM_CHANNEL_4: {
		ptrPwmHandler->ptrTIMx->CCR4 = ptrPwmHandler->config.duttyCicle;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	89da      	ldrh	r2, [r3, #14]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	641a      	str	r2, [r3, #64]	; 0x40

		break;
 800411a:	e000      	b.n	800411e <setDuttyCycle+0x5a>
	}

	default: {
		break;
 800411c:	bf00      	nop
	}

	}	// fin del switch-case

}
 800411e:	bf00      	nop
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop

0800412c <pwmSetPolarity>:

	// Llamamos a la fucnión que cambia el dutty y cargamos el nuevo valor
	setDuttyCycle(ptrPwmHandler);
}

void pwmSetPolarity(PWM_Handler_t *ptrPwmHandler) {
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
	// Seleccionamos el canal para configurar su dutty
	switch (ptrPwmHandler->config.channel) {
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	791b      	ldrb	r3, [r3, #4]
 8004138:	2b03      	cmp	r3, #3
 800413a:	d85b      	bhi.n	80041f4 <pwmSetPolarity+0xc8>
 800413c:	a201      	add	r2, pc, #4	; (adr r2, 8004144 <pwmSetPolarity+0x18>)
 800413e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004142:	bf00      	nop
 8004144:	08004155 	.word	0x08004155
 8004148:	0800417d 	.word	0x0800417d
 800414c:	080041a5 	.word	0x080041a5
 8004150:	080041cd 	.word	0x080041cd
	case PWM_CHANNEL_1: {
		ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	6a1a      	ldr	r2, [r3, #32]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f022 0202 	bic.w	r2, r2, #2
 8004162:	621a      	str	r2, [r3, #32]
		ptrPwmHandler->ptrTIMx->CCER |= ptrPwmHandler->config.polarity<<TIM_CCER_CC1P_Pos;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	6a1a      	ldr	r2, [r3, #32]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	7c1b      	ldrb	r3, [r3, #16]
 800416e:	005b      	lsls	r3, r3, #1
 8004170:	4619      	mov	r1, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	430a      	orrs	r2, r1
 8004178:	621a      	str	r2, [r3, #32]
		break;
 800417a:	e03c      	b.n	80041f6 <pwmSetPolarity+0xca>
	}

	case PWM_CHANNEL_2: {
		ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	6a1a      	ldr	r2, [r3, #32]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f022 0220 	bic.w	r2, r2, #32
 800418a:	621a      	str	r2, [r3, #32]
		ptrPwmHandler->ptrTIMx->CCER |= ptrPwmHandler->config.polarity<<TIM_CCER_CC2P_Pos;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	6a1a      	ldr	r2, [r3, #32]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	7c1b      	ldrb	r3, [r3, #16]
 8004196:	015b      	lsls	r3, r3, #5
 8004198:	4619      	mov	r1, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	430a      	orrs	r2, r1
 80041a0:	621a      	str	r2, [r3, #32]

		break;
 80041a2:	e028      	b.n	80041f6 <pwmSetPolarity+0xca>
	}

	case PWM_CHANNEL_3: {
		ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	6a1a      	ldr	r2, [r3, #32]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80041b2:	621a      	str	r2, [r3, #32]
		ptrPwmHandler->ptrTIMx->CCER |= ptrPwmHandler->config.polarity<<TIM_CCER_CC3P_Pos;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	6a1a      	ldr	r2, [r3, #32]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	7c1b      	ldrb	r3, [r3, #16]
 80041be:	025b      	lsls	r3, r3, #9
 80041c0:	4619      	mov	r1, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	430a      	orrs	r2, r1
 80041c8:	621a      	str	r2, [r3, #32]

		break;
 80041ca:	e014      	b.n	80041f6 <pwmSetPolarity+0xca>
	}

	case PWM_CHANNEL_4: {
		ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	6a1a      	ldr	r2, [r3, #32]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041da:	621a      	str	r2, [r3, #32]
		ptrPwmHandler->ptrTIMx->CCER |= ptrPwmHandler->config.polarity<<TIM_CCER_CC4P_Pos;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	6a1a      	ldr	r2, [r3, #32]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	7c1b      	ldrb	r3, [r3, #16]
 80041e6:	035b      	lsls	r3, r3, #13
 80041e8:	4619      	mov	r1, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	430a      	orrs	r2, r1
 80041f0:	621a      	str	r2, [r3, #32]

		break;
 80041f2:	e000      	b.n	80041f6 <pwmSetPolarity+0xca>
	}

	default: {
		break;
 80041f4:	bf00      	nop
	}

	}	// fin del switch-case
}
 80041f6:	bf00      	nop
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop

08004204 <pwmUpdatePolarity>:

void pwmUpdatePolarity(PWM_Handler_t *ptrPwmHandler, uint8_t newPolarity) {
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	460b      	mov	r3, r1
 800420e:	70fb      	strb	r3, [r7, #3]
	// Actualizamos el registro que manipula el dutty
	ptrPwmHandler->config.polarity = newPolarity;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	78fa      	ldrb	r2, [r7, #3]
 8004214:	741a      	strb	r2, [r3, #16]

	pwmSetPolarity(ptrPwmHandler);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f7ff ff88 	bl	800412c <pwmSetPolarity>
}
 800421c:	bf00      	nop
 800421e:	3708      	adds	r7, #8
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <__NVIC_EnableIRQ>:
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	4603      	mov	r3, r0
 800422c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800422e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004232:	2b00      	cmp	r3, #0
 8004234:	db0b      	blt.n	800424e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004236:	79fb      	ldrb	r3, [r7, #7]
 8004238:	f003 021f 	and.w	r2, r3, #31
 800423c:	4907      	ldr	r1, [pc, #28]	; (800425c <__NVIC_EnableIRQ+0x38>)
 800423e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004242:	095b      	lsrs	r3, r3, #5
 8004244:	2001      	movs	r0, #1
 8004246:	fa00 f202 	lsl.w	r2, r0, r2
 800424a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800424e:	bf00      	nop
 8004250:	370c      	adds	r7, #12
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	e000e100 	.word	0xe000e100

08004260 <USART_Config>:
/**
 * Configurando el puerto Serial...
 * Recordar que siempre se debe comenzar con activar la señal de reloj
 * del periferico que se está utilizando.
 */
void USART_Config(USART_Handler_t *ptrUsartHandler) {
 8004260:	b5b0      	push	{r4, r5, r7, lr}
 8004262:	b090      	sub	sp, #64	; 0x40
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8004268:	b672      	cpsid	i
}
 800426a:	bf00      	nop
	__disable_irq();

	/* 1. Activamos la señal de reloj que viene desde el BUS al que pertenece el periferico */
	/* Lo debemos hacer para cada uno de las pisbles opciones que tengamos (USART1, USART2, USART6) */
	/* 1.1 Configuramos el USART1 */
	if (ptrUsartHandler->ptrUSARTx == USART1) {
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a85      	ldr	r2, [pc, #532]	; (8004488 <USART_Config+0x228>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d106      	bne.n	8004284 <USART_Config+0x24>
		RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8004276:	4b85      	ldr	r3, [pc, #532]	; (800448c <USART_Config+0x22c>)
 8004278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800427a:	4a84      	ldr	r2, [pc, #528]	; (800448c <USART_Config+0x22c>)
 800427c:	f043 0310 	orr.w	r3, r3, #16
 8004280:	6453      	str	r3, [r2, #68]	; 0x44
 8004282:	e016      	b.n	80042b2 <USART_Config+0x52>
	}

	/* 1.2 Configuramos el USART2 */
	else if (ptrUsartHandler->ptrUSARTx == USART2) {
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a81      	ldr	r2, [pc, #516]	; (8004490 <USART_Config+0x230>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d106      	bne.n	800429c <USART_Config+0x3c>
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 800428e:	4b7f      	ldr	r3, [pc, #508]	; (800448c <USART_Config+0x22c>)
 8004290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004292:	4a7e      	ldr	r2, [pc, #504]	; (800448c <USART_Config+0x22c>)
 8004294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004298:	6413      	str	r3, [r2, #64]	; 0x40
 800429a:	e00a      	b.n	80042b2 <USART_Config+0x52>
	}

	/* 1.3 Configuramos el USART6 */
	else if (ptrUsartHandler->ptrUSARTx == USART6) {
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a7c      	ldr	r2, [pc, #496]	; (8004494 <USART_Config+0x234>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d105      	bne.n	80042b2 <USART_Config+0x52>
		RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 80042a6:	4b79      	ldr	r3, [pc, #484]	; (800448c <USART_Config+0x22c>)
 80042a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042aa:	4a78      	ldr	r2, [pc, #480]	; (800448c <USART_Config+0x22c>)
 80042ac:	f043 0320 	orr.w	r3, r3, #32
 80042b0:	6453      	str	r3, [r2, #68]	; 0x44
	/* Configuracion del Baudrate (registro BRR) */
	/* Configuramos el modo: only TX, only RX, o RXTX */
	/* Por ultimo activamos el modulo USART cuando todos esta correctamente configurado */

	// 2.1 Comienzo por limpiar los registros, para cargar la configuración desde cero
	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2200      	movs	r2, #0
 80042b8:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2200      	movs	r2, #0
 80042c0:	611a      	str	r2, [r3, #16]

	// 2.2 Configuracion del Parity:
	// Verificamos si el parity esta activado o no
	// Tenga cuidado, el parity hace parte del tamaño de los datos...
	if (ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE) {
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	7b5b      	ldrb	r3, [r3, #13]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d01d      	beq.n	8004306 <USART_Config+0xa6>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PCE; // Activamos la seleccion de paridad
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68da      	ldr	r2, [r3, #12]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042d8:	60da      	str	r2, [r3, #12]
		// Verificamos si se ha seleccionado ODD or EVEN
		if (ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_EVEN) {
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	7b5b      	ldrb	r3, [r3, #13]
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d108      	bne.n	80042f4 <USART_Config+0x94>
			// Es even, entonces cargamos la configuracion adecuada
			// Escriba acá su código
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_PS); //Queremos que sea 0
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68da      	ldr	r2, [r3, #12]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80042f0:	60da      	str	r2, [r3, #12]
 80042f2:	e010      	b.n	8004316 <USART_Config+0xb6>
		} else {
			// Si es "else" significa que la paridad seleccionada es ODD, y cargamos esta configuracion
			// Escriba acá su código
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS; //Queremos que sea 1
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68da      	ldr	r2, [r3, #12]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004302:	60da      	str	r2, [r3, #12]
 8004304:	e007      	b.n	8004316 <USART_Config+0xb6>
		}
	} else {
		// Si llegamos aca, es porque no deseamos tener el parity-check
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_PCE); // Activamos la seleccion de paridad
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68da      	ldr	r2, [r3, #12]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004314:	60da      	str	r2, [r3, #12]

	}

	// 2.3 Configuramos el tamaño del dato
	if (ptrUsartHandler->USART_Config.USART_datasize == USART_DATASIZE_8BIT) {
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	7b1b      	ldrb	r3, [r3, #12]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d108      	bne.n	8004330 <USART_Config+0xd0>
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_M); // Lo ponemos en 8 bits
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68da      	ldr	r2, [r3, #12]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800432c:	60da      	str	r2, [r3, #12]
 800432e:	e007      	b.n	8004340 <USART_Config+0xe0>
	} else {
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M; // Lo ponemos en 9 bits
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68da      	ldr	r2, [r3, #12]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800433e:	60da      	str	r2, [r3, #12]
	}

	// 2.4 Configuramos los stop bits (SFR USART_CR2)
	switch (ptrUsartHandler->USART_Config.USART_stopbits) {
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	7b9b      	ldrb	r3, [r3, #14]
 8004344:	2b03      	cmp	r3, #3
 8004346:	d82f      	bhi.n	80043a8 <USART_Config+0x148>
 8004348:	a201      	add	r2, pc, #4	; (adr r2, 8004350 <USART_Config+0xf0>)
 800434a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800434e:	bf00      	nop
 8004350:	08004361 	.word	0x08004361
 8004354:	08004373 	.word	0x08004373
 8004358:	08004385 	.word	0x08004385
 800435c:	08004397 	.word	0x08004397
	case USART_STOPBIT_1: {
		// Debemoscargar el valor 0b00 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00 < USART_CR2_STOP_Pos);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	691a      	ldr	r2, [r3, #16]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f042 0201 	orr.w	r2, r2, #1
 800436e:	611a      	str	r2, [r3, #16]
		break;
 8004370:	e023      	b.n	80043ba <USART_Config+0x15a>
	}
	case USART_STOPBIT_0_5: {
		// Debemoscargar el valor 0b01 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b01 < USART_CR2_STOP_Pos);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	691a      	ldr	r2, [r3, #16]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f042 0201 	orr.w	r2, r2, #1
 8004380:	611a      	str	r2, [r3, #16]
		break;
 8004382:	e01a      	b.n	80043ba <USART_Config+0x15a>
	}
	case USART_STOPBIT_2: {
		// Debemoscargar el valor 0b10 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b10 < USART_CR2_STOP_Pos);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	691a      	ldr	r2, [r3, #16]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f042 0201 	orr.w	r2, r2, #1
 8004392:	611a      	str	r2, [r3, #16]
		break;
 8004394:	e011      	b.n	80043ba <USART_Config+0x15a>
	}
	case USART_STOPBIT_1_5: {
		// Debemoscargar el valor 0b11 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b11 < USART_CR2_STOP_Pos);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	691a      	ldr	r2, [r3, #16]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f042 0201 	orr.w	r2, r2, #1
 80043a4:	611a      	str	r2, [r3, #16]
		break;
 80043a6:	e008      	b.n	80043ba <USART_Config+0x15a>
	}
	default: {
		// En el casopor defecto seleccionamos 1 bit de parada
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00 < USART_CR2_STOP_Pos);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	691a      	ldr	r2, [r3, #16]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f042 0201 	orr.w	r2, r2, #1
 80043b6:	611a      	str	r2, [r3, #16]
		break;
 80043b8:	bf00      	nop
	}
	}
	//Obtenes la frecuencia actual desde el PLL, si estamos en usart2 toca dividirla entre 2
	uint16_t freckClock = getFreqPLL();
 80043ba:	f7ff fcf1 	bl	8003da0 <getFreqPLL>
 80043be:	4603      	mov	r3, r0
 80043c0:	87fb      	strh	r3, [r7, #62]	; 0x3e
	if (ptrUsartHandler->ptrUSARTx == USART2 && freckClock > 50) {
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a32      	ldr	r2, [pc, #200]	; (8004490 <USART_Config+0x230>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d107      	bne.n	80043dc <USART_Config+0x17c>
 80043cc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80043ce:	2b32      	cmp	r3, #50	; 0x32
 80043d0:	d904      	bls.n	80043dc <USART_Config+0x17c>
		freckClock = getFreqPLL() / 2;
 80043d2:	f7ff fce5 	bl	8003da0 <getFreqPLL>
 80043d6:	4603      	mov	r3, r0
 80043d8:	085b      	lsrs	r3, r3, #1
 80043da:	87fb      	strh	r3, [r7, #62]	; 0x3e
	}
	// 2.5 Configuracion del Baudrate (SFR USART_BRR)
	// Ver tabla de valores (Tabla 73), Frec = 16MHz, overr = 0;
	//Se dejan los comentarios antiguos pero ahora se utilizan formulas
	//matematicas para calcular los resultados automaticamente.
	if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600) {
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d15b      	bne.n	800449c <USART_Config+0x23c>
		float div = (freckClock * 1E6) / (16 * 9600);
 80043e4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7fc f8b4 	bl	8000554 <__aeabi_i2d>
 80043ec:	a324      	add	r3, pc, #144	; (adr r3, 8004480 <USART_Config+0x220>)
 80043ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f2:	f7fc f919 	bl	8000628 <__aeabi_dmul>
 80043f6:	4602      	mov	r2, r0
 80043f8:	460b      	mov	r3, r1
 80043fa:	4610      	mov	r0, r2
 80043fc:	4619      	mov	r1, r3
 80043fe:	f04f 0200 	mov.w	r2, #0
 8004402:	4b25      	ldr	r3, [pc, #148]	; (8004498 <USART_Config+0x238>)
 8004404:	f7fc fa3a 	bl	800087c <__aeabi_ddiv>
 8004408:	4602      	mov	r2, r0
 800440a:	460b      	mov	r3, r1
 800440c:	4610      	mov	r0, r2
 800440e:	4619      	mov	r1, r3
 8004410:	f7fc fc02 	bl	8000c18 <__aeabi_d2f>
 8004414:	4603      	mov	r3, r0
 8004416:	617b      	str	r3, [r7, #20]
		uint16_t mantissa = (int) div;
 8004418:	edd7 7a05 	vldr	s15, [r7, #20]
 800441c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004420:	ee17 3a90 	vmov	r3, s15
 8004424:	827b      	strh	r3, [r7, #18]
		uint16_t fraction = (int) round((div - mantissa) * 16);
 8004426:	8a7b      	ldrh	r3, [r7, #18]
 8004428:	ee07 3a90 	vmov	s15, r3
 800442c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004430:	ed97 7a05 	vldr	s14, [r7, #20]
 8004434:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004438:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800443c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004440:	ee17 0a90 	vmov	r0, s15
 8004444:	f7fc f898 	bl	8000578 <__aeabi_f2d>
 8004448:	4602      	mov	r2, r0
 800444a:	460b      	mov	r3, r1
 800444c:	ec43 2b10 	vmov	d0, r2, r3
 8004450:	f005 fc32 	bl	8009cb8 <round>
 8004454:	ec53 2b10 	vmov	r2, r3, d0
 8004458:	4610      	mov	r0, r2
 800445a:	4619      	mov	r1, r3
 800445c:	f7fc fb94 	bl	8000b88 <__aeabi_d2iz>
 8004460:	4603      	mov	r3, r0
 8004462:	823b      	strh	r3, [r7, #16]
		uint16_t result = mantissa << 4 | fraction;
 8004464:	8a7b      	ldrh	r3, [r7, #18]
 8004466:	011b      	lsls	r3, r3, #4
 8004468:	b21a      	sxth	r2, r3
 800446a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800446e:	4313      	orrs	r3, r2
 8004470:	b21b      	sxth	r3, r3
 8004472:	81fb      	strh	r3, [r7, #14]
		ptrUsartHandler->ptrUSARTx->BRR = result;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	89fa      	ldrh	r2, [r7, #14]
 800447a:	609a      	str	r2, [r3, #8]
 800447c:	e103      	b.n	8004686 <USART_Config+0x426>
 800447e:	bf00      	nop
 8004480:	00000000 	.word	0x00000000
 8004484:	412e8480 	.word	0x412e8480
 8004488:	40011000 	.word	0x40011000
 800448c:	40023800 	.word	0x40023800
 8004490:	40004400 	.word	0x40004400
 8004494:	40011400 	.word	0x40011400
 8004498:	4102c000 	.word	0x4102c000
		// Valor a cargar 0x0683
		// Configurando el Baudrate generator para una velocidad de 9600bps

	}

	else if (ptrUsartHandler->USART_Config.USART_baudrate
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d14c      	bne.n	800453e <USART_Config+0x2de>
			== USART_BAUDRATE_19200) {
		float div = (freckClock * 1E6) / (16 * 19200);
 80044a4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7fc f854 	bl	8000554 <__aeabi_i2d>
 80044ac:	a39c      	add	r3, pc, #624	; (adr r3, 8004720 <USART_Config+0x4c0>)
 80044ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b2:	f7fc f8b9 	bl	8000628 <__aeabi_dmul>
 80044b6:	4602      	mov	r2, r0
 80044b8:	460b      	mov	r3, r1
 80044ba:	4610      	mov	r0, r2
 80044bc:	4619      	mov	r1, r3
 80044be:	f04f 0200 	mov.w	r2, #0
 80044c2:	4b9b      	ldr	r3, [pc, #620]	; (8004730 <USART_Config+0x4d0>)
 80044c4:	f7fc f9da 	bl	800087c <__aeabi_ddiv>
 80044c8:	4602      	mov	r2, r0
 80044ca:	460b      	mov	r3, r1
 80044cc:	4610      	mov	r0, r2
 80044ce:	4619      	mov	r1, r3
 80044d0:	f7fc fba2 	bl	8000c18 <__aeabi_d2f>
 80044d4:	4603      	mov	r3, r0
 80044d6:	623b      	str	r3, [r7, #32]
		uint16_t mantissa = (int) div;
 80044d8:	edd7 7a08 	vldr	s15, [r7, #32]
 80044dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044e0:	ee17 3a90 	vmov	r3, s15
 80044e4:	83fb      	strh	r3, [r7, #30]
		uint16_t fraction = (int) round((div - mantissa) * 16);
 80044e6:	8bfb      	ldrh	r3, [r7, #30]
 80044e8:	ee07 3a90 	vmov	s15, r3
 80044ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044f0:	ed97 7a08 	vldr	s14, [r7, #32]
 80044f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044f8:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80044fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004500:	ee17 0a90 	vmov	r0, s15
 8004504:	f7fc f838 	bl	8000578 <__aeabi_f2d>
 8004508:	4602      	mov	r2, r0
 800450a:	460b      	mov	r3, r1
 800450c:	ec43 2b10 	vmov	d0, r2, r3
 8004510:	f005 fbd2 	bl	8009cb8 <round>
 8004514:	ec53 2b10 	vmov	r2, r3, d0
 8004518:	4610      	mov	r0, r2
 800451a:	4619      	mov	r1, r3
 800451c:	f7fc fb34 	bl	8000b88 <__aeabi_d2iz>
 8004520:	4603      	mov	r3, r0
 8004522:	83bb      	strh	r3, [r7, #28]
		uint16_t result = mantissa << 4 | fraction;
 8004524:	8bfb      	ldrh	r3, [r7, #30]
 8004526:	011b      	lsls	r3, r3, #4
 8004528:	b21a      	sxth	r2, r3
 800452a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800452e:	4313      	orrs	r3, r2
 8004530:	b21b      	sxth	r3, r3
 8004532:	837b      	strh	r3, [r7, #26]
		ptrUsartHandler->ptrUSARTx->BRR = result;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	8b7a      	ldrh	r2, [r7, #26]
 800453a:	609a      	str	r2, [r3, #8]
 800453c:	e0a3      	b.n	8004686 <USART_Config+0x426>
		// Mantiza = 52 = 0x34, fraction = 16 * 0.1875 = 1
		// Valor a cargar 0x0341
		// Escriba acá su código y los comentarios que faltan
	}

	else if (ptrUsartHandler->USART_Config.USART_baudrate
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	2b02      	cmp	r3, #2
 8004544:	d14c      	bne.n	80045e0 <USART_Config+0x380>
			== USART_BAUDRATE_115200) {
		float div = (freckClock * 1E6) / (16 * 115200);
 8004546:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004548:	4618      	mov	r0, r3
 800454a:	f7fc f803 	bl	8000554 <__aeabi_i2d>
 800454e:	a374      	add	r3, pc, #464	; (adr r3, 8004720 <USART_Config+0x4c0>)
 8004550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004554:	f7fc f868 	bl	8000628 <__aeabi_dmul>
 8004558:	4602      	mov	r2, r0
 800455a:	460b      	mov	r3, r1
 800455c:	4610      	mov	r0, r2
 800455e:	4619      	mov	r1, r3
 8004560:	a371      	add	r3, pc, #452	; (adr r3, 8004728 <USART_Config+0x4c8>)
 8004562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004566:	f7fc f989 	bl	800087c <__aeabi_ddiv>
 800456a:	4602      	mov	r2, r0
 800456c:	460b      	mov	r3, r1
 800456e:	4610      	mov	r0, r2
 8004570:	4619      	mov	r1, r3
 8004572:	f7fc fb51 	bl	8000c18 <__aeabi_d2f>
 8004576:	4603      	mov	r3, r0
 8004578:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint16_t mantissa = (int) div;
 800457a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800457e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004582:	ee17 3a90 	vmov	r3, s15
 8004586:	857b      	strh	r3, [r7, #42]	; 0x2a
		uint16_t fraction = (int) round((div - mantissa) * 16);
 8004588:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800458a:	ee07 3a90 	vmov	s15, r3
 800458e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004592:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8004596:	ee77 7a67 	vsub.f32	s15, s14, s15
 800459a:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800459e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045a2:	ee17 0a90 	vmov	r0, s15
 80045a6:	f7fb ffe7 	bl	8000578 <__aeabi_f2d>
 80045aa:	4602      	mov	r2, r0
 80045ac:	460b      	mov	r3, r1
 80045ae:	ec43 2b10 	vmov	d0, r2, r3
 80045b2:	f005 fb81 	bl	8009cb8 <round>
 80045b6:	ec53 2b10 	vmov	r2, r3, d0
 80045ba:	4610      	mov	r0, r2
 80045bc:	4619      	mov	r1, r3
 80045be:	f7fc fae3 	bl	8000b88 <__aeabi_d2iz>
 80045c2:	4603      	mov	r3, r0
 80045c4:	853b      	strh	r3, [r7, #40]	; 0x28
		uint16_t result = mantissa << 4 | fraction;
 80045c6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80045c8:	011b      	lsls	r3, r3, #4
 80045ca:	b21a      	sxth	r2, r3
 80045cc:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80045d0:	4313      	orrs	r3, r2
 80045d2:	b21b      	sxth	r3, r3
 80045d4:	84fb      	strh	r3, [r7, #38]	; 0x26
		ptrUsartHandler->ptrUSARTx->BRR = result;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80045dc:	609a      	str	r2, [r3, #8]
 80045de:	e052      	b.n	8004686 <USART_Config+0x426>
		// Valor a cargar 0x008B
		// Escriba acá su código y los comentarios que faltan
	}

	else {
		float div = (freckClock * 1E6) / (16 * ptrUsartHandler->USART_Config.USART_baudrate);
 80045e0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7fb ffb6 	bl	8000554 <__aeabi_i2d>
 80045e8:	a34d      	add	r3, pc, #308	; (adr r3, 8004720 <USART_Config+0x4c0>)
 80045ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ee:	f7fc f81b 	bl	8000628 <__aeabi_dmul>
 80045f2:	4602      	mov	r2, r0
 80045f4:	460b      	mov	r3, r1
 80045f6:	4614      	mov	r4, r2
 80045f8:	461d      	mov	r5, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	011b      	lsls	r3, r3, #4
 8004600:	4618      	mov	r0, r3
 8004602:	f7fb ff97 	bl	8000534 <__aeabi_ui2d>
 8004606:	4602      	mov	r2, r0
 8004608:	460b      	mov	r3, r1
 800460a:	4620      	mov	r0, r4
 800460c:	4629      	mov	r1, r5
 800460e:	f7fc f935 	bl	800087c <__aeabi_ddiv>
 8004612:	4602      	mov	r2, r0
 8004614:	460b      	mov	r3, r1
 8004616:	4610      	mov	r0, r2
 8004618:	4619      	mov	r1, r3
 800461a:	f7fc fafd 	bl	8000c18 <__aeabi_d2f>
 800461e:	4603      	mov	r3, r0
 8004620:	63bb      	str	r3, [r7, #56]	; 0x38
		uint16_t mantissa = (int) div;
 8004622:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8004626:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800462a:	ee17 3a90 	vmov	r3, s15
 800462e:	86fb      	strh	r3, [r7, #54]	; 0x36
		uint16_t fraction = (int) round((div - mantissa) * 16);
 8004630:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004632:	ee07 3a90 	vmov	s15, r3
 8004636:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800463a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800463e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004642:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8004646:	ee67 7a87 	vmul.f32	s15, s15, s14
 800464a:	ee17 0a90 	vmov	r0, s15
 800464e:	f7fb ff93 	bl	8000578 <__aeabi_f2d>
 8004652:	4602      	mov	r2, r0
 8004654:	460b      	mov	r3, r1
 8004656:	ec43 2b10 	vmov	d0, r2, r3
 800465a:	f005 fb2d 	bl	8009cb8 <round>
 800465e:	ec53 2b10 	vmov	r2, r3, d0
 8004662:	4610      	mov	r0, r2
 8004664:	4619      	mov	r1, r3
 8004666:	f7fc fa8f 	bl	8000b88 <__aeabi_d2iz>
 800466a:	4603      	mov	r3, r0
 800466c:	86bb      	strh	r3, [r7, #52]	; 0x34
		uint16_t result = mantissa << 4 | fraction;
 800466e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004670:	011b      	lsls	r3, r3, #4
 8004672:	b21a      	sxth	r2, r3
 8004674:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8004678:	4313      	orrs	r3, r2
 800467a:	b21b      	sxth	r3, r3
 800467c:	867b      	strh	r3, [r7, #50]	; 0x32
		ptrUsartHandler->ptrUSARTx->BRR = result;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8004684:	609a      	str	r2, [r3, #8]




	// 2.6 Configuramos el modo: TX only, RX only, RXTX, disable
	switch (ptrUsartHandler->USART_Config.USART_mode) {
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	791b      	ldrb	r3, [r3, #4]
 800468a:	2b03      	cmp	r3, #3
 800468c:	d852      	bhi.n	8004734 <USART_Config+0x4d4>
 800468e:	a201      	add	r2, pc, #4	; (adr r2, 8004694 <USART_Config+0x434>)
 8004690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004694:	080046a5 	.word	0x080046a5
 8004698:	080046b7 	.word	0x080046b7
 800469c:	080046c9 	.word	0x080046c9
 80046a0:	080046eb 	.word	0x080046eb
	case USART_MODE_TX: {
		// Activamos la parte del sistema encargada de enviar
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68da      	ldr	r2, [r3, #12]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f042 0208 	orr.w	r2, r2, #8
 80046b2:	60da      	str	r2, [r3, #12]
		break;
 80046b4:	e057      	b.n	8004766 <USART_Config+0x506>
	}
	case USART_MODE_RX: {
		// Activamos la parte del sistema encargada de recibir
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68da      	ldr	r2, [r3, #12]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f042 0204 	orr.w	r2, r2, #4
 80046c4:	60da      	str	r2, [r3, #12]
		break;
 80046c6:	e04e      	b.n	8004766 <USART_Config+0x506>
	}
	case USART_MODE_RXTX: {
		// Activamos ambas partes, tanto transmision como recepcion
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68da      	ldr	r2, [r3, #12]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f042 0208 	orr.w	r2, r2, #8
 80046d6:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68da      	ldr	r2, [r3, #12]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f042 0204 	orr.w	r2, r2, #4
 80046e6:	60da      	str	r2, [r3, #12]
		break;
 80046e8:	e03d      	b.n	8004766 <USART_Config+0x506>
	}
	case USART_MODE_DISABLE: {
		// Desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68da      	ldr	r2, [r3, #12]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046f8:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68da      	ldr	r2, [r3, #12]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f022 0208 	bic.w	r2, r2, #8
 8004708:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68da      	ldr	r2, [r3, #12]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f022 0204 	bic.w	r2, r2, #4
 8004718:	60da      	str	r2, [r3, #12]
		break;
 800471a:	e024      	b.n	8004766 <USART_Config+0x506>
 800471c:	f3af 8000 	nop.w
 8004720:	00000000 	.word	0x00000000
 8004724:	412e8480 	.word	0x412e8480
 8004728:	00000000 	.word	0x00000000
 800472c:	413c2000 	.word	0x413c2000
 8004730:	4112c000 	.word	0x4112c000
	}

	default: {
		// Actuando por defecto, desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68da      	ldr	r2, [r3, #12]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004742:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68da      	ldr	r2, [r3, #12]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f022 0208 	bic.w	r2, r2, #8
 8004752:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68da      	ldr	r2, [r3, #12]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f022 0204 	bic.w	r2, r2, #4
 8004762:	60da      	str	r2, [r3, #12]
		break;
 8004764:	bf00      	nop
	}
	}

	// 2.7 Activamos el modulo serial.
	if (ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE) {
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	791b      	ldrb	r3, [r3, #4]
 800476a:	2b03      	cmp	r3, #3
 800476c:	d007      	beq.n	800477e <USART_Config+0x51e>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68da      	ldr	r2, [r3, #12]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800477c:	60da      	str	r2, [r3, #12]
	}

	//3.Activamos la interrupcion para el rx USART_RX_Int_Ena y el TX
	ptrUsartHandler->ptrUSARTx->CR1 |=
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68da      	ldr	r2, [r3, #12]
			(ptrUsartHandler->USART_Config.USART_RX_Int_Ena
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	7bdb      	ldrb	r3, [r3, #15]
					<< USART_CR1_RXNEIE_Pos);
 8004788:	015b      	lsls	r3, r3, #5
 800478a:	4619      	mov	r1, r3
	ptrUsartHandler->ptrUSARTx->CR1 |=
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	430a      	orrs	r2, r1
 8004792:	60da      	str	r2, [r3, #12]

	/* 4.. Activamos el canal del sistema NVIC para que lea la interrupción*/
	if (ptrUsartHandler->ptrUSARTx == USART1) {
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a0f      	ldr	r2, [pc, #60]	; (80047d8 <USART_Config+0x578>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d103      	bne.n	80047a6 <USART_Config+0x546>
		// Activando en NVIC para la interrupción del USART1 USART1_IRQHandler
		NVIC_EnableIRQ(USART1_IRQn);
 800479e:	2025      	movs	r0, #37	; 0x25
 80047a0:	f7ff fd40 	bl	8004224 <__NVIC_EnableIRQ>
 80047a4:	e012      	b.n	80047cc <USART_Config+0x56c>
	} else if (ptrUsartHandler->ptrUSARTx == USART2) {
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a0c      	ldr	r2, [pc, #48]	; (80047dc <USART_Config+0x57c>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d103      	bne.n	80047b8 <USART_Config+0x558>
		// Activando en NVIC para la interrupción del USART2 USART1_IRQHandler
		NVIC_EnableIRQ(USART2_IRQn);
 80047b0:	2026      	movs	r0, #38	; 0x26
 80047b2:	f7ff fd37 	bl	8004224 <__NVIC_EnableIRQ>
 80047b6:	e009      	b.n	80047cc <USART_Config+0x56c>
	} else if (ptrUsartHandler->ptrUSARTx == USART6) {
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a08      	ldr	r2, [pc, #32]	; (80047e0 <USART_Config+0x580>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d103      	bne.n	80047ca <USART_Config+0x56a>
		// Activando en NVIC para la interrupción del USART6 USART1_IRQHandler
		NVIC_EnableIRQ(USART6_IRQn);
 80047c2:	2047      	movs	r0, #71	; 0x47
 80047c4:	f7ff fd2e 	bl	8004224 <__NVIC_EnableIRQ>
 80047c8:	e000      	b.n	80047cc <USART_Config+0x56c>
	}

	else {
		__NOP();
 80047ca:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 80047cc:	b662      	cpsie	i
}
 80047ce:	bf00      	nop
	}

	/* 5. Volvemos a activar las interrupciones del sistema */
	__enable_irq();
}
 80047d0:	bf00      	nop
 80047d2:	3740      	adds	r7, #64	; 0x40
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bdb0      	pop	{r4, r5, r7, pc}
 80047d8:	40011000 	.word	0x40011000
 80047dc:	40004400 	.word	0x40004400
 80047e0:	40011400 	.word	0x40011400

080047e4 <USART1Tx_Char>:

/*
 * Se crean este par de funciones en cada usart para el envio de datos
 * donde se utilizan las interrupciones.
 */
void USART1Tx_Char(void) {
 80047e4:	b480      	push	{r7}
 80047e6:	af00      	add	r7, sp, #0
	USART1->DR = dataToSend1;
 80047e8:	4b07      	ldr	r3, [pc, #28]	; (8004808 <USART1Tx_Char+0x24>)
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	4b07      	ldr	r3, [pc, #28]	; (800480c <USART1Tx_Char+0x28>)
 80047ee:	605a      	str	r2, [r3, #4]
	USART1->CR1 &= ~(USART_CR1_TXEIE);
 80047f0:	4b06      	ldr	r3, [pc, #24]	; (800480c <USART1Tx_Char+0x28>)
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	4a05      	ldr	r2, [pc, #20]	; (800480c <USART1Tx_Char+0x28>)
 80047f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047fa:	60d3      	str	r3, [r2, #12]

}
 80047fc:	bf00      	nop
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	200007b4 	.word	0x200007b4
 800480c:	40011000 	.word	0x40011000

08004810 <USART1Tx_String>:

void USART1Tx_String(void) {
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
	char auxData = stringToSend1[posicionActual1];
 8004816:	4b12      	ldr	r3, [pc, #72]	; (8004860 <USART1Tx_String+0x50>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a12      	ldr	r2, [pc, #72]	; (8004864 <USART1Tx_String+0x54>)
 800481c:	6812      	ldr	r2, [r2, #0]
 800481e:	4413      	add	r3, r2
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	71fb      	strb	r3, [r7, #7]
	if (auxData != 0) {
 8004824:	79fb      	ldrb	r3, [r7, #7]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d008      	beq.n	800483c <USART1Tx_String+0x2c>
		USART1->DR = auxData;
 800482a:	4a0f      	ldr	r2, [pc, #60]	; (8004868 <USART1Tx_String+0x58>)
 800482c:	79fb      	ldrb	r3, [r7, #7]
 800482e:	6053      	str	r3, [r2, #4]
		posicionActual1++;
 8004830:	4b0c      	ldr	r3, [pc, #48]	; (8004864 <USART1Tx_String+0x54>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	3301      	adds	r3, #1
 8004836:	4a0b      	ldr	r2, [pc, #44]	; (8004864 <USART1Tx_String+0x54>)
 8004838:	6013      	str	r3, [r2, #0]
		USART1->CR1 &= ~(USART_CR1_TXEIE);
		posicionActual6 = 0;
		flagNewData = 0;
	}

}
 800483a:	e00b      	b.n	8004854 <USART1Tx_String+0x44>
		USART1->CR1 &= ~(USART_CR1_TXEIE);
 800483c:	4b0a      	ldr	r3, [pc, #40]	; (8004868 <USART1Tx_String+0x58>)
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	4a09      	ldr	r2, [pc, #36]	; (8004868 <USART1Tx_String+0x58>)
 8004842:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004846:	60d3      	str	r3, [r2, #12]
		posicionActual6 = 0;
 8004848:	4b08      	ldr	r3, [pc, #32]	; (800486c <USART1Tx_String+0x5c>)
 800484a:	2200      	movs	r2, #0
 800484c:	601a      	str	r2, [r3, #0]
		flagNewData = 0;
 800484e:	4b08      	ldr	r3, [pc, #32]	; (8004870 <USART1Tx_String+0x60>)
 8004850:	2200      	movs	r2, #0
 8004852:	701a      	strb	r2, [r3, #0]
}
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr
 8004860:	200007b8 	.word	0x200007b8
 8004864:	200007c0 	.word	0x200007c0
 8004868:	40011000 	.word	0x40011000
 800486c:	200007d0 	.word	0x200007d0
 8004870:	200007b1 	.word	0x200007b1

08004874 <USART6Rx_Callback>:
		posicionActual2 = 0;
		flagNewData = 0;
	}

}
__attribute__((weak)) void USART6Rx_Callback(void) {
 8004874:	b480      	push	{r7}
 8004876:	af00      	add	r7, sp, #0
	/* NOTE : This function should not be modified, when the callback is needed,
	 the USART1_Callback could be implemented in the main file
	 */
	__NOP();
 8004878:	bf00      	nop
}
 800487a:	bf00      	nop
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <USART6Tx_Char>:
/*
 * Se crean este par de funciones en cada usart para el envio de datos
 * donde se utilizan las interrupciones.
 */
void USART6Tx_Char(void) {
 8004884:	b480      	push	{r7}
 8004886:	af00      	add	r7, sp, #0
	USART6->DR = dataToSend6;
 8004888:	4b07      	ldr	r3, [pc, #28]	; (80048a8 <USART6Tx_Char+0x24>)
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	4b07      	ldr	r3, [pc, #28]	; (80048ac <USART6Tx_Char+0x28>)
 800488e:	605a      	str	r2, [r3, #4]
	USART6->CR1 &= ~(USART_CR1_TXEIE);
 8004890:	4b06      	ldr	r3, [pc, #24]	; (80048ac <USART6Tx_Char+0x28>)
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	4a05      	ldr	r2, [pc, #20]	; (80048ac <USART6Tx_Char+0x28>)
 8004896:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800489a:	60d3      	str	r3, [r2, #12]

}
 800489c:	bf00      	nop
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	200007c4 	.word	0x200007c4
 80048ac:	40011400 	.word	0x40011400

080048b0 <USART6Tx_String>:

void USART6Tx_String(void) {
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
	char auxData = stringToSend6[posicionActual6];//se apagan las interrupciones por transmision
 80048b6:	4b12      	ldr	r3, [pc, #72]	; (8004900 <USART6Tx_String+0x50>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a12      	ldr	r2, [pc, #72]	; (8004904 <USART6Tx_String+0x54>)
 80048bc:	6812      	ldr	r2, [r2, #0]
 80048be:	4413      	add	r3, r2
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	71fb      	strb	r3, [r7, #7]
	if (auxData != 0) {
 80048c4:	79fb      	ldrb	r3, [r7, #7]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d008      	beq.n	80048dc <USART6Tx_String+0x2c>
		USART6->DR = auxData;
 80048ca:	4a0f      	ldr	r2, [pc, #60]	; (8004908 <USART6Tx_String+0x58>)
 80048cc:	79fb      	ldrb	r3, [r7, #7]
 80048ce:	6053      	str	r3, [r2, #4]
		posicionActual6++;
 80048d0:	4b0c      	ldr	r3, [pc, #48]	; (8004904 <USART6Tx_String+0x54>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	3301      	adds	r3, #1
 80048d6:	4a0b      	ldr	r2, [pc, #44]	; (8004904 <USART6Tx_String+0x54>)
 80048d8:	6013      	str	r3, [r2, #0]
		USART6->CR1 &= ~(USART_CR1_TXEIE); //se apagan las interrupciones por transmision
		posicionActual6 = 0; //Se reinicia el contador global
		flagNewData = 0;	//Se permite el ingreso de nueva data.
	}

}
 80048da:	e00b      	b.n	80048f4 <USART6Tx_String+0x44>
		USART6->CR1 &= ~(USART_CR1_TXEIE); //se apagan las interrupciones por transmision
 80048dc:	4b0a      	ldr	r3, [pc, #40]	; (8004908 <USART6Tx_String+0x58>)
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	4a09      	ldr	r2, [pc, #36]	; (8004908 <USART6Tx_String+0x58>)
 80048e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048e6:	60d3      	str	r3, [r2, #12]
		posicionActual6 = 0; //Se reinicia el contador global
 80048e8:	4b06      	ldr	r3, [pc, #24]	; (8004904 <USART6Tx_String+0x54>)
 80048ea:	2200      	movs	r2, #0
 80048ec:	601a      	str	r2, [r3, #0]
		flagNewData = 0;	//Se permite el ingreso de nueva data.
 80048ee:	4b07      	ldr	r3, [pc, #28]	; (800490c <USART6Tx_String+0x5c>)
 80048f0:	2200      	movs	r2, #0
 80048f2:	701a      	strb	r2, [r3, #0]
}
 80048f4:	bf00      	nop
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr
 8004900:	200007c8 	.word	0x200007c8
 8004904:	200007d0 	.word	0x200007d0
 8004908:	40011400 	.word	0x40011400
 800490c:	200007b1 	.word	0x200007b1

08004910 <USART1_IRQHandler>:
 * el sistema inmediatamente salta a este lugar en la memoria
 *
 * Además de esto ahora se agrega una parte donde se verifica si la interrupcion es de transmisión
 * donde se envia a la función correspondiente para que se haga el envio
 */
void USART1_IRQHandler(void) {
 8004910:	b580      	push	{r7, lr}
 8004912:	af00      	add	r7, sp, #0
	if (USART1->SR & USART_SR_RXNE) {
 8004914:	4b16      	ldr	r3, [pc, #88]	; (8004970 <USART1_IRQHandler+0x60>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0320 	and.w	r3, r3, #32
 800491c:	2b00      	cmp	r3, #0
 800491e:	d00d      	beq.n	800493c <USART1_IRQHandler+0x2c>
		/* Limpiamos la bandera que indica que la interrupción se ha generado */
		USART1->SR &= ~USART_SR_RXNE;
 8004920:	4b13      	ldr	r3, [pc, #76]	; (8004970 <USART1_IRQHandler+0x60>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a12      	ldr	r2, [pc, #72]	; (8004970 <USART1_IRQHandler+0x60>)
 8004926:	f023 0320 	bic.w	r3, r3, #32
 800492a:	6013      	str	r3, [r2, #0]
		//Auxiliar
		auxRxData = (uint8_t) USART1->DR;
 800492c:	4b10      	ldr	r3, [pc, #64]	; (8004970 <USART1_IRQHandler+0x60>)
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	b2da      	uxtb	r2, r3
 8004932:	4b10      	ldr	r3, [pc, #64]	; (8004974 <USART1_IRQHandler+0x64>)
 8004934:	701a      	strb	r2, [r3, #0]

		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		USART1Rx_Callback();
 8004936:	f7fd f99b 	bl	8001c70 <USART1Rx_Callback>
			USART1Tx_String();
		}

	}

}
 800493a:	e017      	b.n	800496c <USART1_IRQHandler+0x5c>
	else if (USART1->SR & USART_SR_TXE) {
 800493c:	4b0c      	ldr	r3, [pc, #48]	; (8004970 <USART1_IRQHandler+0x60>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004944:	2b00      	cmp	r3, #0
 8004946:	d011      	beq.n	800496c <USART1_IRQHandler+0x5c>
		USART1->SR &= ~USART_SR_TXE;
 8004948:	4b09      	ldr	r3, [pc, #36]	; (8004970 <USART1_IRQHandler+0x60>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a08      	ldr	r2, [pc, #32]	; (8004970 <USART1_IRQHandler+0x60>)
 800494e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004952:	6013      	str	r3, [r2, #0]
		if (tipo1 == 0) {
 8004954:	4b08      	ldr	r3, [pc, #32]	; (8004978 <USART1_IRQHandler+0x68>)
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	f083 0301 	eor.w	r3, r3, #1
 800495c:	b2db      	uxtb	r3, r3
 800495e:	2b00      	cmp	r3, #0
 8004960:	d002      	beq.n	8004968 <USART1_IRQHandler+0x58>
			USART1Tx_Char();
 8004962:	f7ff ff3f 	bl	80047e4 <USART1Tx_Char>
}
 8004966:	e001      	b.n	800496c <USART1_IRQHandler+0x5c>
			USART1Tx_String();
 8004968:	f7ff ff52 	bl	8004810 <USART1Tx_String>
}
 800496c:	bf00      	nop
 800496e:	bd80      	pop	{r7, pc}
 8004970:	40011000 	.word	0x40011000
 8004974:	200007b0 	.word	0x200007b0
 8004978:	200007bc 	.word	0x200007bc

0800497c <USART6_IRQHandler>:

	}

}

void USART6_IRQHandler(void) {
 800497c:	b580      	push	{r7, lr}
 800497e:	af00      	add	r7, sp, #0
	if (USART6->SR & USART_SR_RXNE) {
 8004980:	4b16      	ldr	r3, [pc, #88]	; (80049dc <USART6_IRQHandler+0x60>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0320 	and.w	r3, r3, #32
 8004988:	2b00      	cmp	r3, #0
 800498a:	d00d      	beq.n	80049a8 <USART6_IRQHandler+0x2c>
		/* Limpiamos la bandera que indica que la interrupción se ha generado */
		USART6->SR &= ~USART_SR_RXNE;
 800498c:	4b13      	ldr	r3, [pc, #76]	; (80049dc <USART6_IRQHandler+0x60>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a12      	ldr	r2, [pc, #72]	; (80049dc <USART6_IRQHandler+0x60>)
 8004992:	f023 0320 	bic.w	r3, r3, #32
 8004996:	6013      	str	r3, [r2, #0]
		//Auxiliar
		auxRxData = (uint8_t) USART6->DR;
 8004998:	4b10      	ldr	r3, [pc, #64]	; (80049dc <USART6_IRQHandler+0x60>)
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	b2da      	uxtb	r2, r3
 800499e:	4b10      	ldr	r3, [pc, #64]	; (80049e0 <USART6_IRQHandler+0x64>)
 80049a0:	701a      	strb	r2, [r3, #0]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		USART6Rx_Callback();
 80049a2:	f7ff ff67 	bl	8004874 <USART6Rx_Callback>
			USART6Tx_String();
		}

	}

}
 80049a6:	e017      	b.n	80049d8 <USART6_IRQHandler+0x5c>
	else if (USART6->SR & USART_SR_TXE) {
 80049a8:	4b0c      	ldr	r3, [pc, #48]	; (80049dc <USART6_IRQHandler+0x60>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d011      	beq.n	80049d8 <USART6_IRQHandler+0x5c>
		USART6->SR &= ~USART_SR_TXE;
 80049b4:	4b09      	ldr	r3, [pc, #36]	; (80049dc <USART6_IRQHandler+0x60>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a08      	ldr	r2, [pc, #32]	; (80049dc <USART6_IRQHandler+0x60>)
 80049ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049be:	6013      	str	r3, [r2, #0]
		if (tipo6 == 0) {
 80049c0:	4b08      	ldr	r3, [pc, #32]	; (80049e4 <USART6_IRQHandler+0x68>)
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	f083 0301 	eor.w	r3, r3, #1
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d002      	beq.n	80049d4 <USART6_IRQHandler+0x58>
			USART6Tx_Char();
 80049ce:	f7ff ff59 	bl	8004884 <USART6Tx_Char>
}
 80049d2:	e001      	b.n	80049d8 <USART6_IRQHandler+0x5c>
			USART6Tx_String();
 80049d4:	f7ff ff6c 	bl	80048b0 <USART6Tx_String>
}
 80049d8:	bf00      	nop
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	40011400 	.word	0x40011400
 80049e0:	200007b0 	.word	0x200007b0
 80049e4:	200007cc 	.word	0x200007cc

080049e8 <writeChar>:

/* funcion para escribir un solo char */
int writeChar(USART_Handler_t *ptrUsartHandler, int dataToSend) {
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
	while (!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)) {
 80049f2:	e000      	b.n	80049f6 <writeChar+0xe>
		__NOP();
 80049f4:	bf00      	nop
	while (!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)) {
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d0f7      	beq.n	80049f4 <writeChar+0xc>
	}

	ptrUsartHandler->ptrUSARTx->DR = dataToSend;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	683a      	ldr	r2, [r7, #0]
 8004a0a:	605a      	str	r2, [r3, #4]

	return dataToSend;
 8004a0c:	683b      	ldr	r3, [r7, #0]
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <writeString>:

int readChar(USART_Handler_t *ptrUsartHandler) {
	return ptrUsartHandler->ptrUSARTx->DR;
}

void writeString(USART_Handler_t *ptrUsartHandler, char *string) {
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b084      	sub	sp, #16
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
 8004a22:	6039      	str	r1, [r7, #0]
	int i = 0;
 8004a24:	2300      	movs	r3, #0
 8004a26:	60fb      	str	r3, [r7, #12]
	while (string[i] != 0) {
 8004a28:	e00a      	b.n	8004a40 <writeString+0x26>
		writeChar(ptrUsartHandler, string[i]);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	683a      	ldr	r2, [r7, #0]
 8004a2e:	4413      	add	r3, r2
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	4619      	mov	r1, r3
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f7ff ffd7 	bl	80049e8 <writeChar>
		i++;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	60fb      	str	r3, [r7, #12]
	while (string[i] != 0) {
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	683a      	ldr	r2, [r7, #0]
 8004a44:	4413      	add	r3, r2
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d1ee      	bne.n	8004a2a <writeString+0x10>
	}
}
 8004a4c:	bf00      	nop
 8004a4e:	bf00      	nop
 8004a50:	3710      	adds	r7, #16
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
	...

08004a58 <__errno>:
 8004a58:	4b01      	ldr	r3, [pc, #4]	; (8004a60 <__errno+0x8>)
 8004a5a:	6818      	ldr	r0, [r3, #0]
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	2000001c 	.word	0x2000001c

08004a64 <__libc_init_array>:
 8004a64:	b570      	push	{r4, r5, r6, lr}
 8004a66:	4d0d      	ldr	r5, [pc, #52]	; (8004a9c <__libc_init_array+0x38>)
 8004a68:	4c0d      	ldr	r4, [pc, #52]	; (8004aa0 <__libc_init_array+0x3c>)
 8004a6a:	1b64      	subs	r4, r4, r5
 8004a6c:	10a4      	asrs	r4, r4, #2
 8004a6e:	2600      	movs	r6, #0
 8004a70:	42a6      	cmp	r6, r4
 8004a72:	d109      	bne.n	8004a88 <__libc_init_array+0x24>
 8004a74:	4d0b      	ldr	r5, [pc, #44]	; (8004aa4 <__libc_init_array+0x40>)
 8004a76:	4c0c      	ldr	r4, [pc, #48]	; (8004aa8 <__libc_init_array+0x44>)
 8004a78:	f006 f9b0 	bl	800addc <_init>
 8004a7c:	1b64      	subs	r4, r4, r5
 8004a7e:	10a4      	asrs	r4, r4, #2
 8004a80:	2600      	movs	r6, #0
 8004a82:	42a6      	cmp	r6, r4
 8004a84:	d105      	bne.n	8004a92 <__libc_init_array+0x2e>
 8004a86:	bd70      	pop	{r4, r5, r6, pc}
 8004a88:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a8c:	4798      	blx	r3
 8004a8e:	3601      	adds	r6, #1
 8004a90:	e7ee      	b.n	8004a70 <__libc_init_array+0xc>
 8004a92:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a96:	4798      	blx	r3
 8004a98:	3601      	adds	r6, #1
 8004a9a:	e7f2      	b.n	8004a82 <__libc_init_array+0x1e>
 8004a9c:	0800b570 	.word	0x0800b570
 8004aa0:	0800b570 	.word	0x0800b570
 8004aa4:	0800b570 	.word	0x0800b570
 8004aa8:	0800b574 	.word	0x0800b574

08004aac <memset>:
 8004aac:	4402      	add	r2, r0
 8004aae:	4603      	mov	r3, r0
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d100      	bne.n	8004ab6 <memset+0xa>
 8004ab4:	4770      	bx	lr
 8004ab6:	f803 1b01 	strb.w	r1, [r3], #1
 8004aba:	e7f9      	b.n	8004ab0 <memset+0x4>

08004abc <__cvt>:
 8004abc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ac0:	ec55 4b10 	vmov	r4, r5, d0
 8004ac4:	2d00      	cmp	r5, #0
 8004ac6:	460e      	mov	r6, r1
 8004ac8:	4619      	mov	r1, r3
 8004aca:	462b      	mov	r3, r5
 8004acc:	bfbb      	ittet	lt
 8004ace:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004ad2:	461d      	movlt	r5, r3
 8004ad4:	2300      	movge	r3, #0
 8004ad6:	232d      	movlt	r3, #45	; 0x2d
 8004ad8:	700b      	strb	r3, [r1, #0]
 8004ada:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004adc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004ae0:	4691      	mov	r9, r2
 8004ae2:	f023 0820 	bic.w	r8, r3, #32
 8004ae6:	bfbc      	itt	lt
 8004ae8:	4622      	movlt	r2, r4
 8004aea:	4614      	movlt	r4, r2
 8004aec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004af0:	d005      	beq.n	8004afe <__cvt+0x42>
 8004af2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004af6:	d100      	bne.n	8004afa <__cvt+0x3e>
 8004af8:	3601      	adds	r6, #1
 8004afa:	2102      	movs	r1, #2
 8004afc:	e000      	b.n	8004b00 <__cvt+0x44>
 8004afe:	2103      	movs	r1, #3
 8004b00:	ab03      	add	r3, sp, #12
 8004b02:	9301      	str	r3, [sp, #4]
 8004b04:	ab02      	add	r3, sp, #8
 8004b06:	9300      	str	r3, [sp, #0]
 8004b08:	ec45 4b10 	vmov	d0, r4, r5
 8004b0c:	4653      	mov	r3, sl
 8004b0e:	4632      	mov	r2, r6
 8004b10:	f001 fe42 	bl	8006798 <_dtoa_r>
 8004b14:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004b18:	4607      	mov	r7, r0
 8004b1a:	d102      	bne.n	8004b22 <__cvt+0x66>
 8004b1c:	f019 0f01 	tst.w	r9, #1
 8004b20:	d022      	beq.n	8004b68 <__cvt+0xac>
 8004b22:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004b26:	eb07 0906 	add.w	r9, r7, r6
 8004b2a:	d110      	bne.n	8004b4e <__cvt+0x92>
 8004b2c:	783b      	ldrb	r3, [r7, #0]
 8004b2e:	2b30      	cmp	r3, #48	; 0x30
 8004b30:	d10a      	bne.n	8004b48 <__cvt+0x8c>
 8004b32:	2200      	movs	r2, #0
 8004b34:	2300      	movs	r3, #0
 8004b36:	4620      	mov	r0, r4
 8004b38:	4629      	mov	r1, r5
 8004b3a:	f7fb ffdd 	bl	8000af8 <__aeabi_dcmpeq>
 8004b3e:	b918      	cbnz	r0, 8004b48 <__cvt+0x8c>
 8004b40:	f1c6 0601 	rsb	r6, r6, #1
 8004b44:	f8ca 6000 	str.w	r6, [sl]
 8004b48:	f8da 3000 	ldr.w	r3, [sl]
 8004b4c:	4499      	add	r9, r3
 8004b4e:	2200      	movs	r2, #0
 8004b50:	2300      	movs	r3, #0
 8004b52:	4620      	mov	r0, r4
 8004b54:	4629      	mov	r1, r5
 8004b56:	f7fb ffcf 	bl	8000af8 <__aeabi_dcmpeq>
 8004b5a:	b108      	cbz	r0, 8004b60 <__cvt+0xa4>
 8004b5c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004b60:	2230      	movs	r2, #48	; 0x30
 8004b62:	9b03      	ldr	r3, [sp, #12]
 8004b64:	454b      	cmp	r3, r9
 8004b66:	d307      	bcc.n	8004b78 <__cvt+0xbc>
 8004b68:	9b03      	ldr	r3, [sp, #12]
 8004b6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004b6c:	1bdb      	subs	r3, r3, r7
 8004b6e:	4638      	mov	r0, r7
 8004b70:	6013      	str	r3, [r2, #0]
 8004b72:	b004      	add	sp, #16
 8004b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b78:	1c59      	adds	r1, r3, #1
 8004b7a:	9103      	str	r1, [sp, #12]
 8004b7c:	701a      	strb	r2, [r3, #0]
 8004b7e:	e7f0      	b.n	8004b62 <__cvt+0xa6>

08004b80 <__exponent>:
 8004b80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b82:	4603      	mov	r3, r0
 8004b84:	2900      	cmp	r1, #0
 8004b86:	bfb8      	it	lt
 8004b88:	4249      	neglt	r1, r1
 8004b8a:	f803 2b02 	strb.w	r2, [r3], #2
 8004b8e:	bfb4      	ite	lt
 8004b90:	222d      	movlt	r2, #45	; 0x2d
 8004b92:	222b      	movge	r2, #43	; 0x2b
 8004b94:	2909      	cmp	r1, #9
 8004b96:	7042      	strb	r2, [r0, #1]
 8004b98:	dd2a      	ble.n	8004bf0 <__exponent+0x70>
 8004b9a:	f10d 0407 	add.w	r4, sp, #7
 8004b9e:	46a4      	mov	ip, r4
 8004ba0:	270a      	movs	r7, #10
 8004ba2:	46a6      	mov	lr, r4
 8004ba4:	460a      	mov	r2, r1
 8004ba6:	fb91 f6f7 	sdiv	r6, r1, r7
 8004baa:	fb07 1516 	mls	r5, r7, r6, r1
 8004bae:	3530      	adds	r5, #48	; 0x30
 8004bb0:	2a63      	cmp	r2, #99	; 0x63
 8004bb2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8004bb6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004bba:	4631      	mov	r1, r6
 8004bbc:	dcf1      	bgt.n	8004ba2 <__exponent+0x22>
 8004bbe:	3130      	adds	r1, #48	; 0x30
 8004bc0:	f1ae 0502 	sub.w	r5, lr, #2
 8004bc4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004bc8:	1c44      	adds	r4, r0, #1
 8004bca:	4629      	mov	r1, r5
 8004bcc:	4561      	cmp	r1, ip
 8004bce:	d30a      	bcc.n	8004be6 <__exponent+0x66>
 8004bd0:	f10d 0209 	add.w	r2, sp, #9
 8004bd4:	eba2 020e 	sub.w	r2, r2, lr
 8004bd8:	4565      	cmp	r5, ip
 8004bda:	bf88      	it	hi
 8004bdc:	2200      	movhi	r2, #0
 8004bde:	4413      	add	r3, r2
 8004be0:	1a18      	subs	r0, r3, r0
 8004be2:	b003      	add	sp, #12
 8004be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004be6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004bea:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004bee:	e7ed      	b.n	8004bcc <__exponent+0x4c>
 8004bf0:	2330      	movs	r3, #48	; 0x30
 8004bf2:	3130      	adds	r1, #48	; 0x30
 8004bf4:	7083      	strb	r3, [r0, #2]
 8004bf6:	70c1      	strb	r1, [r0, #3]
 8004bf8:	1d03      	adds	r3, r0, #4
 8004bfa:	e7f1      	b.n	8004be0 <__exponent+0x60>

08004bfc <_printf_float>:
 8004bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c00:	ed2d 8b02 	vpush	{d8}
 8004c04:	b08d      	sub	sp, #52	; 0x34
 8004c06:	460c      	mov	r4, r1
 8004c08:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004c0c:	4616      	mov	r6, r2
 8004c0e:	461f      	mov	r7, r3
 8004c10:	4605      	mov	r5, r0
 8004c12:	f002 ff1f 	bl	8007a54 <_localeconv_r>
 8004c16:	f8d0 a000 	ldr.w	sl, [r0]
 8004c1a:	4650      	mov	r0, sl
 8004c1c:	f7fb faea 	bl	80001f4 <strlen>
 8004c20:	2300      	movs	r3, #0
 8004c22:	930a      	str	r3, [sp, #40]	; 0x28
 8004c24:	6823      	ldr	r3, [r4, #0]
 8004c26:	9305      	str	r3, [sp, #20]
 8004c28:	f8d8 3000 	ldr.w	r3, [r8]
 8004c2c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004c30:	3307      	adds	r3, #7
 8004c32:	f023 0307 	bic.w	r3, r3, #7
 8004c36:	f103 0208 	add.w	r2, r3, #8
 8004c3a:	f8c8 2000 	str.w	r2, [r8]
 8004c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c42:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004c46:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004c4a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004c4e:	9307      	str	r3, [sp, #28]
 8004c50:	f8cd 8018 	str.w	r8, [sp, #24]
 8004c54:	ee08 0a10 	vmov	s16, r0
 8004c58:	4b9f      	ldr	r3, [pc, #636]	; (8004ed8 <_printf_float+0x2dc>)
 8004c5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004c5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c62:	f7fb ff7b 	bl	8000b5c <__aeabi_dcmpun>
 8004c66:	bb88      	cbnz	r0, 8004ccc <_printf_float+0xd0>
 8004c68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004c6c:	4b9a      	ldr	r3, [pc, #616]	; (8004ed8 <_printf_float+0x2dc>)
 8004c6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c72:	f7fb ff55 	bl	8000b20 <__aeabi_dcmple>
 8004c76:	bb48      	cbnz	r0, 8004ccc <_printf_float+0xd0>
 8004c78:	2200      	movs	r2, #0
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	4640      	mov	r0, r8
 8004c7e:	4649      	mov	r1, r9
 8004c80:	f7fb ff44 	bl	8000b0c <__aeabi_dcmplt>
 8004c84:	b110      	cbz	r0, 8004c8c <_printf_float+0x90>
 8004c86:	232d      	movs	r3, #45	; 0x2d
 8004c88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c8c:	4b93      	ldr	r3, [pc, #588]	; (8004edc <_printf_float+0x2e0>)
 8004c8e:	4894      	ldr	r0, [pc, #592]	; (8004ee0 <_printf_float+0x2e4>)
 8004c90:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004c94:	bf94      	ite	ls
 8004c96:	4698      	movls	r8, r3
 8004c98:	4680      	movhi	r8, r0
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	6123      	str	r3, [r4, #16]
 8004c9e:	9b05      	ldr	r3, [sp, #20]
 8004ca0:	f023 0204 	bic.w	r2, r3, #4
 8004ca4:	6022      	str	r2, [r4, #0]
 8004ca6:	f04f 0900 	mov.w	r9, #0
 8004caa:	9700      	str	r7, [sp, #0]
 8004cac:	4633      	mov	r3, r6
 8004cae:	aa0b      	add	r2, sp, #44	; 0x2c
 8004cb0:	4621      	mov	r1, r4
 8004cb2:	4628      	mov	r0, r5
 8004cb4:	f000 f9d8 	bl	8005068 <_printf_common>
 8004cb8:	3001      	adds	r0, #1
 8004cba:	f040 8090 	bne.w	8004dde <_printf_float+0x1e2>
 8004cbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004cc2:	b00d      	add	sp, #52	; 0x34
 8004cc4:	ecbd 8b02 	vpop	{d8}
 8004cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ccc:	4642      	mov	r2, r8
 8004cce:	464b      	mov	r3, r9
 8004cd0:	4640      	mov	r0, r8
 8004cd2:	4649      	mov	r1, r9
 8004cd4:	f7fb ff42 	bl	8000b5c <__aeabi_dcmpun>
 8004cd8:	b140      	cbz	r0, 8004cec <_printf_float+0xf0>
 8004cda:	464b      	mov	r3, r9
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	bfbc      	itt	lt
 8004ce0:	232d      	movlt	r3, #45	; 0x2d
 8004ce2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004ce6:	487f      	ldr	r0, [pc, #508]	; (8004ee4 <_printf_float+0x2e8>)
 8004ce8:	4b7f      	ldr	r3, [pc, #508]	; (8004ee8 <_printf_float+0x2ec>)
 8004cea:	e7d1      	b.n	8004c90 <_printf_float+0x94>
 8004cec:	6863      	ldr	r3, [r4, #4]
 8004cee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004cf2:	9206      	str	r2, [sp, #24]
 8004cf4:	1c5a      	adds	r2, r3, #1
 8004cf6:	d13f      	bne.n	8004d78 <_printf_float+0x17c>
 8004cf8:	2306      	movs	r3, #6
 8004cfa:	6063      	str	r3, [r4, #4]
 8004cfc:	9b05      	ldr	r3, [sp, #20]
 8004cfe:	6861      	ldr	r1, [r4, #4]
 8004d00:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004d04:	2300      	movs	r3, #0
 8004d06:	9303      	str	r3, [sp, #12]
 8004d08:	ab0a      	add	r3, sp, #40	; 0x28
 8004d0a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004d0e:	ab09      	add	r3, sp, #36	; 0x24
 8004d10:	ec49 8b10 	vmov	d0, r8, r9
 8004d14:	9300      	str	r3, [sp, #0]
 8004d16:	6022      	str	r2, [r4, #0]
 8004d18:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004d1c:	4628      	mov	r0, r5
 8004d1e:	f7ff fecd 	bl	8004abc <__cvt>
 8004d22:	9b06      	ldr	r3, [sp, #24]
 8004d24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004d26:	2b47      	cmp	r3, #71	; 0x47
 8004d28:	4680      	mov	r8, r0
 8004d2a:	d108      	bne.n	8004d3e <_printf_float+0x142>
 8004d2c:	1cc8      	adds	r0, r1, #3
 8004d2e:	db02      	blt.n	8004d36 <_printf_float+0x13a>
 8004d30:	6863      	ldr	r3, [r4, #4]
 8004d32:	4299      	cmp	r1, r3
 8004d34:	dd41      	ble.n	8004dba <_printf_float+0x1be>
 8004d36:	f1ab 0b02 	sub.w	fp, fp, #2
 8004d3a:	fa5f fb8b 	uxtb.w	fp, fp
 8004d3e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004d42:	d820      	bhi.n	8004d86 <_printf_float+0x18a>
 8004d44:	3901      	subs	r1, #1
 8004d46:	465a      	mov	r2, fp
 8004d48:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004d4c:	9109      	str	r1, [sp, #36]	; 0x24
 8004d4e:	f7ff ff17 	bl	8004b80 <__exponent>
 8004d52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d54:	1813      	adds	r3, r2, r0
 8004d56:	2a01      	cmp	r2, #1
 8004d58:	4681      	mov	r9, r0
 8004d5a:	6123      	str	r3, [r4, #16]
 8004d5c:	dc02      	bgt.n	8004d64 <_printf_float+0x168>
 8004d5e:	6822      	ldr	r2, [r4, #0]
 8004d60:	07d2      	lsls	r2, r2, #31
 8004d62:	d501      	bpl.n	8004d68 <_printf_float+0x16c>
 8004d64:	3301      	adds	r3, #1
 8004d66:	6123      	str	r3, [r4, #16]
 8004d68:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d09c      	beq.n	8004caa <_printf_float+0xae>
 8004d70:	232d      	movs	r3, #45	; 0x2d
 8004d72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d76:	e798      	b.n	8004caa <_printf_float+0xae>
 8004d78:	9a06      	ldr	r2, [sp, #24]
 8004d7a:	2a47      	cmp	r2, #71	; 0x47
 8004d7c:	d1be      	bne.n	8004cfc <_printf_float+0x100>
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1bc      	bne.n	8004cfc <_printf_float+0x100>
 8004d82:	2301      	movs	r3, #1
 8004d84:	e7b9      	b.n	8004cfa <_printf_float+0xfe>
 8004d86:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004d8a:	d118      	bne.n	8004dbe <_printf_float+0x1c2>
 8004d8c:	2900      	cmp	r1, #0
 8004d8e:	6863      	ldr	r3, [r4, #4]
 8004d90:	dd0b      	ble.n	8004daa <_printf_float+0x1ae>
 8004d92:	6121      	str	r1, [r4, #16]
 8004d94:	b913      	cbnz	r3, 8004d9c <_printf_float+0x1a0>
 8004d96:	6822      	ldr	r2, [r4, #0]
 8004d98:	07d0      	lsls	r0, r2, #31
 8004d9a:	d502      	bpl.n	8004da2 <_printf_float+0x1a6>
 8004d9c:	3301      	adds	r3, #1
 8004d9e:	440b      	add	r3, r1
 8004da0:	6123      	str	r3, [r4, #16]
 8004da2:	65a1      	str	r1, [r4, #88]	; 0x58
 8004da4:	f04f 0900 	mov.w	r9, #0
 8004da8:	e7de      	b.n	8004d68 <_printf_float+0x16c>
 8004daa:	b913      	cbnz	r3, 8004db2 <_printf_float+0x1b6>
 8004dac:	6822      	ldr	r2, [r4, #0]
 8004dae:	07d2      	lsls	r2, r2, #31
 8004db0:	d501      	bpl.n	8004db6 <_printf_float+0x1ba>
 8004db2:	3302      	adds	r3, #2
 8004db4:	e7f4      	b.n	8004da0 <_printf_float+0x1a4>
 8004db6:	2301      	movs	r3, #1
 8004db8:	e7f2      	b.n	8004da0 <_printf_float+0x1a4>
 8004dba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004dbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004dc0:	4299      	cmp	r1, r3
 8004dc2:	db05      	blt.n	8004dd0 <_printf_float+0x1d4>
 8004dc4:	6823      	ldr	r3, [r4, #0]
 8004dc6:	6121      	str	r1, [r4, #16]
 8004dc8:	07d8      	lsls	r0, r3, #31
 8004dca:	d5ea      	bpl.n	8004da2 <_printf_float+0x1a6>
 8004dcc:	1c4b      	adds	r3, r1, #1
 8004dce:	e7e7      	b.n	8004da0 <_printf_float+0x1a4>
 8004dd0:	2900      	cmp	r1, #0
 8004dd2:	bfd4      	ite	le
 8004dd4:	f1c1 0202 	rsble	r2, r1, #2
 8004dd8:	2201      	movgt	r2, #1
 8004dda:	4413      	add	r3, r2
 8004ddc:	e7e0      	b.n	8004da0 <_printf_float+0x1a4>
 8004dde:	6823      	ldr	r3, [r4, #0]
 8004de0:	055a      	lsls	r2, r3, #21
 8004de2:	d407      	bmi.n	8004df4 <_printf_float+0x1f8>
 8004de4:	6923      	ldr	r3, [r4, #16]
 8004de6:	4642      	mov	r2, r8
 8004de8:	4631      	mov	r1, r6
 8004dea:	4628      	mov	r0, r5
 8004dec:	47b8      	blx	r7
 8004dee:	3001      	adds	r0, #1
 8004df0:	d12c      	bne.n	8004e4c <_printf_float+0x250>
 8004df2:	e764      	b.n	8004cbe <_printf_float+0xc2>
 8004df4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004df8:	f240 80e0 	bls.w	8004fbc <_printf_float+0x3c0>
 8004dfc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004e00:	2200      	movs	r2, #0
 8004e02:	2300      	movs	r3, #0
 8004e04:	f7fb fe78 	bl	8000af8 <__aeabi_dcmpeq>
 8004e08:	2800      	cmp	r0, #0
 8004e0a:	d034      	beq.n	8004e76 <_printf_float+0x27a>
 8004e0c:	4a37      	ldr	r2, [pc, #220]	; (8004eec <_printf_float+0x2f0>)
 8004e0e:	2301      	movs	r3, #1
 8004e10:	4631      	mov	r1, r6
 8004e12:	4628      	mov	r0, r5
 8004e14:	47b8      	blx	r7
 8004e16:	3001      	adds	r0, #1
 8004e18:	f43f af51 	beq.w	8004cbe <_printf_float+0xc2>
 8004e1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e20:	429a      	cmp	r2, r3
 8004e22:	db02      	blt.n	8004e2a <_printf_float+0x22e>
 8004e24:	6823      	ldr	r3, [r4, #0]
 8004e26:	07d8      	lsls	r0, r3, #31
 8004e28:	d510      	bpl.n	8004e4c <_printf_float+0x250>
 8004e2a:	ee18 3a10 	vmov	r3, s16
 8004e2e:	4652      	mov	r2, sl
 8004e30:	4631      	mov	r1, r6
 8004e32:	4628      	mov	r0, r5
 8004e34:	47b8      	blx	r7
 8004e36:	3001      	adds	r0, #1
 8004e38:	f43f af41 	beq.w	8004cbe <_printf_float+0xc2>
 8004e3c:	f04f 0800 	mov.w	r8, #0
 8004e40:	f104 091a 	add.w	r9, r4, #26
 8004e44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e46:	3b01      	subs	r3, #1
 8004e48:	4543      	cmp	r3, r8
 8004e4a:	dc09      	bgt.n	8004e60 <_printf_float+0x264>
 8004e4c:	6823      	ldr	r3, [r4, #0]
 8004e4e:	079b      	lsls	r3, r3, #30
 8004e50:	f100 8105 	bmi.w	800505e <_printf_float+0x462>
 8004e54:	68e0      	ldr	r0, [r4, #12]
 8004e56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e58:	4298      	cmp	r0, r3
 8004e5a:	bfb8      	it	lt
 8004e5c:	4618      	movlt	r0, r3
 8004e5e:	e730      	b.n	8004cc2 <_printf_float+0xc6>
 8004e60:	2301      	movs	r3, #1
 8004e62:	464a      	mov	r2, r9
 8004e64:	4631      	mov	r1, r6
 8004e66:	4628      	mov	r0, r5
 8004e68:	47b8      	blx	r7
 8004e6a:	3001      	adds	r0, #1
 8004e6c:	f43f af27 	beq.w	8004cbe <_printf_float+0xc2>
 8004e70:	f108 0801 	add.w	r8, r8, #1
 8004e74:	e7e6      	b.n	8004e44 <_printf_float+0x248>
 8004e76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	dc39      	bgt.n	8004ef0 <_printf_float+0x2f4>
 8004e7c:	4a1b      	ldr	r2, [pc, #108]	; (8004eec <_printf_float+0x2f0>)
 8004e7e:	2301      	movs	r3, #1
 8004e80:	4631      	mov	r1, r6
 8004e82:	4628      	mov	r0, r5
 8004e84:	47b8      	blx	r7
 8004e86:	3001      	adds	r0, #1
 8004e88:	f43f af19 	beq.w	8004cbe <_printf_float+0xc2>
 8004e8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e90:	4313      	orrs	r3, r2
 8004e92:	d102      	bne.n	8004e9a <_printf_float+0x29e>
 8004e94:	6823      	ldr	r3, [r4, #0]
 8004e96:	07d9      	lsls	r1, r3, #31
 8004e98:	d5d8      	bpl.n	8004e4c <_printf_float+0x250>
 8004e9a:	ee18 3a10 	vmov	r3, s16
 8004e9e:	4652      	mov	r2, sl
 8004ea0:	4631      	mov	r1, r6
 8004ea2:	4628      	mov	r0, r5
 8004ea4:	47b8      	blx	r7
 8004ea6:	3001      	adds	r0, #1
 8004ea8:	f43f af09 	beq.w	8004cbe <_printf_float+0xc2>
 8004eac:	f04f 0900 	mov.w	r9, #0
 8004eb0:	f104 0a1a 	add.w	sl, r4, #26
 8004eb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004eb6:	425b      	negs	r3, r3
 8004eb8:	454b      	cmp	r3, r9
 8004eba:	dc01      	bgt.n	8004ec0 <_printf_float+0x2c4>
 8004ebc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ebe:	e792      	b.n	8004de6 <_printf_float+0x1ea>
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	4652      	mov	r2, sl
 8004ec4:	4631      	mov	r1, r6
 8004ec6:	4628      	mov	r0, r5
 8004ec8:	47b8      	blx	r7
 8004eca:	3001      	adds	r0, #1
 8004ecc:	f43f aef7 	beq.w	8004cbe <_printf_float+0xc2>
 8004ed0:	f109 0901 	add.w	r9, r9, #1
 8004ed4:	e7ee      	b.n	8004eb4 <_printf_float+0x2b8>
 8004ed6:	bf00      	nop
 8004ed8:	7fefffff 	.word	0x7fefffff
 8004edc:	0800aed4 	.word	0x0800aed4
 8004ee0:	0800aed8 	.word	0x0800aed8
 8004ee4:	0800aee0 	.word	0x0800aee0
 8004ee8:	0800aedc 	.word	0x0800aedc
 8004eec:	0800b2d9 	.word	0x0800b2d9
 8004ef0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ef2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	bfa8      	it	ge
 8004ef8:	461a      	movge	r2, r3
 8004efa:	2a00      	cmp	r2, #0
 8004efc:	4691      	mov	r9, r2
 8004efe:	dc37      	bgt.n	8004f70 <_printf_float+0x374>
 8004f00:	f04f 0b00 	mov.w	fp, #0
 8004f04:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f08:	f104 021a 	add.w	r2, r4, #26
 8004f0c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004f0e:	9305      	str	r3, [sp, #20]
 8004f10:	eba3 0309 	sub.w	r3, r3, r9
 8004f14:	455b      	cmp	r3, fp
 8004f16:	dc33      	bgt.n	8004f80 <_printf_float+0x384>
 8004f18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	db3b      	blt.n	8004f98 <_printf_float+0x39c>
 8004f20:	6823      	ldr	r3, [r4, #0]
 8004f22:	07da      	lsls	r2, r3, #31
 8004f24:	d438      	bmi.n	8004f98 <_printf_float+0x39c>
 8004f26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f28:	9a05      	ldr	r2, [sp, #20]
 8004f2a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f2c:	1a9a      	subs	r2, r3, r2
 8004f2e:	eba3 0901 	sub.w	r9, r3, r1
 8004f32:	4591      	cmp	r9, r2
 8004f34:	bfa8      	it	ge
 8004f36:	4691      	movge	r9, r2
 8004f38:	f1b9 0f00 	cmp.w	r9, #0
 8004f3c:	dc35      	bgt.n	8004faa <_printf_float+0x3ae>
 8004f3e:	f04f 0800 	mov.w	r8, #0
 8004f42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f46:	f104 0a1a 	add.w	sl, r4, #26
 8004f4a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f4e:	1a9b      	subs	r3, r3, r2
 8004f50:	eba3 0309 	sub.w	r3, r3, r9
 8004f54:	4543      	cmp	r3, r8
 8004f56:	f77f af79 	ble.w	8004e4c <_printf_float+0x250>
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	4652      	mov	r2, sl
 8004f5e:	4631      	mov	r1, r6
 8004f60:	4628      	mov	r0, r5
 8004f62:	47b8      	blx	r7
 8004f64:	3001      	adds	r0, #1
 8004f66:	f43f aeaa 	beq.w	8004cbe <_printf_float+0xc2>
 8004f6a:	f108 0801 	add.w	r8, r8, #1
 8004f6e:	e7ec      	b.n	8004f4a <_printf_float+0x34e>
 8004f70:	4613      	mov	r3, r2
 8004f72:	4631      	mov	r1, r6
 8004f74:	4642      	mov	r2, r8
 8004f76:	4628      	mov	r0, r5
 8004f78:	47b8      	blx	r7
 8004f7a:	3001      	adds	r0, #1
 8004f7c:	d1c0      	bne.n	8004f00 <_printf_float+0x304>
 8004f7e:	e69e      	b.n	8004cbe <_printf_float+0xc2>
 8004f80:	2301      	movs	r3, #1
 8004f82:	4631      	mov	r1, r6
 8004f84:	4628      	mov	r0, r5
 8004f86:	9205      	str	r2, [sp, #20]
 8004f88:	47b8      	blx	r7
 8004f8a:	3001      	adds	r0, #1
 8004f8c:	f43f ae97 	beq.w	8004cbe <_printf_float+0xc2>
 8004f90:	9a05      	ldr	r2, [sp, #20]
 8004f92:	f10b 0b01 	add.w	fp, fp, #1
 8004f96:	e7b9      	b.n	8004f0c <_printf_float+0x310>
 8004f98:	ee18 3a10 	vmov	r3, s16
 8004f9c:	4652      	mov	r2, sl
 8004f9e:	4631      	mov	r1, r6
 8004fa0:	4628      	mov	r0, r5
 8004fa2:	47b8      	blx	r7
 8004fa4:	3001      	adds	r0, #1
 8004fa6:	d1be      	bne.n	8004f26 <_printf_float+0x32a>
 8004fa8:	e689      	b.n	8004cbe <_printf_float+0xc2>
 8004faa:	9a05      	ldr	r2, [sp, #20]
 8004fac:	464b      	mov	r3, r9
 8004fae:	4442      	add	r2, r8
 8004fb0:	4631      	mov	r1, r6
 8004fb2:	4628      	mov	r0, r5
 8004fb4:	47b8      	blx	r7
 8004fb6:	3001      	adds	r0, #1
 8004fb8:	d1c1      	bne.n	8004f3e <_printf_float+0x342>
 8004fba:	e680      	b.n	8004cbe <_printf_float+0xc2>
 8004fbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004fbe:	2a01      	cmp	r2, #1
 8004fc0:	dc01      	bgt.n	8004fc6 <_printf_float+0x3ca>
 8004fc2:	07db      	lsls	r3, r3, #31
 8004fc4:	d538      	bpl.n	8005038 <_printf_float+0x43c>
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	4642      	mov	r2, r8
 8004fca:	4631      	mov	r1, r6
 8004fcc:	4628      	mov	r0, r5
 8004fce:	47b8      	blx	r7
 8004fd0:	3001      	adds	r0, #1
 8004fd2:	f43f ae74 	beq.w	8004cbe <_printf_float+0xc2>
 8004fd6:	ee18 3a10 	vmov	r3, s16
 8004fda:	4652      	mov	r2, sl
 8004fdc:	4631      	mov	r1, r6
 8004fde:	4628      	mov	r0, r5
 8004fe0:	47b8      	blx	r7
 8004fe2:	3001      	adds	r0, #1
 8004fe4:	f43f ae6b 	beq.w	8004cbe <_printf_float+0xc2>
 8004fe8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004fec:	2200      	movs	r2, #0
 8004fee:	2300      	movs	r3, #0
 8004ff0:	f7fb fd82 	bl	8000af8 <__aeabi_dcmpeq>
 8004ff4:	b9d8      	cbnz	r0, 800502e <_printf_float+0x432>
 8004ff6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ff8:	f108 0201 	add.w	r2, r8, #1
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	4631      	mov	r1, r6
 8005000:	4628      	mov	r0, r5
 8005002:	47b8      	blx	r7
 8005004:	3001      	adds	r0, #1
 8005006:	d10e      	bne.n	8005026 <_printf_float+0x42a>
 8005008:	e659      	b.n	8004cbe <_printf_float+0xc2>
 800500a:	2301      	movs	r3, #1
 800500c:	4652      	mov	r2, sl
 800500e:	4631      	mov	r1, r6
 8005010:	4628      	mov	r0, r5
 8005012:	47b8      	blx	r7
 8005014:	3001      	adds	r0, #1
 8005016:	f43f ae52 	beq.w	8004cbe <_printf_float+0xc2>
 800501a:	f108 0801 	add.w	r8, r8, #1
 800501e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005020:	3b01      	subs	r3, #1
 8005022:	4543      	cmp	r3, r8
 8005024:	dcf1      	bgt.n	800500a <_printf_float+0x40e>
 8005026:	464b      	mov	r3, r9
 8005028:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800502c:	e6dc      	b.n	8004de8 <_printf_float+0x1ec>
 800502e:	f04f 0800 	mov.w	r8, #0
 8005032:	f104 0a1a 	add.w	sl, r4, #26
 8005036:	e7f2      	b.n	800501e <_printf_float+0x422>
 8005038:	2301      	movs	r3, #1
 800503a:	4642      	mov	r2, r8
 800503c:	e7df      	b.n	8004ffe <_printf_float+0x402>
 800503e:	2301      	movs	r3, #1
 8005040:	464a      	mov	r2, r9
 8005042:	4631      	mov	r1, r6
 8005044:	4628      	mov	r0, r5
 8005046:	47b8      	blx	r7
 8005048:	3001      	adds	r0, #1
 800504a:	f43f ae38 	beq.w	8004cbe <_printf_float+0xc2>
 800504e:	f108 0801 	add.w	r8, r8, #1
 8005052:	68e3      	ldr	r3, [r4, #12]
 8005054:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005056:	1a5b      	subs	r3, r3, r1
 8005058:	4543      	cmp	r3, r8
 800505a:	dcf0      	bgt.n	800503e <_printf_float+0x442>
 800505c:	e6fa      	b.n	8004e54 <_printf_float+0x258>
 800505e:	f04f 0800 	mov.w	r8, #0
 8005062:	f104 0919 	add.w	r9, r4, #25
 8005066:	e7f4      	b.n	8005052 <_printf_float+0x456>

08005068 <_printf_common>:
 8005068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800506c:	4616      	mov	r6, r2
 800506e:	4699      	mov	r9, r3
 8005070:	688a      	ldr	r2, [r1, #8]
 8005072:	690b      	ldr	r3, [r1, #16]
 8005074:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005078:	4293      	cmp	r3, r2
 800507a:	bfb8      	it	lt
 800507c:	4613      	movlt	r3, r2
 800507e:	6033      	str	r3, [r6, #0]
 8005080:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005084:	4607      	mov	r7, r0
 8005086:	460c      	mov	r4, r1
 8005088:	b10a      	cbz	r2, 800508e <_printf_common+0x26>
 800508a:	3301      	adds	r3, #1
 800508c:	6033      	str	r3, [r6, #0]
 800508e:	6823      	ldr	r3, [r4, #0]
 8005090:	0699      	lsls	r1, r3, #26
 8005092:	bf42      	ittt	mi
 8005094:	6833      	ldrmi	r3, [r6, #0]
 8005096:	3302      	addmi	r3, #2
 8005098:	6033      	strmi	r3, [r6, #0]
 800509a:	6825      	ldr	r5, [r4, #0]
 800509c:	f015 0506 	ands.w	r5, r5, #6
 80050a0:	d106      	bne.n	80050b0 <_printf_common+0x48>
 80050a2:	f104 0a19 	add.w	sl, r4, #25
 80050a6:	68e3      	ldr	r3, [r4, #12]
 80050a8:	6832      	ldr	r2, [r6, #0]
 80050aa:	1a9b      	subs	r3, r3, r2
 80050ac:	42ab      	cmp	r3, r5
 80050ae:	dc26      	bgt.n	80050fe <_printf_common+0x96>
 80050b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80050b4:	1e13      	subs	r3, r2, #0
 80050b6:	6822      	ldr	r2, [r4, #0]
 80050b8:	bf18      	it	ne
 80050ba:	2301      	movne	r3, #1
 80050bc:	0692      	lsls	r2, r2, #26
 80050be:	d42b      	bmi.n	8005118 <_printf_common+0xb0>
 80050c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80050c4:	4649      	mov	r1, r9
 80050c6:	4638      	mov	r0, r7
 80050c8:	47c0      	blx	r8
 80050ca:	3001      	adds	r0, #1
 80050cc:	d01e      	beq.n	800510c <_printf_common+0xa4>
 80050ce:	6823      	ldr	r3, [r4, #0]
 80050d0:	68e5      	ldr	r5, [r4, #12]
 80050d2:	6832      	ldr	r2, [r6, #0]
 80050d4:	f003 0306 	and.w	r3, r3, #6
 80050d8:	2b04      	cmp	r3, #4
 80050da:	bf08      	it	eq
 80050dc:	1aad      	subeq	r5, r5, r2
 80050de:	68a3      	ldr	r3, [r4, #8]
 80050e0:	6922      	ldr	r2, [r4, #16]
 80050e2:	bf0c      	ite	eq
 80050e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050e8:	2500      	movne	r5, #0
 80050ea:	4293      	cmp	r3, r2
 80050ec:	bfc4      	itt	gt
 80050ee:	1a9b      	subgt	r3, r3, r2
 80050f0:	18ed      	addgt	r5, r5, r3
 80050f2:	2600      	movs	r6, #0
 80050f4:	341a      	adds	r4, #26
 80050f6:	42b5      	cmp	r5, r6
 80050f8:	d11a      	bne.n	8005130 <_printf_common+0xc8>
 80050fa:	2000      	movs	r0, #0
 80050fc:	e008      	b.n	8005110 <_printf_common+0xa8>
 80050fe:	2301      	movs	r3, #1
 8005100:	4652      	mov	r2, sl
 8005102:	4649      	mov	r1, r9
 8005104:	4638      	mov	r0, r7
 8005106:	47c0      	blx	r8
 8005108:	3001      	adds	r0, #1
 800510a:	d103      	bne.n	8005114 <_printf_common+0xac>
 800510c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005114:	3501      	adds	r5, #1
 8005116:	e7c6      	b.n	80050a6 <_printf_common+0x3e>
 8005118:	18e1      	adds	r1, r4, r3
 800511a:	1c5a      	adds	r2, r3, #1
 800511c:	2030      	movs	r0, #48	; 0x30
 800511e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005122:	4422      	add	r2, r4
 8005124:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005128:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800512c:	3302      	adds	r3, #2
 800512e:	e7c7      	b.n	80050c0 <_printf_common+0x58>
 8005130:	2301      	movs	r3, #1
 8005132:	4622      	mov	r2, r4
 8005134:	4649      	mov	r1, r9
 8005136:	4638      	mov	r0, r7
 8005138:	47c0      	blx	r8
 800513a:	3001      	adds	r0, #1
 800513c:	d0e6      	beq.n	800510c <_printf_common+0xa4>
 800513e:	3601      	adds	r6, #1
 8005140:	e7d9      	b.n	80050f6 <_printf_common+0x8e>
	...

08005144 <_printf_i>:
 8005144:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005148:	7e0f      	ldrb	r7, [r1, #24]
 800514a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800514c:	2f78      	cmp	r7, #120	; 0x78
 800514e:	4691      	mov	r9, r2
 8005150:	4680      	mov	r8, r0
 8005152:	460c      	mov	r4, r1
 8005154:	469a      	mov	sl, r3
 8005156:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800515a:	d807      	bhi.n	800516c <_printf_i+0x28>
 800515c:	2f62      	cmp	r7, #98	; 0x62
 800515e:	d80a      	bhi.n	8005176 <_printf_i+0x32>
 8005160:	2f00      	cmp	r7, #0
 8005162:	f000 80d8 	beq.w	8005316 <_printf_i+0x1d2>
 8005166:	2f58      	cmp	r7, #88	; 0x58
 8005168:	f000 80a3 	beq.w	80052b2 <_printf_i+0x16e>
 800516c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005170:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005174:	e03a      	b.n	80051ec <_printf_i+0xa8>
 8005176:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800517a:	2b15      	cmp	r3, #21
 800517c:	d8f6      	bhi.n	800516c <_printf_i+0x28>
 800517e:	a101      	add	r1, pc, #4	; (adr r1, 8005184 <_printf_i+0x40>)
 8005180:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005184:	080051dd 	.word	0x080051dd
 8005188:	080051f1 	.word	0x080051f1
 800518c:	0800516d 	.word	0x0800516d
 8005190:	0800516d 	.word	0x0800516d
 8005194:	0800516d 	.word	0x0800516d
 8005198:	0800516d 	.word	0x0800516d
 800519c:	080051f1 	.word	0x080051f1
 80051a0:	0800516d 	.word	0x0800516d
 80051a4:	0800516d 	.word	0x0800516d
 80051a8:	0800516d 	.word	0x0800516d
 80051ac:	0800516d 	.word	0x0800516d
 80051b0:	080052fd 	.word	0x080052fd
 80051b4:	08005221 	.word	0x08005221
 80051b8:	080052df 	.word	0x080052df
 80051bc:	0800516d 	.word	0x0800516d
 80051c0:	0800516d 	.word	0x0800516d
 80051c4:	0800531f 	.word	0x0800531f
 80051c8:	0800516d 	.word	0x0800516d
 80051cc:	08005221 	.word	0x08005221
 80051d0:	0800516d 	.word	0x0800516d
 80051d4:	0800516d 	.word	0x0800516d
 80051d8:	080052e7 	.word	0x080052e7
 80051dc:	682b      	ldr	r3, [r5, #0]
 80051de:	1d1a      	adds	r2, r3, #4
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	602a      	str	r2, [r5, #0]
 80051e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051ec:	2301      	movs	r3, #1
 80051ee:	e0a3      	b.n	8005338 <_printf_i+0x1f4>
 80051f0:	6820      	ldr	r0, [r4, #0]
 80051f2:	6829      	ldr	r1, [r5, #0]
 80051f4:	0606      	lsls	r6, r0, #24
 80051f6:	f101 0304 	add.w	r3, r1, #4
 80051fa:	d50a      	bpl.n	8005212 <_printf_i+0xce>
 80051fc:	680e      	ldr	r6, [r1, #0]
 80051fe:	602b      	str	r3, [r5, #0]
 8005200:	2e00      	cmp	r6, #0
 8005202:	da03      	bge.n	800520c <_printf_i+0xc8>
 8005204:	232d      	movs	r3, #45	; 0x2d
 8005206:	4276      	negs	r6, r6
 8005208:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800520c:	485e      	ldr	r0, [pc, #376]	; (8005388 <_printf_i+0x244>)
 800520e:	230a      	movs	r3, #10
 8005210:	e019      	b.n	8005246 <_printf_i+0x102>
 8005212:	680e      	ldr	r6, [r1, #0]
 8005214:	602b      	str	r3, [r5, #0]
 8005216:	f010 0f40 	tst.w	r0, #64	; 0x40
 800521a:	bf18      	it	ne
 800521c:	b236      	sxthne	r6, r6
 800521e:	e7ef      	b.n	8005200 <_printf_i+0xbc>
 8005220:	682b      	ldr	r3, [r5, #0]
 8005222:	6820      	ldr	r0, [r4, #0]
 8005224:	1d19      	adds	r1, r3, #4
 8005226:	6029      	str	r1, [r5, #0]
 8005228:	0601      	lsls	r1, r0, #24
 800522a:	d501      	bpl.n	8005230 <_printf_i+0xec>
 800522c:	681e      	ldr	r6, [r3, #0]
 800522e:	e002      	b.n	8005236 <_printf_i+0xf2>
 8005230:	0646      	lsls	r6, r0, #25
 8005232:	d5fb      	bpl.n	800522c <_printf_i+0xe8>
 8005234:	881e      	ldrh	r6, [r3, #0]
 8005236:	4854      	ldr	r0, [pc, #336]	; (8005388 <_printf_i+0x244>)
 8005238:	2f6f      	cmp	r7, #111	; 0x6f
 800523a:	bf0c      	ite	eq
 800523c:	2308      	moveq	r3, #8
 800523e:	230a      	movne	r3, #10
 8005240:	2100      	movs	r1, #0
 8005242:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005246:	6865      	ldr	r5, [r4, #4]
 8005248:	60a5      	str	r5, [r4, #8]
 800524a:	2d00      	cmp	r5, #0
 800524c:	bfa2      	ittt	ge
 800524e:	6821      	ldrge	r1, [r4, #0]
 8005250:	f021 0104 	bicge.w	r1, r1, #4
 8005254:	6021      	strge	r1, [r4, #0]
 8005256:	b90e      	cbnz	r6, 800525c <_printf_i+0x118>
 8005258:	2d00      	cmp	r5, #0
 800525a:	d04d      	beq.n	80052f8 <_printf_i+0x1b4>
 800525c:	4615      	mov	r5, r2
 800525e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005262:	fb03 6711 	mls	r7, r3, r1, r6
 8005266:	5dc7      	ldrb	r7, [r0, r7]
 8005268:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800526c:	4637      	mov	r7, r6
 800526e:	42bb      	cmp	r3, r7
 8005270:	460e      	mov	r6, r1
 8005272:	d9f4      	bls.n	800525e <_printf_i+0x11a>
 8005274:	2b08      	cmp	r3, #8
 8005276:	d10b      	bne.n	8005290 <_printf_i+0x14c>
 8005278:	6823      	ldr	r3, [r4, #0]
 800527a:	07de      	lsls	r6, r3, #31
 800527c:	d508      	bpl.n	8005290 <_printf_i+0x14c>
 800527e:	6923      	ldr	r3, [r4, #16]
 8005280:	6861      	ldr	r1, [r4, #4]
 8005282:	4299      	cmp	r1, r3
 8005284:	bfde      	ittt	le
 8005286:	2330      	movle	r3, #48	; 0x30
 8005288:	f805 3c01 	strble.w	r3, [r5, #-1]
 800528c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005290:	1b52      	subs	r2, r2, r5
 8005292:	6122      	str	r2, [r4, #16]
 8005294:	f8cd a000 	str.w	sl, [sp]
 8005298:	464b      	mov	r3, r9
 800529a:	aa03      	add	r2, sp, #12
 800529c:	4621      	mov	r1, r4
 800529e:	4640      	mov	r0, r8
 80052a0:	f7ff fee2 	bl	8005068 <_printf_common>
 80052a4:	3001      	adds	r0, #1
 80052a6:	d14c      	bne.n	8005342 <_printf_i+0x1fe>
 80052a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80052ac:	b004      	add	sp, #16
 80052ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052b2:	4835      	ldr	r0, [pc, #212]	; (8005388 <_printf_i+0x244>)
 80052b4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80052b8:	6829      	ldr	r1, [r5, #0]
 80052ba:	6823      	ldr	r3, [r4, #0]
 80052bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80052c0:	6029      	str	r1, [r5, #0]
 80052c2:	061d      	lsls	r5, r3, #24
 80052c4:	d514      	bpl.n	80052f0 <_printf_i+0x1ac>
 80052c6:	07df      	lsls	r7, r3, #31
 80052c8:	bf44      	itt	mi
 80052ca:	f043 0320 	orrmi.w	r3, r3, #32
 80052ce:	6023      	strmi	r3, [r4, #0]
 80052d0:	b91e      	cbnz	r6, 80052da <_printf_i+0x196>
 80052d2:	6823      	ldr	r3, [r4, #0]
 80052d4:	f023 0320 	bic.w	r3, r3, #32
 80052d8:	6023      	str	r3, [r4, #0]
 80052da:	2310      	movs	r3, #16
 80052dc:	e7b0      	b.n	8005240 <_printf_i+0xfc>
 80052de:	6823      	ldr	r3, [r4, #0]
 80052e0:	f043 0320 	orr.w	r3, r3, #32
 80052e4:	6023      	str	r3, [r4, #0]
 80052e6:	2378      	movs	r3, #120	; 0x78
 80052e8:	4828      	ldr	r0, [pc, #160]	; (800538c <_printf_i+0x248>)
 80052ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80052ee:	e7e3      	b.n	80052b8 <_printf_i+0x174>
 80052f0:	0659      	lsls	r1, r3, #25
 80052f2:	bf48      	it	mi
 80052f4:	b2b6      	uxthmi	r6, r6
 80052f6:	e7e6      	b.n	80052c6 <_printf_i+0x182>
 80052f8:	4615      	mov	r5, r2
 80052fa:	e7bb      	b.n	8005274 <_printf_i+0x130>
 80052fc:	682b      	ldr	r3, [r5, #0]
 80052fe:	6826      	ldr	r6, [r4, #0]
 8005300:	6961      	ldr	r1, [r4, #20]
 8005302:	1d18      	adds	r0, r3, #4
 8005304:	6028      	str	r0, [r5, #0]
 8005306:	0635      	lsls	r5, r6, #24
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	d501      	bpl.n	8005310 <_printf_i+0x1cc>
 800530c:	6019      	str	r1, [r3, #0]
 800530e:	e002      	b.n	8005316 <_printf_i+0x1d2>
 8005310:	0670      	lsls	r0, r6, #25
 8005312:	d5fb      	bpl.n	800530c <_printf_i+0x1c8>
 8005314:	8019      	strh	r1, [r3, #0]
 8005316:	2300      	movs	r3, #0
 8005318:	6123      	str	r3, [r4, #16]
 800531a:	4615      	mov	r5, r2
 800531c:	e7ba      	b.n	8005294 <_printf_i+0x150>
 800531e:	682b      	ldr	r3, [r5, #0]
 8005320:	1d1a      	adds	r2, r3, #4
 8005322:	602a      	str	r2, [r5, #0]
 8005324:	681d      	ldr	r5, [r3, #0]
 8005326:	6862      	ldr	r2, [r4, #4]
 8005328:	2100      	movs	r1, #0
 800532a:	4628      	mov	r0, r5
 800532c:	f7fa ff70 	bl	8000210 <memchr>
 8005330:	b108      	cbz	r0, 8005336 <_printf_i+0x1f2>
 8005332:	1b40      	subs	r0, r0, r5
 8005334:	6060      	str	r0, [r4, #4]
 8005336:	6863      	ldr	r3, [r4, #4]
 8005338:	6123      	str	r3, [r4, #16]
 800533a:	2300      	movs	r3, #0
 800533c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005340:	e7a8      	b.n	8005294 <_printf_i+0x150>
 8005342:	6923      	ldr	r3, [r4, #16]
 8005344:	462a      	mov	r2, r5
 8005346:	4649      	mov	r1, r9
 8005348:	4640      	mov	r0, r8
 800534a:	47d0      	blx	sl
 800534c:	3001      	adds	r0, #1
 800534e:	d0ab      	beq.n	80052a8 <_printf_i+0x164>
 8005350:	6823      	ldr	r3, [r4, #0]
 8005352:	079b      	lsls	r3, r3, #30
 8005354:	d413      	bmi.n	800537e <_printf_i+0x23a>
 8005356:	68e0      	ldr	r0, [r4, #12]
 8005358:	9b03      	ldr	r3, [sp, #12]
 800535a:	4298      	cmp	r0, r3
 800535c:	bfb8      	it	lt
 800535e:	4618      	movlt	r0, r3
 8005360:	e7a4      	b.n	80052ac <_printf_i+0x168>
 8005362:	2301      	movs	r3, #1
 8005364:	4632      	mov	r2, r6
 8005366:	4649      	mov	r1, r9
 8005368:	4640      	mov	r0, r8
 800536a:	47d0      	blx	sl
 800536c:	3001      	adds	r0, #1
 800536e:	d09b      	beq.n	80052a8 <_printf_i+0x164>
 8005370:	3501      	adds	r5, #1
 8005372:	68e3      	ldr	r3, [r4, #12]
 8005374:	9903      	ldr	r1, [sp, #12]
 8005376:	1a5b      	subs	r3, r3, r1
 8005378:	42ab      	cmp	r3, r5
 800537a:	dcf2      	bgt.n	8005362 <_printf_i+0x21e>
 800537c:	e7eb      	b.n	8005356 <_printf_i+0x212>
 800537e:	2500      	movs	r5, #0
 8005380:	f104 0619 	add.w	r6, r4, #25
 8005384:	e7f5      	b.n	8005372 <_printf_i+0x22e>
 8005386:	bf00      	nop
 8005388:	0800aee4 	.word	0x0800aee4
 800538c:	0800aef5 	.word	0x0800aef5

08005390 <_scanf_float>:
 8005390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005394:	b087      	sub	sp, #28
 8005396:	4617      	mov	r7, r2
 8005398:	9303      	str	r3, [sp, #12]
 800539a:	688b      	ldr	r3, [r1, #8]
 800539c:	1e5a      	subs	r2, r3, #1
 800539e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80053a2:	bf83      	ittte	hi
 80053a4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80053a8:	195b      	addhi	r3, r3, r5
 80053aa:	9302      	strhi	r3, [sp, #8]
 80053ac:	2300      	movls	r3, #0
 80053ae:	bf86      	itte	hi
 80053b0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80053b4:	608b      	strhi	r3, [r1, #8]
 80053b6:	9302      	strls	r3, [sp, #8]
 80053b8:	680b      	ldr	r3, [r1, #0]
 80053ba:	468b      	mov	fp, r1
 80053bc:	2500      	movs	r5, #0
 80053be:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80053c2:	f84b 3b1c 	str.w	r3, [fp], #28
 80053c6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80053ca:	4680      	mov	r8, r0
 80053cc:	460c      	mov	r4, r1
 80053ce:	465e      	mov	r6, fp
 80053d0:	46aa      	mov	sl, r5
 80053d2:	46a9      	mov	r9, r5
 80053d4:	9501      	str	r5, [sp, #4]
 80053d6:	68a2      	ldr	r2, [r4, #8]
 80053d8:	b152      	cbz	r2, 80053f0 <_scanf_float+0x60>
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	2b4e      	cmp	r3, #78	; 0x4e
 80053e0:	d864      	bhi.n	80054ac <_scanf_float+0x11c>
 80053e2:	2b40      	cmp	r3, #64	; 0x40
 80053e4:	d83c      	bhi.n	8005460 <_scanf_float+0xd0>
 80053e6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80053ea:	b2c8      	uxtb	r0, r1
 80053ec:	280e      	cmp	r0, #14
 80053ee:	d93a      	bls.n	8005466 <_scanf_float+0xd6>
 80053f0:	f1b9 0f00 	cmp.w	r9, #0
 80053f4:	d003      	beq.n	80053fe <_scanf_float+0x6e>
 80053f6:	6823      	ldr	r3, [r4, #0]
 80053f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053fc:	6023      	str	r3, [r4, #0]
 80053fe:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005402:	f1ba 0f01 	cmp.w	sl, #1
 8005406:	f200 8113 	bhi.w	8005630 <_scanf_float+0x2a0>
 800540a:	455e      	cmp	r6, fp
 800540c:	f200 8105 	bhi.w	800561a <_scanf_float+0x28a>
 8005410:	2501      	movs	r5, #1
 8005412:	4628      	mov	r0, r5
 8005414:	b007      	add	sp, #28
 8005416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800541a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800541e:	2a0d      	cmp	r2, #13
 8005420:	d8e6      	bhi.n	80053f0 <_scanf_float+0x60>
 8005422:	a101      	add	r1, pc, #4	; (adr r1, 8005428 <_scanf_float+0x98>)
 8005424:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005428:	08005567 	.word	0x08005567
 800542c:	080053f1 	.word	0x080053f1
 8005430:	080053f1 	.word	0x080053f1
 8005434:	080053f1 	.word	0x080053f1
 8005438:	080055c7 	.word	0x080055c7
 800543c:	0800559f 	.word	0x0800559f
 8005440:	080053f1 	.word	0x080053f1
 8005444:	080053f1 	.word	0x080053f1
 8005448:	08005575 	.word	0x08005575
 800544c:	080053f1 	.word	0x080053f1
 8005450:	080053f1 	.word	0x080053f1
 8005454:	080053f1 	.word	0x080053f1
 8005458:	080053f1 	.word	0x080053f1
 800545c:	0800552d 	.word	0x0800552d
 8005460:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005464:	e7db      	b.n	800541e <_scanf_float+0x8e>
 8005466:	290e      	cmp	r1, #14
 8005468:	d8c2      	bhi.n	80053f0 <_scanf_float+0x60>
 800546a:	a001      	add	r0, pc, #4	; (adr r0, 8005470 <_scanf_float+0xe0>)
 800546c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005470:	0800551f 	.word	0x0800551f
 8005474:	080053f1 	.word	0x080053f1
 8005478:	0800551f 	.word	0x0800551f
 800547c:	080055b3 	.word	0x080055b3
 8005480:	080053f1 	.word	0x080053f1
 8005484:	080054cd 	.word	0x080054cd
 8005488:	08005509 	.word	0x08005509
 800548c:	08005509 	.word	0x08005509
 8005490:	08005509 	.word	0x08005509
 8005494:	08005509 	.word	0x08005509
 8005498:	08005509 	.word	0x08005509
 800549c:	08005509 	.word	0x08005509
 80054a0:	08005509 	.word	0x08005509
 80054a4:	08005509 	.word	0x08005509
 80054a8:	08005509 	.word	0x08005509
 80054ac:	2b6e      	cmp	r3, #110	; 0x6e
 80054ae:	d809      	bhi.n	80054c4 <_scanf_float+0x134>
 80054b0:	2b60      	cmp	r3, #96	; 0x60
 80054b2:	d8b2      	bhi.n	800541a <_scanf_float+0x8a>
 80054b4:	2b54      	cmp	r3, #84	; 0x54
 80054b6:	d077      	beq.n	80055a8 <_scanf_float+0x218>
 80054b8:	2b59      	cmp	r3, #89	; 0x59
 80054ba:	d199      	bne.n	80053f0 <_scanf_float+0x60>
 80054bc:	2d07      	cmp	r5, #7
 80054be:	d197      	bne.n	80053f0 <_scanf_float+0x60>
 80054c0:	2508      	movs	r5, #8
 80054c2:	e029      	b.n	8005518 <_scanf_float+0x188>
 80054c4:	2b74      	cmp	r3, #116	; 0x74
 80054c6:	d06f      	beq.n	80055a8 <_scanf_float+0x218>
 80054c8:	2b79      	cmp	r3, #121	; 0x79
 80054ca:	e7f6      	b.n	80054ba <_scanf_float+0x12a>
 80054cc:	6821      	ldr	r1, [r4, #0]
 80054ce:	05c8      	lsls	r0, r1, #23
 80054d0:	d51a      	bpl.n	8005508 <_scanf_float+0x178>
 80054d2:	9b02      	ldr	r3, [sp, #8]
 80054d4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80054d8:	6021      	str	r1, [r4, #0]
 80054da:	f109 0901 	add.w	r9, r9, #1
 80054de:	b11b      	cbz	r3, 80054e8 <_scanf_float+0x158>
 80054e0:	3b01      	subs	r3, #1
 80054e2:	3201      	adds	r2, #1
 80054e4:	9302      	str	r3, [sp, #8]
 80054e6:	60a2      	str	r2, [r4, #8]
 80054e8:	68a3      	ldr	r3, [r4, #8]
 80054ea:	3b01      	subs	r3, #1
 80054ec:	60a3      	str	r3, [r4, #8]
 80054ee:	6923      	ldr	r3, [r4, #16]
 80054f0:	3301      	adds	r3, #1
 80054f2:	6123      	str	r3, [r4, #16]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	3b01      	subs	r3, #1
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	607b      	str	r3, [r7, #4]
 80054fc:	f340 8084 	ble.w	8005608 <_scanf_float+0x278>
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	3301      	adds	r3, #1
 8005504:	603b      	str	r3, [r7, #0]
 8005506:	e766      	b.n	80053d6 <_scanf_float+0x46>
 8005508:	eb1a 0f05 	cmn.w	sl, r5
 800550c:	f47f af70 	bne.w	80053f0 <_scanf_float+0x60>
 8005510:	6822      	ldr	r2, [r4, #0]
 8005512:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005516:	6022      	str	r2, [r4, #0]
 8005518:	f806 3b01 	strb.w	r3, [r6], #1
 800551c:	e7e4      	b.n	80054e8 <_scanf_float+0x158>
 800551e:	6822      	ldr	r2, [r4, #0]
 8005520:	0610      	lsls	r0, r2, #24
 8005522:	f57f af65 	bpl.w	80053f0 <_scanf_float+0x60>
 8005526:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800552a:	e7f4      	b.n	8005516 <_scanf_float+0x186>
 800552c:	f1ba 0f00 	cmp.w	sl, #0
 8005530:	d10e      	bne.n	8005550 <_scanf_float+0x1c0>
 8005532:	f1b9 0f00 	cmp.w	r9, #0
 8005536:	d10e      	bne.n	8005556 <_scanf_float+0x1c6>
 8005538:	6822      	ldr	r2, [r4, #0]
 800553a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800553e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005542:	d108      	bne.n	8005556 <_scanf_float+0x1c6>
 8005544:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005548:	6022      	str	r2, [r4, #0]
 800554a:	f04f 0a01 	mov.w	sl, #1
 800554e:	e7e3      	b.n	8005518 <_scanf_float+0x188>
 8005550:	f1ba 0f02 	cmp.w	sl, #2
 8005554:	d055      	beq.n	8005602 <_scanf_float+0x272>
 8005556:	2d01      	cmp	r5, #1
 8005558:	d002      	beq.n	8005560 <_scanf_float+0x1d0>
 800555a:	2d04      	cmp	r5, #4
 800555c:	f47f af48 	bne.w	80053f0 <_scanf_float+0x60>
 8005560:	3501      	adds	r5, #1
 8005562:	b2ed      	uxtb	r5, r5
 8005564:	e7d8      	b.n	8005518 <_scanf_float+0x188>
 8005566:	f1ba 0f01 	cmp.w	sl, #1
 800556a:	f47f af41 	bne.w	80053f0 <_scanf_float+0x60>
 800556e:	f04f 0a02 	mov.w	sl, #2
 8005572:	e7d1      	b.n	8005518 <_scanf_float+0x188>
 8005574:	b97d      	cbnz	r5, 8005596 <_scanf_float+0x206>
 8005576:	f1b9 0f00 	cmp.w	r9, #0
 800557a:	f47f af3c 	bne.w	80053f6 <_scanf_float+0x66>
 800557e:	6822      	ldr	r2, [r4, #0]
 8005580:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005584:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005588:	f47f af39 	bne.w	80053fe <_scanf_float+0x6e>
 800558c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005590:	6022      	str	r2, [r4, #0]
 8005592:	2501      	movs	r5, #1
 8005594:	e7c0      	b.n	8005518 <_scanf_float+0x188>
 8005596:	2d03      	cmp	r5, #3
 8005598:	d0e2      	beq.n	8005560 <_scanf_float+0x1d0>
 800559a:	2d05      	cmp	r5, #5
 800559c:	e7de      	b.n	800555c <_scanf_float+0x1cc>
 800559e:	2d02      	cmp	r5, #2
 80055a0:	f47f af26 	bne.w	80053f0 <_scanf_float+0x60>
 80055a4:	2503      	movs	r5, #3
 80055a6:	e7b7      	b.n	8005518 <_scanf_float+0x188>
 80055a8:	2d06      	cmp	r5, #6
 80055aa:	f47f af21 	bne.w	80053f0 <_scanf_float+0x60>
 80055ae:	2507      	movs	r5, #7
 80055b0:	e7b2      	b.n	8005518 <_scanf_float+0x188>
 80055b2:	6822      	ldr	r2, [r4, #0]
 80055b4:	0591      	lsls	r1, r2, #22
 80055b6:	f57f af1b 	bpl.w	80053f0 <_scanf_float+0x60>
 80055ba:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80055be:	6022      	str	r2, [r4, #0]
 80055c0:	f8cd 9004 	str.w	r9, [sp, #4]
 80055c4:	e7a8      	b.n	8005518 <_scanf_float+0x188>
 80055c6:	6822      	ldr	r2, [r4, #0]
 80055c8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80055cc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80055d0:	d006      	beq.n	80055e0 <_scanf_float+0x250>
 80055d2:	0550      	lsls	r0, r2, #21
 80055d4:	f57f af0c 	bpl.w	80053f0 <_scanf_float+0x60>
 80055d8:	f1b9 0f00 	cmp.w	r9, #0
 80055dc:	f43f af0f 	beq.w	80053fe <_scanf_float+0x6e>
 80055e0:	0591      	lsls	r1, r2, #22
 80055e2:	bf58      	it	pl
 80055e4:	9901      	ldrpl	r1, [sp, #4]
 80055e6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80055ea:	bf58      	it	pl
 80055ec:	eba9 0101 	subpl.w	r1, r9, r1
 80055f0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80055f4:	bf58      	it	pl
 80055f6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80055fa:	6022      	str	r2, [r4, #0]
 80055fc:	f04f 0900 	mov.w	r9, #0
 8005600:	e78a      	b.n	8005518 <_scanf_float+0x188>
 8005602:	f04f 0a03 	mov.w	sl, #3
 8005606:	e787      	b.n	8005518 <_scanf_float+0x188>
 8005608:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800560c:	4639      	mov	r1, r7
 800560e:	4640      	mov	r0, r8
 8005610:	4798      	blx	r3
 8005612:	2800      	cmp	r0, #0
 8005614:	f43f aedf 	beq.w	80053d6 <_scanf_float+0x46>
 8005618:	e6ea      	b.n	80053f0 <_scanf_float+0x60>
 800561a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800561e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005622:	463a      	mov	r2, r7
 8005624:	4640      	mov	r0, r8
 8005626:	4798      	blx	r3
 8005628:	6923      	ldr	r3, [r4, #16]
 800562a:	3b01      	subs	r3, #1
 800562c:	6123      	str	r3, [r4, #16]
 800562e:	e6ec      	b.n	800540a <_scanf_float+0x7a>
 8005630:	1e6b      	subs	r3, r5, #1
 8005632:	2b06      	cmp	r3, #6
 8005634:	d825      	bhi.n	8005682 <_scanf_float+0x2f2>
 8005636:	2d02      	cmp	r5, #2
 8005638:	d836      	bhi.n	80056a8 <_scanf_float+0x318>
 800563a:	455e      	cmp	r6, fp
 800563c:	f67f aee8 	bls.w	8005410 <_scanf_float+0x80>
 8005640:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005644:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005648:	463a      	mov	r2, r7
 800564a:	4640      	mov	r0, r8
 800564c:	4798      	blx	r3
 800564e:	6923      	ldr	r3, [r4, #16]
 8005650:	3b01      	subs	r3, #1
 8005652:	6123      	str	r3, [r4, #16]
 8005654:	e7f1      	b.n	800563a <_scanf_float+0x2aa>
 8005656:	9802      	ldr	r0, [sp, #8]
 8005658:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800565c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005660:	9002      	str	r0, [sp, #8]
 8005662:	463a      	mov	r2, r7
 8005664:	4640      	mov	r0, r8
 8005666:	4798      	blx	r3
 8005668:	6923      	ldr	r3, [r4, #16]
 800566a:	3b01      	subs	r3, #1
 800566c:	6123      	str	r3, [r4, #16]
 800566e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005672:	fa5f fa8a 	uxtb.w	sl, sl
 8005676:	f1ba 0f02 	cmp.w	sl, #2
 800567a:	d1ec      	bne.n	8005656 <_scanf_float+0x2c6>
 800567c:	3d03      	subs	r5, #3
 800567e:	b2ed      	uxtb	r5, r5
 8005680:	1b76      	subs	r6, r6, r5
 8005682:	6823      	ldr	r3, [r4, #0]
 8005684:	05da      	lsls	r2, r3, #23
 8005686:	d52f      	bpl.n	80056e8 <_scanf_float+0x358>
 8005688:	055b      	lsls	r3, r3, #21
 800568a:	d510      	bpl.n	80056ae <_scanf_float+0x31e>
 800568c:	455e      	cmp	r6, fp
 800568e:	f67f aebf 	bls.w	8005410 <_scanf_float+0x80>
 8005692:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005696:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800569a:	463a      	mov	r2, r7
 800569c:	4640      	mov	r0, r8
 800569e:	4798      	blx	r3
 80056a0:	6923      	ldr	r3, [r4, #16]
 80056a2:	3b01      	subs	r3, #1
 80056a4:	6123      	str	r3, [r4, #16]
 80056a6:	e7f1      	b.n	800568c <_scanf_float+0x2fc>
 80056a8:	46aa      	mov	sl, r5
 80056aa:	9602      	str	r6, [sp, #8]
 80056ac:	e7df      	b.n	800566e <_scanf_float+0x2de>
 80056ae:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80056b2:	6923      	ldr	r3, [r4, #16]
 80056b4:	2965      	cmp	r1, #101	; 0x65
 80056b6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80056ba:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 80056be:	6123      	str	r3, [r4, #16]
 80056c0:	d00c      	beq.n	80056dc <_scanf_float+0x34c>
 80056c2:	2945      	cmp	r1, #69	; 0x45
 80056c4:	d00a      	beq.n	80056dc <_scanf_float+0x34c>
 80056c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80056ca:	463a      	mov	r2, r7
 80056cc:	4640      	mov	r0, r8
 80056ce:	4798      	blx	r3
 80056d0:	6923      	ldr	r3, [r4, #16]
 80056d2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80056d6:	3b01      	subs	r3, #1
 80056d8:	1eb5      	subs	r5, r6, #2
 80056da:	6123      	str	r3, [r4, #16]
 80056dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80056e0:	463a      	mov	r2, r7
 80056e2:	4640      	mov	r0, r8
 80056e4:	4798      	blx	r3
 80056e6:	462e      	mov	r6, r5
 80056e8:	6825      	ldr	r5, [r4, #0]
 80056ea:	f015 0510 	ands.w	r5, r5, #16
 80056ee:	d159      	bne.n	80057a4 <_scanf_float+0x414>
 80056f0:	7035      	strb	r5, [r6, #0]
 80056f2:	6823      	ldr	r3, [r4, #0]
 80056f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80056f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056fc:	d11b      	bne.n	8005736 <_scanf_float+0x3a6>
 80056fe:	9b01      	ldr	r3, [sp, #4]
 8005700:	454b      	cmp	r3, r9
 8005702:	eba3 0209 	sub.w	r2, r3, r9
 8005706:	d123      	bne.n	8005750 <_scanf_float+0x3c0>
 8005708:	2200      	movs	r2, #0
 800570a:	4659      	mov	r1, fp
 800570c:	4640      	mov	r0, r8
 800570e:	f000 ff09 	bl	8006524 <_strtod_r>
 8005712:	6822      	ldr	r2, [r4, #0]
 8005714:	9b03      	ldr	r3, [sp, #12]
 8005716:	f012 0f02 	tst.w	r2, #2
 800571a:	ec57 6b10 	vmov	r6, r7, d0
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	d021      	beq.n	8005766 <_scanf_float+0x3d6>
 8005722:	9903      	ldr	r1, [sp, #12]
 8005724:	1d1a      	adds	r2, r3, #4
 8005726:	600a      	str	r2, [r1, #0]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	e9c3 6700 	strd	r6, r7, [r3]
 800572e:	68e3      	ldr	r3, [r4, #12]
 8005730:	3301      	adds	r3, #1
 8005732:	60e3      	str	r3, [r4, #12]
 8005734:	e66d      	b.n	8005412 <_scanf_float+0x82>
 8005736:	9b04      	ldr	r3, [sp, #16]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d0e5      	beq.n	8005708 <_scanf_float+0x378>
 800573c:	9905      	ldr	r1, [sp, #20]
 800573e:	230a      	movs	r3, #10
 8005740:	462a      	mov	r2, r5
 8005742:	3101      	adds	r1, #1
 8005744:	4640      	mov	r0, r8
 8005746:	f000 ff75 	bl	8006634 <_strtol_r>
 800574a:	9b04      	ldr	r3, [sp, #16]
 800574c:	9e05      	ldr	r6, [sp, #20]
 800574e:	1ac2      	subs	r2, r0, r3
 8005750:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005754:	429e      	cmp	r6, r3
 8005756:	bf28      	it	cs
 8005758:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800575c:	4912      	ldr	r1, [pc, #72]	; (80057a8 <_scanf_float+0x418>)
 800575e:	4630      	mov	r0, r6
 8005760:	f000 f82c 	bl	80057bc <siprintf>
 8005764:	e7d0      	b.n	8005708 <_scanf_float+0x378>
 8005766:	9903      	ldr	r1, [sp, #12]
 8005768:	f012 0f04 	tst.w	r2, #4
 800576c:	f103 0204 	add.w	r2, r3, #4
 8005770:	600a      	str	r2, [r1, #0]
 8005772:	d1d9      	bne.n	8005728 <_scanf_float+0x398>
 8005774:	f8d3 8000 	ldr.w	r8, [r3]
 8005778:	ee10 2a10 	vmov	r2, s0
 800577c:	ee10 0a10 	vmov	r0, s0
 8005780:	463b      	mov	r3, r7
 8005782:	4639      	mov	r1, r7
 8005784:	f7fb f9ea 	bl	8000b5c <__aeabi_dcmpun>
 8005788:	b128      	cbz	r0, 8005796 <_scanf_float+0x406>
 800578a:	4808      	ldr	r0, [pc, #32]	; (80057ac <_scanf_float+0x41c>)
 800578c:	f000 f810 	bl	80057b0 <nanf>
 8005790:	ed88 0a00 	vstr	s0, [r8]
 8005794:	e7cb      	b.n	800572e <_scanf_float+0x39e>
 8005796:	4630      	mov	r0, r6
 8005798:	4639      	mov	r1, r7
 800579a:	f7fb fa3d 	bl	8000c18 <__aeabi_d2f>
 800579e:	f8c8 0000 	str.w	r0, [r8]
 80057a2:	e7c4      	b.n	800572e <_scanf_float+0x39e>
 80057a4:	2500      	movs	r5, #0
 80057a6:	e634      	b.n	8005412 <_scanf_float+0x82>
 80057a8:	0800af06 	.word	0x0800af06
 80057ac:	0800b32b 	.word	0x0800b32b

080057b0 <nanf>:
 80057b0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80057b8 <nanf+0x8>
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	7fc00000 	.word	0x7fc00000

080057bc <siprintf>:
 80057bc:	b40e      	push	{r1, r2, r3}
 80057be:	b500      	push	{lr}
 80057c0:	b09c      	sub	sp, #112	; 0x70
 80057c2:	ab1d      	add	r3, sp, #116	; 0x74
 80057c4:	9002      	str	r0, [sp, #8]
 80057c6:	9006      	str	r0, [sp, #24]
 80057c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80057cc:	4809      	ldr	r0, [pc, #36]	; (80057f4 <siprintf+0x38>)
 80057ce:	9107      	str	r1, [sp, #28]
 80057d0:	9104      	str	r1, [sp, #16]
 80057d2:	4909      	ldr	r1, [pc, #36]	; (80057f8 <siprintf+0x3c>)
 80057d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80057d8:	9105      	str	r1, [sp, #20]
 80057da:	6800      	ldr	r0, [r0, #0]
 80057dc:	9301      	str	r3, [sp, #4]
 80057de:	a902      	add	r1, sp, #8
 80057e0:	f002 ff8a 	bl	80086f8 <_svfiprintf_r>
 80057e4:	9b02      	ldr	r3, [sp, #8]
 80057e6:	2200      	movs	r2, #0
 80057e8:	701a      	strb	r2, [r3, #0]
 80057ea:	b01c      	add	sp, #112	; 0x70
 80057ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80057f0:	b003      	add	sp, #12
 80057f2:	4770      	bx	lr
 80057f4:	2000001c 	.word	0x2000001c
 80057f8:	ffff0208 	.word	0xffff0208

080057fc <siscanf>:
 80057fc:	b40e      	push	{r1, r2, r3}
 80057fe:	b510      	push	{r4, lr}
 8005800:	b09f      	sub	sp, #124	; 0x7c
 8005802:	ac21      	add	r4, sp, #132	; 0x84
 8005804:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005808:	f854 2b04 	ldr.w	r2, [r4], #4
 800580c:	9201      	str	r2, [sp, #4]
 800580e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8005812:	9004      	str	r0, [sp, #16]
 8005814:	9008      	str	r0, [sp, #32]
 8005816:	f7fa fced 	bl	80001f4 <strlen>
 800581a:	4b0c      	ldr	r3, [pc, #48]	; (800584c <siscanf+0x50>)
 800581c:	9005      	str	r0, [sp, #20]
 800581e:	9009      	str	r0, [sp, #36]	; 0x24
 8005820:	930d      	str	r3, [sp, #52]	; 0x34
 8005822:	480b      	ldr	r0, [pc, #44]	; (8005850 <siscanf+0x54>)
 8005824:	9a01      	ldr	r2, [sp, #4]
 8005826:	6800      	ldr	r0, [r0, #0]
 8005828:	9403      	str	r4, [sp, #12]
 800582a:	2300      	movs	r3, #0
 800582c:	9311      	str	r3, [sp, #68]	; 0x44
 800582e:	9316      	str	r3, [sp, #88]	; 0x58
 8005830:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005834:	f8ad 301e 	strh.w	r3, [sp, #30]
 8005838:	a904      	add	r1, sp, #16
 800583a:	4623      	mov	r3, r4
 800583c:	f003 f8b6 	bl	80089ac <__ssvfiscanf_r>
 8005840:	b01f      	add	sp, #124	; 0x7c
 8005842:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005846:	b003      	add	sp, #12
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	08005877 	.word	0x08005877
 8005850:	2000001c 	.word	0x2000001c

08005854 <__sread>:
 8005854:	b510      	push	{r4, lr}
 8005856:	460c      	mov	r4, r1
 8005858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800585c:	f003 fb70 	bl	8008f40 <_read_r>
 8005860:	2800      	cmp	r0, #0
 8005862:	bfab      	itete	ge
 8005864:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005866:	89a3      	ldrhlt	r3, [r4, #12]
 8005868:	181b      	addge	r3, r3, r0
 800586a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800586e:	bfac      	ite	ge
 8005870:	6563      	strge	r3, [r4, #84]	; 0x54
 8005872:	81a3      	strhlt	r3, [r4, #12]
 8005874:	bd10      	pop	{r4, pc}

08005876 <__seofread>:
 8005876:	2000      	movs	r0, #0
 8005878:	4770      	bx	lr

0800587a <__swrite>:
 800587a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800587e:	461f      	mov	r7, r3
 8005880:	898b      	ldrh	r3, [r1, #12]
 8005882:	05db      	lsls	r3, r3, #23
 8005884:	4605      	mov	r5, r0
 8005886:	460c      	mov	r4, r1
 8005888:	4616      	mov	r6, r2
 800588a:	d505      	bpl.n	8005898 <__swrite+0x1e>
 800588c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005890:	2302      	movs	r3, #2
 8005892:	2200      	movs	r2, #0
 8005894:	f002 f8e2 	bl	8007a5c <_lseek_r>
 8005898:	89a3      	ldrh	r3, [r4, #12]
 800589a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800589e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058a2:	81a3      	strh	r3, [r4, #12]
 80058a4:	4632      	mov	r2, r6
 80058a6:	463b      	mov	r3, r7
 80058a8:	4628      	mov	r0, r5
 80058aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058ae:	f000 bec3 	b.w	8006638 <_write_r>

080058b2 <__sseek>:
 80058b2:	b510      	push	{r4, lr}
 80058b4:	460c      	mov	r4, r1
 80058b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058ba:	f002 f8cf 	bl	8007a5c <_lseek_r>
 80058be:	1c43      	adds	r3, r0, #1
 80058c0:	89a3      	ldrh	r3, [r4, #12]
 80058c2:	bf15      	itete	ne
 80058c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80058c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80058ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80058ce:	81a3      	strheq	r3, [r4, #12]
 80058d0:	bf18      	it	ne
 80058d2:	81a3      	strhne	r3, [r4, #12]
 80058d4:	bd10      	pop	{r4, pc}

080058d6 <__sclose>:
 80058d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058da:	f000 bebf 	b.w	800665c <_close_r>

080058de <sulp>:
 80058de:	b570      	push	{r4, r5, r6, lr}
 80058e0:	4604      	mov	r4, r0
 80058e2:	460d      	mov	r5, r1
 80058e4:	ec45 4b10 	vmov	d0, r4, r5
 80058e8:	4616      	mov	r6, r2
 80058ea:	f002 fc63 	bl	80081b4 <__ulp>
 80058ee:	ec51 0b10 	vmov	r0, r1, d0
 80058f2:	b17e      	cbz	r6, 8005914 <sulp+0x36>
 80058f4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80058f8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	dd09      	ble.n	8005914 <sulp+0x36>
 8005900:	051b      	lsls	r3, r3, #20
 8005902:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005906:	2400      	movs	r4, #0
 8005908:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800590c:	4622      	mov	r2, r4
 800590e:	462b      	mov	r3, r5
 8005910:	f7fa fe8a 	bl	8000628 <__aeabi_dmul>
 8005914:	bd70      	pop	{r4, r5, r6, pc}
	...

08005918 <_strtod_l>:
 8005918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800591c:	ed2d 8b02 	vpush	{d8}
 8005920:	b09d      	sub	sp, #116	; 0x74
 8005922:	461f      	mov	r7, r3
 8005924:	2300      	movs	r3, #0
 8005926:	9318      	str	r3, [sp, #96]	; 0x60
 8005928:	4ba2      	ldr	r3, [pc, #648]	; (8005bb4 <_strtod_l+0x29c>)
 800592a:	9213      	str	r2, [sp, #76]	; 0x4c
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	9305      	str	r3, [sp, #20]
 8005930:	4604      	mov	r4, r0
 8005932:	4618      	mov	r0, r3
 8005934:	4688      	mov	r8, r1
 8005936:	f7fa fc5d 	bl	80001f4 <strlen>
 800593a:	f04f 0a00 	mov.w	sl, #0
 800593e:	4605      	mov	r5, r0
 8005940:	f04f 0b00 	mov.w	fp, #0
 8005944:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005948:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800594a:	781a      	ldrb	r2, [r3, #0]
 800594c:	2a2b      	cmp	r2, #43	; 0x2b
 800594e:	d04e      	beq.n	80059ee <_strtod_l+0xd6>
 8005950:	d83b      	bhi.n	80059ca <_strtod_l+0xb2>
 8005952:	2a0d      	cmp	r2, #13
 8005954:	d834      	bhi.n	80059c0 <_strtod_l+0xa8>
 8005956:	2a08      	cmp	r2, #8
 8005958:	d834      	bhi.n	80059c4 <_strtod_l+0xac>
 800595a:	2a00      	cmp	r2, #0
 800595c:	d03e      	beq.n	80059dc <_strtod_l+0xc4>
 800595e:	2300      	movs	r3, #0
 8005960:	930a      	str	r3, [sp, #40]	; 0x28
 8005962:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8005964:	7833      	ldrb	r3, [r6, #0]
 8005966:	2b30      	cmp	r3, #48	; 0x30
 8005968:	f040 80b0 	bne.w	8005acc <_strtod_l+0x1b4>
 800596c:	7873      	ldrb	r3, [r6, #1]
 800596e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005972:	2b58      	cmp	r3, #88	; 0x58
 8005974:	d168      	bne.n	8005a48 <_strtod_l+0x130>
 8005976:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005978:	9301      	str	r3, [sp, #4]
 800597a:	ab18      	add	r3, sp, #96	; 0x60
 800597c:	9702      	str	r7, [sp, #8]
 800597e:	9300      	str	r3, [sp, #0]
 8005980:	4a8d      	ldr	r2, [pc, #564]	; (8005bb8 <_strtod_l+0x2a0>)
 8005982:	ab19      	add	r3, sp, #100	; 0x64
 8005984:	a917      	add	r1, sp, #92	; 0x5c
 8005986:	4620      	mov	r0, r4
 8005988:	f001 fd5c 	bl	8007444 <__gethex>
 800598c:	f010 0707 	ands.w	r7, r0, #7
 8005990:	4605      	mov	r5, r0
 8005992:	d005      	beq.n	80059a0 <_strtod_l+0x88>
 8005994:	2f06      	cmp	r7, #6
 8005996:	d12c      	bne.n	80059f2 <_strtod_l+0xda>
 8005998:	3601      	adds	r6, #1
 800599a:	2300      	movs	r3, #0
 800599c:	9617      	str	r6, [sp, #92]	; 0x5c
 800599e:	930a      	str	r3, [sp, #40]	; 0x28
 80059a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	f040 8590 	bne.w	80064c8 <_strtod_l+0xbb0>
 80059a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059aa:	b1eb      	cbz	r3, 80059e8 <_strtod_l+0xd0>
 80059ac:	4652      	mov	r2, sl
 80059ae:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80059b2:	ec43 2b10 	vmov	d0, r2, r3
 80059b6:	b01d      	add	sp, #116	; 0x74
 80059b8:	ecbd 8b02 	vpop	{d8}
 80059bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059c0:	2a20      	cmp	r2, #32
 80059c2:	d1cc      	bne.n	800595e <_strtod_l+0x46>
 80059c4:	3301      	adds	r3, #1
 80059c6:	9317      	str	r3, [sp, #92]	; 0x5c
 80059c8:	e7be      	b.n	8005948 <_strtod_l+0x30>
 80059ca:	2a2d      	cmp	r2, #45	; 0x2d
 80059cc:	d1c7      	bne.n	800595e <_strtod_l+0x46>
 80059ce:	2201      	movs	r2, #1
 80059d0:	920a      	str	r2, [sp, #40]	; 0x28
 80059d2:	1c5a      	adds	r2, r3, #1
 80059d4:	9217      	str	r2, [sp, #92]	; 0x5c
 80059d6:	785b      	ldrb	r3, [r3, #1]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d1c2      	bne.n	8005962 <_strtod_l+0x4a>
 80059dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80059de:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	f040 856e 	bne.w	80064c4 <_strtod_l+0xbac>
 80059e8:	4652      	mov	r2, sl
 80059ea:	465b      	mov	r3, fp
 80059ec:	e7e1      	b.n	80059b2 <_strtod_l+0x9a>
 80059ee:	2200      	movs	r2, #0
 80059f0:	e7ee      	b.n	80059d0 <_strtod_l+0xb8>
 80059f2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80059f4:	b13a      	cbz	r2, 8005a06 <_strtod_l+0xee>
 80059f6:	2135      	movs	r1, #53	; 0x35
 80059f8:	a81a      	add	r0, sp, #104	; 0x68
 80059fa:	f002 fce6 	bl	80083ca <__copybits>
 80059fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005a00:	4620      	mov	r0, r4
 8005a02:	f002 f8a5 	bl	8007b50 <_Bfree>
 8005a06:	3f01      	subs	r7, #1
 8005a08:	2f04      	cmp	r7, #4
 8005a0a:	d806      	bhi.n	8005a1a <_strtod_l+0x102>
 8005a0c:	e8df f007 	tbb	[pc, r7]
 8005a10:	1714030a 	.word	0x1714030a
 8005a14:	0a          	.byte	0x0a
 8005a15:	00          	.byte	0x00
 8005a16:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8005a1a:	0728      	lsls	r0, r5, #28
 8005a1c:	d5c0      	bpl.n	80059a0 <_strtod_l+0x88>
 8005a1e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8005a22:	e7bd      	b.n	80059a0 <_strtod_l+0x88>
 8005a24:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8005a28:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005a2a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005a2e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005a32:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005a36:	e7f0      	b.n	8005a1a <_strtod_l+0x102>
 8005a38:	f8df b180 	ldr.w	fp, [pc, #384]	; 8005bbc <_strtod_l+0x2a4>
 8005a3c:	e7ed      	b.n	8005a1a <_strtod_l+0x102>
 8005a3e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8005a42:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8005a46:	e7e8      	b.n	8005a1a <_strtod_l+0x102>
 8005a48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005a4a:	1c5a      	adds	r2, r3, #1
 8005a4c:	9217      	str	r2, [sp, #92]	; 0x5c
 8005a4e:	785b      	ldrb	r3, [r3, #1]
 8005a50:	2b30      	cmp	r3, #48	; 0x30
 8005a52:	d0f9      	beq.n	8005a48 <_strtod_l+0x130>
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d0a3      	beq.n	80059a0 <_strtod_l+0x88>
 8005a58:	2301      	movs	r3, #1
 8005a5a:	f04f 0900 	mov.w	r9, #0
 8005a5e:	9304      	str	r3, [sp, #16]
 8005a60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005a62:	9308      	str	r3, [sp, #32]
 8005a64:	f8cd 901c 	str.w	r9, [sp, #28]
 8005a68:	464f      	mov	r7, r9
 8005a6a:	220a      	movs	r2, #10
 8005a6c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8005a6e:	7806      	ldrb	r6, [r0, #0]
 8005a70:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005a74:	b2d9      	uxtb	r1, r3
 8005a76:	2909      	cmp	r1, #9
 8005a78:	d92a      	bls.n	8005ad0 <_strtod_l+0x1b8>
 8005a7a:	9905      	ldr	r1, [sp, #20]
 8005a7c:	462a      	mov	r2, r5
 8005a7e:	f003 fac3 	bl	8009008 <strncmp>
 8005a82:	b398      	cbz	r0, 8005aec <_strtod_l+0x1d4>
 8005a84:	2000      	movs	r0, #0
 8005a86:	4632      	mov	r2, r6
 8005a88:	463d      	mov	r5, r7
 8005a8a:	9005      	str	r0, [sp, #20]
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2a65      	cmp	r2, #101	; 0x65
 8005a90:	d001      	beq.n	8005a96 <_strtod_l+0x17e>
 8005a92:	2a45      	cmp	r2, #69	; 0x45
 8005a94:	d118      	bne.n	8005ac8 <_strtod_l+0x1b0>
 8005a96:	b91d      	cbnz	r5, 8005aa0 <_strtod_l+0x188>
 8005a98:	9a04      	ldr	r2, [sp, #16]
 8005a9a:	4302      	orrs	r2, r0
 8005a9c:	d09e      	beq.n	80059dc <_strtod_l+0xc4>
 8005a9e:	2500      	movs	r5, #0
 8005aa0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8005aa4:	f108 0201 	add.w	r2, r8, #1
 8005aa8:	9217      	str	r2, [sp, #92]	; 0x5c
 8005aaa:	f898 2001 	ldrb.w	r2, [r8, #1]
 8005aae:	2a2b      	cmp	r2, #43	; 0x2b
 8005ab0:	d075      	beq.n	8005b9e <_strtod_l+0x286>
 8005ab2:	2a2d      	cmp	r2, #45	; 0x2d
 8005ab4:	d07b      	beq.n	8005bae <_strtod_l+0x296>
 8005ab6:	f04f 0c00 	mov.w	ip, #0
 8005aba:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005abe:	2909      	cmp	r1, #9
 8005ac0:	f240 8082 	bls.w	8005bc8 <_strtod_l+0x2b0>
 8005ac4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005ac8:	2600      	movs	r6, #0
 8005aca:	e09d      	b.n	8005c08 <_strtod_l+0x2f0>
 8005acc:	2300      	movs	r3, #0
 8005ace:	e7c4      	b.n	8005a5a <_strtod_l+0x142>
 8005ad0:	2f08      	cmp	r7, #8
 8005ad2:	bfd8      	it	le
 8005ad4:	9907      	ldrle	r1, [sp, #28]
 8005ad6:	f100 0001 	add.w	r0, r0, #1
 8005ada:	bfda      	itte	le
 8005adc:	fb02 3301 	mlale	r3, r2, r1, r3
 8005ae0:	9307      	strle	r3, [sp, #28]
 8005ae2:	fb02 3909 	mlagt	r9, r2, r9, r3
 8005ae6:	3701      	adds	r7, #1
 8005ae8:	9017      	str	r0, [sp, #92]	; 0x5c
 8005aea:	e7bf      	b.n	8005a6c <_strtod_l+0x154>
 8005aec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005aee:	195a      	adds	r2, r3, r5
 8005af0:	9217      	str	r2, [sp, #92]	; 0x5c
 8005af2:	5d5a      	ldrb	r2, [r3, r5]
 8005af4:	2f00      	cmp	r7, #0
 8005af6:	d037      	beq.n	8005b68 <_strtod_l+0x250>
 8005af8:	9005      	str	r0, [sp, #20]
 8005afa:	463d      	mov	r5, r7
 8005afc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005b00:	2b09      	cmp	r3, #9
 8005b02:	d912      	bls.n	8005b2a <_strtod_l+0x212>
 8005b04:	2301      	movs	r3, #1
 8005b06:	e7c2      	b.n	8005a8e <_strtod_l+0x176>
 8005b08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005b0a:	1c5a      	adds	r2, r3, #1
 8005b0c:	9217      	str	r2, [sp, #92]	; 0x5c
 8005b0e:	785a      	ldrb	r2, [r3, #1]
 8005b10:	3001      	adds	r0, #1
 8005b12:	2a30      	cmp	r2, #48	; 0x30
 8005b14:	d0f8      	beq.n	8005b08 <_strtod_l+0x1f0>
 8005b16:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005b1a:	2b08      	cmp	r3, #8
 8005b1c:	f200 84d9 	bhi.w	80064d2 <_strtod_l+0xbba>
 8005b20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005b22:	9005      	str	r0, [sp, #20]
 8005b24:	2000      	movs	r0, #0
 8005b26:	9308      	str	r3, [sp, #32]
 8005b28:	4605      	mov	r5, r0
 8005b2a:	3a30      	subs	r2, #48	; 0x30
 8005b2c:	f100 0301 	add.w	r3, r0, #1
 8005b30:	d014      	beq.n	8005b5c <_strtod_l+0x244>
 8005b32:	9905      	ldr	r1, [sp, #20]
 8005b34:	4419      	add	r1, r3
 8005b36:	9105      	str	r1, [sp, #20]
 8005b38:	462b      	mov	r3, r5
 8005b3a:	eb00 0e05 	add.w	lr, r0, r5
 8005b3e:	210a      	movs	r1, #10
 8005b40:	4573      	cmp	r3, lr
 8005b42:	d113      	bne.n	8005b6c <_strtod_l+0x254>
 8005b44:	182b      	adds	r3, r5, r0
 8005b46:	2b08      	cmp	r3, #8
 8005b48:	f105 0501 	add.w	r5, r5, #1
 8005b4c:	4405      	add	r5, r0
 8005b4e:	dc1c      	bgt.n	8005b8a <_strtod_l+0x272>
 8005b50:	9907      	ldr	r1, [sp, #28]
 8005b52:	230a      	movs	r3, #10
 8005b54:	fb03 2301 	mla	r3, r3, r1, r2
 8005b58:	9307      	str	r3, [sp, #28]
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005b5e:	1c51      	adds	r1, r2, #1
 8005b60:	9117      	str	r1, [sp, #92]	; 0x5c
 8005b62:	7852      	ldrb	r2, [r2, #1]
 8005b64:	4618      	mov	r0, r3
 8005b66:	e7c9      	b.n	8005afc <_strtod_l+0x1e4>
 8005b68:	4638      	mov	r0, r7
 8005b6a:	e7d2      	b.n	8005b12 <_strtod_l+0x1fa>
 8005b6c:	2b08      	cmp	r3, #8
 8005b6e:	dc04      	bgt.n	8005b7a <_strtod_l+0x262>
 8005b70:	9e07      	ldr	r6, [sp, #28]
 8005b72:	434e      	muls	r6, r1
 8005b74:	9607      	str	r6, [sp, #28]
 8005b76:	3301      	adds	r3, #1
 8005b78:	e7e2      	b.n	8005b40 <_strtod_l+0x228>
 8005b7a:	f103 0c01 	add.w	ip, r3, #1
 8005b7e:	f1bc 0f10 	cmp.w	ip, #16
 8005b82:	bfd8      	it	le
 8005b84:	fb01 f909 	mulle.w	r9, r1, r9
 8005b88:	e7f5      	b.n	8005b76 <_strtod_l+0x25e>
 8005b8a:	2d10      	cmp	r5, #16
 8005b8c:	bfdc      	itt	le
 8005b8e:	230a      	movle	r3, #10
 8005b90:	fb03 2909 	mlale	r9, r3, r9, r2
 8005b94:	e7e1      	b.n	8005b5a <_strtod_l+0x242>
 8005b96:	2300      	movs	r3, #0
 8005b98:	9305      	str	r3, [sp, #20]
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e77c      	b.n	8005a98 <_strtod_l+0x180>
 8005b9e:	f04f 0c00 	mov.w	ip, #0
 8005ba2:	f108 0202 	add.w	r2, r8, #2
 8005ba6:	9217      	str	r2, [sp, #92]	; 0x5c
 8005ba8:	f898 2002 	ldrb.w	r2, [r8, #2]
 8005bac:	e785      	b.n	8005aba <_strtod_l+0x1a2>
 8005bae:	f04f 0c01 	mov.w	ip, #1
 8005bb2:	e7f6      	b.n	8005ba2 <_strtod_l+0x28a>
 8005bb4:	0800b158 	.word	0x0800b158
 8005bb8:	0800af0c 	.word	0x0800af0c
 8005bbc:	7ff00000 	.word	0x7ff00000
 8005bc0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005bc2:	1c51      	adds	r1, r2, #1
 8005bc4:	9117      	str	r1, [sp, #92]	; 0x5c
 8005bc6:	7852      	ldrb	r2, [r2, #1]
 8005bc8:	2a30      	cmp	r2, #48	; 0x30
 8005bca:	d0f9      	beq.n	8005bc0 <_strtod_l+0x2a8>
 8005bcc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005bd0:	2908      	cmp	r1, #8
 8005bd2:	f63f af79 	bhi.w	8005ac8 <_strtod_l+0x1b0>
 8005bd6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8005bda:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005bdc:	9206      	str	r2, [sp, #24]
 8005bde:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005be0:	1c51      	adds	r1, r2, #1
 8005be2:	9117      	str	r1, [sp, #92]	; 0x5c
 8005be4:	7852      	ldrb	r2, [r2, #1]
 8005be6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8005bea:	2e09      	cmp	r6, #9
 8005bec:	d937      	bls.n	8005c5e <_strtod_l+0x346>
 8005bee:	9e06      	ldr	r6, [sp, #24]
 8005bf0:	1b89      	subs	r1, r1, r6
 8005bf2:	2908      	cmp	r1, #8
 8005bf4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8005bf8:	dc02      	bgt.n	8005c00 <_strtod_l+0x2e8>
 8005bfa:	4576      	cmp	r6, lr
 8005bfc:	bfa8      	it	ge
 8005bfe:	4676      	movge	r6, lr
 8005c00:	f1bc 0f00 	cmp.w	ip, #0
 8005c04:	d000      	beq.n	8005c08 <_strtod_l+0x2f0>
 8005c06:	4276      	negs	r6, r6
 8005c08:	2d00      	cmp	r5, #0
 8005c0a:	d14d      	bne.n	8005ca8 <_strtod_l+0x390>
 8005c0c:	9904      	ldr	r1, [sp, #16]
 8005c0e:	4301      	orrs	r1, r0
 8005c10:	f47f aec6 	bne.w	80059a0 <_strtod_l+0x88>
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	f47f aee1 	bne.w	80059dc <_strtod_l+0xc4>
 8005c1a:	2a69      	cmp	r2, #105	; 0x69
 8005c1c:	d027      	beq.n	8005c6e <_strtod_l+0x356>
 8005c1e:	dc24      	bgt.n	8005c6a <_strtod_l+0x352>
 8005c20:	2a49      	cmp	r2, #73	; 0x49
 8005c22:	d024      	beq.n	8005c6e <_strtod_l+0x356>
 8005c24:	2a4e      	cmp	r2, #78	; 0x4e
 8005c26:	f47f aed9 	bne.w	80059dc <_strtod_l+0xc4>
 8005c2a:	499f      	ldr	r1, [pc, #636]	; (8005ea8 <_strtod_l+0x590>)
 8005c2c:	a817      	add	r0, sp, #92	; 0x5c
 8005c2e:	f001 fe61 	bl	80078f4 <__match>
 8005c32:	2800      	cmp	r0, #0
 8005c34:	f43f aed2 	beq.w	80059dc <_strtod_l+0xc4>
 8005c38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	2b28      	cmp	r3, #40	; 0x28
 8005c3e:	d12d      	bne.n	8005c9c <_strtod_l+0x384>
 8005c40:	499a      	ldr	r1, [pc, #616]	; (8005eac <_strtod_l+0x594>)
 8005c42:	aa1a      	add	r2, sp, #104	; 0x68
 8005c44:	a817      	add	r0, sp, #92	; 0x5c
 8005c46:	f001 fe69 	bl	800791c <__hexnan>
 8005c4a:	2805      	cmp	r0, #5
 8005c4c:	d126      	bne.n	8005c9c <_strtod_l+0x384>
 8005c4e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005c50:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8005c54:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005c58:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005c5c:	e6a0      	b.n	80059a0 <_strtod_l+0x88>
 8005c5e:	210a      	movs	r1, #10
 8005c60:	fb01 2e0e 	mla	lr, r1, lr, r2
 8005c64:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005c68:	e7b9      	b.n	8005bde <_strtod_l+0x2c6>
 8005c6a:	2a6e      	cmp	r2, #110	; 0x6e
 8005c6c:	e7db      	b.n	8005c26 <_strtod_l+0x30e>
 8005c6e:	4990      	ldr	r1, [pc, #576]	; (8005eb0 <_strtod_l+0x598>)
 8005c70:	a817      	add	r0, sp, #92	; 0x5c
 8005c72:	f001 fe3f 	bl	80078f4 <__match>
 8005c76:	2800      	cmp	r0, #0
 8005c78:	f43f aeb0 	beq.w	80059dc <_strtod_l+0xc4>
 8005c7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005c7e:	498d      	ldr	r1, [pc, #564]	; (8005eb4 <_strtod_l+0x59c>)
 8005c80:	3b01      	subs	r3, #1
 8005c82:	a817      	add	r0, sp, #92	; 0x5c
 8005c84:	9317      	str	r3, [sp, #92]	; 0x5c
 8005c86:	f001 fe35 	bl	80078f4 <__match>
 8005c8a:	b910      	cbnz	r0, 8005c92 <_strtod_l+0x37a>
 8005c8c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005c8e:	3301      	adds	r3, #1
 8005c90:	9317      	str	r3, [sp, #92]	; 0x5c
 8005c92:	f8df b230 	ldr.w	fp, [pc, #560]	; 8005ec4 <_strtod_l+0x5ac>
 8005c96:	f04f 0a00 	mov.w	sl, #0
 8005c9a:	e681      	b.n	80059a0 <_strtod_l+0x88>
 8005c9c:	4886      	ldr	r0, [pc, #536]	; (8005eb8 <_strtod_l+0x5a0>)
 8005c9e:	f003 f963 	bl	8008f68 <nan>
 8005ca2:	ec5b ab10 	vmov	sl, fp, d0
 8005ca6:	e67b      	b.n	80059a0 <_strtod_l+0x88>
 8005ca8:	9b05      	ldr	r3, [sp, #20]
 8005caa:	9807      	ldr	r0, [sp, #28]
 8005cac:	1af3      	subs	r3, r6, r3
 8005cae:	2f00      	cmp	r7, #0
 8005cb0:	bf08      	it	eq
 8005cb2:	462f      	moveq	r7, r5
 8005cb4:	2d10      	cmp	r5, #16
 8005cb6:	9306      	str	r3, [sp, #24]
 8005cb8:	46a8      	mov	r8, r5
 8005cba:	bfa8      	it	ge
 8005cbc:	f04f 0810 	movge.w	r8, #16
 8005cc0:	f7fa fc38 	bl	8000534 <__aeabi_ui2d>
 8005cc4:	2d09      	cmp	r5, #9
 8005cc6:	4682      	mov	sl, r0
 8005cc8:	468b      	mov	fp, r1
 8005cca:	dd13      	ble.n	8005cf4 <_strtod_l+0x3dc>
 8005ccc:	4b7b      	ldr	r3, [pc, #492]	; (8005ebc <_strtod_l+0x5a4>)
 8005cce:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005cd2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005cd6:	f7fa fca7 	bl	8000628 <__aeabi_dmul>
 8005cda:	4682      	mov	sl, r0
 8005cdc:	4648      	mov	r0, r9
 8005cde:	468b      	mov	fp, r1
 8005ce0:	f7fa fc28 	bl	8000534 <__aeabi_ui2d>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	460b      	mov	r3, r1
 8005ce8:	4650      	mov	r0, sl
 8005cea:	4659      	mov	r1, fp
 8005cec:	f7fa fae6 	bl	80002bc <__adddf3>
 8005cf0:	4682      	mov	sl, r0
 8005cf2:	468b      	mov	fp, r1
 8005cf4:	2d0f      	cmp	r5, #15
 8005cf6:	dc38      	bgt.n	8005d6a <_strtod_l+0x452>
 8005cf8:	9b06      	ldr	r3, [sp, #24]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	f43f ae50 	beq.w	80059a0 <_strtod_l+0x88>
 8005d00:	dd24      	ble.n	8005d4c <_strtod_l+0x434>
 8005d02:	2b16      	cmp	r3, #22
 8005d04:	dc0b      	bgt.n	8005d1e <_strtod_l+0x406>
 8005d06:	496d      	ldr	r1, [pc, #436]	; (8005ebc <_strtod_l+0x5a4>)
 8005d08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005d0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d10:	4652      	mov	r2, sl
 8005d12:	465b      	mov	r3, fp
 8005d14:	f7fa fc88 	bl	8000628 <__aeabi_dmul>
 8005d18:	4682      	mov	sl, r0
 8005d1a:	468b      	mov	fp, r1
 8005d1c:	e640      	b.n	80059a0 <_strtod_l+0x88>
 8005d1e:	9a06      	ldr	r2, [sp, #24]
 8005d20:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8005d24:	4293      	cmp	r3, r2
 8005d26:	db20      	blt.n	8005d6a <_strtod_l+0x452>
 8005d28:	4c64      	ldr	r4, [pc, #400]	; (8005ebc <_strtod_l+0x5a4>)
 8005d2a:	f1c5 050f 	rsb	r5, r5, #15
 8005d2e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005d32:	4652      	mov	r2, sl
 8005d34:	465b      	mov	r3, fp
 8005d36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d3a:	f7fa fc75 	bl	8000628 <__aeabi_dmul>
 8005d3e:	9b06      	ldr	r3, [sp, #24]
 8005d40:	1b5d      	subs	r5, r3, r5
 8005d42:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005d46:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005d4a:	e7e3      	b.n	8005d14 <_strtod_l+0x3fc>
 8005d4c:	9b06      	ldr	r3, [sp, #24]
 8005d4e:	3316      	adds	r3, #22
 8005d50:	db0b      	blt.n	8005d6a <_strtod_l+0x452>
 8005d52:	9b05      	ldr	r3, [sp, #20]
 8005d54:	1b9e      	subs	r6, r3, r6
 8005d56:	4b59      	ldr	r3, [pc, #356]	; (8005ebc <_strtod_l+0x5a4>)
 8005d58:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8005d5c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005d60:	4650      	mov	r0, sl
 8005d62:	4659      	mov	r1, fp
 8005d64:	f7fa fd8a 	bl	800087c <__aeabi_ddiv>
 8005d68:	e7d6      	b.n	8005d18 <_strtod_l+0x400>
 8005d6a:	9b06      	ldr	r3, [sp, #24]
 8005d6c:	eba5 0808 	sub.w	r8, r5, r8
 8005d70:	4498      	add	r8, r3
 8005d72:	f1b8 0f00 	cmp.w	r8, #0
 8005d76:	dd74      	ble.n	8005e62 <_strtod_l+0x54a>
 8005d78:	f018 030f 	ands.w	r3, r8, #15
 8005d7c:	d00a      	beq.n	8005d94 <_strtod_l+0x47c>
 8005d7e:	494f      	ldr	r1, [pc, #316]	; (8005ebc <_strtod_l+0x5a4>)
 8005d80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005d84:	4652      	mov	r2, sl
 8005d86:	465b      	mov	r3, fp
 8005d88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d8c:	f7fa fc4c 	bl	8000628 <__aeabi_dmul>
 8005d90:	4682      	mov	sl, r0
 8005d92:	468b      	mov	fp, r1
 8005d94:	f038 080f 	bics.w	r8, r8, #15
 8005d98:	d04f      	beq.n	8005e3a <_strtod_l+0x522>
 8005d9a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005d9e:	dd22      	ble.n	8005de6 <_strtod_l+0x4ce>
 8005da0:	2500      	movs	r5, #0
 8005da2:	462e      	mov	r6, r5
 8005da4:	9507      	str	r5, [sp, #28]
 8005da6:	9505      	str	r5, [sp, #20]
 8005da8:	2322      	movs	r3, #34	; 0x22
 8005daa:	f8df b118 	ldr.w	fp, [pc, #280]	; 8005ec4 <_strtod_l+0x5ac>
 8005dae:	6023      	str	r3, [r4, #0]
 8005db0:	f04f 0a00 	mov.w	sl, #0
 8005db4:	9b07      	ldr	r3, [sp, #28]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	f43f adf2 	beq.w	80059a0 <_strtod_l+0x88>
 8005dbc:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005dbe:	4620      	mov	r0, r4
 8005dc0:	f001 fec6 	bl	8007b50 <_Bfree>
 8005dc4:	9905      	ldr	r1, [sp, #20]
 8005dc6:	4620      	mov	r0, r4
 8005dc8:	f001 fec2 	bl	8007b50 <_Bfree>
 8005dcc:	4631      	mov	r1, r6
 8005dce:	4620      	mov	r0, r4
 8005dd0:	f001 febe 	bl	8007b50 <_Bfree>
 8005dd4:	9907      	ldr	r1, [sp, #28]
 8005dd6:	4620      	mov	r0, r4
 8005dd8:	f001 feba 	bl	8007b50 <_Bfree>
 8005ddc:	4629      	mov	r1, r5
 8005dde:	4620      	mov	r0, r4
 8005de0:	f001 feb6 	bl	8007b50 <_Bfree>
 8005de4:	e5dc      	b.n	80059a0 <_strtod_l+0x88>
 8005de6:	4b36      	ldr	r3, [pc, #216]	; (8005ec0 <_strtod_l+0x5a8>)
 8005de8:	9304      	str	r3, [sp, #16]
 8005dea:	2300      	movs	r3, #0
 8005dec:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005df0:	4650      	mov	r0, sl
 8005df2:	4659      	mov	r1, fp
 8005df4:	4699      	mov	r9, r3
 8005df6:	f1b8 0f01 	cmp.w	r8, #1
 8005dfa:	dc21      	bgt.n	8005e40 <_strtod_l+0x528>
 8005dfc:	b10b      	cbz	r3, 8005e02 <_strtod_l+0x4ea>
 8005dfe:	4682      	mov	sl, r0
 8005e00:	468b      	mov	fp, r1
 8005e02:	4b2f      	ldr	r3, [pc, #188]	; (8005ec0 <_strtod_l+0x5a8>)
 8005e04:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005e08:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8005e0c:	4652      	mov	r2, sl
 8005e0e:	465b      	mov	r3, fp
 8005e10:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005e14:	f7fa fc08 	bl	8000628 <__aeabi_dmul>
 8005e18:	4b2a      	ldr	r3, [pc, #168]	; (8005ec4 <_strtod_l+0x5ac>)
 8005e1a:	460a      	mov	r2, r1
 8005e1c:	400b      	ands	r3, r1
 8005e1e:	492a      	ldr	r1, [pc, #168]	; (8005ec8 <_strtod_l+0x5b0>)
 8005e20:	428b      	cmp	r3, r1
 8005e22:	4682      	mov	sl, r0
 8005e24:	d8bc      	bhi.n	8005da0 <_strtod_l+0x488>
 8005e26:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005e2a:	428b      	cmp	r3, r1
 8005e2c:	bf86      	itte	hi
 8005e2e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8005ecc <_strtod_l+0x5b4>
 8005e32:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8005e36:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	9304      	str	r3, [sp, #16]
 8005e3e:	e084      	b.n	8005f4a <_strtod_l+0x632>
 8005e40:	f018 0f01 	tst.w	r8, #1
 8005e44:	d005      	beq.n	8005e52 <_strtod_l+0x53a>
 8005e46:	9b04      	ldr	r3, [sp, #16]
 8005e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e4c:	f7fa fbec 	bl	8000628 <__aeabi_dmul>
 8005e50:	2301      	movs	r3, #1
 8005e52:	9a04      	ldr	r2, [sp, #16]
 8005e54:	3208      	adds	r2, #8
 8005e56:	f109 0901 	add.w	r9, r9, #1
 8005e5a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005e5e:	9204      	str	r2, [sp, #16]
 8005e60:	e7c9      	b.n	8005df6 <_strtod_l+0x4de>
 8005e62:	d0ea      	beq.n	8005e3a <_strtod_l+0x522>
 8005e64:	f1c8 0800 	rsb	r8, r8, #0
 8005e68:	f018 020f 	ands.w	r2, r8, #15
 8005e6c:	d00a      	beq.n	8005e84 <_strtod_l+0x56c>
 8005e6e:	4b13      	ldr	r3, [pc, #76]	; (8005ebc <_strtod_l+0x5a4>)
 8005e70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e74:	4650      	mov	r0, sl
 8005e76:	4659      	mov	r1, fp
 8005e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e7c:	f7fa fcfe 	bl	800087c <__aeabi_ddiv>
 8005e80:	4682      	mov	sl, r0
 8005e82:	468b      	mov	fp, r1
 8005e84:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005e88:	d0d7      	beq.n	8005e3a <_strtod_l+0x522>
 8005e8a:	f1b8 0f1f 	cmp.w	r8, #31
 8005e8e:	dd1f      	ble.n	8005ed0 <_strtod_l+0x5b8>
 8005e90:	2500      	movs	r5, #0
 8005e92:	462e      	mov	r6, r5
 8005e94:	9507      	str	r5, [sp, #28]
 8005e96:	9505      	str	r5, [sp, #20]
 8005e98:	2322      	movs	r3, #34	; 0x22
 8005e9a:	f04f 0a00 	mov.w	sl, #0
 8005e9e:	f04f 0b00 	mov.w	fp, #0
 8005ea2:	6023      	str	r3, [r4, #0]
 8005ea4:	e786      	b.n	8005db4 <_strtod_l+0x49c>
 8005ea6:	bf00      	nop
 8005ea8:	0800aee1 	.word	0x0800aee1
 8005eac:	0800af20 	.word	0x0800af20
 8005eb0:	0800aed9 	.word	0x0800aed9
 8005eb4:	0800b064 	.word	0x0800b064
 8005eb8:	0800b32b 	.word	0x0800b32b
 8005ebc:	0800b1f0 	.word	0x0800b1f0
 8005ec0:	0800b1c8 	.word	0x0800b1c8
 8005ec4:	7ff00000 	.word	0x7ff00000
 8005ec8:	7ca00000 	.word	0x7ca00000
 8005ecc:	7fefffff 	.word	0x7fefffff
 8005ed0:	f018 0310 	ands.w	r3, r8, #16
 8005ed4:	bf18      	it	ne
 8005ed6:	236a      	movne	r3, #106	; 0x6a
 8005ed8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8006288 <_strtod_l+0x970>
 8005edc:	9304      	str	r3, [sp, #16]
 8005ede:	4650      	mov	r0, sl
 8005ee0:	4659      	mov	r1, fp
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	f018 0f01 	tst.w	r8, #1
 8005ee8:	d004      	beq.n	8005ef4 <_strtod_l+0x5dc>
 8005eea:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005eee:	f7fa fb9b 	bl	8000628 <__aeabi_dmul>
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	ea5f 0868 	movs.w	r8, r8, asr #1
 8005ef8:	f109 0908 	add.w	r9, r9, #8
 8005efc:	d1f2      	bne.n	8005ee4 <_strtod_l+0x5cc>
 8005efe:	b10b      	cbz	r3, 8005f04 <_strtod_l+0x5ec>
 8005f00:	4682      	mov	sl, r0
 8005f02:	468b      	mov	fp, r1
 8005f04:	9b04      	ldr	r3, [sp, #16]
 8005f06:	b1c3      	cbz	r3, 8005f3a <_strtod_l+0x622>
 8005f08:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005f0c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	4659      	mov	r1, fp
 8005f14:	dd11      	ble.n	8005f3a <_strtod_l+0x622>
 8005f16:	2b1f      	cmp	r3, #31
 8005f18:	f340 8124 	ble.w	8006164 <_strtod_l+0x84c>
 8005f1c:	2b34      	cmp	r3, #52	; 0x34
 8005f1e:	bfde      	ittt	le
 8005f20:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8005f24:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8005f28:	fa03 f202 	lslle.w	r2, r3, r2
 8005f2c:	f04f 0a00 	mov.w	sl, #0
 8005f30:	bfcc      	ite	gt
 8005f32:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005f36:	ea02 0b01 	andle.w	fp, r2, r1
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	4650      	mov	r0, sl
 8005f40:	4659      	mov	r1, fp
 8005f42:	f7fa fdd9 	bl	8000af8 <__aeabi_dcmpeq>
 8005f46:	2800      	cmp	r0, #0
 8005f48:	d1a2      	bne.n	8005e90 <_strtod_l+0x578>
 8005f4a:	9b07      	ldr	r3, [sp, #28]
 8005f4c:	9300      	str	r3, [sp, #0]
 8005f4e:	9908      	ldr	r1, [sp, #32]
 8005f50:	462b      	mov	r3, r5
 8005f52:	463a      	mov	r2, r7
 8005f54:	4620      	mov	r0, r4
 8005f56:	f001 fe63 	bl	8007c20 <__s2b>
 8005f5a:	9007      	str	r0, [sp, #28]
 8005f5c:	2800      	cmp	r0, #0
 8005f5e:	f43f af1f 	beq.w	8005da0 <_strtod_l+0x488>
 8005f62:	9b05      	ldr	r3, [sp, #20]
 8005f64:	1b9e      	subs	r6, r3, r6
 8005f66:	9b06      	ldr	r3, [sp, #24]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	bfb4      	ite	lt
 8005f6c:	4633      	movlt	r3, r6
 8005f6e:	2300      	movge	r3, #0
 8005f70:	930c      	str	r3, [sp, #48]	; 0x30
 8005f72:	9b06      	ldr	r3, [sp, #24]
 8005f74:	2500      	movs	r5, #0
 8005f76:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005f7a:	9312      	str	r3, [sp, #72]	; 0x48
 8005f7c:	462e      	mov	r6, r5
 8005f7e:	9b07      	ldr	r3, [sp, #28]
 8005f80:	4620      	mov	r0, r4
 8005f82:	6859      	ldr	r1, [r3, #4]
 8005f84:	f001 fda4 	bl	8007ad0 <_Balloc>
 8005f88:	9005      	str	r0, [sp, #20]
 8005f8a:	2800      	cmp	r0, #0
 8005f8c:	f43f af0c 	beq.w	8005da8 <_strtod_l+0x490>
 8005f90:	9b07      	ldr	r3, [sp, #28]
 8005f92:	691a      	ldr	r2, [r3, #16]
 8005f94:	3202      	adds	r2, #2
 8005f96:	f103 010c 	add.w	r1, r3, #12
 8005f9a:	0092      	lsls	r2, r2, #2
 8005f9c:	300c      	adds	r0, #12
 8005f9e:	f001 fd89 	bl	8007ab4 <memcpy>
 8005fa2:	ec4b ab10 	vmov	d0, sl, fp
 8005fa6:	aa1a      	add	r2, sp, #104	; 0x68
 8005fa8:	a919      	add	r1, sp, #100	; 0x64
 8005faa:	4620      	mov	r0, r4
 8005fac:	f002 f97e 	bl	80082ac <__d2b>
 8005fb0:	ec4b ab18 	vmov	d8, sl, fp
 8005fb4:	9018      	str	r0, [sp, #96]	; 0x60
 8005fb6:	2800      	cmp	r0, #0
 8005fb8:	f43f aef6 	beq.w	8005da8 <_strtod_l+0x490>
 8005fbc:	2101      	movs	r1, #1
 8005fbe:	4620      	mov	r0, r4
 8005fc0:	f001 fec8 	bl	8007d54 <__i2b>
 8005fc4:	4606      	mov	r6, r0
 8005fc6:	2800      	cmp	r0, #0
 8005fc8:	f43f aeee 	beq.w	8005da8 <_strtod_l+0x490>
 8005fcc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005fce:	9904      	ldr	r1, [sp, #16]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	bfab      	itete	ge
 8005fd4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8005fd6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8005fd8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8005fda:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8005fde:	bfac      	ite	ge
 8005fe0:	eb03 0902 	addge.w	r9, r3, r2
 8005fe4:	1ad7      	sublt	r7, r2, r3
 8005fe6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005fe8:	eba3 0801 	sub.w	r8, r3, r1
 8005fec:	4490      	add	r8, r2
 8005fee:	4ba1      	ldr	r3, [pc, #644]	; (8006274 <_strtod_l+0x95c>)
 8005ff0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8005ff4:	4598      	cmp	r8, r3
 8005ff6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005ffa:	f280 80c7 	bge.w	800618c <_strtod_l+0x874>
 8005ffe:	eba3 0308 	sub.w	r3, r3, r8
 8006002:	2b1f      	cmp	r3, #31
 8006004:	eba2 0203 	sub.w	r2, r2, r3
 8006008:	f04f 0101 	mov.w	r1, #1
 800600c:	f300 80b1 	bgt.w	8006172 <_strtod_l+0x85a>
 8006010:	fa01 f303 	lsl.w	r3, r1, r3
 8006014:	930d      	str	r3, [sp, #52]	; 0x34
 8006016:	2300      	movs	r3, #0
 8006018:	9308      	str	r3, [sp, #32]
 800601a:	eb09 0802 	add.w	r8, r9, r2
 800601e:	9b04      	ldr	r3, [sp, #16]
 8006020:	45c1      	cmp	r9, r8
 8006022:	4417      	add	r7, r2
 8006024:	441f      	add	r7, r3
 8006026:	464b      	mov	r3, r9
 8006028:	bfa8      	it	ge
 800602a:	4643      	movge	r3, r8
 800602c:	42bb      	cmp	r3, r7
 800602e:	bfa8      	it	ge
 8006030:	463b      	movge	r3, r7
 8006032:	2b00      	cmp	r3, #0
 8006034:	bfc2      	ittt	gt
 8006036:	eba8 0803 	subgt.w	r8, r8, r3
 800603a:	1aff      	subgt	r7, r7, r3
 800603c:	eba9 0903 	subgt.w	r9, r9, r3
 8006040:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006042:	2b00      	cmp	r3, #0
 8006044:	dd17      	ble.n	8006076 <_strtod_l+0x75e>
 8006046:	4631      	mov	r1, r6
 8006048:	461a      	mov	r2, r3
 800604a:	4620      	mov	r0, r4
 800604c:	f001 ff42 	bl	8007ed4 <__pow5mult>
 8006050:	4606      	mov	r6, r0
 8006052:	2800      	cmp	r0, #0
 8006054:	f43f aea8 	beq.w	8005da8 <_strtod_l+0x490>
 8006058:	4601      	mov	r1, r0
 800605a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800605c:	4620      	mov	r0, r4
 800605e:	f001 fe8f 	bl	8007d80 <__multiply>
 8006062:	900b      	str	r0, [sp, #44]	; 0x2c
 8006064:	2800      	cmp	r0, #0
 8006066:	f43f ae9f 	beq.w	8005da8 <_strtod_l+0x490>
 800606a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800606c:	4620      	mov	r0, r4
 800606e:	f001 fd6f 	bl	8007b50 <_Bfree>
 8006072:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006074:	9318      	str	r3, [sp, #96]	; 0x60
 8006076:	f1b8 0f00 	cmp.w	r8, #0
 800607a:	f300 808c 	bgt.w	8006196 <_strtod_l+0x87e>
 800607e:	9b06      	ldr	r3, [sp, #24]
 8006080:	2b00      	cmp	r3, #0
 8006082:	dd08      	ble.n	8006096 <_strtod_l+0x77e>
 8006084:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006086:	9905      	ldr	r1, [sp, #20]
 8006088:	4620      	mov	r0, r4
 800608a:	f001 ff23 	bl	8007ed4 <__pow5mult>
 800608e:	9005      	str	r0, [sp, #20]
 8006090:	2800      	cmp	r0, #0
 8006092:	f43f ae89 	beq.w	8005da8 <_strtod_l+0x490>
 8006096:	2f00      	cmp	r7, #0
 8006098:	dd08      	ble.n	80060ac <_strtod_l+0x794>
 800609a:	9905      	ldr	r1, [sp, #20]
 800609c:	463a      	mov	r2, r7
 800609e:	4620      	mov	r0, r4
 80060a0:	f001 ff72 	bl	8007f88 <__lshift>
 80060a4:	9005      	str	r0, [sp, #20]
 80060a6:	2800      	cmp	r0, #0
 80060a8:	f43f ae7e 	beq.w	8005da8 <_strtod_l+0x490>
 80060ac:	f1b9 0f00 	cmp.w	r9, #0
 80060b0:	dd08      	ble.n	80060c4 <_strtod_l+0x7ac>
 80060b2:	4631      	mov	r1, r6
 80060b4:	464a      	mov	r2, r9
 80060b6:	4620      	mov	r0, r4
 80060b8:	f001 ff66 	bl	8007f88 <__lshift>
 80060bc:	4606      	mov	r6, r0
 80060be:	2800      	cmp	r0, #0
 80060c0:	f43f ae72 	beq.w	8005da8 <_strtod_l+0x490>
 80060c4:	9a05      	ldr	r2, [sp, #20]
 80060c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80060c8:	4620      	mov	r0, r4
 80060ca:	f001 ffe9 	bl	80080a0 <__mdiff>
 80060ce:	4605      	mov	r5, r0
 80060d0:	2800      	cmp	r0, #0
 80060d2:	f43f ae69 	beq.w	8005da8 <_strtod_l+0x490>
 80060d6:	68c3      	ldr	r3, [r0, #12]
 80060d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80060da:	2300      	movs	r3, #0
 80060dc:	60c3      	str	r3, [r0, #12]
 80060de:	4631      	mov	r1, r6
 80060e0:	f001 ffc2 	bl	8008068 <__mcmp>
 80060e4:	2800      	cmp	r0, #0
 80060e6:	da60      	bge.n	80061aa <_strtod_l+0x892>
 80060e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060ea:	ea53 030a 	orrs.w	r3, r3, sl
 80060ee:	f040 8082 	bne.w	80061f6 <_strtod_l+0x8de>
 80060f2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d17d      	bne.n	80061f6 <_strtod_l+0x8de>
 80060fa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80060fe:	0d1b      	lsrs	r3, r3, #20
 8006100:	051b      	lsls	r3, r3, #20
 8006102:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006106:	d976      	bls.n	80061f6 <_strtod_l+0x8de>
 8006108:	696b      	ldr	r3, [r5, #20]
 800610a:	b913      	cbnz	r3, 8006112 <_strtod_l+0x7fa>
 800610c:	692b      	ldr	r3, [r5, #16]
 800610e:	2b01      	cmp	r3, #1
 8006110:	dd71      	ble.n	80061f6 <_strtod_l+0x8de>
 8006112:	4629      	mov	r1, r5
 8006114:	2201      	movs	r2, #1
 8006116:	4620      	mov	r0, r4
 8006118:	f001 ff36 	bl	8007f88 <__lshift>
 800611c:	4631      	mov	r1, r6
 800611e:	4605      	mov	r5, r0
 8006120:	f001 ffa2 	bl	8008068 <__mcmp>
 8006124:	2800      	cmp	r0, #0
 8006126:	dd66      	ble.n	80061f6 <_strtod_l+0x8de>
 8006128:	9904      	ldr	r1, [sp, #16]
 800612a:	4a53      	ldr	r2, [pc, #332]	; (8006278 <_strtod_l+0x960>)
 800612c:	465b      	mov	r3, fp
 800612e:	2900      	cmp	r1, #0
 8006130:	f000 8081 	beq.w	8006236 <_strtod_l+0x91e>
 8006134:	ea02 010b 	and.w	r1, r2, fp
 8006138:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800613c:	dc7b      	bgt.n	8006236 <_strtod_l+0x91e>
 800613e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006142:	f77f aea9 	ble.w	8005e98 <_strtod_l+0x580>
 8006146:	4b4d      	ldr	r3, [pc, #308]	; (800627c <_strtod_l+0x964>)
 8006148:	4650      	mov	r0, sl
 800614a:	4659      	mov	r1, fp
 800614c:	2200      	movs	r2, #0
 800614e:	f7fa fa6b 	bl	8000628 <__aeabi_dmul>
 8006152:	460b      	mov	r3, r1
 8006154:	4303      	orrs	r3, r0
 8006156:	bf08      	it	eq
 8006158:	2322      	moveq	r3, #34	; 0x22
 800615a:	4682      	mov	sl, r0
 800615c:	468b      	mov	fp, r1
 800615e:	bf08      	it	eq
 8006160:	6023      	streq	r3, [r4, #0]
 8006162:	e62b      	b.n	8005dbc <_strtod_l+0x4a4>
 8006164:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006168:	fa02 f303 	lsl.w	r3, r2, r3
 800616c:	ea03 0a0a 	and.w	sl, r3, sl
 8006170:	e6e3      	b.n	8005f3a <_strtod_l+0x622>
 8006172:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8006176:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800617a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800617e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8006182:	fa01 f308 	lsl.w	r3, r1, r8
 8006186:	9308      	str	r3, [sp, #32]
 8006188:	910d      	str	r1, [sp, #52]	; 0x34
 800618a:	e746      	b.n	800601a <_strtod_l+0x702>
 800618c:	2300      	movs	r3, #0
 800618e:	9308      	str	r3, [sp, #32]
 8006190:	2301      	movs	r3, #1
 8006192:	930d      	str	r3, [sp, #52]	; 0x34
 8006194:	e741      	b.n	800601a <_strtod_l+0x702>
 8006196:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006198:	4642      	mov	r2, r8
 800619a:	4620      	mov	r0, r4
 800619c:	f001 fef4 	bl	8007f88 <__lshift>
 80061a0:	9018      	str	r0, [sp, #96]	; 0x60
 80061a2:	2800      	cmp	r0, #0
 80061a4:	f47f af6b 	bne.w	800607e <_strtod_l+0x766>
 80061a8:	e5fe      	b.n	8005da8 <_strtod_l+0x490>
 80061aa:	465f      	mov	r7, fp
 80061ac:	d16e      	bne.n	800628c <_strtod_l+0x974>
 80061ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80061b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80061b4:	b342      	cbz	r2, 8006208 <_strtod_l+0x8f0>
 80061b6:	4a32      	ldr	r2, [pc, #200]	; (8006280 <_strtod_l+0x968>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d128      	bne.n	800620e <_strtod_l+0x8f6>
 80061bc:	9b04      	ldr	r3, [sp, #16]
 80061be:	4651      	mov	r1, sl
 80061c0:	b1eb      	cbz	r3, 80061fe <_strtod_l+0x8e6>
 80061c2:	4b2d      	ldr	r3, [pc, #180]	; (8006278 <_strtod_l+0x960>)
 80061c4:	403b      	ands	r3, r7
 80061c6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80061ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80061ce:	d819      	bhi.n	8006204 <_strtod_l+0x8ec>
 80061d0:	0d1b      	lsrs	r3, r3, #20
 80061d2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80061d6:	fa02 f303 	lsl.w	r3, r2, r3
 80061da:	4299      	cmp	r1, r3
 80061dc:	d117      	bne.n	800620e <_strtod_l+0x8f6>
 80061de:	4b29      	ldr	r3, [pc, #164]	; (8006284 <_strtod_l+0x96c>)
 80061e0:	429f      	cmp	r7, r3
 80061e2:	d102      	bne.n	80061ea <_strtod_l+0x8d2>
 80061e4:	3101      	adds	r1, #1
 80061e6:	f43f addf 	beq.w	8005da8 <_strtod_l+0x490>
 80061ea:	4b23      	ldr	r3, [pc, #140]	; (8006278 <_strtod_l+0x960>)
 80061ec:	403b      	ands	r3, r7
 80061ee:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80061f2:	f04f 0a00 	mov.w	sl, #0
 80061f6:	9b04      	ldr	r3, [sp, #16]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d1a4      	bne.n	8006146 <_strtod_l+0x82e>
 80061fc:	e5de      	b.n	8005dbc <_strtod_l+0x4a4>
 80061fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006202:	e7ea      	b.n	80061da <_strtod_l+0x8c2>
 8006204:	4613      	mov	r3, r2
 8006206:	e7e8      	b.n	80061da <_strtod_l+0x8c2>
 8006208:	ea53 030a 	orrs.w	r3, r3, sl
 800620c:	d08c      	beq.n	8006128 <_strtod_l+0x810>
 800620e:	9b08      	ldr	r3, [sp, #32]
 8006210:	b1db      	cbz	r3, 800624a <_strtod_l+0x932>
 8006212:	423b      	tst	r3, r7
 8006214:	d0ef      	beq.n	80061f6 <_strtod_l+0x8de>
 8006216:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006218:	9a04      	ldr	r2, [sp, #16]
 800621a:	4650      	mov	r0, sl
 800621c:	4659      	mov	r1, fp
 800621e:	b1c3      	cbz	r3, 8006252 <_strtod_l+0x93a>
 8006220:	f7ff fb5d 	bl	80058de <sulp>
 8006224:	4602      	mov	r2, r0
 8006226:	460b      	mov	r3, r1
 8006228:	ec51 0b18 	vmov	r0, r1, d8
 800622c:	f7fa f846 	bl	80002bc <__adddf3>
 8006230:	4682      	mov	sl, r0
 8006232:	468b      	mov	fp, r1
 8006234:	e7df      	b.n	80061f6 <_strtod_l+0x8de>
 8006236:	4013      	ands	r3, r2
 8006238:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800623c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006240:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006244:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006248:	e7d5      	b.n	80061f6 <_strtod_l+0x8de>
 800624a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800624c:	ea13 0f0a 	tst.w	r3, sl
 8006250:	e7e0      	b.n	8006214 <_strtod_l+0x8fc>
 8006252:	f7ff fb44 	bl	80058de <sulp>
 8006256:	4602      	mov	r2, r0
 8006258:	460b      	mov	r3, r1
 800625a:	ec51 0b18 	vmov	r0, r1, d8
 800625e:	f7fa f82b 	bl	80002b8 <__aeabi_dsub>
 8006262:	2200      	movs	r2, #0
 8006264:	2300      	movs	r3, #0
 8006266:	4682      	mov	sl, r0
 8006268:	468b      	mov	fp, r1
 800626a:	f7fa fc45 	bl	8000af8 <__aeabi_dcmpeq>
 800626e:	2800      	cmp	r0, #0
 8006270:	d0c1      	beq.n	80061f6 <_strtod_l+0x8de>
 8006272:	e611      	b.n	8005e98 <_strtod_l+0x580>
 8006274:	fffffc02 	.word	0xfffffc02
 8006278:	7ff00000 	.word	0x7ff00000
 800627c:	39500000 	.word	0x39500000
 8006280:	000fffff 	.word	0x000fffff
 8006284:	7fefffff 	.word	0x7fefffff
 8006288:	0800af38 	.word	0x0800af38
 800628c:	4631      	mov	r1, r6
 800628e:	4628      	mov	r0, r5
 8006290:	f002 f868 	bl	8008364 <__ratio>
 8006294:	ec59 8b10 	vmov	r8, r9, d0
 8006298:	ee10 0a10 	vmov	r0, s0
 800629c:	2200      	movs	r2, #0
 800629e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80062a2:	4649      	mov	r1, r9
 80062a4:	f7fa fc3c 	bl	8000b20 <__aeabi_dcmple>
 80062a8:	2800      	cmp	r0, #0
 80062aa:	d07a      	beq.n	80063a2 <_strtod_l+0xa8a>
 80062ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d04a      	beq.n	8006348 <_strtod_l+0xa30>
 80062b2:	4b95      	ldr	r3, [pc, #596]	; (8006508 <_strtod_l+0xbf0>)
 80062b4:	2200      	movs	r2, #0
 80062b6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80062ba:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006508 <_strtod_l+0xbf0>
 80062be:	f04f 0800 	mov.w	r8, #0
 80062c2:	4b92      	ldr	r3, [pc, #584]	; (800650c <_strtod_l+0xbf4>)
 80062c4:	403b      	ands	r3, r7
 80062c6:	930d      	str	r3, [sp, #52]	; 0x34
 80062c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80062ca:	4b91      	ldr	r3, [pc, #580]	; (8006510 <_strtod_l+0xbf8>)
 80062cc:	429a      	cmp	r2, r3
 80062ce:	f040 80b0 	bne.w	8006432 <_strtod_l+0xb1a>
 80062d2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80062d6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80062da:	ec4b ab10 	vmov	d0, sl, fp
 80062de:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80062e2:	f001 ff67 	bl	80081b4 <__ulp>
 80062e6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80062ea:	ec53 2b10 	vmov	r2, r3, d0
 80062ee:	f7fa f99b 	bl	8000628 <__aeabi_dmul>
 80062f2:	4652      	mov	r2, sl
 80062f4:	465b      	mov	r3, fp
 80062f6:	f7f9 ffe1 	bl	80002bc <__adddf3>
 80062fa:	460b      	mov	r3, r1
 80062fc:	4983      	ldr	r1, [pc, #524]	; (800650c <_strtod_l+0xbf4>)
 80062fe:	4a85      	ldr	r2, [pc, #532]	; (8006514 <_strtod_l+0xbfc>)
 8006300:	4019      	ands	r1, r3
 8006302:	4291      	cmp	r1, r2
 8006304:	4682      	mov	sl, r0
 8006306:	d960      	bls.n	80063ca <_strtod_l+0xab2>
 8006308:	ee18 3a90 	vmov	r3, s17
 800630c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006310:	4293      	cmp	r3, r2
 8006312:	d104      	bne.n	800631e <_strtod_l+0xa06>
 8006314:	ee18 3a10 	vmov	r3, s16
 8006318:	3301      	adds	r3, #1
 800631a:	f43f ad45 	beq.w	8005da8 <_strtod_l+0x490>
 800631e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8006520 <_strtod_l+0xc08>
 8006322:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006326:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006328:	4620      	mov	r0, r4
 800632a:	f001 fc11 	bl	8007b50 <_Bfree>
 800632e:	9905      	ldr	r1, [sp, #20]
 8006330:	4620      	mov	r0, r4
 8006332:	f001 fc0d 	bl	8007b50 <_Bfree>
 8006336:	4631      	mov	r1, r6
 8006338:	4620      	mov	r0, r4
 800633a:	f001 fc09 	bl	8007b50 <_Bfree>
 800633e:	4629      	mov	r1, r5
 8006340:	4620      	mov	r0, r4
 8006342:	f001 fc05 	bl	8007b50 <_Bfree>
 8006346:	e61a      	b.n	8005f7e <_strtod_l+0x666>
 8006348:	f1ba 0f00 	cmp.w	sl, #0
 800634c:	d11b      	bne.n	8006386 <_strtod_l+0xa6e>
 800634e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006352:	b9f3      	cbnz	r3, 8006392 <_strtod_l+0xa7a>
 8006354:	4b6c      	ldr	r3, [pc, #432]	; (8006508 <_strtod_l+0xbf0>)
 8006356:	2200      	movs	r2, #0
 8006358:	4640      	mov	r0, r8
 800635a:	4649      	mov	r1, r9
 800635c:	f7fa fbd6 	bl	8000b0c <__aeabi_dcmplt>
 8006360:	b9d0      	cbnz	r0, 8006398 <_strtod_l+0xa80>
 8006362:	4640      	mov	r0, r8
 8006364:	4649      	mov	r1, r9
 8006366:	4b6c      	ldr	r3, [pc, #432]	; (8006518 <_strtod_l+0xc00>)
 8006368:	2200      	movs	r2, #0
 800636a:	f7fa f95d 	bl	8000628 <__aeabi_dmul>
 800636e:	4680      	mov	r8, r0
 8006370:	4689      	mov	r9, r1
 8006372:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006376:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800637a:	9315      	str	r3, [sp, #84]	; 0x54
 800637c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006380:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006384:	e79d      	b.n	80062c2 <_strtod_l+0x9aa>
 8006386:	f1ba 0f01 	cmp.w	sl, #1
 800638a:	d102      	bne.n	8006392 <_strtod_l+0xa7a>
 800638c:	2f00      	cmp	r7, #0
 800638e:	f43f ad83 	beq.w	8005e98 <_strtod_l+0x580>
 8006392:	4b62      	ldr	r3, [pc, #392]	; (800651c <_strtod_l+0xc04>)
 8006394:	2200      	movs	r2, #0
 8006396:	e78e      	b.n	80062b6 <_strtod_l+0x99e>
 8006398:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8006518 <_strtod_l+0xc00>
 800639c:	f04f 0800 	mov.w	r8, #0
 80063a0:	e7e7      	b.n	8006372 <_strtod_l+0xa5a>
 80063a2:	4b5d      	ldr	r3, [pc, #372]	; (8006518 <_strtod_l+0xc00>)
 80063a4:	4640      	mov	r0, r8
 80063a6:	4649      	mov	r1, r9
 80063a8:	2200      	movs	r2, #0
 80063aa:	f7fa f93d 	bl	8000628 <__aeabi_dmul>
 80063ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063b0:	4680      	mov	r8, r0
 80063b2:	4689      	mov	r9, r1
 80063b4:	b933      	cbnz	r3, 80063c4 <_strtod_l+0xaac>
 80063b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80063ba:	900e      	str	r0, [sp, #56]	; 0x38
 80063bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80063be:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80063c2:	e7dd      	b.n	8006380 <_strtod_l+0xa68>
 80063c4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80063c8:	e7f9      	b.n	80063be <_strtod_l+0xaa6>
 80063ca:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80063ce:	9b04      	ldr	r3, [sp, #16]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d1a8      	bne.n	8006326 <_strtod_l+0xa0e>
 80063d4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80063d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80063da:	0d1b      	lsrs	r3, r3, #20
 80063dc:	051b      	lsls	r3, r3, #20
 80063de:	429a      	cmp	r2, r3
 80063e0:	d1a1      	bne.n	8006326 <_strtod_l+0xa0e>
 80063e2:	4640      	mov	r0, r8
 80063e4:	4649      	mov	r1, r9
 80063e6:	f7fa fc7f 	bl	8000ce8 <__aeabi_d2lz>
 80063ea:	f7fa f8ef 	bl	80005cc <__aeabi_l2d>
 80063ee:	4602      	mov	r2, r0
 80063f0:	460b      	mov	r3, r1
 80063f2:	4640      	mov	r0, r8
 80063f4:	4649      	mov	r1, r9
 80063f6:	f7f9 ff5f 	bl	80002b8 <__aeabi_dsub>
 80063fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80063fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006400:	ea43 030a 	orr.w	r3, r3, sl
 8006404:	4313      	orrs	r3, r2
 8006406:	4680      	mov	r8, r0
 8006408:	4689      	mov	r9, r1
 800640a:	d055      	beq.n	80064b8 <_strtod_l+0xba0>
 800640c:	a336      	add	r3, pc, #216	; (adr r3, 80064e8 <_strtod_l+0xbd0>)
 800640e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006412:	f7fa fb7b 	bl	8000b0c <__aeabi_dcmplt>
 8006416:	2800      	cmp	r0, #0
 8006418:	f47f acd0 	bne.w	8005dbc <_strtod_l+0x4a4>
 800641c:	a334      	add	r3, pc, #208	; (adr r3, 80064f0 <_strtod_l+0xbd8>)
 800641e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006422:	4640      	mov	r0, r8
 8006424:	4649      	mov	r1, r9
 8006426:	f7fa fb8f 	bl	8000b48 <__aeabi_dcmpgt>
 800642a:	2800      	cmp	r0, #0
 800642c:	f43f af7b 	beq.w	8006326 <_strtod_l+0xa0e>
 8006430:	e4c4      	b.n	8005dbc <_strtod_l+0x4a4>
 8006432:	9b04      	ldr	r3, [sp, #16]
 8006434:	b333      	cbz	r3, 8006484 <_strtod_l+0xb6c>
 8006436:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006438:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800643c:	d822      	bhi.n	8006484 <_strtod_l+0xb6c>
 800643e:	a32e      	add	r3, pc, #184	; (adr r3, 80064f8 <_strtod_l+0xbe0>)
 8006440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006444:	4640      	mov	r0, r8
 8006446:	4649      	mov	r1, r9
 8006448:	f7fa fb6a 	bl	8000b20 <__aeabi_dcmple>
 800644c:	b1a0      	cbz	r0, 8006478 <_strtod_l+0xb60>
 800644e:	4649      	mov	r1, r9
 8006450:	4640      	mov	r0, r8
 8006452:	f7fa fbc1 	bl	8000bd8 <__aeabi_d2uiz>
 8006456:	2801      	cmp	r0, #1
 8006458:	bf38      	it	cc
 800645a:	2001      	movcc	r0, #1
 800645c:	f7fa f86a 	bl	8000534 <__aeabi_ui2d>
 8006460:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006462:	4680      	mov	r8, r0
 8006464:	4689      	mov	r9, r1
 8006466:	bb23      	cbnz	r3, 80064b2 <_strtod_l+0xb9a>
 8006468:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800646c:	9010      	str	r0, [sp, #64]	; 0x40
 800646e:	9311      	str	r3, [sp, #68]	; 0x44
 8006470:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006474:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006478:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800647a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800647c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006480:	1a9b      	subs	r3, r3, r2
 8006482:	9309      	str	r3, [sp, #36]	; 0x24
 8006484:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006488:	eeb0 0a48 	vmov.f32	s0, s16
 800648c:	eef0 0a68 	vmov.f32	s1, s17
 8006490:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006494:	f001 fe8e 	bl	80081b4 <__ulp>
 8006498:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800649c:	ec53 2b10 	vmov	r2, r3, d0
 80064a0:	f7fa f8c2 	bl	8000628 <__aeabi_dmul>
 80064a4:	ec53 2b18 	vmov	r2, r3, d8
 80064a8:	f7f9 ff08 	bl	80002bc <__adddf3>
 80064ac:	4682      	mov	sl, r0
 80064ae:	468b      	mov	fp, r1
 80064b0:	e78d      	b.n	80063ce <_strtod_l+0xab6>
 80064b2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80064b6:	e7db      	b.n	8006470 <_strtod_l+0xb58>
 80064b8:	a311      	add	r3, pc, #68	; (adr r3, 8006500 <_strtod_l+0xbe8>)
 80064ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064be:	f7fa fb25 	bl	8000b0c <__aeabi_dcmplt>
 80064c2:	e7b2      	b.n	800642a <_strtod_l+0xb12>
 80064c4:	2300      	movs	r3, #0
 80064c6:	930a      	str	r3, [sp, #40]	; 0x28
 80064c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80064ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80064cc:	6013      	str	r3, [r2, #0]
 80064ce:	f7ff ba6b 	b.w	80059a8 <_strtod_l+0x90>
 80064d2:	2a65      	cmp	r2, #101	; 0x65
 80064d4:	f43f ab5f 	beq.w	8005b96 <_strtod_l+0x27e>
 80064d8:	2a45      	cmp	r2, #69	; 0x45
 80064da:	f43f ab5c 	beq.w	8005b96 <_strtod_l+0x27e>
 80064de:	2301      	movs	r3, #1
 80064e0:	f7ff bb94 	b.w	8005c0c <_strtod_l+0x2f4>
 80064e4:	f3af 8000 	nop.w
 80064e8:	94a03595 	.word	0x94a03595
 80064ec:	3fdfffff 	.word	0x3fdfffff
 80064f0:	35afe535 	.word	0x35afe535
 80064f4:	3fe00000 	.word	0x3fe00000
 80064f8:	ffc00000 	.word	0xffc00000
 80064fc:	41dfffff 	.word	0x41dfffff
 8006500:	94a03595 	.word	0x94a03595
 8006504:	3fcfffff 	.word	0x3fcfffff
 8006508:	3ff00000 	.word	0x3ff00000
 800650c:	7ff00000 	.word	0x7ff00000
 8006510:	7fe00000 	.word	0x7fe00000
 8006514:	7c9fffff 	.word	0x7c9fffff
 8006518:	3fe00000 	.word	0x3fe00000
 800651c:	bff00000 	.word	0xbff00000
 8006520:	7fefffff 	.word	0x7fefffff

08006524 <_strtod_r>:
 8006524:	4b01      	ldr	r3, [pc, #4]	; (800652c <_strtod_r+0x8>)
 8006526:	f7ff b9f7 	b.w	8005918 <_strtod_l>
 800652a:	bf00      	nop
 800652c:	20000084 	.word	0x20000084

08006530 <_strtol_l.constprop.0>:
 8006530:	2b01      	cmp	r3, #1
 8006532:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006536:	d001      	beq.n	800653c <_strtol_l.constprop.0+0xc>
 8006538:	2b24      	cmp	r3, #36	; 0x24
 800653a:	d906      	bls.n	800654a <_strtol_l.constprop.0+0x1a>
 800653c:	f7fe fa8c 	bl	8004a58 <__errno>
 8006540:	2316      	movs	r3, #22
 8006542:	6003      	str	r3, [r0, #0]
 8006544:	2000      	movs	r0, #0
 8006546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800654a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006630 <_strtol_l.constprop.0+0x100>
 800654e:	460d      	mov	r5, r1
 8006550:	462e      	mov	r6, r5
 8006552:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006556:	f814 700c 	ldrb.w	r7, [r4, ip]
 800655a:	f017 0708 	ands.w	r7, r7, #8
 800655e:	d1f7      	bne.n	8006550 <_strtol_l.constprop.0+0x20>
 8006560:	2c2d      	cmp	r4, #45	; 0x2d
 8006562:	d132      	bne.n	80065ca <_strtol_l.constprop.0+0x9a>
 8006564:	782c      	ldrb	r4, [r5, #0]
 8006566:	2701      	movs	r7, #1
 8006568:	1cb5      	adds	r5, r6, #2
 800656a:	2b00      	cmp	r3, #0
 800656c:	d05b      	beq.n	8006626 <_strtol_l.constprop.0+0xf6>
 800656e:	2b10      	cmp	r3, #16
 8006570:	d109      	bne.n	8006586 <_strtol_l.constprop.0+0x56>
 8006572:	2c30      	cmp	r4, #48	; 0x30
 8006574:	d107      	bne.n	8006586 <_strtol_l.constprop.0+0x56>
 8006576:	782c      	ldrb	r4, [r5, #0]
 8006578:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800657c:	2c58      	cmp	r4, #88	; 0x58
 800657e:	d14d      	bne.n	800661c <_strtol_l.constprop.0+0xec>
 8006580:	786c      	ldrb	r4, [r5, #1]
 8006582:	2310      	movs	r3, #16
 8006584:	3502      	adds	r5, #2
 8006586:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800658a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800658e:	f04f 0c00 	mov.w	ip, #0
 8006592:	fbb8 f9f3 	udiv	r9, r8, r3
 8006596:	4666      	mov	r6, ip
 8006598:	fb03 8a19 	mls	sl, r3, r9, r8
 800659c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80065a0:	f1be 0f09 	cmp.w	lr, #9
 80065a4:	d816      	bhi.n	80065d4 <_strtol_l.constprop.0+0xa4>
 80065a6:	4674      	mov	r4, lr
 80065a8:	42a3      	cmp	r3, r4
 80065aa:	dd24      	ble.n	80065f6 <_strtol_l.constprop.0+0xc6>
 80065ac:	f1bc 0f00 	cmp.w	ip, #0
 80065b0:	db1e      	blt.n	80065f0 <_strtol_l.constprop.0+0xc0>
 80065b2:	45b1      	cmp	r9, r6
 80065b4:	d31c      	bcc.n	80065f0 <_strtol_l.constprop.0+0xc0>
 80065b6:	d101      	bne.n	80065bc <_strtol_l.constprop.0+0x8c>
 80065b8:	45a2      	cmp	sl, r4
 80065ba:	db19      	blt.n	80065f0 <_strtol_l.constprop.0+0xc0>
 80065bc:	fb06 4603 	mla	r6, r6, r3, r4
 80065c0:	f04f 0c01 	mov.w	ip, #1
 80065c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80065c8:	e7e8      	b.n	800659c <_strtol_l.constprop.0+0x6c>
 80065ca:	2c2b      	cmp	r4, #43	; 0x2b
 80065cc:	bf04      	itt	eq
 80065ce:	782c      	ldrbeq	r4, [r5, #0]
 80065d0:	1cb5      	addeq	r5, r6, #2
 80065d2:	e7ca      	b.n	800656a <_strtol_l.constprop.0+0x3a>
 80065d4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80065d8:	f1be 0f19 	cmp.w	lr, #25
 80065dc:	d801      	bhi.n	80065e2 <_strtol_l.constprop.0+0xb2>
 80065de:	3c37      	subs	r4, #55	; 0x37
 80065e0:	e7e2      	b.n	80065a8 <_strtol_l.constprop.0+0x78>
 80065e2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80065e6:	f1be 0f19 	cmp.w	lr, #25
 80065ea:	d804      	bhi.n	80065f6 <_strtol_l.constprop.0+0xc6>
 80065ec:	3c57      	subs	r4, #87	; 0x57
 80065ee:	e7db      	b.n	80065a8 <_strtol_l.constprop.0+0x78>
 80065f0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80065f4:	e7e6      	b.n	80065c4 <_strtol_l.constprop.0+0x94>
 80065f6:	f1bc 0f00 	cmp.w	ip, #0
 80065fa:	da05      	bge.n	8006608 <_strtol_l.constprop.0+0xd8>
 80065fc:	2322      	movs	r3, #34	; 0x22
 80065fe:	6003      	str	r3, [r0, #0]
 8006600:	4646      	mov	r6, r8
 8006602:	b942      	cbnz	r2, 8006616 <_strtol_l.constprop.0+0xe6>
 8006604:	4630      	mov	r0, r6
 8006606:	e79e      	b.n	8006546 <_strtol_l.constprop.0+0x16>
 8006608:	b107      	cbz	r7, 800660c <_strtol_l.constprop.0+0xdc>
 800660a:	4276      	negs	r6, r6
 800660c:	2a00      	cmp	r2, #0
 800660e:	d0f9      	beq.n	8006604 <_strtol_l.constprop.0+0xd4>
 8006610:	f1bc 0f00 	cmp.w	ip, #0
 8006614:	d000      	beq.n	8006618 <_strtol_l.constprop.0+0xe8>
 8006616:	1e69      	subs	r1, r5, #1
 8006618:	6011      	str	r1, [r2, #0]
 800661a:	e7f3      	b.n	8006604 <_strtol_l.constprop.0+0xd4>
 800661c:	2430      	movs	r4, #48	; 0x30
 800661e:	2b00      	cmp	r3, #0
 8006620:	d1b1      	bne.n	8006586 <_strtol_l.constprop.0+0x56>
 8006622:	2308      	movs	r3, #8
 8006624:	e7af      	b.n	8006586 <_strtol_l.constprop.0+0x56>
 8006626:	2c30      	cmp	r4, #48	; 0x30
 8006628:	d0a5      	beq.n	8006576 <_strtol_l.constprop.0+0x46>
 800662a:	230a      	movs	r3, #10
 800662c:	e7ab      	b.n	8006586 <_strtol_l.constprop.0+0x56>
 800662e:	bf00      	nop
 8006630:	0800af61 	.word	0x0800af61

08006634 <_strtol_r>:
 8006634:	f7ff bf7c 	b.w	8006530 <_strtol_l.constprop.0>

08006638 <_write_r>:
 8006638:	b538      	push	{r3, r4, r5, lr}
 800663a:	4d07      	ldr	r5, [pc, #28]	; (8006658 <_write_r+0x20>)
 800663c:	4604      	mov	r4, r0
 800663e:	4608      	mov	r0, r1
 8006640:	4611      	mov	r1, r2
 8006642:	2200      	movs	r2, #0
 8006644:	602a      	str	r2, [r5, #0]
 8006646:	461a      	mov	r2, r3
 8006648:	f7fb ff29 	bl	800249e <_write>
 800664c:	1c43      	adds	r3, r0, #1
 800664e:	d102      	bne.n	8006656 <_write_r+0x1e>
 8006650:	682b      	ldr	r3, [r5, #0]
 8006652:	b103      	cbz	r3, 8006656 <_write_r+0x1e>
 8006654:	6023      	str	r3, [r4, #0]
 8006656:	bd38      	pop	{r3, r4, r5, pc}
 8006658:	200007dc 	.word	0x200007dc

0800665c <_close_r>:
 800665c:	b538      	push	{r3, r4, r5, lr}
 800665e:	4d06      	ldr	r5, [pc, #24]	; (8006678 <_close_r+0x1c>)
 8006660:	2300      	movs	r3, #0
 8006662:	4604      	mov	r4, r0
 8006664:	4608      	mov	r0, r1
 8006666:	602b      	str	r3, [r5, #0]
 8006668:	f7fb ff35 	bl	80024d6 <_close>
 800666c:	1c43      	adds	r3, r0, #1
 800666e:	d102      	bne.n	8006676 <_close_r+0x1a>
 8006670:	682b      	ldr	r3, [r5, #0]
 8006672:	b103      	cbz	r3, 8006676 <_close_r+0x1a>
 8006674:	6023      	str	r3, [r4, #0]
 8006676:	bd38      	pop	{r3, r4, r5, pc}
 8006678:	200007dc 	.word	0x200007dc

0800667c <quorem>:
 800667c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006680:	6903      	ldr	r3, [r0, #16]
 8006682:	690c      	ldr	r4, [r1, #16]
 8006684:	42a3      	cmp	r3, r4
 8006686:	4607      	mov	r7, r0
 8006688:	f2c0 8081 	blt.w	800678e <quorem+0x112>
 800668c:	3c01      	subs	r4, #1
 800668e:	f101 0814 	add.w	r8, r1, #20
 8006692:	f100 0514 	add.w	r5, r0, #20
 8006696:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800669a:	9301      	str	r3, [sp, #4]
 800669c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80066a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80066a4:	3301      	adds	r3, #1
 80066a6:	429a      	cmp	r2, r3
 80066a8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80066ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80066b0:	fbb2 f6f3 	udiv	r6, r2, r3
 80066b4:	d331      	bcc.n	800671a <quorem+0x9e>
 80066b6:	f04f 0e00 	mov.w	lr, #0
 80066ba:	4640      	mov	r0, r8
 80066bc:	46ac      	mov	ip, r5
 80066be:	46f2      	mov	sl, lr
 80066c0:	f850 2b04 	ldr.w	r2, [r0], #4
 80066c4:	b293      	uxth	r3, r2
 80066c6:	fb06 e303 	mla	r3, r6, r3, lr
 80066ca:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	ebaa 0303 	sub.w	r3, sl, r3
 80066d4:	f8dc a000 	ldr.w	sl, [ip]
 80066d8:	0c12      	lsrs	r2, r2, #16
 80066da:	fa13 f38a 	uxtah	r3, r3, sl
 80066de:	fb06 e202 	mla	r2, r6, r2, lr
 80066e2:	9300      	str	r3, [sp, #0]
 80066e4:	9b00      	ldr	r3, [sp, #0]
 80066e6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80066ea:	b292      	uxth	r2, r2
 80066ec:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80066f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80066f4:	f8bd 3000 	ldrh.w	r3, [sp]
 80066f8:	4581      	cmp	r9, r0
 80066fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80066fe:	f84c 3b04 	str.w	r3, [ip], #4
 8006702:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006706:	d2db      	bcs.n	80066c0 <quorem+0x44>
 8006708:	f855 300b 	ldr.w	r3, [r5, fp]
 800670c:	b92b      	cbnz	r3, 800671a <quorem+0x9e>
 800670e:	9b01      	ldr	r3, [sp, #4]
 8006710:	3b04      	subs	r3, #4
 8006712:	429d      	cmp	r5, r3
 8006714:	461a      	mov	r2, r3
 8006716:	d32e      	bcc.n	8006776 <quorem+0xfa>
 8006718:	613c      	str	r4, [r7, #16]
 800671a:	4638      	mov	r0, r7
 800671c:	f001 fca4 	bl	8008068 <__mcmp>
 8006720:	2800      	cmp	r0, #0
 8006722:	db24      	blt.n	800676e <quorem+0xf2>
 8006724:	3601      	adds	r6, #1
 8006726:	4628      	mov	r0, r5
 8006728:	f04f 0c00 	mov.w	ip, #0
 800672c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006730:	f8d0 e000 	ldr.w	lr, [r0]
 8006734:	b293      	uxth	r3, r2
 8006736:	ebac 0303 	sub.w	r3, ip, r3
 800673a:	0c12      	lsrs	r2, r2, #16
 800673c:	fa13 f38e 	uxtah	r3, r3, lr
 8006740:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006744:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006748:	b29b      	uxth	r3, r3
 800674a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800674e:	45c1      	cmp	r9, r8
 8006750:	f840 3b04 	str.w	r3, [r0], #4
 8006754:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006758:	d2e8      	bcs.n	800672c <quorem+0xb0>
 800675a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800675e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006762:	b922      	cbnz	r2, 800676e <quorem+0xf2>
 8006764:	3b04      	subs	r3, #4
 8006766:	429d      	cmp	r5, r3
 8006768:	461a      	mov	r2, r3
 800676a:	d30a      	bcc.n	8006782 <quorem+0x106>
 800676c:	613c      	str	r4, [r7, #16]
 800676e:	4630      	mov	r0, r6
 8006770:	b003      	add	sp, #12
 8006772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006776:	6812      	ldr	r2, [r2, #0]
 8006778:	3b04      	subs	r3, #4
 800677a:	2a00      	cmp	r2, #0
 800677c:	d1cc      	bne.n	8006718 <quorem+0x9c>
 800677e:	3c01      	subs	r4, #1
 8006780:	e7c7      	b.n	8006712 <quorem+0x96>
 8006782:	6812      	ldr	r2, [r2, #0]
 8006784:	3b04      	subs	r3, #4
 8006786:	2a00      	cmp	r2, #0
 8006788:	d1f0      	bne.n	800676c <quorem+0xf0>
 800678a:	3c01      	subs	r4, #1
 800678c:	e7eb      	b.n	8006766 <quorem+0xea>
 800678e:	2000      	movs	r0, #0
 8006790:	e7ee      	b.n	8006770 <quorem+0xf4>
 8006792:	0000      	movs	r0, r0
 8006794:	0000      	movs	r0, r0
	...

08006798 <_dtoa_r>:
 8006798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800679c:	ed2d 8b04 	vpush	{d8-d9}
 80067a0:	ec57 6b10 	vmov	r6, r7, d0
 80067a4:	b093      	sub	sp, #76	; 0x4c
 80067a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80067a8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80067ac:	9106      	str	r1, [sp, #24]
 80067ae:	ee10 aa10 	vmov	sl, s0
 80067b2:	4604      	mov	r4, r0
 80067b4:	9209      	str	r2, [sp, #36]	; 0x24
 80067b6:	930c      	str	r3, [sp, #48]	; 0x30
 80067b8:	46bb      	mov	fp, r7
 80067ba:	b975      	cbnz	r5, 80067da <_dtoa_r+0x42>
 80067bc:	2010      	movs	r0, #16
 80067be:	f001 f95f 	bl	8007a80 <malloc>
 80067c2:	4602      	mov	r2, r0
 80067c4:	6260      	str	r0, [r4, #36]	; 0x24
 80067c6:	b920      	cbnz	r0, 80067d2 <_dtoa_r+0x3a>
 80067c8:	4ba7      	ldr	r3, [pc, #668]	; (8006a68 <_dtoa_r+0x2d0>)
 80067ca:	21ea      	movs	r1, #234	; 0xea
 80067cc:	48a7      	ldr	r0, [pc, #668]	; (8006a6c <_dtoa_r+0x2d4>)
 80067ce:	f002 fceb 	bl	80091a8 <__assert_func>
 80067d2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80067d6:	6005      	str	r5, [r0, #0]
 80067d8:	60c5      	str	r5, [r0, #12]
 80067da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067dc:	6819      	ldr	r1, [r3, #0]
 80067de:	b151      	cbz	r1, 80067f6 <_dtoa_r+0x5e>
 80067e0:	685a      	ldr	r2, [r3, #4]
 80067e2:	604a      	str	r2, [r1, #4]
 80067e4:	2301      	movs	r3, #1
 80067e6:	4093      	lsls	r3, r2
 80067e8:	608b      	str	r3, [r1, #8]
 80067ea:	4620      	mov	r0, r4
 80067ec:	f001 f9b0 	bl	8007b50 <_Bfree>
 80067f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067f2:	2200      	movs	r2, #0
 80067f4:	601a      	str	r2, [r3, #0]
 80067f6:	1e3b      	subs	r3, r7, #0
 80067f8:	bfaa      	itet	ge
 80067fa:	2300      	movge	r3, #0
 80067fc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006800:	f8c8 3000 	strge.w	r3, [r8]
 8006804:	4b9a      	ldr	r3, [pc, #616]	; (8006a70 <_dtoa_r+0x2d8>)
 8006806:	bfbc      	itt	lt
 8006808:	2201      	movlt	r2, #1
 800680a:	f8c8 2000 	strlt.w	r2, [r8]
 800680e:	ea33 030b 	bics.w	r3, r3, fp
 8006812:	d11b      	bne.n	800684c <_dtoa_r+0xb4>
 8006814:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006816:	f242 730f 	movw	r3, #9999	; 0x270f
 800681a:	6013      	str	r3, [r2, #0]
 800681c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006820:	4333      	orrs	r3, r6
 8006822:	f000 8592 	beq.w	800734a <_dtoa_r+0xbb2>
 8006826:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006828:	b963      	cbnz	r3, 8006844 <_dtoa_r+0xac>
 800682a:	4b92      	ldr	r3, [pc, #584]	; (8006a74 <_dtoa_r+0x2dc>)
 800682c:	e022      	b.n	8006874 <_dtoa_r+0xdc>
 800682e:	4b92      	ldr	r3, [pc, #584]	; (8006a78 <_dtoa_r+0x2e0>)
 8006830:	9301      	str	r3, [sp, #4]
 8006832:	3308      	adds	r3, #8
 8006834:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006836:	6013      	str	r3, [r2, #0]
 8006838:	9801      	ldr	r0, [sp, #4]
 800683a:	b013      	add	sp, #76	; 0x4c
 800683c:	ecbd 8b04 	vpop	{d8-d9}
 8006840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006844:	4b8b      	ldr	r3, [pc, #556]	; (8006a74 <_dtoa_r+0x2dc>)
 8006846:	9301      	str	r3, [sp, #4]
 8006848:	3303      	adds	r3, #3
 800684a:	e7f3      	b.n	8006834 <_dtoa_r+0x9c>
 800684c:	2200      	movs	r2, #0
 800684e:	2300      	movs	r3, #0
 8006850:	4650      	mov	r0, sl
 8006852:	4659      	mov	r1, fp
 8006854:	f7fa f950 	bl	8000af8 <__aeabi_dcmpeq>
 8006858:	ec4b ab19 	vmov	d9, sl, fp
 800685c:	4680      	mov	r8, r0
 800685e:	b158      	cbz	r0, 8006878 <_dtoa_r+0xe0>
 8006860:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006862:	2301      	movs	r3, #1
 8006864:	6013      	str	r3, [r2, #0]
 8006866:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006868:	2b00      	cmp	r3, #0
 800686a:	f000 856b 	beq.w	8007344 <_dtoa_r+0xbac>
 800686e:	4883      	ldr	r0, [pc, #524]	; (8006a7c <_dtoa_r+0x2e4>)
 8006870:	6018      	str	r0, [r3, #0]
 8006872:	1e43      	subs	r3, r0, #1
 8006874:	9301      	str	r3, [sp, #4]
 8006876:	e7df      	b.n	8006838 <_dtoa_r+0xa0>
 8006878:	ec4b ab10 	vmov	d0, sl, fp
 800687c:	aa10      	add	r2, sp, #64	; 0x40
 800687e:	a911      	add	r1, sp, #68	; 0x44
 8006880:	4620      	mov	r0, r4
 8006882:	f001 fd13 	bl	80082ac <__d2b>
 8006886:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800688a:	ee08 0a10 	vmov	s16, r0
 800688e:	2d00      	cmp	r5, #0
 8006890:	f000 8084 	beq.w	800699c <_dtoa_r+0x204>
 8006894:	ee19 3a90 	vmov	r3, s19
 8006898:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800689c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80068a0:	4656      	mov	r6, sl
 80068a2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80068a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80068aa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80068ae:	4b74      	ldr	r3, [pc, #464]	; (8006a80 <_dtoa_r+0x2e8>)
 80068b0:	2200      	movs	r2, #0
 80068b2:	4630      	mov	r0, r6
 80068b4:	4639      	mov	r1, r7
 80068b6:	f7f9 fcff 	bl	80002b8 <__aeabi_dsub>
 80068ba:	a365      	add	r3, pc, #404	; (adr r3, 8006a50 <_dtoa_r+0x2b8>)
 80068bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c0:	f7f9 feb2 	bl	8000628 <__aeabi_dmul>
 80068c4:	a364      	add	r3, pc, #400	; (adr r3, 8006a58 <_dtoa_r+0x2c0>)
 80068c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ca:	f7f9 fcf7 	bl	80002bc <__adddf3>
 80068ce:	4606      	mov	r6, r0
 80068d0:	4628      	mov	r0, r5
 80068d2:	460f      	mov	r7, r1
 80068d4:	f7f9 fe3e 	bl	8000554 <__aeabi_i2d>
 80068d8:	a361      	add	r3, pc, #388	; (adr r3, 8006a60 <_dtoa_r+0x2c8>)
 80068da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068de:	f7f9 fea3 	bl	8000628 <__aeabi_dmul>
 80068e2:	4602      	mov	r2, r0
 80068e4:	460b      	mov	r3, r1
 80068e6:	4630      	mov	r0, r6
 80068e8:	4639      	mov	r1, r7
 80068ea:	f7f9 fce7 	bl	80002bc <__adddf3>
 80068ee:	4606      	mov	r6, r0
 80068f0:	460f      	mov	r7, r1
 80068f2:	f7fa f949 	bl	8000b88 <__aeabi_d2iz>
 80068f6:	2200      	movs	r2, #0
 80068f8:	9000      	str	r0, [sp, #0]
 80068fa:	2300      	movs	r3, #0
 80068fc:	4630      	mov	r0, r6
 80068fe:	4639      	mov	r1, r7
 8006900:	f7fa f904 	bl	8000b0c <__aeabi_dcmplt>
 8006904:	b150      	cbz	r0, 800691c <_dtoa_r+0x184>
 8006906:	9800      	ldr	r0, [sp, #0]
 8006908:	f7f9 fe24 	bl	8000554 <__aeabi_i2d>
 800690c:	4632      	mov	r2, r6
 800690e:	463b      	mov	r3, r7
 8006910:	f7fa f8f2 	bl	8000af8 <__aeabi_dcmpeq>
 8006914:	b910      	cbnz	r0, 800691c <_dtoa_r+0x184>
 8006916:	9b00      	ldr	r3, [sp, #0]
 8006918:	3b01      	subs	r3, #1
 800691a:	9300      	str	r3, [sp, #0]
 800691c:	9b00      	ldr	r3, [sp, #0]
 800691e:	2b16      	cmp	r3, #22
 8006920:	d85a      	bhi.n	80069d8 <_dtoa_r+0x240>
 8006922:	9a00      	ldr	r2, [sp, #0]
 8006924:	4b57      	ldr	r3, [pc, #348]	; (8006a84 <_dtoa_r+0x2ec>)
 8006926:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800692a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800692e:	ec51 0b19 	vmov	r0, r1, d9
 8006932:	f7fa f8eb 	bl	8000b0c <__aeabi_dcmplt>
 8006936:	2800      	cmp	r0, #0
 8006938:	d050      	beq.n	80069dc <_dtoa_r+0x244>
 800693a:	9b00      	ldr	r3, [sp, #0]
 800693c:	3b01      	subs	r3, #1
 800693e:	9300      	str	r3, [sp, #0]
 8006940:	2300      	movs	r3, #0
 8006942:	930b      	str	r3, [sp, #44]	; 0x2c
 8006944:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006946:	1b5d      	subs	r5, r3, r5
 8006948:	1e6b      	subs	r3, r5, #1
 800694a:	9305      	str	r3, [sp, #20]
 800694c:	bf45      	ittet	mi
 800694e:	f1c5 0301 	rsbmi	r3, r5, #1
 8006952:	9304      	strmi	r3, [sp, #16]
 8006954:	2300      	movpl	r3, #0
 8006956:	2300      	movmi	r3, #0
 8006958:	bf4c      	ite	mi
 800695a:	9305      	strmi	r3, [sp, #20]
 800695c:	9304      	strpl	r3, [sp, #16]
 800695e:	9b00      	ldr	r3, [sp, #0]
 8006960:	2b00      	cmp	r3, #0
 8006962:	db3d      	blt.n	80069e0 <_dtoa_r+0x248>
 8006964:	9b05      	ldr	r3, [sp, #20]
 8006966:	9a00      	ldr	r2, [sp, #0]
 8006968:	920a      	str	r2, [sp, #40]	; 0x28
 800696a:	4413      	add	r3, r2
 800696c:	9305      	str	r3, [sp, #20]
 800696e:	2300      	movs	r3, #0
 8006970:	9307      	str	r3, [sp, #28]
 8006972:	9b06      	ldr	r3, [sp, #24]
 8006974:	2b09      	cmp	r3, #9
 8006976:	f200 8089 	bhi.w	8006a8c <_dtoa_r+0x2f4>
 800697a:	2b05      	cmp	r3, #5
 800697c:	bfc4      	itt	gt
 800697e:	3b04      	subgt	r3, #4
 8006980:	9306      	strgt	r3, [sp, #24]
 8006982:	9b06      	ldr	r3, [sp, #24]
 8006984:	f1a3 0302 	sub.w	r3, r3, #2
 8006988:	bfcc      	ite	gt
 800698a:	2500      	movgt	r5, #0
 800698c:	2501      	movle	r5, #1
 800698e:	2b03      	cmp	r3, #3
 8006990:	f200 8087 	bhi.w	8006aa2 <_dtoa_r+0x30a>
 8006994:	e8df f003 	tbb	[pc, r3]
 8006998:	59383a2d 	.word	0x59383a2d
 800699c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80069a0:	441d      	add	r5, r3
 80069a2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80069a6:	2b20      	cmp	r3, #32
 80069a8:	bfc1      	itttt	gt
 80069aa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80069ae:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80069b2:	fa0b f303 	lslgt.w	r3, fp, r3
 80069b6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80069ba:	bfda      	itte	le
 80069bc:	f1c3 0320 	rsble	r3, r3, #32
 80069c0:	fa06 f003 	lslle.w	r0, r6, r3
 80069c4:	4318      	orrgt	r0, r3
 80069c6:	f7f9 fdb5 	bl	8000534 <__aeabi_ui2d>
 80069ca:	2301      	movs	r3, #1
 80069cc:	4606      	mov	r6, r0
 80069ce:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80069d2:	3d01      	subs	r5, #1
 80069d4:	930e      	str	r3, [sp, #56]	; 0x38
 80069d6:	e76a      	b.n	80068ae <_dtoa_r+0x116>
 80069d8:	2301      	movs	r3, #1
 80069da:	e7b2      	b.n	8006942 <_dtoa_r+0x1aa>
 80069dc:	900b      	str	r0, [sp, #44]	; 0x2c
 80069de:	e7b1      	b.n	8006944 <_dtoa_r+0x1ac>
 80069e0:	9b04      	ldr	r3, [sp, #16]
 80069e2:	9a00      	ldr	r2, [sp, #0]
 80069e4:	1a9b      	subs	r3, r3, r2
 80069e6:	9304      	str	r3, [sp, #16]
 80069e8:	4253      	negs	r3, r2
 80069ea:	9307      	str	r3, [sp, #28]
 80069ec:	2300      	movs	r3, #0
 80069ee:	930a      	str	r3, [sp, #40]	; 0x28
 80069f0:	e7bf      	b.n	8006972 <_dtoa_r+0x1da>
 80069f2:	2300      	movs	r3, #0
 80069f4:	9308      	str	r3, [sp, #32]
 80069f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	dc55      	bgt.n	8006aa8 <_dtoa_r+0x310>
 80069fc:	2301      	movs	r3, #1
 80069fe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006a02:	461a      	mov	r2, r3
 8006a04:	9209      	str	r2, [sp, #36]	; 0x24
 8006a06:	e00c      	b.n	8006a22 <_dtoa_r+0x28a>
 8006a08:	2301      	movs	r3, #1
 8006a0a:	e7f3      	b.n	80069f4 <_dtoa_r+0x25c>
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a10:	9308      	str	r3, [sp, #32]
 8006a12:	9b00      	ldr	r3, [sp, #0]
 8006a14:	4413      	add	r3, r2
 8006a16:	9302      	str	r3, [sp, #8]
 8006a18:	3301      	adds	r3, #1
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	9303      	str	r3, [sp, #12]
 8006a1e:	bfb8      	it	lt
 8006a20:	2301      	movlt	r3, #1
 8006a22:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006a24:	2200      	movs	r2, #0
 8006a26:	6042      	str	r2, [r0, #4]
 8006a28:	2204      	movs	r2, #4
 8006a2a:	f102 0614 	add.w	r6, r2, #20
 8006a2e:	429e      	cmp	r6, r3
 8006a30:	6841      	ldr	r1, [r0, #4]
 8006a32:	d93d      	bls.n	8006ab0 <_dtoa_r+0x318>
 8006a34:	4620      	mov	r0, r4
 8006a36:	f001 f84b 	bl	8007ad0 <_Balloc>
 8006a3a:	9001      	str	r0, [sp, #4]
 8006a3c:	2800      	cmp	r0, #0
 8006a3e:	d13b      	bne.n	8006ab8 <_dtoa_r+0x320>
 8006a40:	4b11      	ldr	r3, [pc, #68]	; (8006a88 <_dtoa_r+0x2f0>)
 8006a42:	4602      	mov	r2, r0
 8006a44:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006a48:	e6c0      	b.n	80067cc <_dtoa_r+0x34>
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e7df      	b.n	8006a0e <_dtoa_r+0x276>
 8006a4e:	bf00      	nop
 8006a50:	636f4361 	.word	0x636f4361
 8006a54:	3fd287a7 	.word	0x3fd287a7
 8006a58:	8b60c8b3 	.word	0x8b60c8b3
 8006a5c:	3fc68a28 	.word	0x3fc68a28
 8006a60:	509f79fb 	.word	0x509f79fb
 8006a64:	3fd34413 	.word	0x3fd34413
 8006a68:	0800b06e 	.word	0x0800b06e
 8006a6c:	0800b085 	.word	0x0800b085
 8006a70:	7ff00000 	.word	0x7ff00000
 8006a74:	0800b06a 	.word	0x0800b06a
 8006a78:	0800b061 	.word	0x0800b061
 8006a7c:	0800b2da 	.word	0x0800b2da
 8006a80:	3ff80000 	.word	0x3ff80000
 8006a84:	0800b1f0 	.word	0x0800b1f0
 8006a88:	0800b0e0 	.word	0x0800b0e0
 8006a8c:	2501      	movs	r5, #1
 8006a8e:	2300      	movs	r3, #0
 8006a90:	9306      	str	r3, [sp, #24]
 8006a92:	9508      	str	r5, [sp, #32]
 8006a94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a98:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	2312      	movs	r3, #18
 8006aa0:	e7b0      	b.n	8006a04 <_dtoa_r+0x26c>
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	9308      	str	r3, [sp, #32]
 8006aa6:	e7f5      	b.n	8006a94 <_dtoa_r+0x2fc>
 8006aa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006aaa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006aae:	e7b8      	b.n	8006a22 <_dtoa_r+0x28a>
 8006ab0:	3101      	adds	r1, #1
 8006ab2:	6041      	str	r1, [r0, #4]
 8006ab4:	0052      	lsls	r2, r2, #1
 8006ab6:	e7b8      	b.n	8006a2a <_dtoa_r+0x292>
 8006ab8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006aba:	9a01      	ldr	r2, [sp, #4]
 8006abc:	601a      	str	r2, [r3, #0]
 8006abe:	9b03      	ldr	r3, [sp, #12]
 8006ac0:	2b0e      	cmp	r3, #14
 8006ac2:	f200 809d 	bhi.w	8006c00 <_dtoa_r+0x468>
 8006ac6:	2d00      	cmp	r5, #0
 8006ac8:	f000 809a 	beq.w	8006c00 <_dtoa_r+0x468>
 8006acc:	9b00      	ldr	r3, [sp, #0]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	dd32      	ble.n	8006b38 <_dtoa_r+0x3a0>
 8006ad2:	4ab7      	ldr	r2, [pc, #732]	; (8006db0 <_dtoa_r+0x618>)
 8006ad4:	f003 030f 	and.w	r3, r3, #15
 8006ad8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006adc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ae0:	9b00      	ldr	r3, [sp, #0]
 8006ae2:	05d8      	lsls	r0, r3, #23
 8006ae4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006ae8:	d516      	bpl.n	8006b18 <_dtoa_r+0x380>
 8006aea:	4bb2      	ldr	r3, [pc, #712]	; (8006db4 <_dtoa_r+0x61c>)
 8006aec:	ec51 0b19 	vmov	r0, r1, d9
 8006af0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006af4:	f7f9 fec2 	bl	800087c <__aeabi_ddiv>
 8006af8:	f007 070f 	and.w	r7, r7, #15
 8006afc:	4682      	mov	sl, r0
 8006afe:	468b      	mov	fp, r1
 8006b00:	2503      	movs	r5, #3
 8006b02:	4eac      	ldr	r6, [pc, #688]	; (8006db4 <_dtoa_r+0x61c>)
 8006b04:	b957      	cbnz	r7, 8006b1c <_dtoa_r+0x384>
 8006b06:	4642      	mov	r2, r8
 8006b08:	464b      	mov	r3, r9
 8006b0a:	4650      	mov	r0, sl
 8006b0c:	4659      	mov	r1, fp
 8006b0e:	f7f9 feb5 	bl	800087c <__aeabi_ddiv>
 8006b12:	4682      	mov	sl, r0
 8006b14:	468b      	mov	fp, r1
 8006b16:	e028      	b.n	8006b6a <_dtoa_r+0x3d2>
 8006b18:	2502      	movs	r5, #2
 8006b1a:	e7f2      	b.n	8006b02 <_dtoa_r+0x36a>
 8006b1c:	07f9      	lsls	r1, r7, #31
 8006b1e:	d508      	bpl.n	8006b32 <_dtoa_r+0x39a>
 8006b20:	4640      	mov	r0, r8
 8006b22:	4649      	mov	r1, r9
 8006b24:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006b28:	f7f9 fd7e 	bl	8000628 <__aeabi_dmul>
 8006b2c:	3501      	adds	r5, #1
 8006b2e:	4680      	mov	r8, r0
 8006b30:	4689      	mov	r9, r1
 8006b32:	107f      	asrs	r7, r7, #1
 8006b34:	3608      	adds	r6, #8
 8006b36:	e7e5      	b.n	8006b04 <_dtoa_r+0x36c>
 8006b38:	f000 809b 	beq.w	8006c72 <_dtoa_r+0x4da>
 8006b3c:	9b00      	ldr	r3, [sp, #0]
 8006b3e:	4f9d      	ldr	r7, [pc, #628]	; (8006db4 <_dtoa_r+0x61c>)
 8006b40:	425e      	negs	r6, r3
 8006b42:	4b9b      	ldr	r3, [pc, #620]	; (8006db0 <_dtoa_r+0x618>)
 8006b44:	f006 020f 	and.w	r2, r6, #15
 8006b48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b50:	ec51 0b19 	vmov	r0, r1, d9
 8006b54:	f7f9 fd68 	bl	8000628 <__aeabi_dmul>
 8006b58:	1136      	asrs	r6, r6, #4
 8006b5a:	4682      	mov	sl, r0
 8006b5c:	468b      	mov	fp, r1
 8006b5e:	2300      	movs	r3, #0
 8006b60:	2502      	movs	r5, #2
 8006b62:	2e00      	cmp	r6, #0
 8006b64:	d17a      	bne.n	8006c5c <_dtoa_r+0x4c4>
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d1d3      	bne.n	8006b12 <_dtoa_r+0x37a>
 8006b6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f000 8082 	beq.w	8006c76 <_dtoa_r+0x4de>
 8006b72:	4b91      	ldr	r3, [pc, #580]	; (8006db8 <_dtoa_r+0x620>)
 8006b74:	2200      	movs	r2, #0
 8006b76:	4650      	mov	r0, sl
 8006b78:	4659      	mov	r1, fp
 8006b7a:	f7f9 ffc7 	bl	8000b0c <__aeabi_dcmplt>
 8006b7e:	2800      	cmp	r0, #0
 8006b80:	d079      	beq.n	8006c76 <_dtoa_r+0x4de>
 8006b82:	9b03      	ldr	r3, [sp, #12]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d076      	beq.n	8006c76 <_dtoa_r+0x4de>
 8006b88:	9b02      	ldr	r3, [sp, #8]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	dd36      	ble.n	8006bfc <_dtoa_r+0x464>
 8006b8e:	9b00      	ldr	r3, [sp, #0]
 8006b90:	4650      	mov	r0, sl
 8006b92:	4659      	mov	r1, fp
 8006b94:	1e5f      	subs	r7, r3, #1
 8006b96:	2200      	movs	r2, #0
 8006b98:	4b88      	ldr	r3, [pc, #544]	; (8006dbc <_dtoa_r+0x624>)
 8006b9a:	f7f9 fd45 	bl	8000628 <__aeabi_dmul>
 8006b9e:	9e02      	ldr	r6, [sp, #8]
 8006ba0:	4682      	mov	sl, r0
 8006ba2:	468b      	mov	fp, r1
 8006ba4:	3501      	adds	r5, #1
 8006ba6:	4628      	mov	r0, r5
 8006ba8:	f7f9 fcd4 	bl	8000554 <__aeabi_i2d>
 8006bac:	4652      	mov	r2, sl
 8006bae:	465b      	mov	r3, fp
 8006bb0:	f7f9 fd3a 	bl	8000628 <__aeabi_dmul>
 8006bb4:	4b82      	ldr	r3, [pc, #520]	; (8006dc0 <_dtoa_r+0x628>)
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f7f9 fb80 	bl	80002bc <__adddf3>
 8006bbc:	46d0      	mov	r8, sl
 8006bbe:	46d9      	mov	r9, fp
 8006bc0:	4682      	mov	sl, r0
 8006bc2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006bc6:	2e00      	cmp	r6, #0
 8006bc8:	d158      	bne.n	8006c7c <_dtoa_r+0x4e4>
 8006bca:	4b7e      	ldr	r3, [pc, #504]	; (8006dc4 <_dtoa_r+0x62c>)
 8006bcc:	2200      	movs	r2, #0
 8006bce:	4640      	mov	r0, r8
 8006bd0:	4649      	mov	r1, r9
 8006bd2:	f7f9 fb71 	bl	80002b8 <__aeabi_dsub>
 8006bd6:	4652      	mov	r2, sl
 8006bd8:	465b      	mov	r3, fp
 8006bda:	4680      	mov	r8, r0
 8006bdc:	4689      	mov	r9, r1
 8006bde:	f7f9 ffb3 	bl	8000b48 <__aeabi_dcmpgt>
 8006be2:	2800      	cmp	r0, #0
 8006be4:	f040 8295 	bne.w	8007112 <_dtoa_r+0x97a>
 8006be8:	4652      	mov	r2, sl
 8006bea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006bee:	4640      	mov	r0, r8
 8006bf0:	4649      	mov	r1, r9
 8006bf2:	f7f9 ff8b 	bl	8000b0c <__aeabi_dcmplt>
 8006bf6:	2800      	cmp	r0, #0
 8006bf8:	f040 8289 	bne.w	800710e <_dtoa_r+0x976>
 8006bfc:	ec5b ab19 	vmov	sl, fp, d9
 8006c00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	f2c0 8148 	blt.w	8006e98 <_dtoa_r+0x700>
 8006c08:	9a00      	ldr	r2, [sp, #0]
 8006c0a:	2a0e      	cmp	r2, #14
 8006c0c:	f300 8144 	bgt.w	8006e98 <_dtoa_r+0x700>
 8006c10:	4b67      	ldr	r3, [pc, #412]	; (8006db0 <_dtoa_r+0x618>)
 8006c12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c16:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006c1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	f280 80d5 	bge.w	8006dcc <_dtoa_r+0x634>
 8006c22:	9b03      	ldr	r3, [sp, #12]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	f300 80d1 	bgt.w	8006dcc <_dtoa_r+0x634>
 8006c2a:	f040 826f 	bne.w	800710c <_dtoa_r+0x974>
 8006c2e:	4b65      	ldr	r3, [pc, #404]	; (8006dc4 <_dtoa_r+0x62c>)
 8006c30:	2200      	movs	r2, #0
 8006c32:	4640      	mov	r0, r8
 8006c34:	4649      	mov	r1, r9
 8006c36:	f7f9 fcf7 	bl	8000628 <__aeabi_dmul>
 8006c3a:	4652      	mov	r2, sl
 8006c3c:	465b      	mov	r3, fp
 8006c3e:	f7f9 ff79 	bl	8000b34 <__aeabi_dcmpge>
 8006c42:	9e03      	ldr	r6, [sp, #12]
 8006c44:	4637      	mov	r7, r6
 8006c46:	2800      	cmp	r0, #0
 8006c48:	f040 8245 	bne.w	80070d6 <_dtoa_r+0x93e>
 8006c4c:	9d01      	ldr	r5, [sp, #4]
 8006c4e:	2331      	movs	r3, #49	; 0x31
 8006c50:	f805 3b01 	strb.w	r3, [r5], #1
 8006c54:	9b00      	ldr	r3, [sp, #0]
 8006c56:	3301      	adds	r3, #1
 8006c58:	9300      	str	r3, [sp, #0]
 8006c5a:	e240      	b.n	80070de <_dtoa_r+0x946>
 8006c5c:	07f2      	lsls	r2, r6, #31
 8006c5e:	d505      	bpl.n	8006c6c <_dtoa_r+0x4d4>
 8006c60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c64:	f7f9 fce0 	bl	8000628 <__aeabi_dmul>
 8006c68:	3501      	adds	r5, #1
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	1076      	asrs	r6, r6, #1
 8006c6e:	3708      	adds	r7, #8
 8006c70:	e777      	b.n	8006b62 <_dtoa_r+0x3ca>
 8006c72:	2502      	movs	r5, #2
 8006c74:	e779      	b.n	8006b6a <_dtoa_r+0x3d2>
 8006c76:	9f00      	ldr	r7, [sp, #0]
 8006c78:	9e03      	ldr	r6, [sp, #12]
 8006c7a:	e794      	b.n	8006ba6 <_dtoa_r+0x40e>
 8006c7c:	9901      	ldr	r1, [sp, #4]
 8006c7e:	4b4c      	ldr	r3, [pc, #304]	; (8006db0 <_dtoa_r+0x618>)
 8006c80:	4431      	add	r1, r6
 8006c82:	910d      	str	r1, [sp, #52]	; 0x34
 8006c84:	9908      	ldr	r1, [sp, #32]
 8006c86:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006c8a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006c8e:	2900      	cmp	r1, #0
 8006c90:	d043      	beq.n	8006d1a <_dtoa_r+0x582>
 8006c92:	494d      	ldr	r1, [pc, #308]	; (8006dc8 <_dtoa_r+0x630>)
 8006c94:	2000      	movs	r0, #0
 8006c96:	f7f9 fdf1 	bl	800087c <__aeabi_ddiv>
 8006c9a:	4652      	mov	r2, sl
 8006c9c:	465b      	mov	r3, fp
 8006c9e:	f7f9 fb0b 	bl	80002b8 <__aeabi_dsub>
 8006ca2:	9d01      	ldr	r5, [sp, #4]
 8006ca4:	4682      	mov	sl, r0
 8006ca6:	468b      	mov	fp, r1
 8006ca8:	4649      	mov	r1, r9
 8006caa:	4640      	mov	r0, r8
 8006cac:	f7f9 ff6c 	bl	8000b88 <__aeabi_d2iz>
 8006cb0:	4606      	mov	r6, r0
 8006cb2:	f7f9 fc4f 	bl	8000554 <__aeabi_i2d>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	460b      	mov	r3, r1
 8006cba:	4640      	mov	r0, r8
 8006cbc:	4649      	mov	r1, r9
 8006cbe:	f7f9 fafb 	bl	80002b8 <__aeabi_dsub>
 8006cc2:	3630      	adds	r6, #48	; 0x30
 8006cc4:	f805 6b01 	strb.w	r6, [r5], #1
 8006cc8:	4652      	mov	r2, sl
 8006cca:	465b      	mov	r3, fp
 8006ccc:	4680      	mov	r8, r0
 8006cce:	4689      	mov	r9, r1
 8006cd0:	f7f9 ff1c 	bl	8000b0c <__aeabi_dcmplt>
 8006cd4:	2800      	cmp	r0, #0
 8006cd6:	d163      	bne.n	8006da0 <_dtoa_r+0x608>
 8006cd8:	4642      	mov	r2, r8
 8006cda:	464b      	mov	r3, r9
 8006cdc:	4936      	ldr	r1, [pc, #216]	; (8006db8 <_dtoa_r+0x620>)
 8006cde:	2000      	movs	r0, #0
 8006ce0:	f7f9 faea 	bl	80002b8 <__aeabi_dsub>
 8006ce4:	4652      	mov	r2, sl
 8006ce6:	465b      	mov	r3, fp
 8006ce8:	f7f9 ff10 	bl	8000b0c <__aeabi_dcmplt>
 8006cec:	2800      	cmp	r0, #0
 8006cee:	f040 80b5 	bne.w	8006e5c <_dtoa_r+0x6c4>
 8006cf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006cf4:	429d      	cmp	r5, r3
 8006cf6:	d081      	beq.n	8006bfc <_dtoa_r+0x464>
 8006cf8:	4b30      	ldr	r3, [pc, #192]	; (8006dbc <_dtoa_r+0x624>)
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	4650      	mov	r0, sl
 8006cfe:	4659      	mov	r1, fp
 8006d00:	f7f9 fc92 	bl	8000628 <__aeabi_dmul>
 8006d04:	4b2d      	ldr	r3, [pc, #180]	; (8006dbc <_dtoa_r+0x624>)
 8006d06:	4682      	mov	sl, r0
 8006d08:	468b      	mov	fp, r1
 8006d0a:	4640      	mov	r0, r8
 8006d0c:	4649      	mov	r1, r9
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f7f9 fc8a 	bl	8000628 <__aeabi_dmul>
 8006d14:	4680      	mov	r8, r0
 8006d16:	4689      	mov	r9, r1
 8006d18:	e7c6      	b.n	8006ca8 <_dtoa_r+0x510>
 8006d1a:	4650      	mov	r0, sl
 8006d1c:	4659      	mov	r1, fp
 8006d1e:	f7f9 fc83 	bl	8000628 <__aeabi_dmul>
 8006d22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d24:	9d01      	ldr	r5, [sp, #4]
 8006d26:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d28:	4682      	mov	sl, r0
 8006d2a:	468b      	mov	fp, r1
 8006d2c:	4649      	mov	r1, r9
 8006d2e:	4640      	mov	r0, r8
 8006d30:	f7f9 ff2a 	bl	8000b88 <__aeabi_d2iz>
 8006d34:	4606      	mov	r6, r0
 8006d36:	f7f9 fc0d 	bl	8000554 <__aeabi_i2d>
 8006d3a:	3630      	adds	r6, #48	; 0x30
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	460b      	mov	r3, r1
 8006d40:	4640      	mov	r0, r8
 8006d42:	4649      	mov	r1, r9
 8006d44:	f7f9 fab8 	bl	80002b8 <__aeabi_dsub>
 8006d48:	f805 6b01 	strb.w	r6, [r5], #1
 8006d4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d4e:	429d      	cmp	r5, r3
 8006d50:	4680      	mov	r8, r0
 8006d52:	4689      	mov	r9, r1
 8006d54:	f04f 0200 	mov.w	r2, #0
 8006d58:	d124      	bne.n	8006da4 <_dtoa_r+0x60c>
 8006d5a:	4b1b      	ldr	r3, [pc, #108]	; (8006dc8 <_dtoa_r+0x630>)
 8006d5c:	4650      	mov	r0, sl
 8006d5e:	4659      	mov	r1, fp
 8006d60:	f7f9 faac 	bl	80002bc <__adddf3>
 8006d64:	4602      	mov	r2, r0
 8006d66:	460b      	mov	r3, r1
 8006d68:	4640      	mov	r0, r8
 8006d6a:	4649      	mov	r1, r9
 8006d6c:	f7f9 feec 	bl	8000b48 <__aeabi_dcmpgt>
 8006d70:	2800      	cmp	r0, #0
 8006d72:	d173      	bne.n	8006e5c <_dtoa_r+0x6c4>
 8006d74:	4652      	mov	r2, sl
 8006d76:	465b      	mov	r3, fp
 8006d78:	4913      	ldr	r1, [pc, #76]	; (8006dc8 <_dtoa_r+0x630>)
 8006d7a:	2000      	movs	r0, #0
 8006d7c:	f7f9 fa9c 	bl	80002b8 <__aeabi_dsub>
 8006d80:	4602      	mov	r2, r0
 8006d82:	460b      	mov	r3, r1
 8006d84:	4640      	mov	r0, r8
 8006d86:	4649      	mov	r1, r9
 8006d88:	f7f9 fec0 	bl	8000b0c <__aeabi_dcmplt>
 8006d8c:	2800      	cmp	r0, #0
 8006d8e:	f43f af35 	beq.w	8006bfc <_dtoa_r+0x464>
 8006d92:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006d94:	1e6b      	subs	r3, r5, #1
 8006d96:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d98:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006d9c:	2b30      	cmp	r3, #48	; 0x30
 8006d9e:	d0f8      	beq.n	8006d92 <_dtoa_r+0x5fa>
 8006da0:	9700      	str	r7, [sp, #0]
 8006da2:	e049      	b.n	8006e38 <_dtoa_r+0x6a0>
 8006da4:	4b05      	ldr	r3, [pc, #20]	; (8006dbc <_dtoa_r+0x624>)
 8006da6:	f7f9 fc3f 	bl	8000628 <__aeabi_dmul>
 8006daa:	4680      	mov	r8, r0
 8006dac:	4689      	mov	r9, r1
 8006dae:	e7bd      	b.n	8006d2c <_dtoa_r+0x594>
 8006db0:	0800b1f0 	.word	0x0800b1f0
 8006db4:	0800b1c8 	.word	0x0800b1c8
 8006db8:	3ff00000 	.word	0x3ff00000
 8006dbc:	40240000 	.word	0x40240000
 8006dc0:	401c0000 	.word	0x401c0000
 8006dc4:	40140000 	.word	0x40140000
 8006dc8:	3fe00000 	.word	0x3fe00000
 8006dcc:	9d01      	ldr	r5, [sp, #4]
 8006dce:	4656      	mov	r6, sl
 8006dd0:	465f      	mov	r7, fp
 8006dd2:	4642      	mov	r2, r8
 8006dd4:	464b      	mov	r3, r9
 8006dd6:	4630      	mov	r0, r6
 8006dd8:	4639      	mov	r1, r7
 8006dda:	f7f9 fd4f 	bl	800087c <__aeabi_ddiv>
 8006dde:	f7f9 fed3 	bl	8000b88 <__aeabi_d2iz>
 8006de2:	4682      	mov	sl, r0
 8006de4:	f7f9 fbb6 	bl	8000554 <__aeabi_i2d>
 8006de8:	4642      	mov	r2, r8
 8006dea:	464b      	mov	r3, r9
 8006dec:	f7f9 fc1c 	bl	8000628 <__aeabi_dmul>
 8006df0:	4602      	mov	r2, r0
 8006df2:	460b      	mov	r3, r1
 8006df4:	4630      	mov	r0, r6
 8006df6:	4639      	mov	r1, r7
 8006df8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006dfc:	f7f9 fa5c 	bl	80002b8 <__aeabi_dsub>
 8006e00:	f805 6b01 	strb.w	r6, [r5], #1
 8006e04:	9e01      	ldr	r6, [sp, #4]
 8006e06:	9f03      	ldr	r7, [sp, #12]
 8006e08:	1bae      	subs	r6, r5, r6
 8006e0a:	42b7      	cmp	r7, r6
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	460b      	mov	r3, r1
 8006e10:	d135      	bne.n	8006e7e <_dtoa_r+0x6e6>
 8006e12:	f7f9 fa53 	bl	80002bc <__adddf3>
 8006e16:	4642      	mov	r2, r8
 8006e18:	464b      	mov	r3, r9
 8006e1a:	4606      	mov	r6, r0
 8006e1c:	460f      	mov	r7, r1
 8006e1e:	f7f9 fe93 	bl	8000b48 <__aeabi_dcmpgt>
 8006e22:	b9d0      	cbnz	r0, 8006e5a <_dtoa_r+0x6c2>
 8006e24:	4642      	mov	r2, r8
 8006e26:	464b      	mov	r3, r9
 8006e28:	4630      	mov	r0, r6
 8006e2a:	4639      	mov	r1, r7
 8006e2c:	f7f9 fe64 	bl	8000af8 <__aeabi_dcmpeq>
 8006e30:	b110      	cbz	r0, 8006e38 <_dtoa_r+0x6a0>
 8006e32:	f01a 0f01 	tst.w	sl, #1
 8006e36:	d110      	bne.n	8006e5a <_dtoa_r+0x6c2>
 8006e38:	4620      	mov	r0, r4
 8006e3a:	ee18 1a10 	vmov	r1, s16
 8006e3e:	f000 fe87 	bl	8007b50 <_Bfree>
 8006e42:	2300      	movs	r3, #0
 8006e44:	9800      	ldr	r0, [sp, #0]
 8006e46:	702b      	strb	r3, [r5, #0]
 8006e48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e4a:	3001      	adds	r0, #1
 8006e4c:	6018      	str	r0, [r3, #0]
 8006e4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	f43f acf1 	beq.w	8006838 <_dtoa_r+0xa0>
 8006e56:	601d      	str	r5, [r3, #0]
 8006e58:	e4ee      	b.n	8006838 <_dtoa_r+0xa0>
 8006e5a:	9f00      	ldr	r7, [sp, #0]
 8006e5c:	462b      	mov	r3, r5
 8006e5e:	461d      	mov	r5, r3
 8006e60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e64:	2a39      	cmp	r2, #57	; 0x39
 8006e66:	d106      	bne.n	8006e76 <_dtoa_r+0x6de>
 8006e68:	9a01      	ldr	r2, [sp, #4]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d1f7      	bne.n	8006e5e <_dtoa_r+0x6c6>
 8006e6e:	9901      	ldr	r1, [sp, #4]
 8006e70:	2230      	movs	r2, #48	; 0x30
 8006e72:	3701      	adds	r7, #1
 8006e74:	700a      	strb	r2, [r1, #0]
 8006e76:	781a      	ldrb	r2, [r3, #0]
 8006e78:	3201      	adds	r2, #1
 8006e7a:	701a      	strb	r2, [r3, #0]
 8006e7c:	e790      	b.n	8006da0 <_dtoa_r+0x608>
 8006e7e:	4ba6      	ldr	r3, [pc, #664]	; (8007118 <_dtoa_r+0x980>)
 8006e80:	2200      	movs	r2, #0
 8006e82:	f7f9 fbd1 	bl	8000628 <__aeabi_dmul>
 8006e86:	2200      	movs	r2, #0
 8006e88:	2300      	movs	r3, #0
 8006e8a:	4606      	mov	r6, r0
 8006e8c:	460f      	mov	r7, r1
 8006e8e:	f7f9 fe33 	bl	8000af8 <__aeabi_dcmpeq>
 8006e92:	2800      	cmp	r0, #0
 8006e94:	d09d      	beq.n	8006dd2 <_dtoa_r+0x63a>
 8006e96:	e7cf      	b.n	8006e38 <_dtoa_r+0x6a0>
 8006e98:	9a08      	ldr	r2, [sp, #32]
 8006e9a:	2a00      	cmp	r2, #0
 8006e9c:	f000 80d7 	beq.w	800704e <_dtoa_r+0x8b6>
 8006ea0:	9a06      	ldr	r2, [sp, #24]
 8006ea2:	2a01      	cmp	r2, #1
 8006ea4:	f300 80ba 	bgt.w	800701c <_dtoa_r+0x884>
 8006ea8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006eaa:	2a00      	cmp	r2, #0
 8006eac:	f000 80b2 	beq.w	8007014 <_dtoa_r+0x87c>
 8006eb0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006eb4:	9e07      	ldr	r6, [sp, #28]
 8006eb6:	9d04      	ldr	r5, [sp, #16]
 8006eb8:	9a04      	ldr	r2, [sp, #16]
 8006eba:	441a      	add	r2, r3
 8006ebc:	9204      	str	r2, [sp, #16]
 8006ebe:	9a05      	ldr	r2, [sp, #20]
 8006ec0:	2101      	movs	r1, #1
 8006ec2:	441a      	add	r2, r3
 8006ec4:	4620      	mov	r0, r4
 8006ec6:	9205      	str	r2, [sp, #20]
 8006ec8:	f000 ff44 	bl	8007d54 <__i2b>
 8006ecc:	4607      	mov	r7, r0
 8006ece:	2d00      	cmp	r5, #0
 8006ed0:	dd0c      	ble.n	8006eec <_dtoa_r+0x754>
 8006ed2:	9b05      	ldr	r3, [sp, #20]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	dd09      	ble.n	8006eec <_dtoa_r+0x754>
 8006ed8:	42ab      	cmp	r3, r5
 8006eda:	9a04      	ldr	r2, [sp, #16]
 8006edc:	bfa8      	it	ge
 8006ede:	462b      	movge	r3, r5
 8006ee0:	1ad2      	subs	r2, r2, r3
 8006ee2:	9204      	str	r2, [sp, #16]
 8006ee4:	9a05      	ldr	r2, [sp, #20]
 8006ee6:	1aed      	subs	r5, r5, r3
 8006ee8:	1ad3      	subs	r3, r2, r3
 8006eea:	9305      	str	r3, [sp, #20]
 8006eec:	9b07      	ldr	r3, [sp, #28]
 8006eee:	b31b      	cbz	r3, 8006f38 <_dtoa_r+0x7a0>
 8006ef0:	9b08      	ldr	r3, [sp, #32]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	f000 80af 	beq.w	8007056 <_dtoa_r+0x8be>
 8006ef8:	2e00      	cmp	r6, #0
 8006efa:	dd13      	ble.n	8006f24 <_dtoa_r+0x78c>
 8006efc:	4639      	mov	r1, r7
 8006efe:	4632      	mov	r2, r6
 8006f00:	4620      	mov	r0, r4
 8006f02:	f000 ffe7 	bl	8007ed4 <__pow5mult>
 8006f06:	ee18 2a10 	vmov	r2, s16
 8006f0a:	4601      	mov	r1, r0
 8006f0c:	4607      	mov	r7, r0
 8006f0e:	4620      	mov	r0, r4
 8006f10:	f000 ff36 	bl	8007d80 <__multiply>
 8006f14:	ee18 1a10 	vmov	r1, s16
 8006f18:	4680      	mov	r8, r0
 8006f1a:	4620      	mov	r0, r4
 8006f1c:	f000 fe18 	bl	8007b50 <_Bfree>
 8006f20:	ee08 8a10 	vmov	s16, r8
 8006f24:	9b07      	ldr	r3, [sp, #28]
 8006f26:	1b9a      	subs	r2, r3, r6
 8006f28:	d006      	beq.n	8006f38 <_dtoa_r+0x7a0>
 8006f2a:	ee18 1a10 	vmov	r1, s16
 8006f2e:	4620      	mov	r0, r4
 8006f30:	f000 ffd0 	bl	8007ed4 <__pow5mult>
 8006f34:	ee08 0a10 	vmov	s16, r0
 8006f38:	2101      	movs	r1, #1
 8006f3a:	4620      	mov	r0, r4
 8006f3c:	f000 ff0a 	bl	8007d54 <__i2b>
 8006f40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	4606      	mov	r6, r0
 8006f46:	f340 8088 	ble.w	800705a <_dtoa_r+0x8c2>
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	4601      	mov	r1, r0
 8006f4e:	4620      	mov	r0, r4
 8006f50:	f000 ffc0 	bl	8007ed4 <__pow5mult>
 8006f54:	9b06      	ldr	r3, [sp, #24]
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	4606      	mov	r6, r0
 8006f5a:	f340 8081 	ble.w	8007060 <_dtoa_r+0x8c8>
 8006f5e:	f04f 0800 	mov.w	r8, #0
 8006f62:	6933      	ldr	r3, [r6, #16]
 8006f64:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006f68:	6918      	ldr	r0, [r3, #16]
 8006f6a:	f000 fea3 	bl	8007cb4 <__hi0bits>
 8006f6e:	f1c0 0020 	rsb	r0, r0, #32
 8006f72:	9b05      	ldr	r3, [sp, #20]
 8006f74:	4418      	add	r0, r3
 8006f76:	f010 001f 	ands.w	r0, r0, #31
 8006f7a:	f000 8092 	beq.w	80070a2 <_dtoa_r+0x90a>
 8006f7e:	f1c0 0320 	rsb	r3, r0, #32
 8006f82:	2b04      	cmp	r3, #4
 8006f84:	f340 808a 	ble.w	800709c <_dtoa_r+0x904>
 8006f88:	f1c0 001c 	rsb	r0, r0, #28
 8006f8c:	9b04      	ldr	r3, [sp, #16]
 8006f8e:	4403      	add	r3, r0
 8006f90:	9304      	str	r3, [sp, #16]
 8006f92:	9b05      	ldr	r3, [sp, #20]
 8006f94:	4403      	add	r3, r0
 8006f96:	4405      	add	r5, r0
 8006f98:	9305      	str	r3, [sp, #20]
 8006f9a:	9b04      	ldr	r3, [sp, #16]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	dd07      	ble.n	8006fb0 <_dtoa_r+0x818>
 8006fa0:	ee18 1a10 	vmov	r1, s16
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	4620      	mov	r0, r4
 8006fa8:	f000 ffee 	bl	8007f88 <__lshift>
 8006fac:	ee08 0a10 	vmov	s16, r0
 8006fb0:	9b05      	ldr	r3, [sp, #20]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	dd05      	ble.n	8006fc2 <_dtoa_r+0x82a>
 8006fb6:	4631      	mov	r1, r6
 8006fb8:	461a      	mov	r2, r3
 8006fba:	4620      	mov	r0, r4
 8006fbc:	f000 ffe4 	bl	8007f88 <__lshift>
 8006fc0:	4606      	mov	r6, r0
 8006fc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d06e      	beq.n	80070a6 <_dtoa_r+0x90e>
 8006fc8:	ee18 0a10 	vmov	r0, s16
 8006fcc:	4631      	mov	r1, r6
 8006fce:	f001 f84b 	bl	8008068 <__mcmp>
 8006fd2:	2800      	cmp	r0, #0
 8006fd4:	da67      	bge.n	80070a6 <_dtoa_r+0x90e>
 8006fd6:	9b00      	ldr	r3, [sp, #0]
 8006fd8:	3b01      	subs	r3, #1
 8006fda:	ee18 1a10 	vmov	r1, s16
 8006fde:	9300      	str	r3, [sp, #0]
 8006fe0:	220a      	movs	r2, #10
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	4620      	mov	r0, r4
 8006fe6:	f000 fdd5 	bl	8007b94 <__multadd>
 8006fea:	9b08      	ldr	r3, [sp, #32]
 8006fec:	ee08 0a10 	vmov	s16, r0
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	f000 81b1 	beq.w	8007358 <_dtoa_r+0xbc0>
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	4639      	mov	r1, r7
 8006ffa:	220a      	movs	r2, #10
 8006ffc:	4620      	mov	r0, r4
 8006ffe:	f000 fdc9 	bl	8007b94 <__multadd>
 8007002:	9b02      	ldr	r3, [sp, #8]
 8007004:	2b00      	cmp	r3, #0
 8007006:	4607      	mov	r7, r0
 8007008:	f300 808e 	bgt.w	8007128 <_dtoa_r+0x990>
 800700c:	9b06      	ldr	r3, [sp, #24]
 800700e:	2b02      	cmp	r3, #2
 8007010:	dc51      	bgt.n	80070b6 <_dtoa_r+0x91e>
 8007012:	e089      	b.n	8007128 <_dtoa_r+0x990>
 8007014:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007016:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800701a:	e74b      	b.n	8006eb4 <_dtoa_r+0x71c>
 800701c:	9b03      	ldr	r3, [sp, #12]
 800701e:	1e5e      	subs	r6, r3, #1
 8007020:	9b07      	ldr	r3, [sp, #28]
 8007022:	42b3      	cmp	r3, r6
 8007024:	bfbf      	itttt	lt
 8007026:	9b07      	ldrlt	r3, [sp, #28]
 8007028:	9607      	strlt	r6, [sp, #28]
 800702a:	1af2      	sublt	r2, r6, r3
 800702c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800702e:	bfb6      	itet	lt
 8007030:	189b      	addlt	r3, r3, r2
 8007032:	1b9e      	subge	r6, r3, r6
 8007034:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007036:	9b03      	ldr	r3, [sp, #12]
 8007038:	bfb8      	it	lt
 800703a:	2600      	movlt	r6, #0
 800703c:	2b00      	cmp	r3, #0
 800703e:	bfb7      	itett	lt
 8007040:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007044:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007048:	1a9d      	sublt	r5, r3, r2
 800704a:	2300      	movlt	r3, #0
 800704c:	e734      	b.n	8006eb8 <_dtoa_r+0x720>
 800704e:	9e07      	ldr	r6, [sp, #28]
 8007050:	9d04      	ldr	r5, [sp, #16]
 8007052:	9f08      	ldr	r7, [sp, #32]
 8007054:	e73b      	b.n	8006ece <_dtoa_r+0x736>
 8007056:	9a07      	ldr	r2, [sp, #28]
 8007058:	e767      	b.n	8006f2a <_dtoa_r+0x792>
 800705a:	9b06      	ldr	r3, [sp, #24]
 800705c:	2b01      	cmp	r3, #1
 800705e:	dc18      	bgt.n	8007092 <_dtoa_r+0x8fa>
 8007060:	f1ba 0f00 	cmp.w	sl, #0
 8007064:	d115      	bne.n	8007092 <_dtoa_r+0x8fa>
 8007066:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800706a:	b993      	cbnz	r3, 8007092 <_dtoa_r+0x8fa>
 800706c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007070:	0d1b      	lsrs	r3, r3, #20
 8007072:	051b      	lsls	r3, r3, #20
 8007074:	b183      	cbz	r3, 8007098 <_dtoa_r+0x900>
 8007076:	9b04      	ldr	r3, [sp, #16]
 8007078:	3301      	adds	r3, #1
 800707a:	9304      	str	r3, [sp, #16]
 800707c:	9b05      	ldr	r3, [sp, #20]
 800707e:	3301      	adds	r3, #1
 8007080:	9305      	str	r3, [sp, #20]
 8007082:	f04f 0801 	mov.w	r8, #1
 8007086:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007088:	2b00      	cmp	r3, #0
 800708a:	f47f af6a 	bne.w	8006f62 <_dtoa_r+0x7ca>
 800708e:	2001      	movs	r0, #1
 8007090:	e76f      	b.n	8006f72 <_dtoa_r+0x7da>
 8007092:	f04f 0800 	mov.w	r8, #0
 8007096:	e7f6      	b.n	8007086 <_dtoa_r+0x8ee>
 8007098:	4698      	mov	r8, r3
 800709a:	e7f4      	b.n	8007086 <_dtoa_r+0x8ee>
 800709c:	f43f af7d 	beq.w	8006f9a <_dtoa_r+0x802>
 80070a0:	4618      	mov	r0, r3
 80070a2:	301c      	adds	r0, #28
 80070a4:	e772      	b.n	8006f8c <_dtoa_r+0x7f4>
 80070a6:	9b03      	ldr	r3, [sp, #12]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	dc37      	bgt.n	800711c <_dtoa_r+0x984>
 80070ac:	9b06      	ldr	r3, [sp, #24]
 80070ae:	2b02      	cmp	r3, #2
 80070b0:	dd34      	ble.n	800711c <_dtoa_r+0x984>
 80070b2:	9b03      	ldr	r3, [sp, #12]
 80070b4:	9302      	str	r3, [sp, #8]
 80070b6:	9b02      	ldr	r3, [sp, #8]
 80070b8:	b96b      	cbnz	r3, 80070d6 <_dtoa_r+0x93e>
 80070ba:	4631      	mov	r1, r6
 80070bc:	2205      	movs	r2, #5
 80070be:	4620      	mov	r0, r4
 80070c0:	f000 fd68 	bl	8007b94 <__multadd>
 80070c4:	4601      	mov	r1, r0
 80070c6:	4606      	mov	r6, r0
 80070c8:	ee18 0a10 	vmov	r0, s16
 80070cc:	f000 ffcc 	bl	8008068 <__mcmp>
 80070d0:	2800      	cmp	r0, #0
 80070d2:	f73f adbb 	bgt.w	8006c4c <_dtoa_r+0x4b4>
 80070d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070d8:	9d01      	ldr	r5, [sp, #4]
 80070da:	43db      	mvns	r3, r3
 80070dc:	9300      	str	r3, [sp, #0]
 80070de:	f04f 0800 	mov.w	r8, #0
 80070e2:	4631      	mov	r1, r6
 80070e4:	4620      	mov	r0, r4
 80070e6:	f000 fd33 	bl	8007b50 <_Bfree>
 80070ea:	2f00      	cmp	r7, #0
 80070ec:	f43f aea4 	beq.w	8006e38 <_dtoa_r+0x6a0>
 80070f0:	f1b8 0f00 	cmp.w	r8, #0
 80070f4:	d005      	beq.n	8007102 <_dtoa_r+0x96a>
 80070f6:	45b8      	cmp	r8, r7
 80070f8:	d003      	beq.n	8007102 <_dtoa_r+0x96a>
 80070fa:	4641      	mov	r1, r8
 80070fc:	4620      	mov	r0, r4
 80070fe:	f000 fd27 	bl	8007b50 <_Bfree>
 8007102:	4639      	mov	r1, r7
 8007104:	4620      	mov	r0, r4
 8007106:	f000 fd23 	bl	8007b50 <_Bfree>
 800710a:	e695      	b.n	8006e38 <_dtoa_r+0x6a0>
 800710c:	2600      	movs	r6, #0
 800710e:	4637      	mov	r7, r6
 8007110:	e7e1      	b.n	80070d6 <_dtoa_r+0x93e>
 8007112:	9700      	str	r7, [sp, #0]
 8007114:	4637      	mov	r7, r6
 8007116:	e599      	b.n	8006c4c <_dtoa_r+0x4b4>
 8007118:	40240000 	.word	0x40240000
 800711c:	9b08      	ldr	r3, [sp, #32]
 800711e:	2b00      	cmp	r3, #0
 8007120:	f000 80ca 	beq.w	80072b8 <_dtoa_r+0xb20>
 8007124:	9b03      	ldr	r3, [sp, #12]
 8007126:	9302      	str	r3, [sp, #8]
 8007128:	2d00      	cmp	r5, #0
 800712a:	dd05      	ble.n	8007138 <_dtoa_r+0x9a0>
 800712c:	4639      	mov	r1, r7
 800712e:	462a      	mov	r2, r5
 8007130:	4620      	mov	r0, r4
 8007132:	f000 ff29 	bl	8007f88 <__lshift>
 8007136:	4607      	mov	r7, r0
 8007138:	f1b8 0f00 	cmp.w	r8, #0
 800713c:	d05b      	beq.n	80071f6 <_dtoa_r+0xa5e>
 800713e:	6879      	ldr	r1, [r7, #4]
 8007140:	4620      	mov	r0, r4
 8007142:	f000 fcc5 	bl	8007ad0 <_Balloc>
 8007146:	4605      	mov	r5, r0
 8007148:	b928      	cbnz	r0, 8007156 <_dtoa_r+0x9be>
 800714a:	4b87      	ldr	r3, [pc, #540]	; (8007368 <_dtoa_r+0xbd0>)
 800714c:	4602      	mov	r2, r0
 800714e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007152:	f7ff bb3b 	b.w	80067cc <_dtoa_r+0x34>
 8007156:	693a      	ldr	r2, [r7, #16]
 8007158:	3202      	adds	r2, #2
 800715a:	0092      	lsls	r2, r2, #2
 800715c:	f107 010c 	add.w	r1, r7, #12
 8007160:	300c      	adds	r0, #12
 8007162:	f000 fca7 	bl	8007ab4 <memcpy>
 8007166:	2201      	movs	r2, #1
 8007168:	4629      	mov	r1, r5
 800716a:	4620      	mov	r0, r4
 800716c:	f000 ff0c 	bl	8007f88 <__lshift>
 8007170:	9b01      	ldr	r3, [sp, #4]
 8007172:	f103 0901 	add.w	r9, r3, #1
 8007176:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800717a:	4413      	add	r3, r2
 800717c:	9305      	str	r3, [sp, #20]
 800717e:	f00a 0301 	and.w	r3, sl, #1
 8007182:	46b8      	mov	r8, r7
 8007184:	9304      	str	r3, [sp, #16]
 8007186:	4607      	mov	r7, r0
 8007188:	4631      	mov	r1, r6
 800718a:	ee18 0a10 	vmov	r0, s16
 800718e:	f7ff fa75 	bl	800667c <quorem>
 8007192:	4641      	mov	r1, r8
 8007194:	9002      	str	r0, [sp, #8]
 8007196:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800719a:	ee18 0a10 	vmov	r0, s16
 800719e:	f000 ff63 	bl	8008068 <__mcmp>
 80071a2:	463a      	mov	r2, r7
 80071a4:	9003      	str	r0, [sp, #12]
 80071a6:	4631      	mov	r1, r6
 80071a8:	4620      	mov	r0, r4
 80071aa:	f000 ff79 	bl	80080a0 <__mdiff>
 80071ae:	68c2      	ldr	r2, [r0, #12]
 80071b0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 80071b4:	4605      	mov	r5, r0
 80071b6:	bb02      	cbnz	r2, 80071fa <_dtoa_r+0xa62>
 80071b8:	4601      	mov	r1, r0
 80071ba:	ee18 0a10 	vmov	r0, s16
 80071be:	f000 ff53 	bl	8008068 <__mcmp>
 80071c2:	4602      	mov	r2, r0
 80071c4:	4629      	mov	r1, r5
 80071c6:	4620      	mov	r0, r4
 80071c8:	9207      	str	r2, [sp, #28]
 80071ca:	f000 fcc1 	bl	8007b50 <_Bfree>
 80071ce:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80071d2:	ea43 0102 	orr.w	r1, r3, r2
 80071d6:	9b04      	ldr	r3, [sp, #16]
 80071d8:	430b      	orrs	r3, r1
 80071da:	464d      	mov	r5, r9
 80071dc:	d10f      	bne.n	80071fe <_dtoa_r+0xa66>
 80071de:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80071e2:	d02a      	beq.n	800723a <_dtoa_r+0xaa2>
 80071e4:	9b03      	ldr	r3, [sp, #12]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	dd02      	ble.n	80071f0 <_dtoa_r+0xa58>
 80071ea:	9b02      	ldr	r3, [sp, #8]
 80071ec:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80071f0:	f88b a000 	strb.w	sl, [fp]
 80071f4:	e775      	b.n	80070e2 <_dtoa_r+0x94a>
 80071f6:	4638      	mov	r0, r7
 80071f8:	e7ba      	b.n	8007170 <_dtoa_r+0x9d8>
 80071fa:	2201      	movs	r2, #1
 80071fc:	e7e2      	b.n	80071c4 <_dtoa_r+0xa2c>
 80071fe:	9b03      	ldr	r3, [sp, #12]
 8007200:	2b00      	cmp	r3, #0
 8007202:	db04      	blt.n	800720e <_dtoa_r+0xa76>
 8007204:	9906      	ldr	r1, [sp, #24]
 8007206:	430b      	orrs	r3, r1
 8007208:	9904      	ldr	r1, [sp, #16]
 800720a:	430b      	orrs	r3, r1
 800720c:	d122      	bne.n	8007254 <_dtoa_r+0xabc>
 800720e:	2a00      	cmp	r2, #0
 8007210:	ddee      	ble.n	80071f0 <_dtoa_r+0xa58>
 8007212:	ee18 1a10 	vmov	r1, s16
 8007216:	2201      	movs	r2, #1
 8007218:	4620      	mov	r0, r4
 800721a:	f000 feb5 	bl	8007f88 <__lshift>
 800721e:	4631      	mov	r1, r6
 8007220:	ee08 0a10 	vmov	s16, r0
 8007224:	f000 ff20 	bl	8008068 <__mcmp>
 8007228:	2800      	cmp	r0, #0
 800722a:	dc03      	bgt.n	8007234 <_dtoa_r+0xa9c>
 800722c:	d1e0      	bne.n	80071f0 <_dtoa_r+0xa58>
 800722e:	f01a 0f01 	tst.w	sl, #1
 8007232:	d0dd      	beq.n	80071f0 <_dtoa_r+0xa58>
 8007234:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007238:	d1d7      	bne.n	80071ea <_dtoa_r+0xa52>
 800723a:	2339      	movs	r3, #57	; 0x39
 800723c:	f88b 3000 	strb.w	r3, [fp]
 8007240:	462b      	mov	r3, r5
 8007242:	461d      	mov	r5, r3
 8007244:	3b01      	subs	r3, #1
 8007246:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800724a:	2a39      	cmp	r2, #57	; 0x39
 800724c:	d071      	beq.n	8007332 <_dtoa_r+0xb9a>
 800724e:	3201      	adds	r2, #1
 8007250:	701a      	strb	r2, [r3, #0]
 8007252:	e746      	b.n	80070e2 <_dtoa_r+0x94a>
 8007254:	2a00      	cmp	r2, #0
 8007256:	dd07      	ble.n	8007268 <_dtoa_r+0xad0>
 8007258:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800725c:	d0ed      	beq.n	800723a <_dtoa_r+0xaa2>
 800725e:	f10a 0301 	add.w	r3, sl, #1
 8007262:	f88b 3000 	strb.w	r3, [fp]
 8007266:	e73c      	b.n	80070e2 <_dtoa_r+0x94a>
 8007268:	9b05      	ldr	r3, [sp, #20]
 800726a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800726e:	4599      	cmp	r9, r3
 8007270:	d047      	beq.n	8007302 <_dtoa_r+0xb6a>
 8007272:	ee18 1a10 	vmov	r1, s16
 8007276:	2300      	movs	r3, #0
 8007278:	220a      	movs	r2, #10
 800727a:	4620      	mov	r0, r4
 800727c:	f000 fc8a 	bl	8007b94 <__multadd>
 8007280:	45b8      	cmp	r8, r7
 8007282:	ee08 0a10 	vmov	s16, r0
 8007286:	f04f 0300 	mov.w	r3, #0
 800728a:	f04f 020a 	mov.w	r2, #10
 800728e:	4641      	mov	r1, r8
 8007290:	4620      	mov	r0, r4
 8007292:	d106      	bne.n	80072a2 <_dtoa_r+0xb0a>
 8007294:	f000 fc7e 	bl	8007b94 <__multadd>
 8007298:	4680      	mov	r8, r0
 800729a:	4607      	mov	r7, r0
 800729c:	f109 0901 	add.w	r9, r9, #1
 80072a0:	e772      	b.n	8007188 <_dtoa_r+0x9f0>
 80072a2:	f000 fc77 	bl	8007b94 <__multadd>
 80072a6:	4639      	mov	r1, r7
 80072a8:	4680      	mov	r8, r0
 80072aa:	2300      	movs	r3, #0
 80072ac:	220a      	movs	r2, #10
 80072ae:	4620      	mov	r0, r4
 80072b0:	f000 fc70 	bl	8007b94 <__multadd>
 80072b4:	4607      	mov	r7, r0
 80072b6:	e7f1      	b.n	800729c <_dtoa_r+0xb04>
 80072b8:	9b03      	ldr	r3, [sp, #12]
 80072ba:	9302      	str	r3, [sp, #8]
 80072bc:	9d01      	ldr	r5, [sp, #4]
 80072be:	ee18 0a10 	vmov	r0, s16
 80072c2:	4631      	mov	r1, r6
 80072c4:	f7ff f9da 	bl	800667c <quorem>
 80072c8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80072cc:	9b01      	ldr	r3, [sp, #4]
 80072ce:	f805 ab01 	strb.w	sl, [r5], #1
 80072d2:	1aea      	subs	r2, r5, r3
 80072d4:	9b02      	ldr	r3, [sp, #8]
 80072d6:	4293      	cmp	r3, r2
 80072d8:	dd09      	ble.n	80072ee <_dtoa_r+0xb56>
 80072da:	ee18 1a10 	vmov	r1, s16
 80072de:	2300      	movs	r3, #0
 80072e0:	220a      	movs	r2, #10
 80072e2:	4620      	mov	r0, r4
 80072e4:	f000 fc56 	bl	8007b94 <__multadd>
 80072e8:	ee08 0a10 	vmov	s16, r0
 80072ec:	e7e7      	b.n	80072be <_dtoa_r+0xb26>
 80072ee:	9b02      	ldr	r3, [sp, #8]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	bfc8      	it	gt
 80072f4:	461d      	movgt	r5, r3
 80072f6:	9b01      	ldr	r3, [sp, #4]
 80072f8:	bfd8      	it	le
 80072fa:	2501      	movle	r5, #1
 80072fc:	441d      	add	r5, r3
 80072fe:	f04f 0800 	mov.w	r8, #0
 8007302:	ee18 1a10 	vmov	r1, s16
 8007306:	2201      	movs	r2, #1
 8007308:	4620      	mov	r0, r4
 800730a:	f000 fe3d 	bl	8007f88 <__lshift>
 800730e:	4631      	mov	r1, r6
 8007310:	ee08 0a10 	vmov	s16, r0
 8007314:	f000 fea8 	bl	8008068 <__mcmp>
 8007318:	2800      	cmp	r0, #0
 800731a:	dc91      	bgt.n	8007240 <_dtoa_r+0xaa8>
 800731c:	d102      	bne.n	8007324 <_dtoa_r+0xb8c>
 800731e:	f01a 0f01 	tst.w	sl, #1
 8007322:	d18d      	bne.n	8007240 <_dtoa_r+0xaa8>
 8007324:	462b      	mov	r3, r5
 8007326:	461d      	mov	r5, r3
 8007328:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800732c:	2a30      	cmp	r2, #48	; 0x30
 800732e:	d0fa      	beq.n	8007326 <_dtoa_r+0xb8e>
 8007330:	e6d7      	b.n	80070e2 <_dtoa_r+0x94a>
 8007332:	9a01      	ldr	r2, [sp, #4]
 8007334:	429a      	cmp	r2, r3
 8007336:	d184      	bne.n	8007242 <_dtoa_r+0xaaa>
 8007338:	9b00      	ldr	r3, [sp, #0]
 800733a:	3301      	adds	r3, #1
 800733c:	9300      	str	r3, [sp, #0]
 800733e:	2331      	movs	r3, #49	; 0x31
 8007340:	7013      	strb	r3, [r2, #0]
 8007342:	e6ce      	b.n	80070e2 <_dtoa_r+0x94a>
 8007344:	4b09      	ldr	r3, [pc, #36]	; (800736c <_dtoa_r+0xbd4>)
 8007346:	f7ff ba95 	b.w	8006874 <_dtoa_r+0xdc>
 800734a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800734c:	2b00      	cmp	r3, #0
 800734e:	f47f aa6e 	bne.w	800682e <_dtoa_r+0x96>
 8007352:	4b07      	ldr	r3, [pc, #28]	; (8007370 <_dtoa_r+0xbd8>)
 8007354:	f7ff ba8e 	b.w	8006874 <_dtoa_r+0xdc>
 8007358:	9b02      	ldr	r3, [sp, #8]
 800735a:	2b00      	cmp	r3, #0
 800735c:	dcae      	bgt.n	80072bc <_dtoa_r+0xb24>
 800735e:	9b06      	ldr	r3, [sp, #24]
 8007360:	2b02      	cmp	r3, #2
 8007362:	f73f aea8 	bgt.w	80070b6 <_dtoa_r+0x91e>
 8007366:	e7a9      	b.n	80072bc <_dtoa_r+0xb24>
 8007368:	0800b0e0 	.word	0x0800b0e0
 800736c:	0800b2d9 	.word	0x0800b2d9
 8007370:	0800b061 	.word	0x0800b061

08007374 <rshift>:
 8007374:	6903      	ldr	r3, [r0, #16]
 8007376:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800737a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800737e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007382:	f100 0414 	add.w	r4, r0, #20
 8007386:	dd45      	ble.n	8007414 <rshift+0xa0>
 8007388:	f011 011f 	ands.w	r1, r1, #31
 800738c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007390:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007394:	d10c      	bne.n	80073b0 <rshift+0x3c>
 8007396:	f100 0710 	add.w	r7, r0, #16
 800739a:	4629      	mov	r1, r5
 800739c:	42b1      	cmp	r1, r6
 800739e:	d334      	bcc.n	800740a <rshift+0x96>
 80073a0:	1a9b      	subs	r3, r3, r2
 80073a2:	009b      	lsls	r3, r3, #2
 80073a4:	1eea      	subs	r2, r5, #3
 80073a6:	4296      	cmp	r6, r2
 80073a8:	bf38      	it	cc
 80073aa:	2300      	movcc	r3, #0
 80073ac:	4423      	add	r3, r4
 80073ae:	e015      	b.n	80073dc <rshift+0x68>
 80073b0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80073b4:	f1c1 0820 	rsb	r8, r1, #32
 80073b8:	40cf      	lsrs	r7, r1
 80073ba:	f105 0e04 	add.w	lr, r5, #4
 80073be:	46a1      	mov	r9, r4
 80073c0:	4576      	cmp	r6, lr
 80073c2:	46f4      	mov	ip, lr
 80073c4:	d815      	bhi.n	80073f2 <rshift+0x7e>
 80073c6:	1a9a      	subs	r2, r3, r2
 80073c8:	0092      	lsls	r2, r2, #2
 80073ca:	3a04      	subs	r2, #4
 80073cc:	3501      	adds	r5, #1
 80073ce:	42ae      	cmp	r6, r5
 80073d0:	bf38      	it	cc
 80073d2:	2200      	movcc	r2, #0
 80073d4:	18a3      	adds	r3, r4, r2
 80073d6:	50a7      	str	r7, [r4, r2]
 80073d8:	b107      	cbz	r7, 80073dc <rshift+0x68>
 80073da:	3304      	adds	r3, #4
 80073dc:	1b1a      	subs	r2, r3, r4
 80073de:	42a3      	cmp	r3, r4
 80073e0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80073e4:	bf08      	it	eq
 80073e6:	2300      	moveq	r3, #0
 80073e8:	6102      	str	r2, [r0, #16]
 80073ea:	bf08      	it	eq
 80073ec:	6143      	streq	r3, [r0, #20]
 80073ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80073f2:	f8dc c000 	ldr.w	ip, [ip]
 80073f6:	fa0c fc08 	lsl.w	ip, ip, r8
 80073fa:	ea4c 0707 	orr.w	r7, ip, r7
 80073fe:	f849 7b04 	str.w	r7, [r9], #4
 8007402:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007406:	40cf      	lsrs	r7, r1
 8007408:	e7da      	b.n	80073c0 <rshift+0x4c>
 800740a:	f851 cb04 	ldr.w	ip, [r1], #4
 800740e:	f847 cf04 	str.w	ip, [r7, #4]!
 8007412:	e7c3      	b.n	800739c <rshift+0x28>
 8007414:	4623      	mov	r3, r4
 8007416:	e7e1      	b.n	80073dc <rshift+0x68>

08007418 <__hexdig_fun>:
 8007418:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800741c:	2b09      	cmp	r3, #9
 800741e:	d802      	bhi.n	8007426 <__hexdig_fun+0xe>
 8007420:	3820      	subs	r0, #32
 8007422:	b2c0      	uxtb	r0, r0
 8007424:	4770      	bx	lr
 8007426:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800742a:	2b05      	cmp	r3, #5
 800742c:	d801      	bhi.n	8007432 <__hexdig_fun+0x1a>
 800742e:	3847      	subs	r0, #71	; 0x47
 8007430:	e7f7      	b.n	8007422 <__hexdig_fun+0xa>
 8007432:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007436:	2b05      	cmp	r3, #5
 8007438:	d801      	bhi.n	800743e <__hexdig_fun+0x26>
 800743a:	3827      	subs	r0, #39	; 0x27
 800743c:	e7f1      	b.n	8007422 <__hexdig_fun+0xa>
 800743e:	2000      	movs	r0, #0
 8007440:	4770      	bx	lr
	...

08007444 <__gethex>:
 8007444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007448:	ed2d 8b02 	vpush	{d8}
 800744c:	b089      	sub	sp, #36	; 0x24
 800744e:	ee08 0a10 	vmov	s16, r0
 8007452:	9304      	str	r3, [sp, #16]
 8007454:	4bb4      	ldr	r3, [pc, #720]	; (8007728 <__gethex+0x2e4>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	9301      	str	r3, [sp, #4]
 800745a:	4618      	mov	r0, r3
 800745c:	468b      	mov	fp, r1
 800745e:	4690      	mov	r8, r2
 8007460:	f7f8 fec8 	bl	80001f4 <strlen>
 8007464:	9b01      	ldr	r3, [sp, #4]
 8007466:	f8db 2000 	ldr.w	r2, [fp]
 800746a:	4403      	add	r3, r0
 800746c:	4682      	mov	sl, r0
 800746e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007472:	9305      	str	r3, [sp, #20]
 8007474:	1c93      	adds	r3, r2, #2
 8007476:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800747a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800747e:	32fe      	adds	r2, #254	; 0xfe
 8007480:	18d1      	adds	r1, r2, r3
 8007482:	461f      	mov	r7, r3
 8007484:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007488:	9100      	str	r1, [sp, #0]
 800748a:	2830      	cmp	r0, #48	; 0x30
 800748c:	d0f8      	beq.n	8007480 <__gethex+0x3c>
 800748e:	f7ff ffc3 	bl	8007418 <__hexdig_fun>
 8007492:	4604      	mov	r4, r0
 8007494:	2800      	cmp	r0, #0
 8007496:	d13a      	bne.n	800750e <__gethex+0xca>
 8007498:	9901      	ldr	r1, [sp, #4]
 800749a:	4652      	mov	r2, sl
 800749c:	4638      	mov	r0, r7
 800749e:	f001 fdb3 	bl	8009008 <strncmp>
 80074a2:	4605      	mov	r5, r0
 80074a4:	2800      	cmp	r0, #0
 80074a6:	d168      	bne.n	800757a <__gethex+0x136>
 80074a8:	f817 000a 	ldrb.w	r0, [r7, sl]
 80074ac:	eb07 060a 	add.w	r6, r7, sl
 80074b0:	f7ff ffb2 	bl	8007418 <__hexdig_fun>
 80074b4:	2800      	cmp	r0, #0
 80074b6:	d062      	beq.n	800757e <__gethex+0x13a>
 80074b8:	4633      	mov	r3, r6
 80074ba:	7818      	ldrb	r0, [r3, #0]
 80074bc:	2830      	cmp	r0, #48	; 0x30
 80074be:	461f      	mov	r7, r3
 80074c0:	f103 0301 	add.w	r3, r3, #1
 80074c4:	d0f9      	beq.n	80074ba <__gethex+0x76>
 80074c6:	f7ff ffa7 	bl	8007418 <__hexdig_fun>
 80074ca:	2301      	movs	r3, #1
 80074cc:	fab0 f480 	clz	r4, r0
 80074d0:	0964      	lsrs	r4, r4, #5
 80074d2:	4635      	mov	r5, r6
 80074d4:	9300      	str	r3, [sp, #0]
 80074d6:	463a      	mov	r2, r7
 80074d8:	4616      	mov	r6, r2
 80074da:	3201      	adds	r2, #1
 80074dc:	7830      	ldrb	r0, [r6, #0]
 80074de:	f7ff ff9b 	bl	8007418 <__hexdig_fun>
 80074e2:	2800      	cmp	r0, #0
 80074e4:	d1f8      	bne.n	80074d8 <__gethex+0x94>
 80074e6:	9901      	ldr	r1, [sp, #4]
 80074e8:	4652      	mov	r2, sl
 80074ea:	4630      	mov	r0, r6
 80074ec:	f001 fd8c 	bl	8009008 <strncmp>
 80074f0:	b980      	cbnz	r0, 8007514 <__gethex+0xd0>
 80074f2:	b94d      	cbnz	r5, 8007508 <__gethex+0xc4>
 80074f4:	eb06 050a 	add.w	r5, r6, sl
 80074f8:	462a      	mov	r2, r5
 80074fa:	4616      	mov	r6, r2
 80074fc:	3201      	adds	r2, #1
 80074fe:	7830      	ldrb	r0, [r6, #0]
 8007500:	f7ff ff8a 	bl	8007418 <__hexdig_fun>
 8007504:	2800      	cmp	r0, #0
 8007506:	d1f8      	bne.n	80074fa <__gethex+0xb6>
 8007508:	1bad      	subs	r5, r5, r6
 800750a:	00ad      	lsls	r5, r5, #2
 800750c:	e004      	b.n	8007518 <__gethex+0xd4>
 800750e:	2400      	movs	r4, #0
 8007510:	4625      	mov	r5, r4
 8007512:	e7e0      	b.n	80074d6 <__gethex+0x92>
 8007514:	2d00      	cmp	r5, #0
 8007516:	d1f7      	bne.n	8007508 <__gethex+0xc4>
 8007518:	7833      	ldrb	r3, [r6, #0]
 800751a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800751e:	2b50      	cmp	r3, #80	; 0x50
 8007520:	d13b      	bne.n	800759a <__gethex+0x156>
 8007522:	7873      	ldrb	r3, [r6, #1]
 8007524:	2b2b      	cmp	r3, #43	; 0x2b
 8007526:	d02c      	beq.n	8007582 <__gethex+0x13e>
 8007528:	2b2d      	cmp	r3, #45	; 0x2d
 800752a:	d02e      	beq.n	800758a <__gethex+0x146>
 800752c:	1c71      	adds	r1, r6, #1
 800752e:	f04f 0900 	mov.w	r9, #0
 8007532:	7808      	ldrb	r0, [r1, #0]
 8007534:	f7ff ff70 	bl	8007418 <__hexdig_fun>
 8007538:	1e43      	subs	r3, r0, #1
 800753a:	b2db      	uxtb	r3, r3
 800753c:	2b18      	cmp	r3, #24
 800753e:	d82c      	bhi.n	800759a <__gethex+0x156>
 8007540:	f1a0 0210 	sub.w	r2, r0, #16
 8007544:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007548:	f7ff ff66 	bl	8007418 <__hexdig_fun>
 800754c:	1e43      	subs	r3, r0, #1
 800754e:	b2db      	uxtb	r3, r3
 8007550:	2b18      	cmp	r3, #24
 8007552:	d91d      	bls.n	8007590 <__gethex+0x14c>
 8007554:	f1b9 0f00 	cmp.w	r9, #0
 8007558:	d000      	beq.n	800755c <__gethex+0x118>
 800755a:	4252      	negs	r2, r2
 800755c:	4415      	add	r5, r2
 800755e:	f8cb 1000 	str.w	r1, [fp]
 8007562:	b1e4      	cbz	r4, 800759e <__gethex+0x15a>
 8007564:	9b00      	ldr	r3, [sp, #0]
 8007566:	2b00      	cmp	r3, #0
 8007568:	bf14      	ite	ne
 800756a:	2700      	movne	r7, #0
 800756c:	2706      	moveq	r7, #6
 800756e:	4638      	mov	r0, r7
 8007570:	b009      	add	sp, #36	; 0x24
 8007572:	ecbd 8b02 	vpop	{d8}
 8007576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800757a:	463e      	mov	r6, r7
 800757c:	4625      	mov	r5, r4
 800757e:	2401      	movs	r4, #1
 8007580:	e7ca      	b.n	8007518 <__gethex+0xd4>
 8007582:	f04f 0900 	mov.w	r9, #0
 8007586:	1cb1      	adds	r1, r6, #2
 8007588:	e7d3      	b.n	8007532 <__gethex+0xee>
 800758a:	f04f 0901 	mov.w	r9, #1
 800758e:	e7fa      	b.n	8007586 <__gethex+0x142>
 8007590:	230a      	movs	r3, #10
 8007592:	fb03 0202 	mla	r2, r3, r2, r0
 8007596:	3a10      	subs	r2, #16
 8007598:	e7d4      	b.n	8007544 <__gethex+0x100>
 800759a:	4631      	mov	r1, r6
 800759c:	e7df      	b.n	800755e <__gethex+0x11a>
 800759e:	1bf3      	subs	r3, r6, r7
 80075a0:	3b01      	subs	r3, #1
 80075a2:	4621      	mov	r1, r4
 80075a4:	2b07      	cmp	r3, #7
 80075a6:	dc0b      	bgt.n	80075c0 <__gethex+0x17c>
 80075a8:	ee18 0a10 	vmov	r0, s16
 80075ac:	f000 fa90 	bl	8007ad0 <_Balloc>
 80075b0:	4604      	mov	r4, r0
 80075b2:	b940      	cbnz	r0, 80075c6 <__gethex+0x182>
 80075b4:	4b5d      	ldr	r3, [pc, #372]	; (800772c <__gethex+0x2e8>)
 80075b6:	4602      	mov	r2, r0
 80075b8:	21de      	movs	r1, #222	; 0xde
 80075ba:	485d      	ldr	r0, [pc, #372]	; (8007730 <__gethex+0x2ec>)
 80075bc:	f001 fdf4 	bl	80091a8 <__assert_func>
 80075c0:	3101      	adds	r1, #1
 80075c2:	105b      	asrs	r3, r3, #1
 80075c4:	e7ee      	b.n	80075a4 <__gethex+0x160>
 80075c6:	f100 0914 	add.w	r9, r0, #20
 80075ca:	f04f 0b00 	mov.w	fp, #0
 80075ce:	f1ca 0301 	rsb	r3, sl, #1
 80075d2:	f8cd 9008 	str.w	r9, [sp, #8]
 80075d6:	f8cd b000 	str.w	fp, [sp]
 80075da:	9306      	str	r3, [sp, #24]
 80075dc:	42b7      	cmp	r7, r6
 80075de:	d340      	bcc.n	8007662 <__gethex+0x21e>
 80075e0:	9802      	ldr	r0, [sp, #8]
 80075e2:	9b00      	ldr	r3, [sp, #0]
 80075e4:	f840 3b04 	str.w	r3, [r0], #4
 80075e8:	eba0 0009 	sub.w	r0, r0, r9
 80075ec:	1080      	asrs	r0, r0, #2
 80075ee:	0146      	lsls	r6, r0, #5
 80075f0:	6120      	str	r0, [r4, #16]
 80075f2:	4618      	mov	r0, r3
 80075f4:	f000 fb5e 	bl	8007cb4 <__hi0bits>
 80075f8:	1a30      	subs	r0, r6, r0
 80075fa:	f8d8 6000 	ldr.w	r6, [r8]
 80075fe:	42b0      	cmp	r0, r6
 8007600:	dd63      	ble.n	80076ca <__gethex+0x286>
 8007602:	1b87      	subs	r7, r0, r6
 8007604:	4639      	mov	r1, r7
 8007606:	4620      	mov	r0, r4
 8007608:	f000 ff02 	bl	8008410 <__any_on>
 800760c:	4682      	mov	sl, r0
 800760e:	b1a8      	cbz	r0, 800763c <__gethex+0x1f8>
 8007610:	1e7b      	subs	r3, r7, #1
 8007612:	1159      	asrs	r1, r3, #5
 8007614:	f003 021f 	and.w	r2, r3, #31
 8007618:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800761c:	f04f 0a01 	mov.w	sl, #1
 8007620:	fa0a f202 	lsl.w	r2, sl, r2
 8007624:	420a      	tst	r2, r1
 8007626:	d009      	beq.n	800763c <__gethex+0x1f8>
 8007628:	4553      	cmp	r3, sl
 800762a:	dd05      	ble.n	8007638 <__gethex+0x1f4>
 800762c:	1eb9      	subs	r1, r7, #2
 800762e:	4620      	mov	r0, r4
 8007630:	f000 feee 	bl	8008410 <__any_on>
 8007634:	2800      	cmp	r0, #0
 8007636:	d145      	bne.n	80076c4 <__gethex+0x280>
 8007638:	f04f 0a02 	mov.w	sl, #2
 800763c:	4639      	mov	r1, r7
 800763e:	4620      	mov	r0, r4
 8007640:	f7ff fe98 	bl	8007374 <rshift>
 8007644:	443d      	add	r5, r7
 8007646:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800764a:	42ab      	cmp	r3, r5
 800764c:	da4c      	bge.n	80076e8 <__gethex+0x2a4>
 800764e:	ee18 0a10 	vmov	r0, s16
 8007652:	4621      	mov	r1, r4
 8007654:	f000 fa7c 	bl	8007b50 <_Bfree>
 8007658:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800765a:	2300      	movs	r3, #0
 800765c:	6013      	str	r3, [r2, #0]
 800765e:	27a3      	movs	r7, #163	; 0xa3
 8007660:	e785      	b.n	800756e <__gethex+0x12a>
 8007662:	1e73      	subs	r3, r6, #1
 8007664:	9a05      	ldr	r2, [sp, #20]
 8007666:	9303      	str	r3, [sp, #12]
 8007668:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800766c:	4293      	cmp	r3, r2
 800766e:	d019      	beq.n	80076a4 <__gethex+0x260>
 8007670:	f1bb 0f20 	cmp.w	fp, #32
 8007674:	d107      	bne.n	8007686 <__gethex+0x242>
 8007676:	9b02      	ldr	r3, [sp, #8]
 8007678:	9a00      	ldr	r2, [sp, #0]
 800767a:	f843 2b04 	str.w	r2, [r3], #4
 800767e:	9302      	str	r3, [sp, #8]
 8007680:	2300      	movs	r3, #0
 8007682:	9300      	str	r3, [sp, #0]
 8007684:	469b      	mov	fp, r3
 8007686:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800768a:	f7ff fec5 	bl	8007418 <__hexdig_fun>
 800768e:	9b00      	ldr	r3, [sp, #0]
 8007690:	f000 000f 	and.w	r0, r0, #15
 8007694:	fa00 f00b 	lsl.w	r0, r0, fp
 8007698:	4303      	orrs	r3, r0
 800769a:	9300      	str	r3, [sp, #0]
 800769c:	f10b 0b04 	add.w	fp, fp, #4
 80076a0:	9b03      	ldr	r3, [sp, #12]
 80076a2:	e00d      	b.n	80076c0 <__gethex+0x27c>
 80076a4:	9b03      	ldr	r3, [sp, #12]
 80076a6:	9a06      	ldr	r2, [sp, #24]
 80076a8:	4413      	add	r3, r2
 80076aa:	42bb      	cmp	r3, r7
 80076ac:	d3e0      	bcc.n	8007670 <__gethex+0x22c>
 80076ae:	4618      	mov	r0, r3
 80076b0:	9901      	ldr	r1, [sp, #4]
 80076b2:	9307      	str	r3, [sp, #28]
 80076b4:	4652      	mov	r2, sl
 80076b6:	f001 fca7 	bl	8009008 <strncmp>
 80076ba:	9b07      	ldr	r3, [sp, #28]
 80076bc:	2800      	cmp	r0, #0
 80076be:	d1d7      	bne.n	8007670 <__gethex+0x22c>
 80076c0:	461e      	mov	r6, r3
 80076c2:	e78b      	b.n	80075dc <__gethex+0x198>
 80076c4:	f04f 0a03 	mov.w	sl, #3
 80076c8:	e7b8      	b.n	800763c <__gethex+0x1f8>
 80076ca:	da0a      	bge.n	80076e2 <__gethex+0x29e>
 80076cc:	1a37      	subs	r7, r6, r0
 80076ce:	4621      	mov	r1, r4
 80076d0:	ee18 0a10 	vmov	r0, s16
 80076d4:	463a      	mov	r2, r7
 80076d6:	f000 fc57 	bl	8007f88 <__lshift>
 80076da:	1bed      	subs	r5, r5, r7
 80076dc:	4604      	mov	r4, r0
 80076de:	f100 0914 	add.w	r9, r0, #20
 80076e2:	f04f 0a00 	mov.w	sl, #0
 80076e6:	e7ae      	b.n	8007646 <__gethex+0x202>
 80076e8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80076ec:	42a8      	cmp	r0, r5
 80076ee:	dd72      	ble.n	80077d6 <__gethex+0x392>
 80076f0:	1b45      	subs	r5, r0, r5
 80076f2:	42ae      	cmp	r6, r5
 80076f4:	dc36      	bgt.n	8007764 <__gethex+0x320>
 80076f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80076fa:	2b02      	cmp	r3, #2
 80076fc:	d02a      	beq.n	8007754 <__gethex+0x310>
 80076fe:	2b03      	cmp	r3, #3
 8007700:	d02c      	beq.n	800775c <__gethex+0x318>
 8007702:	2b01      	cmp	r3, #1
 8007704:	d11c      	bne.n	8007740 <__gethex+0x2fc>
 8007706:	42ae      	cmp	r6, r5
 8007708:	d11a      	bne.n	8007740 <__gethex+0x2fc>
 800770a:	2e01      	cmp	r6, #1
 800770c:	d112      	bne.n	8007734 <__gethex+0x2f0>
 800770e:	9a04      	ldr	r2, [sp, #16]
 8007710:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007714:	6013      	str	r3, [r2, #0]
 8007716:	2301      	movs	r3, #1
 8007718:	6123      	str	r3, [r4, #16]
 800771a:	f8c9 3000 	str.w	r3, [r9]
 800771e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007720:	2762      	movs	r7, #98	; 0x62
 8007722:	601c      	str	r4, [r3, #0]
 8007724:	e723      	b.n	800756e <__gethex+0x12a>
 8007726:	bf00      	nop
 8007728:	0800b158 	.word	0x0800b158
 800772c:	0800b0e0 	.word	0x0800b0e0
 8007730:	0800b0f1 	.word	0x0800b0f1
 8007734:	1e71      	subs	r1, r6, #1
 8007736:	4620      	mov	r0, r4
 8007738:	f000 fe6a 	bl	8008410 <__any_on>
 800773c:	2800      	cmp	r0, #0
 800773e:	d1e6      	bne.n	800770e <__gethex+0x2ca>
 8007740:	ee18 0a10 	vmov	r0, s16
 8007744:	4621      	mov	r1, r4
 8007746:	f000 fa03 	bl	8007b50 <_Bfree>
 800774a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800774c:	2300      	movs	r3, #0
 800774e:	6013      	str	r3, [r2, #0]
 8007750:	2750      	movs	r7, #80	; 0x50
 8007752:	e70c      	b.n	800756e <__gethex+0x12a>
 8007754:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007756:	2b00      	cmp	r3, #0
 8007758:	d1f2      	bne.n	8007740 <__gethex+0x2fc>
 800775a:	e7d8      	b.n	800770e <__gethex+0x2ca>
 800775c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800775e:	2b00      	cmp	r3, #0
 8007760:	d1d5      	bne.n	800770e <__gethex+0x2ca>
 8007762:	e7ed      	b.n	8007740 <__gethex+0x2fc>
 8007764:	1e6f      	subs	r7, r5, #1
 8007766:	f1ba 0f00 	cmp.w	sl, #0
 800776a:	d131      	bne.n	80077d0 <__gethex+0x38c>
 800776c:	b127      	cbz	r7, 8007778 <__gethex+0x334>
 800776e:	4639      	mov	r1, r7
 8007770:	4620      	mov	r0, r4
 8007772:	f000 fe4d 	bl	8008410 <__any_on>
 8007776:	4682      	mov	sl, r0
 8007778:	117b      	asrs	r3, r7, #5
 800777a:	2101      	movs	r1, #1
 800777c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007780:	f007 071f 	and.w	r7, r7, #31
 8007784:	fa01 f707 	lsl.w	r7, r1, r7
 8007788:	421f      	tst	r7, r3
 800778a:	4629      	mov	r1, r5
 800778c:	4620      	mov	r0, r4
 800778e:	bf18      	it	ne
 8007790:	f04a 0a02 	orrne.w	sl, sl, #2
 8007794:	1b76      	subs	r6, r6, r5
 8007796:	f7ff fded 	bl	8007374 <rshift>
 800779a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800779e:	2702      	movs	r7, #2
 80077a0:	f1ba 0f00 	cmp.w	sl, #0
 80077a4:	d048      	beq.n	8007838 <__gethex+0x3f4>
 80077a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80077aa:	2b02      	cmp	r3, #2
 80077ac:	d015      	beq.n	80077da <__gethex+0x396>
 80077ae:	2b03      	cmp	r3, #3
 80077b0:	d017      	beq.n	80077e2 <__gethex+0x39e>
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d109      	bne.n	80077ca <__gethex+0x386>
 80077b6:	f01a 0f02 	tst.w	sl, #2
 80077ba:	d006      	beq.n	80077ca <__gethex+0x386>
 80077bc:	f8d9 0000 	ldr.w	r0, [r9]
 80077c0:	ea4a 0a00 	orr.w	sl, sl, r0
 80077c4:	f01a 0f01 	tst.w	sl, #1
 80077c8:	d10e      	bne.n	80077e8 <__gethex+0x3a4>
 80077ca:	f047 0710 	orr.w	r7, r7, #16
 80077ce:	e033      	b.n	8007838 <__gethex+0x3f4>
 80077d0:	f04f 0a01 	mov.w	sl, #1
 80077d4:	e7d0      	b.n	8007778 <__gethex+0x334>
 80077d6:	2701      	movs	r7, #1
 80077d8:	e7e2      	b.n	80077a0 <__gethex+0x35c>
 80077da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80077dc:	f1c3 0301 	rsb	r3, r3, #1
 80077e0:	9315      	str	r3, [sp, #84]	; 0x54
 80077e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d0f0      	beq.n	80077ca <__gethex+0x386>
 80077e8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80077ec:	f104 0314 	add.w	r3, r4, #20
 80077f0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80077f4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80077f8:	f04f 0c00 	mov.w	ip, #0
 80077fc:	4618      	mov	r0, r3
 80077fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8007802:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8007806:	d01c      	beq.n	8007842 <__gethex+0x3fe>
 8007808:	3201      	adds	r2, #1
 800780a:	6002      	str	r2, [r0, #0]
 800780c:	2f02      	cmp	r7, #2
 800780e:	f104 0314 	add.w	r3, r4, #20
 8007812:	d13f      	bne.n	8007894 <__gethex+0x450>
 8007814:	f8d8 2000 	ldr.w	r2, [r8]
 8007818:	3a01      	subs	r2, #1
 800781a:	42b2      	cmp	r2, r6
 800781c:	d10a      	bne.n	8007834 <__gethex+0x3f0>
 800781e:	1171      	asrs	r1, r6, #5
 8007820:	2201      	movs	r2, #1
 8007822:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007826:	f006 061f 	and.w	r6, r6, #31
 800782a:	fa02 f606 	lsl.w	r6, r2, r6
 800782e:	421e      	tst	r6, r3
 8007830:	bf18      	it	ne
 8007832:	4617      	movne	r7, r2
 8007834:	f047 0720 	orr.w	r7, r7, #32
 8007838:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800783a:	601c      	str	r4, [r3, #0]
 800783c:	9b04      	ldr	r3, [sp, #16]
 800783e:	601d      	str	r5, [r3, #0]
 8007840:	e695      	b.n	800756e <__gethex+0x12a>
 8007842:	4299      	cmp	r1, r3
 8007844:	f843 cc04 	str.w	ip, [r3, #-4]
 8007848:	d8d8      	bhi.n	80077fc <__gethex+0x3b8>
 800784a:	68a3      	ldr	r3, [r4, #8]
 800784c:	459b      	cmp	fp, r3
 800784e:	db19      	blt.n	8007884 <__gethex+0x440>
 8007850:	6861      	ldr	r1, [r4, #4]
 8007852:	ee18 0a10 	vmov	r0, s16
 8007856:	3101      	adds	r1, #1
 8007858:	f000 f93a 	bl	8007ad0 <_Balloc>
 800785c:	4681      	mov	r9, r0
 800785e:	b918      	cbnz	r0, 8007868 <__gethex+0x424>
 8007860:	4b1a      	ldr	r3, [pc, #104]	; (80078cc <__gethex+0x488>)
 8007862:	4602      	mov	r2, r0
 8007864:	2184      	movs	r1, #132	; 0x84
 8007866:	e6a8      	b.n	80075ba <__gethex+0x176>
 8007868:	6922      	ldr	r2, [r4, #16]
 800786a:	3202      	adds	r2, #2
 800786c:	f104 010c 	add.w	r1, r4, #12
 8007870:	0092      	lsls	r2, r2, #2
 8007872:	300c      	adds	r0, #12
 8007874:	f000 f91e 	bl	8007ab4 <memcpy>
 8007878:	4621      	mov	r1, r4
 800787a:	ee18 0a10 	vmov	r0, s16
 800787e:	f000 f967 	bl	8007b50 <_Bfree>
 8007882:	464c      	mov	r4, r9
 8007884:	6923      	ldr	r3, [r4, #16]
 8007886:	1c5a      	adds	r2, r3, #1
 8007888:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800788c:	6122      	str	r2, [r4, #16]
 800788e:	2201      	movs	r2, #1
 8007890:	615a      	str	r2, [r3, #20]
 8007892:	e7bb      	b.n	800780c <__gethex+0x3c8>
 8007894:	6922      	ldr	r2, [r4, #16]
 8007896:	455a      	cmp	r2, fp
 8007898:	dd0b      	ble.n	80078b2 <__gethex+0x46e>
 800789a:	2101      	movs	r1, #1
 800789c:	4620      	mov	r0, r4
 800789e:	f7ff fd69 	bl	8007374 <rshift>
 80078a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80078a6:	3501      	adds	r5, #1
 80078a8:	42ab      	cmp	r3, r5
 80078aa:	f6ff aed0 	blt.w	800764e <__gethex+0x20a>
 80078ae:	2701      	movs	r7, #1
 80078b0:	e7c0      	b.n	8007834 <__gethex+0x3f0>
 80078b2:	f016 061f 	ands.w	r6, r6, #31
 80078b6:	d0fa      	beq.n	80078ae <__gethex+0x46a>
 80078b8:	4453      	add	r3, sl
 80078ba:	f1c6 0620 	rsb	r6, r6, #32
 80078be:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80078c2:	f000 f9f7 	bl	8007cb4 <__hi0bits>
 80078c6:	42b0      	cmp	r0, r6
 80078c8:	dbe7      	blt.n	800789a <__gethex+0x456>
 80078ca:	e7f0      	b.n	80078ae <__gethex+0x46a>
 80078cc:	0800b0e0 	.word	0x0800b0e0

080078d0 <L_shift>:
 80078d0:	f1c2 0208 	rsb	r2, r2, #8
 80078d4:	0092      	lsls	r2, r2, #2
 80078d6:	b570      	push	{r4, r5, r6, lr}
 80078d8:	f1c2 0620 	rsb	r6, r2, #32
 80078dc:	6843      	ldr	r3, [r0, #4]
 80078de:	6804      	ldr	r4, [r0, #0]
 80078e0:	fa03 f506 	lsl.w	r5, r3, r6
 80078e4:	432c      	orrs	r4, r5
 80078e6:	40d3      	lsrs	r3, r2
 80078e8:	6004      	str	r4, [r0, #0]
 80078ea:	f840 3f04 	str.w	r3, [r0, #4]!
 80078ee:	4288      	cmp	r0, r1
 80078f0:	d3f4      	bcc.n	80078dc <L_shift+0xc>
 80078f2:	bd70      	pop	{r4, r5, r6, pc}

080078f4 <__match>:
 80078f4:	b530      	push	{r4, r5, lr}
 80078f6:	6803      	ldr	r3, [r0, #0]
 80078f8:	3301      	adds	r3, #1
 80078fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078fe:	b914      	cbnz	r4, 8007906 <__match+0x12>
 8007900:	6003      	str	r3, [r0, #0]
 8007902:	2001      	movs	r0, #1
 8007904:	bd30      	pop	{r4, r5, pc}
 8007906:	f813 2b01 	ldrb.w	r2, [r3], #1
 800790a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800790e:	2d19      	cmp	r5, #25
 8007910:	bf98      	it	ls
 8007912:	3220      	addls	r2, #32
 8007914:	42a2      	cmp	r2, r4
 8007916:	d0f0      	beq.n	80078fa <__match+0x6>
 8007918:	2000      	movs	r0, #0
 800791a:	e7f3      	b.n	8007904 <__match+0x10>

0800791c <__hexnan>:
 800791c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007920:	680b      	ldr	r3, [r1, #0]
 8007922:	115e      	asrs	r6, r3, #5
 8007924:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007928:	f013 031f 	ands.w	r3, r3, #31
 800792c:	b087      	sub	sp, #28
 800792e:	bf18      	it	ne
 8007930:	3604      	addne	r6, #4
 8007932:	2500      	movs	r5, #0
 8007934:	1f37      	subs	r7, r6, #4
 8007936:	4690      	mov	r8, r2
 8007938:	6802      	ldr	r2, [r0, #0]
 800793a:	9301      	str	r3, [sp, #4]
 800793c:	4682      	mov	sl, r0
 800793e:	f846 5c04 	str.w	r5, [r6, #-4]
 8007942:	46b9      	mov	r9, r7
 8007944:	463c      	mov	r4, r7
 8007946:	9502      	str	r5, [sp, #8]
 8007948:	46ab      	mov	fp, r5
 800794a:	7851      	ldrb	r1, [r2, #1]
 800794c:	1c53      	adds	r3, r2, #1
 800794e:	9303      	str	r3, [sp, #12]
 8007950:	b341      	cbz	r1, 80079a4 <__hexnan+0x88>
 8007952:	4608      	mov	r0, r1
 8007954:	9205      	str	r2, [sp, #20]
 8007956:	9104      	str	r1, [sp, #16]
 8007958:	f7ff fd5e 	bl	8007418 <__hexdig_fun>
 800795c:	2800      	cmp	r0, #0
 800795e:	d14f      	bne.n	8007a00 <__hexnan+0xe4>
 8007960:	9904      	ldr	r1, [sp, #16]
 8007962:	9a05      	ldr	r2, [sp, #20]
 8007964:	2920      	cmp	r1, #32
 8007966:	d818      	bhi.n	800799a <__hexnan+0x7e>
 8007968:	9b02      	ldr	r3, [sp, #8]
 800796a:	459b      	cmp	fp, r3
 800796c:	dd13      	ble.n	8007996 <__hexnan+0x7a>
 800796e:	454c      	cmp	r4, r9
 8007970:	d206      	bcs.n	8007980 <__hexnan+0x64>
 8007972:	2d07      	cmp	r5, #7
 8007974:	dc04      	bgt.n	8007980 <__hexnan+0x64>
 8007976:	462a      	mov	r2, r5
 8007978:	4649      	mov	r1, r9
 800797a:	4620      	mov	r0, r4
 800797c:	f7ff ffa8 	bl	80078d0 <L_shift>
 8007980:	4544      	cmp	r4, r8
 8007982:	d950      	bls.n	8007a26 <__hexnan+0x10a>
 8007984:	2300      	movs	r3, #0
 8007986:	f1a4 0904 	sub.w	r9, r4, #4
 800798a:	f844 3c04 	str.w	r3, [r4, #-4]
 800798e:	f8cd b008 	str.w	fp, [sp, #8]
 8007992:	464c      	mov	r4, r9
 8007994:	461d      	mov	r5, r3
 8007996:	9a03      	ldr	r2, [sp, #12]
 8007998:	e7d7      	b.n	800794a <__hexnan+0x2e>
 800799a:	2929      	cmp	r1, #41	; 0x29
 800799c:	d156      	bne.n	8007a4c <__hexnan+0x130>
 800799e:	3202      	adds	r2, #2
 80079a0:	f8ca 2000 	str.w	r2, [sl]
 80079a4:	f1bb 0f00 	cmp.w	fp, #0
 80079a8:	d050      	beq.n	8007a4c <__hexnan+0x130>
 80079aa:	454c      	cmp	r4, r9
 80079ac:	d206      	bcs.n	80079bc <__hexnan+0xa0>
 80079ae:	2d07      	cmp	r5, #7
 80079b0:	dc04      	bgt.n	80079bc <__hexnan+0xa0>
 80079b2:	462a      	mov	r2, r5
 80079b4:	4649      	mov	r1, r9
 80079b6:	4620      	mov	r0, r4
 80079b8:	f7ff ff8a 	bl	80078d0 <L_shift>
 80079bc:	4544      	cmp	r4, r8
 80079be:	d934      	bls.n	8007a2a <__hexnan+0x10e>
 80079c0:	f1a8 0204 	sub.w	r2, r8, #4
 80079c4:	4623      	mov	r3, r4
 80079c6:	f853 1b04 	ldr.w	r1, [r3], #4
 80079ca:	f842 1f04 	str.w	r1, [r2, #4]!
 80079ce:	429f      	cmp	r7, r3
 80079d0:	d2f9      	bcs.n	80079c6 <__hexnan+0xaa>
 80079d2:	1b3b      	subs	r3, r7, r4
 80079d4:	f023 0303 	bic.w	r3, r3, #3
 80079d8:	3304      	adds	r3, #4
 80079da:	3401      	adds	r4, #1
 80079dc:	3e03      	subs	r6, #3
 80079de:	42b4      	cmp	r4, r6
 80079e0:	bf88      	it	hi
 80079e2:	2304      	movhi	r3, #4
 80079e4:	4443      	add	r3, r8
 80079e6:	2200      	movs	r2, #0
 80079e8:	f843 2b04 	str.w	r2, [r3], #4
 80079ec:	429f      	cmp	r7, r3
 80079ee:	d2fb      	bcs.n	80079e8 <__hexnan+0xcc>
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	b91b      	cbnz	r3, 80079fc <__hexnan+0xe0>
 80079f4:	4547      	cmp	r7, r8
 80079f6:	d127      	bne.n	8007a48 <__hexnan+0x12c>
 80079f8:	2301      	movs	r3, #1
 80079fa:	603b      	str	r3, [r7, #0]
 80079fc:	2005      	movs	r0, #5
 80079fe:	e026      	b.n	8007a4e <__hexnan+0x132>
 8007a00:	3501      	adds	r5, #1
 8007a02:	2d08      	cmp	r5, #8
 8007a04:	f10b 0b01 	add.w	fp, fp, #1
 8007a08:	dd06      	ble.n	8007a18 <__hexnan+0xfc>
 8007a0a:	4544      	cmp	r4, r8
 8007a0c:	d9c3      	bls.n	8007996 <__hexnan+0x7a>
 8007a0e:	2300      	movs	r3, #0
 8007a10:	f844 3c04 	str.w	r3, [r4, #-4]
 8007a14:	2501      	movs	r5, #1
 8007a16:	3c04      	subs	r4, #4
 8007a18:	6822      	ldr	r2, [r4, #0]
 8007a1a:	f000 000f 	and.w	r0, r0, #15
 8007a1e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007a22:	6022      	str	r2, [r4, #0]
 8007a24:	e7b7      	b.n	8007996 <__hexnan+0x7a>
 8007a26:	2508      	movs	r5, #8
 8007a28:	e7b5      	b.n	8007996 <__hexnan+0x7a>
 8007a2a:	9b01      	ldr	r3, [sp, #4]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d0df      	beq.n	80079f0 <__hexnan+0xd4>
 8007a30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a34:	f1c3 0320 	rsb	r3, r3, #32
 8007a38:	fa22 f303 	lsr.w	r3, r2, r3
 8007a3c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007a40:	401a      	ands	r2, r3
 8007a42:	f846 2c04 	str.w	r2, [r6, #-4]
 8007a46:	e7d3      	b.n	80079f0 <__hexnan+0xd4>
 8007a48:	3f04      	subs	r7, #4
 8007a4a:	e7d1      	b.n	80079f0 <__hexnan+0xd4>
 8007a4c:	2004      	movs	r0, #4
 8007a4e:	b007      	add	sp, #28
 8007a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007a54 <_localeconv_r>:
 8007a54:	4800      	ldr	r0, [pc, #0]	; (8007a58 <_localeconv_r+0x4>)
 8007a56:	4770      	bx	lr
 8007a58:	20000174 	.word	0x20000174

08007a5c <_lseek_r>:
 8007a5c:	b538      	push	{r3, r4, r5, lr}
 8007a5e:	4d07      	ldr	r5, [pc, #28]	; (8007a7c <_lseek_r+0x20>)
 8007a60:	4604      	mov	r4, r0
 8007a62:	4608      	mov	r0, r1
 8007a64:	4611      	mov	r1, r2
 8007a66:	2200      	movs	r2, #0
 8007a68:	602a      	str	r2, [r5, #0]
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	f7fa fd5a 	bl	8002524 <_lseek>
 8007a70:	1c43      	adds	r3, r0, #1
 8007a72:	d102      	bne.n	8007a7a <_lseek_r+0x1e>
 8007a74:	682b      	ldr	r3, [r5, #0]
 8007a76:	b103      	cbz	r3, 8007a7a <_lseek_r+0x1e>
 8007a78:	6023      	str	r3, [r4, #0]
 8007a7a:	bd38      	pop	{r3, r4, r5, pc}
 8007a7c:	200007dc 	.word	0x200007dc

08007a80 <malloc>:
 8007a80:	4b02      	ldr	r3, [pc, #8]	; (8007a8c <malloc+0xc>)
 8007a82:	4601      	mov	r1, r0
 8007a84:	6818      	ldr	r0, [r3, #0]
 8007a86:	f000 bd67 	b.w	8008558 <_malloc_r>
 8007a8a:	bf00      	nop
 8007a8c:	2000001c 	.word	0x2000001c

08007a90 <__ascii_mbtowc>:
 8007a90:	b082      	sub	sp, #8
 8007a92:	b901      	cbnz	r1, 8007a96 <__ascii_mbtowc+0x6>
 8007a94:	a901      	add	r1, sp, #4
 8007a96:	b142      	cbz	r2, 8007aaa <__ascii_mbtowc+0x1a>
 8007a98:	b14b      	cbz	r3, 8007aae <__ascii_mbtowc+0x1e>
 8007a9a:	7813      	ldrb	r3, [r2, #0]
 8007a9c:	600b      	str	r3, [r1, #0]
 8007a9e:	7812      	ldrb	r2, [r2, #0]
 8007aa0:	1e10      	subs	r0, r2, #0
 8007aa2:	bf18      	it	ne
 8007aa4:	2001      	movne	r0, #1
 8007aa6:	b002      	add	sp, #8
 8007aa8:	4770      	bx	lr
 8007aaa:	4610      	mov	r0, r2
 8007aac:	e7fb      	b.n	8007aa6 <__ascii_mbtowc+0x16>
 8007aae:	f06f 0001 	mvn.w	r0, #1
 8007ab2:	e7f8      	b.n	8007aa6 <__ascii_mbtowc+0x16>

08007ab4 <memcpy>:
 8007ab4:	440a      	add	r2, r1
 8007ab6:	4291      	cmp	r1, r2
 8007ab8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007abc:	d100      	bne.n	8007ac0 <memcpy+0xc>
 8007abe:	4770      	bx	lr
 8007ac0:	b510      	push	{r4, lr}
 8007ac2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ac6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007aca:	4291      	cmp	r1, r2
 8007acc:	d1f9      	bne.n	8007ac2 <memcpy+0xe>
 8007ace:	bd10      	pop	{r4, pc}

08007ad0 <_Balloc>:
 8007ad0:	b570      	push	{r4, r5, r6, lr}
 8007ad2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007ad4:	4604      	mov	r4, r0
 8007ad6:	460d      	mov	r5, r1
 8007ad8:	b976      	cbnz	r6, 8007af8 <_Balloc+0x28>
 8007ada:	2010      	movs	r0, #16
 8007adc:	f7ff ffd0 	bl	8007a80 <malloc>
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	6260      	str	r0, [r4, #36]	; 0x24
 8007ae4:	b920      	cbnz	r0, 8007af0 <_Balloc+0x20>
 8007ae6:	4b18      	ldr	r3, [pc, #96]	; (8007b48 <_Balloc+0x78>)
 8007ae8:	4818      	ldr	r0, [pc, #96]	; (8007b4c <_Balloc+0x7c>)
 8007aea:	2166      	movs	r1, #102	; 0x66
 8007aec:	f001 fb5c 	bl	80091a8 <__assert_func>
 8007af0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007af4:	6006      	str	r6, [r0, #0]
 8007af6:	60c6      	str	r6, [r0, #12]
 8007af8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007afa:	68f3      	ldr	r3, [r6, #12]
 8007afc:	b183      	cbz	r3, 8007b20 <_Balloc+0x50>
 8007afe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b00:	68db      	ldr	r3, [r3, #12]
 8007b02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007b06:	b9b8      	cbnz	r0, 8007b38 <_Balloc+0x68>
 8007b08:	2101      	movs	r1, #1
 8007b0a:	fa01 f605 	lsl.w	r6, r1, r5
 8007b0e:	1d72      	adds	r2, r6, #5
 8007b10:	0092      	lsls	r2, r2, #2
 8007b12:	4620      	mov	r0, r4
 8007b14:	f000 fc9d 	bl	8008452 <_calloc_r>
 8007b18:	b160      	cbz	r0, 8007b34 <_Balloc+0x64>
 8007b1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007b1e:	e00e      	b.n	8007b3e <_Balloc+0x6e>
 8007b20:	2221      	movs	r2, #33	; 0x21
 8007b22:	2104      	movs	r1, #4
 8007b24:	4620      	mov	r0, r4
 8007b26:	f000 fc94 	bl	8008452 <_calloc_r>
 8007b2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b2c:	60f0      	str	r0, [r6, #12]
 8007b2e:	68db      	ldr	r3, [r3, #12]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d1e4      	bne.n	8007afe <_Balloc+0x2e>
 8007b34:	2000      	movs	r0, #0
 8007b36:	bd70      	pop	{r4, r5, r6, pc}
 8007b38:	6802      	ldr	r2, [r0, #0]
 8007b3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007b3e:	2300      	movs	r3, #0
 8007b40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007b44:	e7f7      	b.n	8007b36 <_Balloc+0x66>
 8007b46:	bf00      	nop
 8007b48:	0800b06e 	.word	0x0800b06e
 8007b4c:	0800b16c 	.word	0x0800b16c

08007b50 <_Bfree>:
 8007b50:	b570      	push	{r4, r5, r6, lr}
 8007b52:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007b54:	4605      	mov	r5, r0
 8007b56:	460c      	mov	r4, r1
 8007b58:	b976      	cbnz	r6, 8007b78 <_Bfree+0x28>
 8007b5a:	2010      	movs	r0, #16
 8007b5c:	f7ff ff90 	bl	8007a80 <malloc>
 8007b60:	4602      	mov	r2, r0
 8007b62:	6268      	str	r0, [r5, #36]	; 0x24
 8007b64:	b920      	cbnz	r0, 8007b70 <_Bfree+0x20>
 8007b66:	4b09      	ldr	r3, [pc, #36]	; (8007b8c <_Bfree+0x3c>)
 8007b68:	4809      	ldr	r0, [pc, #36]	; (8007b90 <_Bfree+0x40>)
 8007b6a:	218a      	movs	r1, #138	; 0x8a
 8007b6c:	f001 fb1c 	bl	80091a8 <__assert_func>
 8007b70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b74:	6006      	str	r6, [r0, #0]
 8007b76:	60c6      	str	r6, [r0, #12]
 8007b78:	b13c      	cbz	r4, 8007b8a <_Bfree+0x3a>
 8007b7a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007b7c:	6862      	ldr	r2, [r4, #4]
 8007b7e:	68db      	ldr	r3, [r3, #12]
 8007b80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007b84:	6021      	str	r1, [r4, #0]
 8007b86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007b8a:	bd70      	pop	{r4, r5, r6, pc}
 8007b8c:	0800b06e 	.word	0x0800b06e
 8007b90:	0800b16c 	.word	0x0800b16c

08007b94 <__multadd>:
 8007b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b98:	690d      	ldr	r5, [r1, #16]
 8007b9a:	4607      	mov	r7, r0
 8007b9c:	460c      	mov	r4, r1
 8007b9e:	461e      	mov	r6, r3
 8007ba0:	f101 0c14 	add.w	ip, r1, #20
 8007ba4:	2000      	movs	r0, #0
 8007ba6:	f8dc 3000 	ldr.w	r3, [ip]
 8007baa:	b299      	uxth	r1, r3
 8007bac:	fb02 6101 	mla	r1, r2, r1, r6
 8007bb0:	0c1e      	lsrs	r6, r3, #16
 8007bb2:	0c0b      	lsrs	r3, r1, #16
 8007bb4:	fb02 3306 	mla	r3, r2, r6, r3
 8007bb8:	b289      	uxth	r1, r1
 8007bba:	3001      	adds	r0, #1
 8007bbc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007bc0:	4285      	cmp	r5, r0
 8007bc2:	f84c 1b04 	str.w	r1, [ip], #4
 8007bc6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007bca:	dcec      	bgt.n	8007ba6 <__multadd+0x12>
 8007bcc:	b30e      	cbz	r6, 8007c12 <__multadd+0x7e>
 8007bce:	68a3      	ldr	r3, [r4, #8]
 8007bd0:	42ab      	cmp	r3, r5
 8007bd2:	dc19      	bgt.n	8007c08 <__multadd+0x74>
 8007bd4:	6861      	ldr	r1, [r4, #4]
 8007bd6:	4638      	mov	r0, r7
 8007bd8:	3101      	adds	r1, #1
 8007bda:	f7ff ff79 	bl	8007ad0 <_Balloc>
 8007bde:	4680      	mov	r8, r0
 8007be0:	b928      	cbnz	r0, 8007bee <__multadd+0x5a>
 8007be2:	4602      	mov	r2, r0
 8007be4:	4b0c      	ldr	r3, [pc, #48]	; (8007c18 <__multadd+0x84>)
 8007be6:	480d      	ldr	r0, [pc, #52]	; (8007c1c <__multadd+0x88>)
 8007be8:	21b5      	movs	r1, #181	; 0xb5
 8007bea:	f001 fadd 	bl	80091a8 <__assert_func>
 8007bee:	6922      	ldr	r2, [r4, #16]
 8007bf0:	3202      	adds	r2, #2
 8007bf2:	f104 010c 	add.w	r1, r4, #12
 8007bf6:	0092      	lsls	r2, r2, #2
 8007bf8:	300c      	adds	r0, #12
 8007bfa:	f7ff ff5b 	bl	8007ab4 <memcpy>
 8007bfe:	4621      	mov	r1, r4
 8007c00:	4638      	mov	r0, r7
 8007c02:	f7ff ffa5 	bl	8007b50 <_Bfree>
 8007c06:	4644      	mov	r4, r8
 8007c08:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007c0c:	3501      	adds	r5, #1
 8007c0e:	615e      	str	r6, [r3, #20]
 8007c10:	6125      	str	r5, [r4, #16]
 8007c12:	4620      	mov	r0, r4
 8007c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c18:	0800b0e0 	.word	0x0800b0e0
 8007c1c:	0800b16c 	.word	0x0800b16c

08007c20 <__s2b>:
 8007c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c24:	460c      	mov	r4, r1
 8007c26:	4615      	mov	r5, r2
 8007c28:	461f      	mov	r7, r3
 8007c2a:	2209      	movs	r2, #9
 8007c2c:	3308      	adds	r3, #8
 8007c2e:	4606      	mov	r6, r0
 8007c30:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c34:	2100      	movs	r1, #0
 8007c36:	2201      	movs	r2, #1
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	db09      	blt.n	8007c50 <__s2b+0x30>
 8007c3c:	4630      	mov	r0, r6
 8007c3e:	f7ff ff47 	bl	8007ad0 <_Balloc>
 8007c42:	b940      	cbnz	r0, 8007c56 <__s2b+0x36>
 8007c44:	4602      	mov	r2, r0
 8007c46:	4b19      	ldr	r3, [pc, #100]	; (8007cac <__s2b+0x8c>)
 8007c48:	4819      	ldr	r0, [pc, #100]	; (8007cb0 <__s2b+0x90>)
 8007c4a:	21ce      	movs	r1, #206	; 0xce
 8007c4c:	f001 faac 	bl	80091a8 <__assert_func>
 8007c50:	0052      	lsls	r2, r2, #1
 8007c52:	3101      	adds	r1, #1
 8007c54:	e7f0      	b.n	8007c38 <__s2b+0x18>
 8007c56:	9b08      	ldr	r3, [sp, #32]
 8007c58:	6143      	str	r3, [r0, #20]
 8007c5a:	2d09      	cmp	r5, #9
 8007c5c:	f04f 0301 	mov.w	r3, #1
 8007c60:	6103      	str	r3, [r0, #16]
 8007c62:	dd16      	ble.n	8007c92 <__s2b+0x72>
 8007c64:	f104 0909 	add.w	r9, r4, #9
 8007c68:	46c8      	mov	r8, r9
 8007c6a:	442c      	add	r4, r5
 8007c6c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007c70:	4601      	mov	r1, r0
 8007c72:	3b30      	subs	r3, #48	; 0x30
 8007c74:	220a      	movs	r2, #10
 8007c76:	4630      	mov	r0, r6
 8007c78:	f7ff ff8c 	bl	8007b94 <__multadd>
 8007c7c:	45a0      	cmp	r8, r4
 8007c7e:	d1f5      	bne.n	8007c6c <__s2b+0x4c>
 8007c80:	f1a5 0408 	sub.w	r4, r5, #8
 8007c84:	444c      	add	r4, r9
 8007c86:	1b2d      	subs	r5, r5, r4
 8007c88:	1963      	adds	r3, r4, r5
 8007c8a:	42bb      	cmp	r3, r7
 8007c8c:	db04      	blt.n	8007c98 <__s2b+0x78>
 8007c8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c92:	340a      	adds	r4, #10
 8007c94:	2509      	movs	r5, #9
 8007c96:	e7f6      	b.n	8007c86 <__s2b+0x66>
 8007c98:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007c9c:	4601      	mov	r1, r0
 8007c9e:	3b30      	subs	r3, #48	; 0x30
 8007ca0:	220a      	movs	r2, #10
 8007ca2:	4630      	mov	r0, r6
 8007ca4:	f7ff ff76 	bl	8007b94 <__multadd>
 8007ca8:	e7ee      	b.n	8007c88 <__s2b+0x68>
 8007caa:	bf00      	nop
 8007cac:	0800b0e0 	.word	0x0800b0e0
 8007cb0:	0800b16c 	.word	0x0800b16c

08007cb4 <__hi0bits>:
 8007cb4:	0c03      	lsrs	r3, r0, #16
 8007cb6:	041b      	lsls	r3, r3, #16
 8007cb8:	b9d3      	cbnz	r3, 8007cf0 <__hi0bits+0x3c>
 8007cba:	0400      	lsls	r0, r0, #16
 8007cbc:	2310      	movs	r3, #16
 8007cbe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007cc2:	bf04      	itt	eq
 8007cc4:	0200      	lsleq	r0, r0, #8
 8007cc6:	3308      	addeq	r3, #8
 8007cc8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007ccc:	bf04      	itt	eq
 8007cce:	0100      	lsleq	r0, r0, #4
 8007cd0:	3304      	addeq	r3, #4
 8007cd2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007cd6:	bf04      	itt	eq
 8007cd8:	0080      	lsleq	r0, r0, #2
 8007cda:	3302      	addeq	r3, #2
 8007cdc:	2800      	cmp	r0, #0
 8007cde:	db05      	blt.n	8007cec <__hi0bits+0x38>
 8007ce0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007ce4:	f103 0301 	add.w	r3, r3, #1
 8007ce8:	bf08      	it	eq
 8007cea:	2320      	moveq	r3, #32
 8007cec:	4618      	mov	r0, r3
 8007cee:	4770      	bx	lr
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	e7e4      	b.n	8007cbe <__hi0bits+0xa>

08007cf4 <__lo0bits>:
 8007cf4:	6803      	ldr	r3, [r0, #0]
 8007cf6:	f013 0207 	ands.w	r2, r3, #7
 8007cfa:	4601      	mov	r1, r0
 8007cfc:	d00b      	beq.n	8007d16 <__lo0bits+0x22>
 8007cfe:	07da      	lsls	r2, r3, #31
 8007d00:	d423      	bmi.n	8007d4a <__lo0bits+0x56>
 8007d02:	0798      	lsls	r0, r3, #30
 8007d04:	bf49      	itett	mi
 8007d06:	085b      	lsrmi	r3, r3, #1
 8007d08:	089b      	lsrpl	r3, r3, #2
 8007d0a:	2001      	movmi	r0, #1
 8007d0c:	600b      	strmi	r3, [r1, #0]
 8007d0e:	bf5c      	itt	pl
 8007d10:	600b      	strpl	r3, [r1, #0]
 8007d12:	2002      	movpl	r0, #2
 8007d14:	4770      	bx	lr
 8007d16:	b298      	uxth	r0, r3
 8007d18:	b9a8      	cbnz	r0, 8007d46 <__lo0bits+0x52>
 8007d1a:	0c1b      	lsrs	r3, r3, #16
 8007d1c:	2010      	movs	r0, #16
 8007d1e:	b2da      	uxtb	r2, r3
 8007d20:	b90a      	cbnz	r2, 8007d26 <__lo0bits+0x32>
 8007d22:	3008      	adds	r0, #8
 8007d24:	0a1b      	lsrs	r3, r3, #8
 8007d26:	071a      	lsls	r2, r3, #28
 8007d28:	bf04      	itt	eq
 8007d2a:	091b      	lsreq	r3, r3, #4
 8007d2c:	3004      	addeq	r0, #4
 8007d2e:	079a      	lsls	r2, r3, #30
 8007d30:	bf04      	itt	eq
 8007d32:	089b      	lsreq	r3, r3, #2
 8007d34:	3002      	addeq	r0, #2
 8007d36:	07da      	lsls	r2, r3, #31
 8007d38:	d403      	bmi.n	8007d42 <__lo0bits+0x4e>
 8007d3a:	085b      	lsrs	r3, r3, #1
 8007d3c:	f100 0001 	add.w	r0, r0, #1
 8007d40:	d005      	beq.n	8007d4e <__lo0bits+0x5a>
 8007d42:	600b      	str	r3, [r1, #0]
 8007d44:	4770      	bx	lr
 8007d46:	4610      	mov	r0, r2
 8007d48:	e7e9      	b.n	8007d1e <__lo0bits+0x2a>
 8007d4a:	2000      	movs	r0, #0
 8007d4c:	4770      	bx	lr
 8007d4e:	2020      	movs	r0, #32
 8007d50:	4770      	bx	lr
	...

08007d54 <__i2b>:
 8007d54:	b510      	push	{r4, lr}
 8007d56:	460c      	mov	r4, r1
 8007d58:	2101      	movs	r1, #1
 8007d5a:	f7ff feb9 	bl	8007ad0 <_Balloc>
 8007d5e:	4602      	mov	r2, r0
 8007d60:	b928      	cbnz	r0, 8007d6e <__i2b+0x1a>
 8007d62:	4b05      	ldr	r3, [pc, #20]	; (8007d78 <__i2b+0x24>)
 8007d64:	4805      	ldr	r0, [pc, #20]	; (8007d7c <__i2b+0x28>)
 8007d66:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007d6a:	f001 fa1d 	bl	80091a8 <__assert_func>
 8007d6e:	2301      	movs	r3, #1
 8007d70:	6144      	str	r4, [r0, #20]
 8007d72:	6103      	str	r3, [r0, #16]
 8007d74:	bd10      	pop	{r4, pc}
 8007d76:	bf00      	nop
 8007d78:	0800b0e0 	.word	0x0800b0e0
 8007d7c:	0800b16c 	.word	0x0800b16c

08007d80 <__multiply>:
 8007d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d84:	4691      	mov	r9, r2
 8007d86:	690a      	ldr	r2, [r1, #16]
 8007d88:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	bfb8      	it	lt
 8007d90:	460b      	movlt	r3, r1
 8007d92:	460c      	mov	r4, r1
 8007d94:	bfbc      	itt	lt
 8007d96:	464c      	movlt	r4, r9
 8007d98:	4699      	movlt	r9, r3
 8007d9a:	6927      	ldr	r7, [r4, #16]
 8007d9c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007da0:	68a3      	ldr	r3, [r4, #8]
 8007da2:	6861      	ldr	r1, [r4, #4]
 8007da4:	eb07 060a 	add.w	r6, r7, sl
 8007da8:	42b3      	cmp	r3, r6
 8007daa:	b085      	sub	sp, #20
 8007dac:	bfb8      	it	lt
 8007dae:	3101      	addlt	r1, #1
 8007db0:	f7ff fe8e 	bl	8007ad0 <_Balloc>
 8007db4:	b930      	cbnz	r0, 8007dc4 <__multiply+0x44>
 8007db6:	4602      	mov	r2, r0
 8007db8:	4b44      	ldr	r3, [pc, #272]	; (8007ecc <__multiply+0x14c>)
 8007dba:	4845      	ldr	r0, [pc, #276]	; (8007ed0 <__multiply+0x150>)
 8007dbc:	f240 115d 	movw	r1, #349	; 0x15d
 8007dc0:	f001 f9f2 	bl	80091a8 <__assert_func>
 8007dc4:	f100 0514 	add.w	r5, r0, #20
 8007dc8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007dcc:	462b      	mov	r3, r5
 8007dce:	2200      	movs	r2, #0
 8007dd0:	4543      	cmp	r3, r8
 8007dd2:	d321      	bcc.n	8007e18 <__multiply+0x98>
 8007dd4:	f104 0314 	add.w	r3, r4, #20
 8007dd8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007ddc:	f109 0314 	add.w	r3, r9, #20
 8007de0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007de4:	9202      	str	r2, [sp, #8]
 8007de6:	1b3a      	subs	r2, r7, r4
 8007de8:	3a15      	subs	r2, #21
 8007dea:	f022 0203 	bic.w	r2, r2, #3
 8007dee:	3204      	adds	r2, #4
 8007df0:	f104 0115 	add.w	r1, r4, #21
 8007df4:	428f      	cmp	r7, r1
 8007df6:	bf38      	it	cc
 8007df8:	2204      	movcc	r2, #4
 8007dfa:	9201      	str	r2, [sp, #4]
 8007dfc:	9a02      	ldr	r2, [sp, #8]
 8007dfe:	9303      	str	r3, [sp, #12]
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d80c      	bhi.n	8007e1e <__multiply+0x9e>
 8007e04:	2e00      	cmp	r6, #0
 8007e06:	dd03      	ble.n	8007e10 <__multiply+0x90>
 8007e08:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d05a      	beq.n	8007ec6 <__multiply+0x146>
 8007e10:	6106      	str	r6, [r0, #16]
 8007e12:	b005      	add	sp, #20
 8007e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e18:	f843 2b04 	str.w	r2, [r3], #4
 8007e1c:	e7d8      	b.n	8007dd0 <__multiply+0x50>
 8007e1e:	f8b3 a000 	ldrh.w	sl, [r3]
 8007e22:	f1ba 0f00 	cmp.w	sl, #0
 8007e26:	d024      	beq.n	8007e72 <__multiply+0xf2>
 8007e28:	f104 0e14 	add.w	lr, r4, #20
 8007e2c:	46a9      	mov	r9, r5
 8007e2e:	f04f 0c00 	mov.w	ip, #0
 8007e32:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007e36:	f8d9 1000 	ldr.w	r1, [r9]
 8007e3a:	fa1f fb82 	uxth.w	fp, r2
 8007e3e:	b289      	uxth	r1, r1
 8007e40:	fb0a 110b 	mla	r1, sl, fp, r1
 8007e44:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007e48:	f8d9 2000 	ldr.w	r2, [r9]
 8007e4c:	4461      	add	r1, ip
 8007e4e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007e52:	fb0a c20b 	mla	r2, sl, fp, ip
 8007e56:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007e5a:	b289      	uxth	r1, r1
 8007e5c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007e60:	4577      	cmp	r7, lr
 8007e62:	f849 1b04 	str.w	r1, [r9], #4
 8007e66:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007e6a:	d8e2      	bhi.n	8007e32 <__multiply+0xb2>
 8007e6c:	9a01      	ldr	r2, [sp, #4]
 8007e6e:	f845 c002 	str.w	ip, [r5, r2]
 8007e72:	9a03      	ldr	r2, [sp, #12]
 8007e74:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007e78:	3304      	adds	r3, #4
 8007e7a:	f1b9 0f00 	cmp.w	r9, #0
 8007e7e:	d020      	beq.n	8007ec2 <__multiply+0x142>
 8007e80:	6829      	ldr	r1, [r5, #0]
 8007e82:	f104 0c14 	add.w	ip, r4, #20
 8007e86:	46ae      	mov	lr, r5
 8007e88:	f04f 0a00 	mov.w	sl, #0
 8007e8c:	f8bc b000 	ldrh.w	fp, [ip]
 8007e90:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007e94:	fb09 220b 	mla	r2, r9, fp, r2
 8007e98:	4492      	add	sl, r2
 8007e9a:	b289      	uxth	r1, r1
 8007e9c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007ea0:	f84e 1b04 	str.w	r1, [lr], #4
 8007ea4:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007ea8:	f8be 1000 	ldrh.w	r1, [lr]
 8007eac:	0c12      	lsrs	r2, r2, #16
 8007eae:	fb09 1102 	mla	r1, r9, r2, r1
 8007eb2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007eb6:	4567      	cmp	r7, ip
 8007eb8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007ebc:	d8e6      	bhi.n	8007e8c <__multiply+0x10c>
 8007ebe:	9a01      	ldr	r2, [sp, #4]
 8007ec0:	50a9      	str	r1, [r5, r2]
 8007ec2:	3504      	adds	r5, #4
 8007ec4:	e79a      	b.n	8007dfc <__multiply+0x7c>
 8007ec6:	3e01      	subs	r6, #1
 8007ec8:	e79c      	b.n	8007e04 <__multiply+0x84>
 8007eca:	bf00      	nop
 8007ecc:	0800b0e0 	.word	0x0800b0e0
 8007ed0:	0800b16c 	.word	0x0800b16c

08007ed4 <__pow5mult>:
 8007ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ed8:	4615      	mov	r5, r2
 8007eda:	f012 0203 	ands.w	r2, r2, #3
 8007ede:	4606      	mov	r6, r0
 8007ee0:	460f      	mov	r7, r1
 8007ee2:	d007      	beq.n	8007ef4 <__pow5mult+0x20>
 8007ee4:	4c25      	ldr	r4, [pc, #148]	; (8007f7c <__pow5mult+0xa8>)
 8007ee6:	3a01      	subs	r2, #1
 8007ee8:	2300      	movs	r3, #0
 8007eea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007eee:	f7ff fe51 	bl	8007b94 <__multadd>
 8007ef2:	4607      	mov	r7, r0
 8007ef4:	10ad      	asrs	r5, r5, #2
 8007ef6:	d03d      	beq.n	8007f74 <__pow5mult+0xa0>
 8007ef8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007efa:	b97c      	cbnz	r4, 8007f1c <__pow5mult+0x48>
 8007efc:	2010      	movs	r0, #16
 8007efe:	f7ff fdbf 	bl	8007a80 <malloc>
 8007f02:	4602      	mov	r2, r0
 8007f04:	6270      	str	r0, [r6, #36]	; 0x24
 8007f06:	b928      	cbnz	r0, 8007f14 <__pow5mult+0x40>
 8007f08:	4b1d      	ldr	r3, [pc, #116]	; (8007f80 <__pow5mult+0xac>)
 8007f0a:	481e      	ldr	r0, [pc, #120]	; (8007f84 <__pow5mult+0xb0>)
 8007f0c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007f10:	f001 f94a 	bl	80091a8 <__assert_func>
 8007f14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007f18:	6004      	str	r4, [r0, #0]
 8007f1a:	60c4      	str	r4, [r0, #12]
 8007f1c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007f20:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007f24:	b94c      	cbnz	r4, 8007f3a <__pow5mult+0x66>
 8007f26:	f240 2171 	movw	r1, #625	; 0x271
 8007f2a:	4630      	mov	r0, r6
 8007f2c:	f7ff ff12 	bl	8007d54 <__i2b>
 8007f30:	2300      	movs	r3, #0
 8007f32:	f8c8 0008 	str.w	r0, [r8, #8]
 8007f36:	4604      	mov	r4, r0
 8007f38:	6003      	str	r3, [r0, #0]
 8007f3a:	f04f 0900 	mov.w	r9, #0
 8007f3e:	07eb      	lsls	r3, r5, #31
 8007f40:	d50a      	bpl.n	8007f58 <__pow5mult+0x84>
 8007f42:	4639      	mov	r1, r7
 8007f44:	4622      	mov	r2, r4
 8007f46:	4630      	mov	r0, r6
 8007f48:	f7ff ff1a 	bl	8007d80 <__multiply>
 8007f4c:	4639      	mov	r1, r7
 8007f4e:	4680      	mov	r8, r0
 8007f50:	4630      	mov	r0, r6
 8007f52:	f7ff fdfd 	bl	8007b50 <_Bfree>
 8007f56:	4647      	mov	r7, r8
 8007f58:	106d      	asrs	r5, r5, #1
 8007f5a:	d00b      	beq.n	8007f74 <__pow5mult+0xa0>
 8007f5c:	6820      	ldr	r0, [r4, #0]
 8007f5e:	b938      	cbnz	r0, 8007f70 <__pow5mult+0x9c>
 8007f60:	4622      	mov	r2, r4
 8007f62:	4621      	mov	r1, r4
 8007f64:	4630      	mov	r0, r6
 8007f66:	f7ff ff0b 	bl	8007d80 <__multiply>
 8007f6a:	6020      	str	r0, [r4, #0]
 8007f6c:	f8c0 9000 	str.w	r9, [r0]
 8007f70:	4604      	mov	r4, r0
 8007f72:	e7e4      	b.n	8007f3e <__pow5mult+0x6a>
 8007f74:	4638      	mov	r0, r7
 8007f76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f7a:	bf00      	nop
 8007f7c:	0800b2b8 	.word	0x0800b2b8
 8007f80:	0800b06e 	.word	0x0800b06e
 8007f84:	0800b16c 	.word	0x0800b16c

08007f88 <__lshift>:
 8007f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f8c:	460c      	mov	r4, r1
 8007f8e:	6849      	ldr	r1, [r1, #4]
 8007f90:	6923      	ldr	r3, [r4, #16]
 8007f92:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007f96:	68a3      	ldr	r3, [r4, #8]
 8007f98:	4607      	mov	r7, r0
 8007f9a:	4691      	mov	r9, r2
 8007f9c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007fa0:	f108 0601 	add.w	r6, r8, #1
 8007fa4:	42b3      	cmp	r3, r6
 8007fa6:	db0b      	blt.n	8007fc0 <__lshift+0x38>
 8007fa8:	4638      	mov	r0, r7
 8007faa:	f7ff fd91 	bl	8007ad0 <_Balloc>
 8007fae:	4605      	mov	r5, r0
 8007fb0:	b948      	cbnz	r0, 8007fc6 <__lshift+0x3e>
 8007fb2:	4602      	mov	r2, r0
 8007fb4:	4b2a      	ldr	r3, [pc, #168]	; (8008060 <__lshift+0xd8>)
 8007fb6:	482b      	ldr	r0, [pc, #172]	; (8008064 <__lshift+0xdc>)
 8007fb8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007fbc:	f001 f8f4 	bl	80091a8 <__assert_func>
 8007fc0:	3101      	adds	r1, #1
 8007fc2:	005b      	lsls	r3, r3, #1
 8007fc4:	e7ee      	b.n	8007fa4 <__lshift+0x1c>
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	f100 0114 	add.w	r1, r0, #20
 8007fcc:	f100 0210 	add.w	r2, r0, #16
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	4553      	cmp	r3, sl
 8007fd4:	db37      	blt.n	8008046 <__lshift+0xbe>
 8007fd6:	6920      	ldr	r0, [r4, #16]
 8007fd8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007fdc:	f104 0314 	add.w	r3, r4, #20
 8007fe0:	f019 091f 	ands.w	r9, r9, #31
 8007fe4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007fe8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007fec:	d02f      	beq.n	800804e <__lshift+0xc6>
 8007fee:	f1c9 0e20 	rsb	lr, r9, #32
 8007ff2:	468a      	mov	sl, r1
 8007ff4:	f04f 0c00 	mov.w	ip, #0
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	fa02 f209 	lsl.w	r2, r2, r9
 8007ffe:	ea42 020c 	orr.w	r2, r2, ip
 8008002:	f84a 2b04 	str.w	r2, [sl], #4
 8008006:	f853 2b04 	ldr.w	r2, [r3], #4
 800800a:	4298      	cmp	r0, r3
 800800c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008010:	d8f2      	bhi.n	8007ff8 <__lshift+0x70>
 8008012:	1b03      	subs	r3, r0, r4
 8008014:	3b15      	subs	r3, #21
 8008016:	f023 0303 	bic.w	r3, r3, #3
 800801a:	3304      	adds	r3, #4
 800801c:	f104 0215 	add.w	r2, r4, #21
 8008020:	4290      	cmp	r0, r2
 8008022:	bf38      	it	cc
 8008024:	2304      	movcc	r3, #4
 8008026:	f841 c003 	str.w	ip, [r1, r3]
 800802a:	f1bc 0f00 	cmp.w	ip, #0
 800802e:	d001      	beq.n	8008034 <__lshift+0xac>
 8008030:	f108 0602 	add.w	r6, r8, #2
 8008034:	3e01      	subs	r6, #1
 8008036:	4638      	mov	r0, r7
 8008038:	612e      	str	r6, [r5, #16]
 800803a:	4621      	mov	r1, r4
 800803c:	f7ff fd88 	bl	8007b50 <_Bfree>
 8008040:	4628      	mov	r0, r5
 8008042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008046:	f842 0f04 	str.w	r0, [r2, #4]!
 800804a:	3301      	adds	r3, #1
 800804c:	e7c1      	b.n	8007fd2 <__lshift+0x4a>
 800804e:	3904      	subs	r1, #4
 8008050:	f853 2b04 	ldr.w	r2, [r3], #4
 8008054:	f841 2f04 	str.w	r2, [r1, #4]!
 8008058:	4298      	cmp	r0, r3
 800805a:	d8f9      	bhi.n	8008050 <__lshift+0xc8>
 800805c:	e7ea      	b.n	8008034 <__lshift+0xac>
 800805e:	bf00      	nop
 8008060:	0800b0e0 	.word	0x0800b0e0
 8008064:	0800b16c 	.word	0x0800b16c

08008068 <__mcmp>:
 8008068:	b530      	push	{r4, r5, lr}
 800806a:	6902      	ldr	r2, [r0, #16]
 800806c:	690c      	ldr	r4, [r1, #16]
 800806e:	1b12      	subs	r2, r2, r4
 8008070:	d10e      	bne.n	8008090 <__mcmp+0x28>
 8008072:	f100 0314 	add.w	r3, r0, #20
 8008076:	3114      	adds	r1, #20
 8008078:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800807c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008080:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008084:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008088:	42a5      	cmp	r5, r4
 800808a:	d003      	beq.n	8008094 <__mcmp+0x2c>
 800808c:	d305      	bcc.n	800809a <__mcmp+0x32>
 800808e:	2201      	movs	r2, #1
 8008090:	4610      	mov	r0, r2
 8008092:	bd30      	pop	{r4, r5, pc}
 8008094:	4283      	cmp	r3, r0
 8008096:	d3f3      	bcc.n	8008080 <__mcmp+0x18>
 8008098:	e7fa      	b.n	8008090 <__mcmp+0x28>
 800809a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800809e:	e7f7      	b.n	8008090 <__mcmp+0x28>

080080a0 <__mdiff>:
 80080a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080a4:	460c      	mov	r4, r1
 80080a6:	4606      	mov	r6, r0
 80080a8:	4611      	mov	r1, r2
 80080aa:	4620      	mov	r0, r4
 80080ac:	4690      	mov	r8, r2
 80080ae:	f7ff ffdb 	bl	8008068 <__mcmp>
 80080b2:	1e05      	subs	r5, r0, #0
 80080b4:	d110      	bne.n	80080d8 <__mdiff+0x38>
 80080b6:	4629      	mov	r1, r5
 80080b8:	4630      	mov	r0, r6
 80080ba:	f7ff fd09 	bl	8007ad0 <_Balloc>
 80080be:	b930      	cbnz	r0, 80080ce <__mdiff+0x2e>
 80080c0:	4b3a      	ldr	r3, [pc, #232]	; (80081ac <__mdiff+0x10c>)
 80080c2:	4602      	mov	r2, r0
 80080c4:	f240 2132 	movw	r1, #562	; 0x232
 80080c8:	4839      	ldr	r0, [pc, #228]	; (80081b0 <__mdiff+0x110>)
 80080ca:	f001 f86d 	bl	80091a8 <__assert_func>
 80080ce:	2301      	movs	r3, #1
 80080d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80080d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080d8:	bfa4      	itt	ge
 80080da:	4643      	movge	r3, r8
 80080dc:	46a0      	movge	r8, r4
 80080de:	4630      	mov	r0, r6
 80080e0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80080e4:	bfa6      	itte	ge
 80080e6:	461c      	movge	r4, r3
 80080e8:	2500      	movge	r5, #0
 80080ea:	2501      	movlt	r5, #1
 80080ec:	f7ff fcf0 	bl	8007ad0 <_Balloc>
 80080f0:	b920      	cbnz	r0, 80080fc <__mdiff+0x5c>
 80080f2:	4b2e      	ldr	r3, [pc, #184]	; (80081ac <__mdiff+0x10c>)
 80080f4:	4602      	mov	r2, r0
 80080f6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80080fa:	e7e5      	b.n	80080c8 <__mdiff+0x28>
 80080fc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008100:	6926      	ldr	r6, [r4, #16]
 8008102:	60c5      	str	r5, [r0, #12]
 8008104:	f104 0914 	add.w	r9, r4, #20
 8008108:	f108 0514 	add.w	r5, r8, #20
 800810c:	f100 0e14 	add.w	lr, r0, #20
 8008110:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008114:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008118:	f108 0210 	add.w	r2, r8, #16
 800811c:	46f2      	mov	sl, lr
 800811e:	2100      	movs	r1, #0
 8008120:	f859 3b04 	ldr.w	r3, [r9], #4
 8008124:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008128:	fa1f f883 	uxth.w	r8, r3
 800812c:	fa11 f18b 	uxtah	r1, r1, fp
 8008130:	0c1b      	lsrs	r3, r3, #16
 8008132:	eba1 0808 	sub.w	r8, r1, r8
 8008136:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800813a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800813e:	fa1f f888 	uxth.w	r8, r8
 8008142:	1419      	asrs	r1, r3, #16
 8008144:	454e      	cmp	r6, r9
 8008146:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800814a:	f84a 3b04 	str.w	r3, [sl], #4
 800814e:	d8e7      	bhi.n	8008120 <__mdiff+0x80>
 8008150:	1b33      	subs	r3, r6, r4
 8008152:	3b15      	subs	r3, #21
 8008154:	f023 0303 	bic.w	r3, r3, #3
 8008158:	3304      	adds	r3, #4
 800815a:	3415      	adds	r4, #21
 800815c:	42a6      	cmp	r6, r4
 800815e:	bf38      	it	cc
 8008160:	2304      	movcc	r3, #4
 8008162:	441d      	add	r5, r3
 8008164:	4473      	add	r3, lr
 8008166:	469e      	mov	lr, r3
 8008168:	462e      	mov	r6, r5
 800816a:	4566      	cmp	r6, ip
 800816c:	d30e      	bcc.n	800818c <__mdiff+0xec>
 800816e:	f10c 0203 	add.w	r2, ip, #3
 8008172:	1b52      	subs	r2, r2, r5
 8008174:	f022 0203 	bic.w	r2, r2, #3
 8008178:	3d03      	subs	r5, #3
 800817a:	45ac      	cmp	ip, r5
 800817c:	bf38      	it	cc
 800817e:	2200      	movcc	r2, #0
 8008180:	441a      	add	r2, r3
 8008182:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008186:	b17b      	cbz	r3, 80081a8 <__mdiff+0x108>
 8008188:	6107      	str	r7, [r0, #16]
 800818a:	e7a3      	b.n	80080d4 <__mdiff+0x34>
 800818c:	f856 8b04 	ldr.w	r8, [r6], #4
 8008190:	fa11 f288 	uxtah	r2, r1, r8
 8008194:	1414      	asrs	r4, r2, #16
 8008196:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800819a:	b292      	uxth	r2, r2
 800819c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80081a0:	f84e 2b04 	str.w	r2, [lr], #4
 80081a4:	1421      	asrs	r1, r4, #16
 80081a6:	e7e0      	b.n	800816a <__mdiff+0xca>
 80081a8:	3f01      	subs	r7, #1
 80081aa:	e7ea      	b.n	8008182 <__mdiff+0xe2>
 80081ac:	0800b0e0 	.word	0x0800b0e0
 80081b0:	0800b16c 	.word	0x0800b16c

080081b4 <__ulp>:
 80081b4:	b082      	sub	sp, #8
 80081b6:	ed8d 0b00 	vstr	d0, [sp]
 80081ba:	9b01      	ldr	r3, [sp, #4]
 80081bc:	4912      	ldr	r1, [pc, #72]	; (8008208 <__ulp+0x54>)
 80081be:	4019      	ands	r1, r3
 80081c0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80081c4:	2900      	cmp	r1, #0
 80081c6:	dd05      	ble.n	80081d4 <__ulp+0x20>
 80081c8:	2200      	movs	r2, #0
 80081ca:	460b      	mov	r3, r1
 80081cc:	ec43 2b10 	vmov	d0, r2, r3
 80081d0:	b002      	add	sp, #8
 80081d2:	4770      	bx	lr
 80081d4:	4249      	negs	r1, r1
 80081d6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80081da:	ea4f 5021 	mov.w	r0, r1, asr #20
 80081de:	f04f 0200 	mov.w	r2, #0
 80081e2:	f04f 0300 	mov.w	r3, #0
 80081e6:	da04      	bge.n	80081f2 <__ulp+0x3e>
 80081e8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80081ec:	fa41 f300 	asr.w	r3, r1, r0
 80081f0:	e7ec      	b.n	80081cc <__ulp+0x18>
 80081f2:	f1a0 0114 	sub.w	r1, r0, #20
 80081f6:	291e      	cmp	r1, #30
 80081f8:	bfda      	itte	le
 80081fa:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80081fe:	fa20 f101 	lsrle.w	r1, r0, r1
 8008202:	2101      	movgt	r1, #1
 8008204:	460a      	mov	r2, r1
 8008206:	e7e1      	b.n	80081cc <__ulp+0x18>
 8008208:	7ff00000 	.word	0x7ff00000

0800820c <__b2d>:
 800820c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800820e:	6905      	ldr	r5, [r0, #16]
 8008210:	f100 0714 	add.w	r7, r0, #20
 8008214:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008218:	1f2e      	subs	r6, r5, #4
 800821a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800821e:	4620      	mov	r0, r4
 8008220:	f7ff fd48 	bl	8007cb4 <__hi0bits>
 8008224:	f1c0 0320 	rsb	r3, r0, #32
 8008228:	280a      	cmp	r0, #10
 800822a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80082a8 <__b2d+0x9c>
 800822e:	600b      	str	r3, [r1, #0]
 8008230:	dc14      	bgt.n	800825c <__b2d+0x50>
 8008232:	f1c0 0e0b 	rsb	lr, r0, #11
 8008236:	fa24 f10e 	lsr.w	r1, r4, lr
 800823a:	42b7      	cmp	r7, r6
 800823c:	ea41 030c 	orr.w	r3, r1, ip
 8008240:	bf34      	ite	cc
 8008242:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008246:	2100      	movcs	r1, #0
 8008248:	3015      	adds	r0, #21
 800824a:	fa04 f000 	lsl.w	r0, r4, r0
 800824e:	fa21 f10e 	lsr.w	r1, r1, lr
 8008252:	ea40 0201 	orr.w	r2, r0, r1
 8008256:	ec43 2b10 	vmov	d0, r2, r3
 800825a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800825c:	42b7      	cmp	r7, r6
 800825e:	bf3a      	itte	cc
 8008260:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008264:	f1a5 0608 	subcc.w	r6, r5, #8
 8008268:	2100      	movcs	r1, #0
 800826a:	380b      	subs	r0, #11
 800826c:	d017      	beq.n	800829e <__b2d+0x92>
 800826e:	f1c0 0c20 	rsb	ip, r0, #32
 8008272:	fa04 f500 	lsl.w	r5, r4, r0
 8008276:	42be      	cmp	r6, r7
 8008278:	fa21 f40c 	lsr.w	r4, r1, ip
 800827c:	ea45 0504 	orr.w	r5, r5, r4
 8008280:	bf8c      	ite	hi
 8008282:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008286:	2400      	movls	r4, #0
 8008288:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800828c:	fa01 f000 	lsl.w	r0, r1, r0
 8008290:	fa24 f40c 	lsr.w	r4, r4, ip
 8008294:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008298:	ea40 0204 	orr.w	r2, r0, r4
 800829c:	e7db      	b.n	8008256 <__b2d+0x4a>
 800829e:	ea44 030c 	orr.w	r3, r4, ip
 80082a2:	460a      	mov	r2, r1
 80082a4:	e7d7      	b.n	8008256 <__b2d+0x4a>
 80082a6:	bf00      	nop
 80082a8:	3ff00000 	.word	0x3ff00000

080082ac <__d2b>:
 80082ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80082b0:	4689      	mov	r9, r1
 80082b2:	2101      	movs	r1, #1
 80082b4:	ec57 6b10 	vmov	r6, r7, d0
 80082b8:	4690      	mov	r8, r2
 80082ba:	f7ff fc09 	bl	8007ad0 <_Balloc>
 80082be:	4604      	mov	r4, r0
 80082c0:	b930      	cbnz	r0, 80082d0 <__d2b+0x24>
 80082c2:	4602      	mov	r2, r0
 80082c4:	4b25      	ldr	r3, [pc, #148]	; (800835c <__d2b+0xb0>)
 80082c6:	4826      	ldr	r0, [pc, #152]	; (8008360 <__d2b+0xb4>)
 80082c8:	f240 310a 	movw	r1, #778	; 0x30a
 80082cc:	f000 ff6c 	bl	80091a8 <__assert_func>
 80082d0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80082d4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80082d8:	bb35      	cbnz	r5, 8008328 <__d2b+0x7c>
 80082da:	2e00      	cmp	r6, #0
 80082dc:	9301      	str	r3, [sp, #4]
 80082de:	d028      	beq.n	8008332 <__d2b+0x86>
 80082e0:	4668      	mov	r0, sp
 80082e2:	9600      	str	r6, [sp, #0]
 80082e4:	f7ff fd06 	bl	8007cf4 <__lo0bits>
 80082e8:	9900      	ldr	r1, [sp, #0]
 80082ea:	b300      	cbz	r0, 800832e <__d2b+0x82>
 80082ec:	9a01      	ldr	r2, [sp, #4]
 80082ee:	f1c0 0320 	rsb	r3, r0, #32
 80082f2:	fa02 f303 	lsl.w	r3, r2, r3
 80082f6:	430b      	orrs	r3, r1
 80082f8:	40c2      	lsrs	r2, r0
 80082fa:	6163      	str	r3, [r4, #20]
 80082fc:	9201      	str	r2, [sp, #4]
 80082fe:	9b01      	ldr	r3, [sp, #4]
 8008300:	61a3      	str	r3, [r4, #24]
 8008302:	2b00      	cmp	r3, #0
 8008304:	bf14      	ite	ne
 8008306:	2202      	movne	r2, #2
 8008308:	2201      	moveq	r2, #1
 800830a:	6122      	str	r2, [r4, #16]
 800830c:	b1d5      	cbz	r5, 8008344 <__d2b+0x98>
 800830e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008312:	4405      	add	r5, r0
 8008314:	f8c9 5000 	str.w	r5, [r9]
 8008318:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800831c:	f8c8 0000 	str.w	r0, [r8]
 8008320:	4620      	mov	r0, r4
 8008322:	b003      	add	sp, #12
 8008324:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008328:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800832c:	e7d5      	b.n	80082da <__d2b+0x2e>
 800832e:	6161      	str	r1, [r4, #20]
 8008330:	e7e5      	b.n	80082fe <__d2b+0x52>
 8008332:	a801      	add	r0, sp, #4
 8008334:	f7ff fcde 	bl	8007cf4 <__lo0bits>
 8008338:	9b01      	ldr	r3, [sp, #4]
 800833a:	6163      	str	r3, [r4, #20]
 800833c:	2201      	movs	r2, #1
 800833e:	6122      	str	r2, [r4, #16]
 8008340:	3020      	adds	r0, #32
 8008342:	e7e3      	b.n	800830c <__d2b+0x60>
 8008344:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008348:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800834c:	f8c9 0000 	str.w	r0, [r9]
 8008350:	6918      	ldr	r0, [r3, #16]
 8008352:	f7ff fcaf 	bl	8007cb4 <__hi0bits>
 8008356:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800835a:	e7df      	b.n	800831c <__d2b+0x70>
 800835c:	0800b0e0 	.word	0x0800b0e0
 8008360:	0800b16c 	.word	0x0800b16c

08008364 <__ratio>:
 8008364:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008368:	4688      	mov	r8, r1
 800836a:	4669      	mov	r1, sp
 800836c:	4681      	mov	r9, r0
 800836e:	f7ff ff4d 	bl	800820c <__b2d>
 8008372:	a901      	add	r1, sp, #4
 8008374:	4640      	mov	r0, r8
 8008376:	ec55 4b10 	vmov	r4, r5, d0
 800837a:	f7ff ff47 	bl	800820c <__b2d>
 800837e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008382:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008386:	eba3 0c02 	sub.w	ip, r3, r2
 800838a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800838e:	1a9b      	subs	r3, r3, r2
 8008390:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008394:	ec51 0b10 	vmov	r0, r1, d0
 8008398:	2b00      	cmp	r3, #0
 800839a:	bfd6      	itet	le
 800839c:	460a      	movle	r2, r1
 800839e:	462a      	movgt	r2, r5
 80083a0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80083a4:	468b      	mov	fp, r1
 80083a6:	462f      	mov	r7, r5
 80083a8:	bfd4      	ite	le
 80083aa:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80083ae:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80083b2:	4620      	mov	r0, r4
 80083b4:	ee10 2a10 	vmov	r2, s0
 80083b8:	465b      	mov	r3, fp
 80083ba:	4639      	mov	r1, r7
 80083bc:	f7f8 fa5e 	bl	800087c <__aeabi_ddiv>
 80083c0:	ec41 0b10 	vmov	d0, r0, r1
 80083c4:	b003      	add	sp, #12
 80083c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080083ca <__copybits>:
 80083ca:	3901      	subs	r1, #1
 80083cc:	b570      	push	{r4, r5, r6, lr}
 80083ce:	1149      	asrs	r1, r1, #5
 80083d0:	6914      	ldr	r4, [r2, #16]
 80083d2:	3101      	adds	r1, #1
 80083d4:	f102 0314 	add.w	r3, r2, #20
 80083d8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80083dc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80083e0:	1f05      	subs	r5, r0, #4
 80083e2:	42a3      	cmp	r3, r4
 80083e4:	d30c      	bcc.n	8008400 <__copybits+0x36>
 80083e6:	1aa3      	subs	r3, r4, r2
 80083e8:	3b11      	subs	r3, #17
 80083ea:	f023 0303 	bic.w	r3, r3, #3
 80083ee:	3211      	adds	r2, #17
 80083f0:	42a2      	cmp	r2, r4
 80083f2:	bf88      	it	hi
 80083f4:	2300      	movhi	r3, #0
 80083f6:	4418      	add	r0, r3
 80083f8:	2300      	movs	r3, #0
 80083fa:	4288      	cmp	r0, r1
 80083fc:	d305      	bcc.n	800840a <__copybits+0x40>
 80083fe:	bd70      	pop	{r4, r5, r6, pc}
 8008400:	f853 6b04 	ldr.w	r6, [r3], #4
 8008404:	f845 6f04 	str.w	r6, [r5, #4]!
 8008408:	e7eb      	b.n	80083e2 <__copybits+0x18>
 800840a:	f840 3b04 	str.w	r3, [r0], #4
 800840e:	e7f4      	b.n	80083fa <__copybits+0x30>

08008410 <__any_on>:
 8008410:	f100 0214 	add.w	r2, r0, #20
 8008414:	6900      	ldr	r0, [r0, #16]
 8008416:	114b      	asrs	r3, r1, #5
 8008418:	4298      	cmp	r0, r3
 800841a:	b510      	push	{r4, lr}
 800841c:	db11      	blt.n	8008442 <__any_on+0x32>
 800841e:	dd0a      	ble.n	8008436 <__any_on+0x26>
 8008420:	f011 011f 	ands.w	r1, r1, #31
 8008424:	d007      	beq.n	8008436 <__any_on+0x26>
 8008426:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800842a:	fa24 f001 	lsr.w	r0, r4, r1
 800842e:	fa00 f101 	lsl.w	r1, r0, r1
 8008432:	428c      	cmp	r4, r1
 8008434:	d10b      	bne.n	800844e <__any_on+0x3e>
 8008436:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800843a:	4293      	cmp	r3, r2
 800843c:	d803      	bhi.n	8008446 <__any_on+0x36>
 800843e:	2000      	movs	r0, #0
 8008440:	bd10      	pop	{r4, pc}
 8008442:	4603      	mov	r3, r0
 8008444:	e7f7      	b.n	8008436 <__any_on+0x26>
 8008446:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800844a:	2900      	cmp	r1, #0
 800844c:	d0f5      	beq.n	800843a <__any_on+0x2a>
 800844e:	2001      	movs	r0, #1
 8008450:	e7f6      	b.n	8008440 <__any_on+0x30>

08008452 <_calloc_r>:
 8008452:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008454:	fba1 2402 	umull	r2, r4, r1, r2
 8008458:	b94c      	cbnz	r4, 800846e <_calloc_r+0x1c>
 800845a:	4611      	mov	r1, r2
 800845c:	9201      	str	r2, [sp, #4]
 800845e:	f000 f87b 	bl	8008558 <_malloc_r>
 8008462:	9a01      	ldr	r2, [sp, #4]
 8008464:	4605      	mov	r5, r0
 8008466:	b930      	cbnz	r0, 8008476 <_calloc_r+0x24>
 8008468:	4628      	mov	r0, r5
 800846a:	b003      	add	sp, #12
 800846c:	bd30      	pop	{r4, r5, pc}
 800846e:	220c      	movs	r2, #12
 8008470:	6002      	str	r2, [r0, #0]
 8008472:	2500      	movs	r5, #0
 8008474:	e7f8      	b.n	8008468 <_calloc_r+0x16>
 8008476:	4621      	mov	r1, r4
 8008478:	f7fc fb18 	bl	8004aac <memset>
 800847c:	e7f4      	b.n	8008468 <_calloc_r+0x16>
	...

08008480 <_free_r>:
 8008480:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008482:	2900      	cmp	r1, #0
 8008484:	d044      	beq.n	8008510 <_free_r+0x90>
 8008486:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800848a:	9001      	str	r0, [sp, #4]
 800848c:	2b00      	cmp	r3, #0
 800848e:	f1a1 0404 	sub.w	r4, r1, #4
 8008492:	bfb8      	it	lt
 8008494:	18e4      	addlt	r4, r4, r3
 8008496:	f001 f88b 	bl	80095b0 <__malloc_lock>
 800849a:	4a1e      	ldr	r2, [pc, #120]	; (8008514 <_free_r+0x94>)
 800849c:	9801      	ldr	r0, [sp, #4]
 800849e:	6813      	ldr	r3, [r2, #0]
 80084a0:	b933      	cbnz	r3, 80084b0 <_free_r+0x30>
 80084a2:	6063      	str	r3, [r4, #4]
 80084a4:	6014      	str	r4, [r2, #0]
 80084a6:	b003      	add	sp, #12
 80084a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80084ac:	f001 b886 	b.w	80095bc <__malloc_unlock>
 80084b0:	42a3      	cmp	r3, r4
 80084b2:	d908      	bls.n	80084c6 <_free_r+0x46>
 80084b4:	6825      	ldr	r5, [r4, #0]
 80084b6:	1961      	adds	r1, r4, r5
 80084b8:	428b      	cmp	r3, r1
 80084ba:	bf01      	itttt	eq
 80084bc:	6819      	ldreq	r1, [r3, #0]
 80084be:	685b      	ldreq	r3, [r3, #4]
 80084c0:	1949      	addeq	r1, r1, r5
 80084c2:	6021      	streq	r1, [r4, #0]
 80084c4:	e7ed      	b.n	80084a2 <_free_r+0x22>
 80084c6:	461a      	mov	r2, r3
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	b10b      	cbz	r3, 80084d0 <_free_r+0x50>
 80084cc:	42a3      	cmp	r3, r4
 80084ce:	d9fa      	bls.n	80084c6 <_free_r+0x46>
 80084d0:	6811      	ldr	r1, [r2, #0]
 80084d2:	1855      	adds	r5, r2, r1
 80084d4:	42a5      	cmp	r5, r4
 80084d6:	d10b      	bne.n	80084f0 <_free_r+0x70>
 80084d8:	6824      	ldr	r4, [r4, #0]
 80084da:	4421      	add	r1, r4
 80084dc:	1854      	adds	r4, r2, r1
 80084de:	42a3      	cmp	r3, r4
 80084e0:	6011      	str	r1, [r2, #0]
 80084e2:	d1e0      	bne.n	80084a6 <_free_r+0x26>
 80084e4:	681c      	ldr	r4, [r3, #0]
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	6053      	str	r3, [r2, #4]
 80084ea:	4421      	add	r1, r4
 80084ec:	6011      	str	r1, [r2, #0]
 80084ee:	e7da      	b.n	80084a6 <_free_r+0x26>
 80084f0:	d902      	bls.n	80084f8 <_free_r+0x78>
 80084f2:	230c      	movs	r3, #12
 80084f4:	6003      	str	r3, [r0, #0]
 80084f6:	e7d6      	b.n	80084a6 <_free_r+0x26>
 80084f8:	6825      	ldr	r5, [r4, #0]
 80084fa:	1961      	adds	r1, r4, r5
 80084fc:	428b      	cmp	r3, r1
 80084fe:	bf04      	itt	eq
 8008500:	6819      	ldreq	r1, [r3, #0]
 8008502:	685b      	ldreq	r3, [r3, #4]
 8008504:	6063      	str	r3, [r4, #4]
 8008506:	bf04      	itt	eq
 8008508:	1949      	addeq	r1, r1, r5
 800850a:	6021      	streq	r1, [r4, #0]
 800850c:	6054      	str	r4, [r2, #4]
 800850e:	e7ca      	b.n	80084a6 <_free_r+0x26>
 8008510:	b003      	add	sp, #12
 8008512:	bd30      	pop	{r4, r5, pc}
 8008514:	200007d4 	.word	0x200007d4

08008518 <sbrk_aligned>:
 8008518:	b570      	push	{r4, r5, r6, lr}
 800851a:	4e0e      	ldr	r6, [pc, #56]	; (8008554 <sbrk_aligned+0x3c>)
 800851c:	460c      	mov	r4, r1
 800851e:	6831      	ldr	r1, [r6, #0]
 8008520:	4605      	mov	r5, r0
 8008522:	b911      	cbnz	r1, 800852a <sbrk_aligned+0x12>
 8008524:	f000 fd28 	bl	8008f78 <_sbrk_r>
 8008528:	6030      	str	r0, [r6, #0]
 800852a:	4621      	mov	r1, r4
 800852c:	4628      	mov	r0, r5
 800852e:	f000 fd23 	bl	8008f78 <_sbrk_r>
 8008532:	1c43      	adds	r3, r0, #1
 8008534:	d00a      	beq.n	800854c <sbrk_aligned+0x34>
 8008536:	1cc4      	adds	r4, r0, #3
 8008538:	f024 0403 	bic.w	r4, r4, #3
 800853c:	42a0      	cmp	r0, r4
 800853e:	d007      	beq.n	8008550 <sbrk_aligned+0x38>
 8008540:	1a21      	subs	r1, r4, r0
 8008542:	4628      	mov	r0, r5
 8008544:	f000 fd18 	bl	8008f78 <_sbrk_r>
 8008548:	3001      	adds	r0, #1
 800854a:	d101      	bne.n	8008550 <sbrk_aligned+0x38>
 800854c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008550:	4620      	mov	r0, r4
 8008552:	bd70      	pop	{r4, r5, r6, pc}
 8008554:	200007d8 	.word	0x200007d8

08008558 <_malloc_r>:
 8008558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800855c:	1ccd      	adds	r5, r1, #3
 800855e:	f025 0503 	bic.w	r5, r5, #3
 8008562:	3508      	adds	r5, #8
 8008564:	2d0c      	cmp	r5, #12
 8008566:	bf38      	it	cc
 8008568:	250c      	movcc	r5, #12
 800856a:	2d00      	cmp	r5, #0
 800856c:	4607      	mov	r7, r0
 800856e:	db01      	blt.n	8008574 <_malloc_r+0x1c>
 8008570:	42a9      	cmp	r1, r5
 8008572:	d905      	bls.n	8008580 <_malloc_r+0x28>
 8008574:	230c      	movs	r3, #12
 8008576:	603b      	str	r3, [r7, #0]
 8008578:	2600      	movs	r6, #0
 800857a:	4630      	mov	r0, r6
 800857c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008580:	4e2e      	ldr	r6, [pc, #184]	; (800863c <_malloc_r+0xe4>)
 8008582:	f001 f815 	bl	80095b0 <__malloc_lock>
 8008586:	6833      	ldr	r3, [r6, #0]
 8008588:	461c      	mov	r4, r3
 800858a:	bb34      	cbnz	r4, 80085da <_malloc_r+0x82>
 800858c:	4629      	mov	r1, r5
 800858e:	4638      	mov	r0, r7
 8008590:	f7ff ffc2 	bl	8008518 <sbrk_aligned>
 8008594:	1c43      	adds	r3, r0, #1
 8008596:	4604      	mov	r4, r0
 8008598:	d14d      	bne.n	8008636 <_malloc_r+0xde>
 800859a:	6834      	ldr	r4, [r6, #0]
 800859c:	4626      	mov	r6, r4
 800859e:	2e00      	cmp	r6, #0
 80085a0:	d140      	bne.n	8008624 <_malloc_r+0xcc>
 80085a2:	6823      	ldr	r3, [r4, #0]
 80085a4:	4631      	mov	r1, r6
 80085a6:	4638      	mov	r0, r7
 80085a8:	eb04 0803 	add.w	r8, r4, r3
 80085ac:	f000 fce4 	bl	8008f78 <_sbrk_r>
 80085b0:	4580      	cmp	r8, r0
 80085b2:	d13a      	bne.n	800862a <_malloc_r+0xd2>
 80085b4:	6821      	ldr	r1, [r4, #0]
 80085b6:	3503      	adds	r5, #3
 80085b8:	1a6d      	subs	r5, r5, r1
 80085ba:	f025 0503 	bic.w	r5, r5, #3
 80085be:	3508      	adds	r5, #8
 80085c0:	2d0c      	cmp	r5, #12
 80085c2:	bf38      	it	cc
 80085c4:	250c      	movcc	r5, #12
 80085c6:	4629      	mov	r1, r5
 80085c8:	4638      	mov	r0, r7
 80085ca:	f7ff ffa5 	bl	8008518 <sbrk_aligned>
 80085ce:	3001      	adds	r0, #1
 80085d0:	d02b      	beq.n	800862a <_malloc_r+0xd2>
 80085d2:	6823      	ldr	r3, [r4, #0]
 80085d4:	442b      	add	r3, r5
 80085d6:	6023      	str	r3, [r4, #0]
 80085d8:	e00e      	b.n	80085f8 <_malloc_r+0xa0>
 80085da:	6822      	ldr	r2, [r4, #0]
 80085dc:	1b52      	subs	r2, r2, r5
 80085de:	d41e      	bmi.n	800861e <_malloc_r+0xc6>
 80085e0:	2a0b      	cmp	r2, #11
 80085e2:	d916      	bls.n	8008612 <_malloc_r+0xba>
 80085e4:	1961      	adds	r1, r4, r5
 80085e6:	42a3      	cmp	r3, r4
 80085e8:	6025      	str	r5, [r4, #0]
 80085ea:	bf18      	it	ne
 80085ec:	6059      	strne	r1, [r3, #4]
 80085ee:	6863      	ldr	r3, [r4, #4]
 80085f0:	bf08      	it	eq
 80085f2:	6031      	streq	r1, [r6, #0]
 80085f4:	5162      	str	r2, [r4, r5]
 80085f6:	604b      	str	r3, [r1, #4]
 80085f8:	4638      	mov	r0, r7
 80085fa:	f104 060b 	add.w	r6, r4, #11
 80085fe:	f000 ffdd 	bl	80095bc <__malloc_unlock>
 8008602:	f026 0607 	bic.w	r6, r6, #7
 8008606:	1d23      	adds	r3, r4, #4
 8008608:	1af2      	subs	r2, r6, r3
 800860a:	d0b6      	beq.n	800857a <_malloc_r+0x22>
 800860c:	1b9b      	subs	r3, r3, r6
 800860e:	50a3      	str	r3, [r4, r2]
 8008610:	e7b3      	b.n	800857a <_malloc_r+0x22>
 8008612:	6862      	ldr	r2, [r4, #4]
 8008614:	42a3      	cmp	r3, r4
 8008616:	bf0c      	ite	eq
 8008618:	6032      	streq	r2, [r6, #0]
 800861a:	605a      	strne	r2, [r3, #4]
 800861c:	e7ec      	b.n	80085f8 <_malloc_r+0xa0>
 800861e:	4623      	mov	r3, r4
 8008620:	6864      	ldr	r4, [r4, #4]
 8008622:	e7b2      	b.n	800858a <_malloc_r+0x32>
 8008624:	4634      	mov	r4, r6
 8008626:	6876      	ldr	r6, [r6, #4]
 8008628:	e7b9      	b.n	800859e <_malloc_r+0x46>
 800862a:	230c      	movs	r3, #12
 800862c:	603b      	str	r3, [r7, #0]
 800862e:	4638      	mov	r0, r7
 8008630:	f000 ffc4 	bl	80095bc <__malloc_unlock>
 8008634:	e7a1      	b.n	800857a <_malloc_r+0x22>
 8008636:	6025      	str	r5, [r4, #0]
 8008638:	e7de      	b.n	80085f8 <_malloc_r+0xa0>
 800863a:	bf00      	nop
 800863c:	200007d4 	.word	0x200007d4

08008640 <__ssputs_r>:
 8008640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008644:	688e      	ldr	r6, [r1, #8]
 8008646:	429e      	cmp	r6, r3
 8008648:	4682      	mov	sl, r0
 800864a:	460c      	mov	r4, r1
 800864c:	4690      	mov	r8, r2
 800864e:	461f      	mov	r7, r3
 8008650:	d838      	bhi.n	80086c4 <__ssputs_r+0x84>
 8008652:	898a      	ldrh	r2, [r1, #12]
 8008654:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008658:	d032      	beq.n	80086c0 <__ssputs_r+0x80>
 800865a:	6825      	ldr	r5, [r4, #0]
 800865c:	6909      	ldr	r1, [r1, #16]
 800865e:	eba5 0901 	sub.w	r9, r5, r1
 8008662:	6965      	ldr	r5, [r4, #20]
 8008664:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008668:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800866c:	3301      	adds	r3, #1
 800866e:	444b      	add	r3, r9
 8008670:	106d      	asrs	r5, r5, #1
 8008672:	429d      	cmp	r5, r3
 8008674:	bf38      	it	cc
 8008676:	461d      	movcc	r5, r3
 8008678:	0553      	lsls	r3, r2, #21
 800867a:	d531      	bpl.n	80086e0 <__ssputs_r+0xa0>
 800867c:	4629      	mov	r1, r5
 800867e:	f7ff ff6b 	bl	8008558 <_malloc_r>
 8008682:	4606      	mov	r6, r0
 8008684:	b950      	cbnz	r0, 800869c <__ssputs_r+0x5c>
 8008686:	230c      	movs	r3, #12
 8008688:	f8ca 3000 	str.w	r3, [sl]
 800868c:	89a3      	ldrh	r3, [r4, #12]
 800868e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008692:	81a3      	strh	r3, [r4, #12]
 8008694:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800869c:	6921      	ldr	r1, [r4, #16]
 800869e:	464a      	mov	r2, r9
 80086a0:	f7ff fa08 	bl	8007ab4 <memcpy>
 80086a4:	89a3      	ldrh	r3, [r4, #12]
 80086a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80086aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086ae:	81a3      	strh	r3, [r4, #12]
 80086b0:	6126      	str	r6, [r4, #16]
 80086b2:	6165      	str	r5, [r4, #20]
 80086b4:	444e      	add	r6, r9
 80086b6:	eba5 0509 	sub.w	r5, r5, r9
 80086ba:	6026      	str	r6, [r4, #0]
 80086bc:	60a5      	str	r5, [r4, #8]
 80086be:	463e      	mov	r6, r7
 80086c0:	42be      	cmp	r6, r7
 80086c2:	d900      	bls.n	80086c6 <__ssputs_r+0x86>
 80086c4:	463e      	mov	r6, r7
 80086c6:	6820      	ldr	r0, [r4, #0]
 80086c8:	4632      	mov	r2, r6
 80086ca:	4641      	mov	r1, r8
 80086cc:	f000 ff56 	bl	800957c <memmove>
 80086d0:	68a3      	ldr	r3, [r4, #8]
 80086d2:	1b9b      	subs	r3, r3, r6
 80086d4:	60a3      	str	r3, [r4, #8]
 80086d6:	6823      	ldr	r3, [r4, #0]
 80086d8:	4433      	add	r3, r6
 80086da:	6023      	str	r3, [r4, #0]
 80086dc:	2000      	movs	r0, #0
 80086de:	e7db      	b.n	8008698 <__ssputs_r+0x58>
 80086e0:	462a      	mov	r2, r5
 80086e2:	f000 ff71 	bl	80095c8 <_realloc_r>
 80086e6:	4606      	mov	r6, r0
 80086e8:	2800      	cmp	r0, #0
 80086ea:	d1e1      	bne.n	80086b0 <__ssputs_r+0x70>
 80086ec:	6921      	ldr	r1, [r4, #16]
 80086ee:	4650      	mov	r0, sl
 80086f0:	f7ff fec6 	bl	8008480 <_free_r>
 80086f4:	e7c7      	b.n	8008686 <__ssputs_r+0x46>
	...

080086f8 <_svfiprintf_r>:
 80086f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086fc:	4698      	mov	r8, r3
 80086fe:	898b      	ldrh	r3, [r1, #12]
 8008700:	061b      	lsls	r3, r3, #24
 8008702:	b09d      	sub	sp, #116	; 0x74
 8008704:	4607      	mov	r7, r0
 8008706:	460d      	mov	r5, r1
 8008708:	4614      	mov	r4, r2
 800870a:	d50e      	bpl.n	800872a <_svfiprintf_r+0x32>
 800870c:	690b      	ldr	r3, [r1, #16]
 800870e:	b963      	cbnz	r3, 800872a <_svfiprintf_r+0x32>
 8008710:	2140      	movs	r1, #64	; 0x40
 8008712:	f7ff ff21 	bl	8008558 <_malloc_r>
 8008716:	6028      	str	r0, [r5, #0]
 8008718:	6128      	str	r0, [r5, #16]
 800871a:	b920      	cbnz	r0, 8008726 <_svfiprintf_r+0x2e>
 800871c:	230c      	movs	r3, #12
 800871e:	603b      	str	r3, [r7, #0]
 8008720:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008724:	e0d1      	b.n	80088ca <_svfiprintf_r+0x1d2>
 8008726:	2340      	movs	r3, #64	; 0x40
 8008728:	616b      	str	r3, [r5, #20]
 800872a:	2300      	movs	r3, #0
 800872c:	9309      	str	r3, [sp, #36]	; 0x24
 800872e:	2320      	movs	r3, #32
 8008730:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008734:	f8cd 800c 	str.w	r8, [sp, #12]
 8008738:	2330      	movs	r3, #48	; 0x30
 800873a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80088e4 <_svfiprintf_r+0x1ec>
 800873e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008742:	f04f 0901 	mov.w	r9, #1
 8008746:	4623      	mov	r3, r4
 8008748:	469a      	mov	sl, r3
 800874a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800874e:	b10a      	cbz	r2, 8008754 <_svfiprintf_r+0x5c>
 8008750:	2a25      	cmp	r2, #37	; 0x25
 8008752:	d1f9      	bne.n	8008748 <_svfiprintf_r+0x50>
 8008754:	ebba 0b04 	subs.w	fp, sl, r4
 8008758:	d00b      	beq.n	8008772 <_svfiprintf_r+0x7a>
 800875a:	465b      	mov	r3, fp
 800875c:	4622      	mov	r2, r4
 800875e:	4629      	mov	r1, r5
 8008760:	4638      	mov	r0, r7
 8008762:	f7ff ff6d 	bl	8008640 <__ssputs_r>
 8008766:	3001      	adds	r0, #1
 8008768:	f000 80aa 	beq.w	80088c0 <_svfiprintf_r+0x1c8>
 800876c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800876e:	445a      	add	r2, fp
 8008770:	9209      	str	r2, [sp, #36]	; 0x24
 8008772:	f89a 3000 	ldrb.w	r3, [sl]
 8008776:	2b00      	cmp	r3, #0
 8008778:	f000 80a2 	beq.w	80088c0 <_svfiprintf_r+0x1c8>
 800877c:	2300      	movs	r3, #0
 800877e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008782:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008786:	f10a 0a01 	add.w	sl, sl, #1
 800878a:	9304      	str	r3, [sp, #16]
 800878c:	9307      	str	r3, [sp, #28]
 800878e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008792:	931a      	str	r3, [sp, #104]	; 0x68
 8008794:	4654      	mov	r4, sl
 8008796:	2205      	movs	r2, #5
 8008798:	f814 1b01 	ldrb.w	r1, [r4], #1
 800879c:	4851      	ldr	r0, [pc, #324]	; (80088e4 <_svfiprintf_r+0x1ec>)
 800879e:	f7f7 fd37 	bl	8000210 <memchr>
 80087a2:	9a04      	ldr	r2, [sp, #16]
 80087a4:	b9d8      	cbnz	r0, 80087de <_svfiprintf_r+0xe6>
 80087a6:	06d0      	lsls	r0, r2, #27
 80087a8:	bf44      	itt	mi
 80087aa:	2320      	movmi	r3, #32
 80087ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087b0:	0711      	lsls	r1, r2, #28
 80087b2:	bf44      	itt	mi
 80087b4:	232b      	movmi	r3, #43	; 0x2b
 80087b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087ba:	f89a 3000 	ldrb.w	r3, [sl]
 80087be:	2b2a      	cmp	r3, #42	; 0x2a
 80087c0:	d015      	beq.n	80087ee <_svfiprintf_r+0xf6>
 80087c2:	9a07      	ldr	r2, [sp, #28]
 80087c4:	4654      	mov	r4, sl
 80087c6:	2000      	movs	r0, #0
 80087c8:	f04f 0c0a 	mov.w	ip, #10
 80087cc:	4621      	mov	r1, r4
 80087ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087d2:	3b30      	subs	r3, #48	; 0x30
 80087d4:	2b09      	cmp	r3, #9
 80087d6:	d94e      	bls.n	8008876 <_svfiprintf_r+0x17e>
 80087d8:	b1b0      	cbz	r0, 8008808 <_svfiprintf_r+0x110>
 80087da:	9207      	str	r2, [sp, #28]
 80087dc:	e014      	b.n	8008808 <_svfiprintf_r+0x110>
 80087de:	eba0 0308 	sub.w	r3, r0, r8
 80087e2:	fa09 f303 	lsl.w	r3, r9, r3
 80087e6:	4313      	orrs	r3, r2
 80087e8:	9304      	str	r3, [sp, #16]
 80087ea:	46a2      	mov	sl, r4
 80087ec:	e7d2      	b.n	8008794 <_svfiprintf_r+0x9c>
 80087ee:	9b03      	ldr	r3, [sp, #12]
 80087f0:	1d19      	adds	r1, r3, #4
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	9103      	str	r1, [sp, #12]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	bfbb      	ittet	lt
 80087fa:	425b      	neglt	r3, r3
 80087fc:	f042 0202 	orrlt.w	r2, r2, #2
 8008800:	9307      	strge	r3, [sp, #28]
 8008802:	9307      	strlt	r3, [sp, #28]
 8008804:	bfb8      	it	lt
 8008806:	9204      	strlt	r2, [sp, #16]
 8008808:	7823      	ldrb	r3, [r4, #0]
 800880a:	2b2e      	cmp	r3, #46	; 0x2e
 800880c:	d10c      	bne.n	8008828 <_svfiprintf_r+0x130>
 800880e:	7863      	ldrb	r3, [r4, #1]
 8008810:	2b2a      	cmp	r3, #42	; 0x2a
 8008812:	d135      	bne.n	8008880 <_svfiprintf_r+0x188>
 8008814:	9b03      	ldr	r3, [sp, #12]
 8008816:	1d1a      	adds	r2, r3, #4
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	9203      	str	r2, [sp, #12]
 800881c:	2b00      	cmp	r3, #0
 800881e:	bfb8      	it	lt
 8008820:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008824:	3402      	adds	r4, #2
 8008826:	9305      	str	r3, [sp, #20]
 8008828:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80088f4 <_svfiprintf_r+0x1fc>
 800882c:	7821      	ldrb	r1, [r4, #0]
 800882e:	2203      	movs	r2, #3
 8008830:	4650      	mov	r0, sl
 8008832:	f7f7 fced 	bl	8000210 <memchr>
 8008836:	b140      	cbz	r0, 800884a <_svfiprintf_r+0x152>
 8008838:	2340      	movs	r3, #64	; 0x40
 800883a:	eba0 000a 	sub.w	r0, r0, sl
 800883e:	fa03 f000 	lsl.w	r0, r3, r0
 8008842:	9b04      	ldr	r3, [sp, #16]
 8008844:	4303      	orrs	r3, r0
 8008846:	3401      	adds	r4, #1
 8008848:	9304      	str	r3, [sp, #16]
 800884a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800884e:	4826      	ldr	r0, [pc, #152]	; (80088e8 <_svfiprintf_r+0x1f0>)
 8008850:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008854:	2206      	movs	r2, #6
 8008856:	f7f7 fcdb 	bl	8000210 <memchr>
 800885a:	2800      	cmp	r0, #0
 800885c:	d038      	beq.n	80088d0 <_svfiprintf_r+0x1d8>
 800885e:	4b23      	ldr	r3, [pc, #140]	; (80088ec <_svfiprintf_r+0x1f4>)
 8008860:	bb1b      	cbnz	r3, 80088aa <_svfiprintf_r+0x1b2>
 8008862:	9b03      	ldr	r3, [sp, #12]
 8008864:	3307      	adds	r3, #7
 8008866:	f023 0307 	bic.w	r3, r3, #7
 800886a:	3308      	adds	r3, #8
 800886c:	9303      	str	r3, [sp, #12]
 800886e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008870:	4433      	add	r3, r6
 8008872:	9309      	str	r3, [sp, #36]	; 0x24
 8008874:	e767      	b.n	8008746 <_svfiprintf_r+0x4e>
 8008876:	fb0c 3202 	mla	r2, ip, r2, r3
 800887a:	460c      	mov	r4, r1
 800887c:	2001      	movs	r0, #1
 800887e:	e7a5      	b.n	80087cc <_svfiprintf_r+0xd4>
 8008880:	2300      	movs	r3, #0
 8008882:	3401      	adds	r4, #1
 8008884:	9305      	str	r3, [sp, #20]
 8008886:	4619      	mov	r1, r3
 8008888:	f04f 0c0a 	mov.w	ip, #10
 800888c:	4620      	mov	r0, r4
 800888e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008892:	3a30      	subs	r2, #48	; 0x30
 8008894:	2a09      	cmp	r2, #9
 8008896:	d903      	bls.n	80088a0 <_svfiprintf_r+0x1a8>
 8008898:	2b00      	cmp	r3, #0
 800889a:	d0c5      	beq.n	8008828 <_svfiprintf_r+0x130>
 800889c:	9105      	str	r1, [sp, #20]
 800889e:	e7c3      	b.n	8008828 <_svfiprintf_r+0x130>
 80088a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80088a4:	4604      	mov	r4, r0
 80088a6:	2301      	movs	r3, #1
 80088a8:	e7f0      	b.n	800888c <_svfiprintf_r+0x194>
 80088aa:	ab03      	add	r3, sp, #12
 80088ac:	9300      	str	r3, [sp, #0]
 80088ae:	462a      	mov	r2, r5
 80088b0:	4b0f      	ldr	r3, [pc, #60]	; (80088f0 <_svfiprintf_r+0x1f8>)
 80088b2:	a904      	add	r1, sp, #16
 80088b4:	4638      	mov	r0, r7
 80088b6:	f7fc f9a1 	bl	8004bfc <_printf_float>
 80088ba:	1c42      	adds	r2, r0, #1
 80088bc:	4606      	mov	r6, r0
 80088be:	d1d6      	bne.n	800886e <_svfiprintf_r+0x176>
 80088c0:	89ab      	ldrh	r3, [r5, #12]
 80088c2:	065b      	lsls	r3, r3, #25
 80088c4:	f53f af2c 	bmi.w	8008720 <_svfiprintf_r+0x28>
 80088c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80088ca:	b01d      	add	sp, #116	; 0x74
 80088cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088d0:	ab03      	add	r3, sp, #12
 80088d2:	9300      	str	r3, [sp, #0]
 80088d4:	462a      	mov	r2, r5
 80088d6:	4b06      	ldr	r3, [pc, #24]	; (80088f0 <_svfiprintf_r+0x1f8>)
 80088d8:	a904      	add	r1, sp, #16
 80088da:	4638      	mov	r0, r7
 80088dc:	f7fc fc32 	bl	8005144 <_printf_i>
 80088e0:	e7eb      	b.n	80088ba <_svfiprintf_r+0x1c2>
 80088e2:	bf00      	nop
 80088e4:	0800b2c4 	.word	0x0800b2c4
 80088e8:	0800b2ce 	.word	0x0800b2ce
 80088ec:	08004bfd 	.word	0x08004bfd
 80088f0:	08008641 	.word	0x08008641
 80088f4:	0800b2ca 	.word	0x0800b2ca

080088f8 <_sungetc_r>:
 80088f8:	b538      	push	{r3, r4, r5, lr}
 80088fa:	1c4b      	adds	r3, r1, #1
 80088fc:	4614      	mov	r4, r2
 80088fe:	d103      	bne.n	8008908 <_sungetc_r+0x10>
 8008900:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008904:	4628      	mov	r0, r5
 8008906:	bd38      	pop	{r3, r4, r5, pc}
 8008908:	8993      	ldrh	r3, [r2, #12]
 800890a:	f023 0320 	bic.w	r3, r3, #32
 800890e:	8193      	strh	r3, [r2, #12]
 8008910:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008912:	6852      	ldr	r2, [r2, #4]
 8008914:	b2cd      	uxtb	r5, r1
 8008916:	b18b      	cbz	r3, 800893c <_sungetc_r+0x44>
 8008918:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800891a:	4293      	cmp	r3, r2
 800891c:	dd08      	ble.n	8008930 <_sungetc_r+0x38>
 800891e:	6823      	ldr	r3, [r4, #0]
 8008920:	1e5a      	subs	r2, r3, #1
 8008922:	6022      	str	r2, [r4, #0]
 8008924:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008928:	6863      	ldr	r3, [r4, #4]
 800892a:	3301      	adds	r3, #1
 800892c:	6063      	str	r3, [r4, #4]
 800892e:	e7e9      	b.n	8008904 <_sungetc_r+0xc>
 8008930:	4621      	mov	r1, r4
 8008932:	f000 fbf1 	bl	8009118 <__submore>
 8008936:	2800      	cmp	r0, #0
 8008938:	d0f1      	beq.n	800891e <_sungetc_r+0x26>
 800893a:	e7e1      	b.n	8008900 <_sungetc_r+0x8>
 800893c:	6921      	ldr	r1, [r4, #16]
 800893e:	6823      	ldr	r3, [r4, #0]
 8008940:	b151      	cbz	r1, 8008958 <_sungetc_r+0x60>
 8008942:	4299      	cmp	r1, r3
 8008944:	d208      	bcs.n	8008958 <_sungetc_r+0x60>
 8008946:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800894a:	42a9      	cmp	r1, r5
 800894c:	d104      	bne.n	8008958 <_sungetc_r+0x60>
 800894e:	3b01      	subs	r3, #1
 8008950:	3201      	adds	r2, #1
 8008952:	6023      	str	r3, [r4, #0]
 8008954:	6062      	str	r2, [r4, #4]
 8008956:	e7d5      	b.n	8008904 <_sungetc_r+0xc>
 8008958:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800895c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008960:	6363      	str	r3, [r4, #52]	; 0x34
 8008962:	2303      	movs	r3, #3
 8008964:	63a3      	str	r3, [r4, #56]	; 0x38
 8008966:	4623      	mov	r3, r4
 8008968:	f803 5f46 	strb.w	r5, [r3, #70]!
 800896c:	6023      	str	r3, [r4, #0]
 800896e:	2301      	movs	r3, #1
 8008970:	e7dc      	b.n	800892c <_sungetc_r+0x34>

08008972 <__ssrefill_r>:
 8008972:	b510      	push	{r4, lr}
 8008974:	460c      	mov	r4, r1
 8008976:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008978:	b169      	cbz	r1, 8008996 <__ssrefill_r+0x24>
 800897a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800897e:	4299      	cmp	r1, r3
 8008980:	d001      	beq.n	8008986 <__ssrefill_r+0x14>
 8008982:	f7ff fd7d 	bl	8008480 <_free_r>
 8008986:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008988:	6063      	str	r3, [r4, #4]
 800898a:	2000      	movs	r0, #0
 800898c:	6360      	str	r0, [r4, #52]	; 0x34
 800898e:	b113      	cbz	r3, 8008996 <__ssrefill_r+0x24>
 8008990:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008992:	6023      	str	r3, [r4, #0]
 8008994:	bd10      	pop	{r4, pc}
 8008996:	6923      	ldr	r3, [r4, #16]
 8008998:	6023      	str	r3, [r4, #0]
 800899a:	2300      	movs	r3, #0
 800899c:	6063      	str	r3, [r4, #4]
 800899e:	89a3      	ldrh	r3, [r4, #12]
 80089a0:	f043 0320 	orr.w	r3, r3, #32
 80089a4:	81a3      	strh	r3, [r4, #12]
 80089a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089aa:	e7f3      	b.n	8008994 <__ssrefill_r+0x22>

080089ac <__ssvfiscanf_r>:
 80089ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089b0:	460c      	mov	r4, r1
 80089b2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80089b6:	2100      	movs	r1, #0
 80089b8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80089bc:	49a6      	ldr	r1, [pc, #664]	; (8008c58 <__ssvfiscanf_r+0x2ac>)
 80089be:	91a0      	str	r1, [sp, #640]	; 0x280
 80089c0:	f10d 0804 	add.w	r8, sp, #4
 80089c4:	49a5      	ldr	r1, [pc, #660]	; (8008c5c <__ssvfiscanf_r+0x2b0>)
 80089c6:	4fa6      	ldr	r7, [pc, #664]	; (8008c60 <__ssvfiscanf_r+0x2b4>)
 80089c8:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8008c64 <__ssvfiscanf_r+0x2b8>
 80089cc:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80089d0:	4606      	mov	r6, r0
 80089d2:	91a1      	str	r1, [sp, #644]	; 0x284
 80089d4:	9300      	str	r3, [sp, #0]
 80089d6:	7813      	ldrb	r3, [r2, #0]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	f000 815a 	beq.w	8008c92 <__ssvfiscanf_r+0x2e6>
 80089de:	5dd9      	ldrb	r1, [r3, r7]
 80089e0:	f011 0108 	ands.w	r1, r1, #8
 80089e4:	f102 0501 	add.w	r5, r2, #1
 80089e8:	d019      	beq.n	8008a1e <__ssvfiscanf_r+0x72>
 80089ea:	6863      	ldr	r3, [r4, #4]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	dd0f      	ble.n	8008a10 <__ssvfiscanf_r+0x64>
 80089f0:	6823      	ldr	r3, [r4, #0]
 80089f2:	781a      	ldrb	r2, [r3, #0]
 80089f4:	5cba      	ldrb	r2, [r7, r2]
 80089f6:	0712      	lsls	r2, r2, #28
 80089f8:	d401      	bmi.n	80089fe <__ssvfiscanf_r+0x52>
 80089fa:	462a      	mov	r2, r5
 80089fc:	e7eb      	b.n	80089d6 <__ssvfiscanf_r+0x2a>
 80089fe:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008a00:	3201      	adds	r2, #1
 8008a02:	9245      	str	r2, [sp, #276]	; 0x114
 8008a04:	6862      	ldr	r2, [r4, #4]
 8008a06:	3301      	adds	r3, #1
 8008a08:	3a01      	subs	r2, #1
 8008a0a:	6062      	str	r2, [r4, #4]
 8008a0c:	6023      	str	r3, [r4, #0]
 8008a0e:	e7ec      	b.n	80089ea <__ssvfiscanf_r+0x3e>
 8008a10:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008a12:	4621      	mov	r1, r4
 8008a14:	4630      	mov	r0, r6
 8008a16:	4798      	blx	r3
 8008a18:	2800      	cmp	r0, #0
 8008a1a:	d0e9      	beq.n	80089f0 <__ssvfiscanf_r+0x44>
 8008a1c:	e7ed      	b.n	80089fa <__ssvfiscanf_r+0x4e>
 8008a1e:	2b25      	cmp	r3, #37	; 0x25
 8008a20:	d012      	beq.n	8008a48 <__ssvfiscanf_r+0x9c>
 8008a22:	469a      	mov	sl, r3
 8008a24:	6863      	ldr	r3, [r4, #4]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	f340 8091 	ble.w	8008b4e <__ssvfiscanf_r+0x1a2>
 8008a2c:	6822      	ldr	r2, [r4, #0]
 8008a2e:	7813      	ldrb	r3, [r2, #0]
 8008a30:	4553      	cmp	r3, sl
 8008a32:	f040 812e 	bne.w	8008c92 <__ssvfiscanf_r+0x2e6>
 8008a36:	6863      	ldr	r3, [r4, #4]
 8008a38:	3b01      	subs	r3, #1
 8008a3a:	6063      	str	r3, [r4, #4]
 8008a3c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8008a3e:	3201      	adds	r2, #1
 8008a40:	3301      	adds	r3, #1
 8008a42:	6022      	str	r2, [r4, #0]
 8008a44:	9345      	str	r3, [sp, #276]	; 0x114
 8008a46:	e7d8      	b.n	80089fa <__ssvfiscanf_r+0x4e>
 8008a48:	9141      	str	r1, [sp, #260]	; 0x104
 8008a4a:	9143      	str	r1, [sp, #268]	; 0x10c
 8008a4c:	7853      	ldrb	r3, [r2, #1]
 8008a4e:	2b2a      	cmp	r3, #42	; 0x2a
 8008a50:	bf02      	ittt	eq
 8008a52:	2310      	moveq	r3, #16
 8008a54:	1c95      	addeq	r5, r2, #2
 8008a56:	9341      	streq	r3, [sp, #260]	; 0x104
 8008a58:	220a      	movs	r2, #10
 8008a5a:	46aa      	mov	sl, r5
 8008a5c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8008a60:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8008a64:	2b09      	cmp	r3, #9
 8008a66:	d91d      	bls.n	8008aa4 <__ssvfiscanf_r+0xf8>
 8008a68:	487e      	ldr	r0, [pc, #504]	; (8008c64 <__ssvfiscanf_r+0x2b8>)
 8008a6a:	2203      	movs	r2, #3
 8008a6c:	f7f7 fbd0 	bl	8000210 <memchr>
 8008a70:	b140      	cbz	r0, 8008a84 <__ssvfiscanf_r+0xd8>
 8008a72:	2301      	movs	r3, #1
 8008a74:	eba0 0009 	sub.w	r0, r0, r9
 8008a78:	fa03 f000 	lsl.w	r0, r3, r0
 8008a7c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008a7e:	4318      	orrs	r0, r3
 8008a80:	9041      	str	r0, [sp, #260]	; 0x104
 8008a82:	4655      	mov	r5, sl
 8008a84:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008a88:	2b78      	cmp	r3, #120	; 0x78
 8008a8a:	d806      	bhi.n	8008a9a <__ssvfiscanf_r+0xee>
 8008a8c:	2b57      	cmp	r3, #87	; 0x57
 8008a8e:	d810      	bhi.n	8008ab2 <__ssvfiscanf_r+0x106>
 8008a90:	2b25      	cmp	r3, #37	; 0x25
 8008a92:	d0c6      	beq.n	8008a22 <__ssvfiscanf_r+0x76>
 8008a94:	d856      	bhi.n	8008b44 <__ssvfiscanf_r+0x198>
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d064      	beq.n	8008b64 <__ssvfiscanf_r+0x1b8>
 8008a9a:	2303      	movs	r3, #3
 8008a9c:	9347      	str	r3, [sp, #284]	; 0x11c
 8008a9e:	230a      	movs	r3, #10
 8008aa0:	9342      	str	r3, [sp, #264]	; 0x108
 8008aa2:	e071      	b.n	8008b88 <__ssvfiscanf_r+0x1dc>
 8008aa4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8008aa6:	fb02 1103 	mla	r1, r2, r3, r1
 8008aaa:	3930      	subs	r1, #48	; 0x30
 8008aac:	9143      	str	r1, [sp, #268]	; 0x10c
 8008aae:	4655      	mov	r5, sl
 8008ab0:	e7d3      	b.n	8008a5a <__ssvfiscanf_r+0xae>
 8008ab2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8008ab6:	2a20      	cmp	r2, #32
 8008ab8:	d8ef      	bhi.n	8008a9a <__ssvfiscanf_r+0xee>
 8008aba:	a101      	add	r1, pc, #4	; (adr r1, 8008ac0 <__ssvfiscanf_r+0x114>)
 8008abc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008ac0:	08008b73 	.word	0x08008b73
 8008ac4:	08008a9b 	.word	0x08008a9b
 8008ac8:	08008a9b 	.word	0x08008a9b
 8008acc:	08008bd1 	.word	0x08008bd1
 8008ad0:	08008a9b 	.word	0x08008a9b
 8008ad4:	08008a9b 	.word	0x08008a9b
 8008ad8:	08008a9b 	.word	0x08008a9b
 8008adc:	08008a9b 	.word	0x08008a9b
 8008ae0:	08008a9b 	.word	0x08008a9b
 8008ae4:	08008a9b 	.word	0x08008a9b
 8008ae8:	08008a9b 	.word	0x08008a9b
 8008aec:	08008be7 	.word	0x08008be7
 8008af0:	08008bbd 	.word	0x08008bbd
 8008af4:	08008b4b 	.word	0x08008b4b
 8008af8:	08008b4b 	.word	0x08008b4b
 8008afc:	08008b4b 	.word	0x08008b4b
 8008b00:	08008a9b 	.word	0x08008a9b
 8008b04:	08008bc1 	.word	0x08008bc1
 8008b08:	08008a9b 	.word	0x08008a9b
 8008b0c:	08008a9b 	.word	0x08008a9b
 8008b10:	08008a9b 	.word	0x08008a9b
 8008b14:	08008a9b 	.word	0x08008a9b
 8008b18:	08008bf7 	.word	0x08008bf7
 8008b1c:	08008bc9 	.word	0x08008bc9
 8008b20:	08008b6b 	.word	0x08008b6b
 8008b24:	08008a9b 	.word	0x08008a9b
 8008b28:	08008a9b 	.word	0x08008a9b
 8008b2c:	08008bf3 	.word	0x08008bf3
 8008b30:	08008a9b 	.word	0x08008a9b
 8008b34:	08008bbd 	.word	0x08008bbd
 8008b38:	08008a9b 	.word	0x08008a9b
 8008b3c:	08008a9b 	.word	0x08008a9b
 8008b40:	08008b73 	.word	0x08008b73
 8008b44:	3b45      	subs	r3, #69	; 0x45
 8008b46:	2b02      	cmp	r3, #2
 8008b48:	d8a7      	bhi.n	8008a9a <__ssvfiscanf_r+0xee>
 8008b4a:	2305      	movs	r3, #5
 8008b4c:	e01b      	b.n	8008b86 <__ssvfiscanf_r+0x1da>
 8008b4e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008b50:	4621      	mov	r1, r4
 8008b52:	4630      	mov	r0, r6
 8008b54:	4798      	blx	r3
 8008b56:	2800      	cmp	r0, #0
 8008b58:	f43f af68 	beq.w	8008a2c <__ssvfiscanf_r+0x80>
 8008b5c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008b5e:	2800      	cmp	r0, #0
 8008b60:	f040 808d 	bne.w	8008c7e <__ssvfiscanf_r+0x2d2>
 8008b64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b68:	e08f      	b.n	8008c8a <__ssvfiscanf_r+0x2de>
 8008b6a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008b6c:	f042 0220 	orr.w	r2, r2, #32
 8008b70:	9241      	str	r2, [sp, #260]	; 0x104
 8008b72:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008b74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b78:	9241      	str	r2, [sp, #260]	; 0x104
 8008b7a:	2210      	movs	r2, #16
 8008b7c:	2b6f      	cmp	r3, #111	; 0x6f
 8008b7e:	9242      	str	r2, [sp, #264]	; 0x108
 8008b80:	bf34      	ite	cc
 8008b82:	2303      	movcc	r3, #3
 8008b84:	2304      	movcs	r3, #4
 8008b86:	9347      	str	r3, [sp, #284]	; 0x11c
 8008b88:	6863      	ldr	r3, [r4, #4]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	dd42      	ble.n	8008c14 <__ssvfiscanf_r+0x268>
 8008b8e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008b90:	0659      	lsls	r1, r3, #25
 8008b92:	d404      	bmi.n	8008b9e <__ssvfiscanf_r+0x1f2>
 8008b94:	6823      	ldr	r3, [r4, #0]
 8008b96:	781a      	ldrb	r2, [r3, #0]
 8008b98:	5cba      	ldrb	r2, [r7, r2]
 8008b9a:	0712      	lsls	r2, r2, #28
 8008b9c:	d441      	bmi.n	8008c22 <__ssvfiscanf_r+0x276>
 8008b9e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8008ba0:	2b02      	cmp	r3, #2
 8008ba2:	dc50      	bgt.n	8008c46 <__ssvfiscanf_r+0x29a>
 8008ba4:	466b      	mov	r3, sp
 8008ba6:	4622      	mov	r2, r4
 8008ba8:	a941      	add	r1, sp, #260	; 0x104
 8008baa:	4630      	mov	r0, r6
 8008bac:	f000 f876 	bl	8008c9c <_scanf_chars>
 8008bb0:	2801      	cmp	r0, #1
 8008bb2:	d06e      	beq.n	8008c92 <__ssvfiscanf_r+0x2e6>
 8008bb4:	2802      	cmp	r0, #2
 8008bb6:	f47f af20 	bne.w	80089fa <__ssvfiscanf_r+0x4e>
 8008bba:	e7cf      	b.n	8008b5c <__ssvfiscanf_r+0x1b0>
 8008bbc:	220a      	movs	r2, #10
 8008bbe:	e7dd      	b.n	8008b7c <__ssvfiscanf_r+0x1d0>
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	9342      	str	r3, [sp, #264]	; 0x108
 8008bc4:	2303      	movs	r3, #3
 8008bc6:	e7de      	b.n	8008b86 <__ssvfiscanf_r+0x1da>
 8008bc8:	2308      	movs	r3, #8
 8008bca:	9342      	str	r3, [sp, #264]	; 0x108
 8008bcc:	2304      	movs	r3, #4
 8008bce:	e7da      	b.n	8008b86 <__ssvfiscanf_r+0x1da>
 8008bd0:	4629      	mov	r1, r5
 8008bd2:	4640      	mov	r0, r8
 8008bd4:	f000 f9e0 	bl	8008f98 <__sccl>
 8008bd8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008bda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bde:	9341      	str	r3, [sp, #260]	; 0x104
 8008be0:	4605      	mov	r5, r0
 8008be2:	2301      	movs	r3, #1
 8008be4:	e7cf      	b.n	8008b86 <__ssvfiscanf_r+0x1da>
 8008be6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008be8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bec:	9341      	str	r3, [sp, #260]	; 0x104
 8008bee:	2300      	movs	r3, #0
 8008bf0:	e7c9      	b.n	8008b86 <__ssvfiscanf_r+0x1da>
 8008bf2:	2302      	movs	r3, #2
 8008bf4:	e7c7      	b.n	8008b86 <__ssvfiscanf_r+0x1da>
 8008bf6:	9841      	ldr	r0, [sp, #260]	; 0x104
 8008bf8:	06c3      	lsls	r3, r0, #27
 8008bfa:	f53f aefe 	bmi.w	80089fa <__ssvfiscanf_r+0x4e>
 8008bfe:	9b00      	ldr	r3, [sp, #0]
 8008c00:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008c02:	1d19      	adds	r1, r3, #4
 8008c04:	9100      	str	r1, [sp, #0]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f010 0f01 	tst.w	r0, #1
 8008c0c:	bf14      	ite	ne
 8008c0e:	801a      	strhne	r2, [r3, #0]
 8008c10:	601a      	streq	r2, [r3, #0]
 8008c12:	e6f2      	b.n	80089fa <__ssvfiscanf_r+0x4e>
 8008c14:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008c16:	4621      	mov	r1, r4
 8008c18:	4630      	mov	r0, r6
 8008c1a:	4798      	blx	r3
 8008c1c:	2800      	cmp	r0, #0
 8008c1e:	d0b6      	beq.n	8008b8e <__ssvfiscanf_r+0x1e2>
 8008c20:	e79c      	b.n	8008b5c <__ssvfiscanf_r+0x1b0>
 8008c22:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008c24:	3201      	adds	r2, #1
 8008c26:	9245      	str	r2, [sp, #276]	; 0x114
 8008c28:	6862      	ldr	r2, [r4, #4]
 8008c2a:	3a01      	subs	r2, #1
 8008c2c:	2a00      	cmp	r2, #0
 8008c2e:	6062      	str	r2, [r4, #4]
 8008c30:	dd02      	ble.n	8008c38 <__ssvfiscanf_r+0x28c>
 8008c32:	3301      	adds	r3, #1
 8008c34:	6023      	str	r3, [r4, #0]
 8008c36:	e7ad      	b.n	8008b94 <__ssvfiscanf_r+0x1e8>
 8008c38:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008c3a:	4621      	mov	r1, r4
 8008c3c:	4630      	mov	r0, r6
 8008c3e:	4798      	blx	r3
 8008c40:	2800      	cmp	r0, #0
 8008c42:	d0a7      	beq.n	8008b94 <__ssvfiscanf_r+0x1e8>
 8008c44:	e78a      	b.n	8008b5c <__ssvfiscanf_r+0x1b0>
 8008c46:	2b04      	cmp	r3, #4
 8008c48:	dc0e      	bgt.n	8008c68 <__ssvfiscanf_r+0x2bc>
 8008c4a:	466b      	mov	r3, sp
 8008c4c:	4622      	mov	r2, r4
 8008c4e:	a941      	add	r1, sp, #260	; 0x104
 8008c50:	4630      	mov	r0, r6
 8008c52:	f000 f87d 	bl	8008d50 <_scanf_i>
 8008c56:	e7ab      	b.n	8008bb0 <__ssvfiscanf_r+0x204>
 8008c58:	080088f9 	.word	0x080088f9
 8008c5c:	08008973 	.word	0x08008973
 8008c60:	0800af61 	.word	0x0800af61
 8008c64:	0800b2ca 	.word	0x0800b2ca
 8008c68:	4b0b      	ldr	r3, [pc, #44]	; (8008c98 <__ssvfiscanf_r+0x2ec>)
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	f43f aec5 	beq.w	80089fa <__ssvfiscanf_r+0x4e>
 8008c70:	466b      	mov	r3, sp
 8008c72:	4622      	mov	r2, r4
 8008c74:	a941      	add	r1, sp, #260	; 0x104
 8008c76:	4630      	mov	r0, r6
 8008c78:	f7fc fb8a 	bl	8005390 <_scanf_float>
 8008c7c:	e798      	b.n	8008bb0 <__ssvfiscanf_r+0x204>
 8008c7e:	89a3      	ldrh	r3, [r4, #12]
 8008c80:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008c84:	bf18      	it	ne
 8008c86:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8008c8a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8008c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c92:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008c94:	e7f9      	b.n	8008c8a <__ssvfiscanf_r+0x2de>
 8008c96:	bf00      	nop
 8008c98:	08005391 	.word	0x08005391

08008c9c <_scanf_chars>:
 8008c9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ca0:	4615      	mov	r5, r2
 8008ca2:	688a      	ldr	r2, [r1, #8]
 8008ca4:	4680      	mov	r8, r0
 8008ca6:	460c      	mov	r4, r1
 8008ca8:	b932      	cbnz	r2, 8008cb8 <_scanf_chars+0x1c>
 8008caa:	698a      	ldr	r2, [r1, #24]
 8008cac:	2a00      	cmp	r2, #0
 8008cae:	bf0c      	ite	eq
 8008cb0:	2201      	moveq	r2, #1
 8008cb2:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8008cb6:	608a      	str	r2, [r1, #8]
 8008cb8:	6822      	ldr	r2, [r4, #0]
 8008cba:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8008d4c <_scanf_chars+0xb0>
 8008cbe:	06d1      	lsls	r1, r2, #27
 8008cc0:	bf5f      	itttt	pl
 8008cc2:	681a      	ldrpl	r2, [r3, #0]
 8008cc4:	1d11      	addpl	r1, r2, #4
 8008cc6:	6019      	strpl	r1, [r3, #0]
 8008cc8:	6816      	ldrpl	r6, [r2, #0]
 8008cca:	2700      	movs	r7, #0
 8008ccc:	69a0      	ldr	r0, [r4, #24]
 8008cce:	b188      	cbz	r0, 8008cf4 <_scanf_chars+0x58>
 8008cd0:	2801      	cmp	r0, #1
 8008cd2:	d107      	bne.n	8008ce4 <_scanf_chars+0x48>
 8008cd4:	682a      	ldr	r2, [r5, #0]
 8008cd6:	7811      	ldrb	r1, [r2, #0]
 8008cd8:	6962      	ldr	r2, [r4, #20]
 8008cda:	5c52      	ldrb	r2, [r2, r1]
 8008cdc:	b952      	cbnz	r2, 8008cf4 <_scanf_chars+0x58>
 8008cde:	2f00      	cmp	r7, #0
 8008ce0:	d031      	beq.n	8008d46 <_scanf_chars+0xaa>
 8008ce2:	e022      	b.n	8008d2a <_scanf_chars+0x8e>
 8008ce4:	2802      	cmp	r0, #2
 8008ce6:	d120      	bne.n	8008d2a <_scanf_chars+0x8e>
 8008ce8:	682b      	ldr	r3, [r5, #0]
 8008cea:	781b      	ldrb	r3, [r3, #0]
 8008cec:	f813 3009 	ldrb.w	r3, [r3, r9]
 8008cf0:	071b      	lsls	r3, r3, #28
 8008cf2:	d41a      	bmi.n	8008d2a <_scanf_chars+0x8e>
 8008cf4:	6823      	ldr	r3, [r4, #0]
 8008cf6:	06da      	lsls	r2, r3, #27
 8008cf8:	bf5e      	ittt	pl
 8008cfa:	682b      	ldrpl	r3, [r5, #0]
 8008cfc:	781b      	ldrbpl	r3, [r3, #0]
 8008cfe:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008d02:	682a      	ldr	r2, [r5, #0]
 8008d04:	686b      	ldr	r3, [r5, #4]
 8008d06:	3201      	adds	r2, #1
 8008d08:	602a      	str	r2, [r5, #0]
 8008d0a:	68a2      	ldr	r2, [r4, #8]
 8008d0c:	3b01      	subs	r3, #1
 8008d0e:	3a01      	subs	r2, #1
 8008d10:	606b      	str	r3, [r5, #4]
 8008d12:	3701      	adds	r7, #1
 8008d14:	60a2      	str	r2, [r4, #8]
 8008d16:	b142      	cbz	r2, 8008d2a <_scanf_chars+0x8e>
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	dcd7      	bgt.n	8008ccc <_scanf_chars+0x30>
 8008d1c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008d20:	4629      	mov	r1, r5
 8008d22:	4640      	mov	r0, r8
 8008d24:	4798      	blx	r3
 8008d26:	2800      	cmp	r0, #0
 8008d28:	d0d0      	beq.n	8008ccc <_scanf_chars+0x30>
 8008d2a:	6823      	ldr	r3, [r4, #0]
 8008d2c:	f013 0310 	ands.w	r3, r3, #16
 8008d30:	d105      	bne.n	8008d3e <_scanf_chars+0xa2>
 8008d32:	68e2      	ldr	r2, [r4, #12]
 8008d34:	3201      	adds	r2, #1
 8008d36:	60e2      	str	r2, [r4, #12]
 8008d38:	69a2      	ldr	r2, [r4, #24]
 8008d3a:	b102      	cbz	r2, 8008d3e <_scanf_chars+0xa2>
 8008d3c:	7033      	strb	r3, [r6, #0]
 8008d3e:	6923      	ldr	r3, [r4, #16]
 8008d40:	443b      	add	r3, r7
 8008d42:	6123      	str	r3, [r4, #16]
 8008d44:	2000      	movs	r0, #0
 8008d46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d4a:	bf00      	nop
 8008d4c:	0800af61 	.word	0x0800af61

08008d50 <_scanf_i>:
 8008d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d54:	4698      	mov	r8, r3
 8008d56:	4b76      	ldr	r3, [pc, #472]	; (8008f30 <_scanf_i+0x1e0>)
 8008d58:	460c      	mov	r4, r1
 8008d5a:	4682      	mov	sl, r0
 8008d5c:	4616      	mov	r6, r2
 8008d5e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008d62:	b087      	sub	sp, #28
 8008d64:	ab03      	add	r3, sp, #12
 8008d66:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008d6a:	4b72      	ldr	r3, [pc, #456]	; (8008f34 <_scanf_i+0x1e4>)
 8008d6c:	69a1      	ldr	r1, [r4, #24]
 8008d6e:	4a72      	ldr	r2, [pc, #456]	; (8008f38 <_scanf_i+0x1e8>)
 8008d70:	2903      	cmp	r1, #3
 8008d72:	bf18      	it	ne
 8008d74:	461a      	movne	r2, r3
 8008d76:	68a3      	ldr	r3, [r4, #8]
 8008d78:	9201      	str	r2, [sp, #4]
 8008d7a:	1e5a      	subs	r2, r3, #1
 8008d7c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008d80:	bf88      	it	hi
 8008d82:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008d86:	4627      	mov	r7, r4
 8008d88:	bf82      	ittt	hi
 8008d8a:	eb03 0905 	addhi.w	r9, r3, r5
 8008d8e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008d92:	60a3      	strhi	r3, [r4, #8]
 8008d94:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008d98:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8008d9c:	bf98      	it	ls
 8008d9e:	f04f 0900 	movls.w	r9, #0
 8008da2:	6023      	str	r3, [r4, #0]
 8008da4:	463d      	mov	r5, r7
 8008da6:	f04f 0b00 	mov.w	fp, #0
 8008daa:	6831      	ldr	r1, [r6, #0]
 8008dac:	ab03      	add	r3, sp, #12
 8008dae:	7809      	ldrb	r1, [r1, #0]
 8008db0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008db4:	2202      	movs	r2, #2
 8008db6:	f7f7 fa2b 	bl	8000210 <memchr>
 8008dba:	b328      	cbz	r0, 8008e08 <_scanf_i+0xb8>
 8008dbc:	f1bb 0f01 	cmp.w	fp, #1
 8008dc0:	d159      	bne.n	8008e76 <_scanf_i+0x126>
 8008dc2:	6862      	ldr	r2, [r4, #4]
 8008dc4:	b92a      	cbnz	r2, 8008dd2 <_scanf_i+0x82>
 8008dc6:	6822      	ldr	r2, [r4, #0]
 8008dc8:	2308      	movs	r3, #8
 8008dca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008dce:	6063      	str	r3, [r4, #4]
 8008dd0:	6022      	str	r2, [r4, #0]
 8008dd2:	6822      	ldr	r2, [r4, #0]
 8008dd4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8008dd8:	6022      	str	r2, [r4, #0]
 8008dda:	68a2      	ldr	r2, [r4, #8]
 8008ddc:	1e51      	subs	r1, r2, #1
 8008dde:	60a1      	str	r1, [r4, #8]
 8008de0:	b192      	cbz	r2, 8008e08 <_scanf_i+0xb8>
 8008de2:	6832      	ldr	r2, [r6, #0]
 8008de4:	1c51      	adds	r1, r2, #1
 8008de6:	6031      	str	r1, [r6, #0]
 8008de8:	7812      	ldrb	r2, [r2, #0]
 8008dea:	f805 2b01 	strb.w	r2, [r5], #1
 8008dee:	6872      	ldr	r2, [r6, #4]
 8008df0:	3a01      	subs	r2, #1
 8008df2:	2a00      	cmp	r2, #0
 8008df4:	6072      	str	r2, [r6, #4]
 8008df6:	dc07      	bgt.n	8008e08 <_scanf_i+0xb8>
 8008df8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8008dfc:	4631      	mov	r1, r6
 8008dfe:	4650      	mov	r0, sl
 8008e00:	4790      	blx	r2
 8008e02:	2800      	cmp	r0, #0
 8008e04:	f040 8085 	bne.w	8008f12 <_scanf_i+0x1c2>
 8008e08:	f10b 0b01 	add.w	fp, fp, #1
 8008e0c:	f1bb 0f03 	cmp.w	fp, #3
 8008e10:	d1cb      	bne.n	8008daa <_scanf_i+0x5a>
 8008e12:	6863      	ldr	r3, [r4, #4]
 8008e14:	b90b      	cbnz	r3, 8008e1a <_scanf_i+0xca>
 8008e16:	230a      	movs	r3, #10
 8008e18:	6063      	str	r3, [r4, #4]
 8008e1a:	6863      	ldr	r3, [r4, #4]
 8008e1c:	4947      	ldr	r1, [pc, #284]	; (8008f3c <_scanf_i+0x1ec>)
 8008e1e:	6960      	ldr	r0, [r4, #20]
 8008e20:	1ac9      	subs	r1, r1, r3
 8008e22:	f000 f8b9 	bl	8008f98 <__sccl>
 8008e26:	f04f 0b00 	mov.w	fp, #0
 8008e2a:	68a3      	ldr	r3, [r4, #8]
 8008e2c:	6822      	ldr	r2, [r4, #0]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d03d      	beq.n	8008eae <_scanf_i+0x15e>
 8008e32:	6831      	ldr	r1, [r6, #0]
 8008e34:	6960      	ldr	r0, [r4, #20]
 8008e36:	f891 c000 	ldrb.w	ip, [r1]
 8008e3a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008e3e:	2800      	cmp	r0, #0
 8008e40:	d035      	beq.n	8008eae <_scanf_i+0x15e>
 8008e42:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8008e46:	d124      	bne.n	8008e92 <_scanf_i+0x142>
 8008e48:	0510      	lsls	r0, r2, #20
 8008e4a:	d522      	bpl.n	8008e92 <_scanf_i+0x142>
 8008e4c:	f10b 0b01 	add.w	fp, fp, #1
 8008e50:	f1b9 0f00 	cmp.w	r9, #0
 8008e54:	d003      	beq.n	8008e5e <_scanf_i+0x10e>
 8008e56:	3301      	adds	r3, #1
 8008e58:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8008e5c:	60a3      	str	r3, [r4, #8]
 8008e5e:	6873      	ldr	r3, [r6, #4]
 8008e60:	3b01      	subs	r3, #1
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	6073      	str	r3, [r6, #4]
 8008e66:	dd1b      	ble.n	8008ea0 <_scanf_i+0x150>
 8008e68:	6833      	ldr	r3, [r6, #0]
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	6033      	str	r3, [r6, #0]
 8008e6e:	68a3      	ldr	r3, [r4, #8]
 8008e70:	3b01      	subs	r3, #1
 8008e72:	60a3      	str	r3, [r4, #8]
 8008e74:	e7d9      	b.n	8008e2a <_scanf_i+0xda>
 8008e76:	f1bb 0f02 	cmp.w	fp, #2
 8008e7a:	d1ae      	bne.n	8008dda <_scanf_i+0x8a>
 8008e7c:	6822      	ldr	r2, [r4, #0]
 8008e7e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8008e82:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008e86:	d1bf      	bne.n	8008e08 <_scanf_i+0xb8>
 8008e88:	2310      	movs	r3, #16
 8008e8a:	6063      	str	r3, [r4, #4]
 8008e8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008e90:	e7a2      	b.n	8008dd8 <_scanf_i+0x88>
 8008e92:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8008e96:	6022      	str	r2, [r4, #0]
 8008e98:	780b      	ldrb	r3, [r1, #0]
 8008e9a:	f805 3b01 	strb.w	r3, [r5], #1
 8008e9e:	e7de      	b.n	8008e5e <_scanf_i+0x10e>
 8008ea0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008ea4:	4631      	mov	r1, r6
 8008ea6:	4650      	mov	r0, sl
 8008ea8:	4798      	blx	r3
 8008eaa:	2800      	cmp	r0, #0
 8008eac:	d0df      	beq.n	8008e6e <_scanf_i+0x11e>
 8008eae:	6823      	ldr	r3, [r4, #0]
 8008eb0:	05db      	lsls	r3, r3, #23
 8008eb2:	d50d      	bpl.n	8008ed0 <_scanf_i+0x180>
 8008eb4:	42bd      	cmp	r5, r7
 8008eb6:	d909      	bls.n	8008ecc <_scanf_i+0x17c>
 8008eb8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008ebc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008ec0:	4632      	mov	r2, r6
 8008ec2:	4650      	mov	r0, sl
 8008ec4:	4798      	blx	r3
 8008ec6:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8008eca:	464d      	mov	r5, r9
 8008ecc:	42bd      	cmp	r5, r7
 8008ece:	d02d      	beq.n	8008f2c <_scanf_i+0x1dc>
 8008ed0:	6822      	ldr	r2, [r4, #0]
 8008ed2:	f012 0210 	ands.w	r2, r2, #16
 8008ed6:	d113      	bne.n	8008f00 <_scanf_i+0x1b0>
 8008ed8:	702a      	strb	r2, [r5, #0]
 8008eda:	6863      	ldr	r3, [r4, #4]
 8008edc:	9e01      	ldr	r6, [sp, #4]
 8008ede:	4639      	mov	r1, r7
 8008ee0:	4650      	mov	r0, sl
 8008ee2:	47b0      	blx	r6
 8008ee4:	6821      	ldr	r1, [r4, #0]
 8008ee6:	f8d8 3000 	ldr.w	r3, [r8]
 8008eea:	f011 0f20 	tst.w	r1, #32
 8008eee:	d013      	beq.n	8008f18 <_scanf_i+0x1c8>
 8008ef0:	1d1a      	adds	r2, r3, #4
 8008ef2:	f8c8 2000 	str.w	r2, [r8]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	6018      	str	r0, [r3, #0]
 8008efa:	68e3      	ldr	r3, [r4, #12]
 8008efc:	3301      	adds	r3, #1
 8008efe:	60e3      	str	r3, [r4, #12]
 8008f00:	1bed      	subs	r5, r5, r7
 8008f02:	44ab      	add	fp, r5
 8008f04:	6925      	ldr	r5, [r4, #16]
 8008f06:	445d      	add	r5, fp
 8008f08:	6125      	str	r5, [r4, #16]
 8008f0a:	2000      	movs	r0, #0
 8008f0c:	b007      	add	sp, #28
 8008f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f12:	f04f 0b00 	mov.w	fp, #0
 8008f16:	e7ca      	b.n	8008eae <_scanf_i+0x15e>
 8008f18:	1d1a      	adds	r2, r3, #4
 8008f1a:	f8c8 2000 	str.w	r2, [r8]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f011 0f01 	tst.w	r1, #1
 8008f24:	bf14      	ite	ne
 8008f26:	8018      	strhne	r0, [r3, #0]
 8008f28:	6018      	streq	r0, [r3, #0]
 8008f2a:	e7e6      	b.n	8008efa <_scanf_i+0x1aa>
 8008f2c:	2001      	movs	r0, #1
 8008f2e:	e7ed      	b.n	8008f0c <_scanf_i+0x1bc>
 8008f30:	0800aec4 	.word	0x0800aec4
 8008f34:	08009115 	.word	0x08009115
 8008f38:	08006635 	.word	0x08006635
 8008f3c:	0800b2ee 	.word	0x0800b2ee

08008f40 <_read_r>:
 8008f40:	b538      	push	{r3, r4, r5, lr}
 8008f42:	4d07      	ldr	r5, [pc, #28]	; (8008f60 <_read_r+0x20>)
 8008f44:	4604      	mov	r4, r0
 8008f46:	4608      	mov	r0, r1
 8008f48:	4611      	mov	r1, r2
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	602a      	str	r2, [r5, #0]
 8008f4e:	461a      	mov	r2, r3
 8008f50:	f7f9 fa88 	bl	8002464 <_read>
 8008f54:	1c43      	adds	r3, r0, #1
 8008f56:	d102      	bne.n	8008f5e <_read_r+0x1e>
 8008f58:	682b      	ldr	r3, [r5, #0]
 8008f5a:	b103      	cbz	r3, 8008f5e <_read_r+0x1e>
 8008f5c:	6023      	str	r3, [r4, #0]
 8008f5e:	bd38      	pop	{r3, r4, r5, pc}
 8008f60:	200007dc 	.word	0x200007dc
 8008f64:	00000000 	.word	0x00000000

08008f68 <nan>:
 8008f68:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008f70 <nan+0x8>
 8008f6c:	4770      	bx	lr
 8008f6e:	bf00      	nop
 8008f70:	00000000 	.word	0x00000000
 8008f74:	7ff80000 	.word	0x7ff80000

08008f78 <_sbrk_r>:
 8008f78:	b538      	push	{r3, r4, r5, lr}
 8008f7a:	4d06      	ldr	r5, [pc, #24]	; (8008f94 <_sbrk_r+0x1c>)
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	4604      	mov	r4, r0
 8008f80:	4608      	mov	r0, r1
 8008f82:	602b      	str	r3, [r5, #0]
 8008f84:	f7f9 fadc 	bl	8002540 <_sbrk>
 8008f88:	1c43      	adds	r3, r0, #1
 8008f8a:	d102      	bne.n	8008f92 <_sbrk_r+0x1a>
 8008f8c:	682b      	ldr	r3, [r5, #0]
 8008f8e:	b103      	cbz	r3, 8008f92 <_sbrk_r+0x1a>
 8008f90:	6023      	str	r3, [r4, #0]
 8008f92:	bd38      	pop	{r3, r4, r5, pc}
 8008f94:	200007dc 	.word	0x200007dc

08008f98 <__sccl>:
 8008f98:	b570      	push	{r4, r5, r6, lr}
 8008f9a:	780b      	ldrb	r3, [r1, #0]
 8008f9c:	4604      	mov	r4, r0
 8008f9e:	2b5e      	cmp	r3, #94	; 0x5e
 8008fa0:	bf0b      	itete	eq
 8008fa2:	784b      	ldrbeq	r3, [r1, #1]
 8008fa4:	1c48      	addne	r0, r1, #1
 8008fa6:	1c88      	addeq	r0, r1, #2
 8008fa8:	2200      	movne	r2, #0
 8008faa:	bf08      	it	eq
 8008fac:	2201      	moveq	r2, #1
 8008fae:	1e61      	subs	r1, r4, #1
 8008fb0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8008fb4:	f801 2f01 	strb.w	r2, [r1, #1]!
 8008fb8:	42a9      	cmp	r1, r5
 8008fba:	d1fb      	bne.n	8008fb4 <__sccl+0x1c>
 8008fbc:	b90b      	cbnz	r3, 8008fc2 <__sccl+0x2a>
 8008fbe:	3801      	subs	r0, #1
 8008fc0:	bd70      	pop	{r4, r5, r6, pc}
 8008fc2:	f082 0201 	eor.w	r2, r2, #1
 8008fc6:	54e2      	strb	r2, [r4, r3]
 8008fc8:	4605      	mov	r5, r0
 8008fca:	4628      	mov	r0, r5
 8008fcc:	f810 1b01 	ldrb.w	r1, [r0], #1
 8008fd0:	292d      	cmp	r1, #45	; 0x2d
 8008fd2:	d006      	beq.n	8008fe2 <__sccl+0x4a>
 8008fd4:	295d      	cmp	r1, #93	; 0x5d
 8008fd6:	d0f3      	beq.n	8008fc0 <__sccl+0x28>
 8008fd8:	b909      	cbnz	r1, 8008fde <__sccl+0x46>
 8008fda:	4628      	mov	r0, r5
 8008fdc:	e7f0      	b.n	8008fc0 <__sccl+0x28>
 8008fde:	460b      	mov	r3, r1
 8008fe0:	e7f1      	b.n	8008fc6 <__sccl+0x2e>
 8008fe2:	786e      	ldrb	r6, [r5, #1]
 8008fe4:	2e5d      	cmp	r6, #93	; 0x5d
 8008fe6:	d0fa      	beq.n	8008fde <__sccl+0x46>
 8008fe8:	42b3      	cmp	r3, r6
 8008fea:	dcf8      	bgt.n	8008fde <__sccl+0x46>
 8008fec:	3502      	adds	r5, #2
 8008fee:	4619      	mov	r1, r3
 8008ff0:	3101      	adds	r1, #1
 8008ff2:	428e      	cmp	r6, r1
 8008ff4:	5462      	strb	r2, [r4, r1]
 8008ff6:	dcfb      	bgt.n	8008ff0 <__sccl+0x58>
 8008ff8:	1af1      	subs	r1, r6, r3
 8008ffa:	3901      	subs	r1, #1
 8008ffc:	1c58      	adds	r0, r3, #1
 8008ffe:	42b3      	cmp	r3, r6
 8009000:	bfa8      	it	ge
 8009002:	2100      	movge	r1, #0
 8009004:	1843      	adds	r3, r0, r1
 8009006:	e7e0      	b.n	8008fca <__sccl+0x32>

08009008 <strncmp>:
 8009008:	b510      	push	{r4, lr}
 800900a:	b17a      	cbz	r2, 800902c <strncmp+0x24>
 800900c:	4603      	mov	r3, r0
 800900e:	3901      	subs	r1, #1
 8009010:	1884      	adds	r4, r0, r2
 8009012:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009016:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800901a:	4290      	cmp	r0, r2
 800901c:	d101      	bne.n	8009022 <strncmp+0x1a>
 800901e:	42a3      	cmp	r3, r4
 8009020:	d101      	bne.n	8009026 <strncmp+0x1e>
 8009022:	1a80      	subs	r0, r0, r2
 8009024:	bd10      	pop	{r4, pc}
 8009026:	2800      	cmp	r0, #0
 8009028:	d1f3      	bne.n	8009012 <strncmp+0xa>
 800902a:	e7fa      	b.n	8009022 <strncmp+0x1a>
 800902c:	4610      	mov	r0, r2
 800902e:	e7f9      	b.n	8009024 <strncmp+0x1c>

08009030 <_strtoul_l.constprop.0>:
 8009030:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009034:	4f36      	ldr	r7, [pc, #216]	; (8009110 <_strtoul_l.constprop.0+0xe0>)
 8009036:	4686      	mov	lr, r0
 8009038:	460d      	mov	r5, r1
 800903a:	4628      	mov	r0, r5
 800903c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009040:	5de6      	ldrb	r6, [r4, r7]
 8009042:	f016 0608 	ands.w	r6, r6, #8
 8009046:	d1f8      	bne.n	800903a <_strtoul_l.constprop.0+0xa>
 8009048:	2c2d      	cmp	r4, #45	; 0x2d
 800904a:	d12f      	bne.n	80090ac <_strtoul_l.constprop.0+0x7c>
 800904c:	782c      	ldrb	r4, [r5, #0]
 800904e:	2601      	movs	r6, #1
 8009050:	1c85      	adds	r5, r0, #2
 8009052:	2b00      	cmp	r3, #0
 8009054:	d057      	beq.n	8009106 <_strtoul_l.constprop.0+0xd6>
 8009056:	2b10      	cmp	r3, #16
 8009058:	d109      	bne.n	800906e <_strtoul_l.constprop.0+0x3e>
 800905a:	2c30      	cmp	r4, #48	; 0x30
 800905c:	d107      	bne.n	800906e <_strtoul_l.constprop.0+0x3e>
 800905e:	7828      	ldrb	r0, [r5, #0]
 8009060:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009064:	2858      	cmp	r0, #88	; 0x58
 8009066:	d149      	bne.n	80090fc <_strtoul_l.constprop.0+0xcc>
 8009068:	786c      	ldrb	r4, [r5, #1]
 800906a:	2310      	movs	r3, #16
 800906c:	3502      	adds	r5, #2
 800906e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8009072:	2700      	movs	r7, #0
 8009074:	fbb8 f8f3 	udiv	r8, r8, r3
 8009078:	fb03 f908 	mul.w	r9, r3, r8
 800907c:	ea6f 0909 	mvn.w	r9, r9
 8009080:	4638      	mov	r0, r7
 8009082:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009086:	f1bc 0f09 	cmp.w	ip, #9
 800908a:	d814      	bhi.n	80090b6 <_strtoul_l.constprop.0+0x86>
 800908c:	4664      	mov	r4, ip
 800908e:	42a3      	cmp	r3, r4
 8009090:	dd22      	ble.n	80090d8 <_strtoul_l.constprop.0+0xa8>
 8009092:	2f00      	cmp	r7, #0
 8009094:	db1d      	blt.n	80090d2 <_strtoul_l.constprop.0+0xa2>
 8009096:	4580      	cmp	r8, r0
 8009098:	d31b      	bcc.n	80090d2 <_strtoul_l.constprop.0+0xa2>
 800909a:	d101      	bne.n	80090a0 <_strtoul_l.constprop.0+0x70>
 800909c:	45a1      	cmp	r9, r4
 800909e:	db18      	blt.n	80090d2 <_strtoul_l.constprop.0+0xa2>
 80090a0:	fb00 4003 	mla	r0, r0, r3, r4
 80090a4:	2701      	movs	r7, #1
 80090a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80090aa:	e7ea      	b.n	8009082 <_strtoul_l.constprop.0+0x52>
 80090ac:	2c2b      	cmp	r4, #43	; 0x2b
 80090ae:	bf04      	itt	eq
 80090b0:	782c      	ldrbeq	r4, [r5, #0]
 80090b2:	1c85      	addeq	r5, r0, #2
 80090b4:	e7cd      	b.n	8009052 <_strtoul_l.constprop.0+0x22>
 80090b6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80090ba:	f1bc 0f19 	cmp.w	ip, #25
 80090be:	d801      	bhi.n	80090c4 <_strtoul_l.constprop.0+0x94>
 80090c0:	3c37      	subs	r4, #55	; 0x37
 80090c2:	e7e4      	b.n	800908e <_strtoul_l.constprop.0+0x5e>
 80090c4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80090c8:	f1bc 0f19 	cmp.w	ip, #25
 80090cc:	d804      	bhi.n	80090d8 <_strtoul_l.constprop.0+0xa8>
 80090ce:	3c57      	subs	r4, #87	; 0x57
 80090d0:	e7dd      	b.n	800908e <_strtoul_l.constprop.0+0x5e>
 80090d2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80090d6:	e7e6      	b.n	80090a6 <_strtoul_l.constprop.0+0x76>
 80090d8:	2f00      	cmp	r7, #0
 80090da:	da07      	bge.n	80090ec <_strtoul_l.constprop.0+0xbc>
 80090dc:	2322      	movs	r3, #34	; 0x22
 80090de:	f8ce 3000 	str.w	r3, [lr]
 80090e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090e6:	b932      	cbnz	r2, 80090f6 <_strtoul_l.constprop.0+0xc6>
 80090e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80090ec:	b106      	cbz	r6, 80090f0 <_strtoul_l.constprop.0+0xc0>
 80090ee:	4240      	negs	r0, r0
 80090f0:	2a00      	cmp	r2, #0
 80090f2:	d0f9      	beq.n	80090e8 <_strtoul_l.constprop.0+0xb8>
 80090f4:	b107      	cbz	r7, 80090f8 <_strtoul_l.constprop.0+0xc8>
 80090f6:	1e69      	subs	r1, r5, #1
 80090f8:	6011      	str	r1, [r2, #0]
 80090fa:	e7f5      	b.n	80090e8 <_strtoul_l.constprop.0+0xb8>
 80090fc:	2430      	movs	r4, #48	; 0x30
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d1b5      	bne.n	800906e <_strtoul_l.constprop.0+0x3e>
 8009102:	2308      	movs	r3, #8
 8009104:	e7b3      	b.n	800906e <_strtoul_l.constprop.0+0x3e>
 8009106:	2c30      	cmp	r4, #48	; 0x30
 8009108:	d0a9      	beq.n	800905e <_strtoul_l.constprop.0+0x2e>
 800910a:	230a      	movs	r3, #10
 800910c:	e7af      	b.n	800906e <_strtoul_l.constprop.0+0x3e>
 800910e:	bf00      	nop
 8009110:	0800af61 	.word	0x0800af61

08009114 <_strtoul_r>:
 8009114:	f7ff bf8c 	b.w	8009030 <_strtoul_l.constprop.0>

08009118 <__submore>:
 8009118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800911c:	460c      	mov	r4, r1
 800911e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009120:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009124:	4299      	cmp	r1, r3
 8009126:	d11d      	bne.n	8009164 <__submore+0x4c>
 8009128:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800912c:	f7ff fa14 	bl	8008558 <_malloc_r>
 8009130:	b918      	cbnz	r0, 800913a <__submore+0x22>
 8009132:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800913a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800913e:	63a3      	str	r3, [r4, #56]	; 0x38
 8009140:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009144:	6360      	str	r0, [r4, #52]	; 0x34
 8009146:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800914a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800914e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8009152:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009156:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800915a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800915e:	6020      	str	r0, [r4, #0]
 8009160:	2000      	movs	r0, #0
 8009162:	e7e8      	b.n	8009136 <__submore+0x1e>
 8009164:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8009166:	0077      	lsls	r7, r6, #1
 8009168:	463a      	mov	r2, r7
 800916a:	f000 fa2d 	bl	80095c8 <_realloc_r>
 800916e:	4605      	mov	r5, r0
 8009170:	2800      	cmp	r0, #0
 8009172:	d0de      	beq.n	8009132 <__submore+0x1a>
 8009174:	eb00 0806 	add.w	r8, r0, r6
 8009178:	4601      	mov	r1, r0
 800917a:	4632      	mov	r2, r6
 800917c:	4640      	mov	r0, r8
 800917e:	f7fe fc99 	bl	8007ab4 <memcpy>
 8009182:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8009186:	f8c4 8000 	str.w	r8, [r4]
 800918a:	e7e9      	b.n	8009160 <__submore+0x48>

0800918c <__ascii_wctomb>:
 800918c:	b149      	cbz	r1, 80091a2 <__ascii_wctomb+0x16>
 800918e:	2aff      	cmp	r2, #255	; 0xff
 8009190:	bf85      	ittet	hi
 8009192:	238a      	movhi	r3, #138	; 0x8a
 8009194:	6003      	strhi	r3, [r0, #0]
 8009196:	700a      	strbls	r2, [r1, #0]
 8009198:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800919c:	bf98      	it	ls
 800919e:	2001      	movls	r0, #1
 80091a0:	4770      	bx	lr
 80091a2:	4608      	mov	r0, r1
 80091a4:	4770      	bx	lr
	...

080091a8 <__assert_func>:
 80091a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80091aa:	4614      	mov	r4, r2
 80091ac:	461a      	mov	r2, r3
 80091ae:	4b09      	ldr	r3, [pc, #36]	; (80091d4 <__assert_func+0x2c>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	4605      	mov	r5, r0
 80091b4:	68d8      	ldr	r0, [r3, #12]
 80091b6:	b14c      	cbz	r4, 80091cc <__assert_func+0x24>
 80091b8:	4b07      	ldr	r3, [pc, #28]	; (80091d8 <__assert_func+0x30>)
 80091ba:	9100      	str	r1, [sp, #0]
 80091bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80091c0:	4906      	ldr	r1, [pc, #24]	; (80091dc <__assert_func+0x34>)
 80091c2:	462b      	mov	r3, r5
 80091c4:	f000 f9a6 	bl	8009514 <fiprintf>
 80091c8:	f000 fc46 	bl	8009a58 <abort>
 80091cc:	4b04      	ldr	r3, [pc, #16]	; (80091e0 <__assert_func+0x38>)
 80091ce:	461c      	mov	r4, r3
 80091d0:	e7f3      	b.n	80091ba <__assert_func+0x12>
 80091d2:	bf00      	nop
 80091d4:	2000001c 	.word	0x2000001c
 80091d8:	0800b2f0 	.word	0x0800b2f0
 80091dc:	0800b2fd 	.word	0x0800b2fd
 80091e0:	0800b32b 	.word	0x0800b32b

080091e4 <__sflush_r>:
 80091e4:	898a      	ldrh	r2, [r1, #12]
 80091e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091ea:	4605      	mov	r5, r0
 80091ec:	0710      	lsls	r0, r2, #28
 80091ee:	460c      	mov	r4, r1
 80091f0:	d458      	bmi.n	80092a4 <__sflush_r+0xc0>
 80091f2:	684b      	ldr	r3, [r1, #4]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	dc05      	bgt.n	8009204 <__sflush_r+0x20>
 80091f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	dc02      	bgt.n	8009204 <__sflush_r+0x20>
 80091fe:	2000      	movs	r0, #0
 8009200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009204:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009206:	2e00      	cmp	r6, #0
 8009208:	d0f9      	beq.n	80091fe <__sflush_r+0x1a>
 800920a:	2300      	movs	r3, #0
 800920c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009210:	682f      	ldr	r7, [r5, #0]
 8009212:	602b      	str	r3, [r5, #0]
 8009214:	d032      	beq.n	800927c <__sflush_r+0x98>
 8009216:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009218:	89a3      	ldrh	r3, [r4, #12]
 800921a:	075a      	lsls	r2, r3, #29
 800921c:	d505      	bpl.n	800922a <__sflush_r+0x46>
 800921e:	6863      	ldr	r3, [r4, #4]
 8009220:	1ac0      	subs	r0, r0, r3
 8009222:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009224:	b10b      	cbz	r3, 800922a <__sflush_r+0x46>
 8009226:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009228:	1ac0      	subs	r0, r0, r3
 800922a:	2300      	movs	r3, #0
 800922c:	4602      	mov	r2, r0
 800922e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009230:	6a21      	ldr	r1, [r4, #32]
 8009232:	4628      	mov	r0, r5
 8009234:	47b0      	blx	r6
 8009236:	1c43      	adds	r3, r0, #1
 8009238:	89a3      	ldrh	r3, [r4, #12]
 800923a:	d106      	bne.n	800924a <__sflush_r+0x66>
 800923c:	6829      	ldr	r1, [r5, #0]
 800923e:	291d      	cmp	r1, #29
 8009240:	d82c      	bhi.n	800929c <__sflush_r+0xb8>
 8009242:	4a2a      	ldr	r2, [pc, #168]	; (80092ec <__sflush_r+0x108>)
 8009244:	40ca      	lsrs	r2, r1
 8009246:	07d6      	lsls	r6, r2, #31
 8009248:	d528      	bpl.n	800929c <__sflush_r+0xb8>
 800924a:	2200      	movs	r2, #0
 800924c:	6062      	str	r2, [r4, #4]
 800924e:	04d9      	lsls	r1, r3, #19
 8009250:	6922      	ldr	r2, [r4, #16]
 8009252:	6022      	str	r2, [r4, #0]
 8009254:	d504      	bpl.n	8009260 <__sflush_r+0x7c>
 8009256:	1c42      	adds	r2, r0, #1
 8009258:	d101      	bne.n	800925e <__sflush_r+0x7a>
 800925a:	682b      	ldr	r3, [r5, #0]
 800925c:	b903      	cbnz	r3, 8009260 <__sflush_r+0x7c>
 800925e:	6560      	str	r0, [r4, #84]	; 0x54
 8009260:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009262:	602f      	str	r7, [r5, #0]
 8009264:	2900      	cmp	r1, #0
 8009266:	d0ca      	beq.n	80091fe <__sflush_r+0x1a>
 8009268:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800926c:	4299      	cmp	r1, r3
 800926e:	d002      	beq.n	8009276 <__sflush_r+0x92>
 8009270:	4628      	mov	r0, r5
 8009272:	f7ff f905 	bl	8008480 <_free_r>
 8009276:	2000      	movs	r0, #0
 8009278:	6360      	str	r0, [r4, #52]	; 0x34
 800927a:	e7c1      	b.n	8009200 <__sflush_r+0x1c>
 800927c:	6a21      	ldr	r1, [r4, #32]
 800927e:	2301      	movs	r3, #1
 8009280:	4628      	mov	r0, r5
 8009282:	47b0      	blx	r6
 8009284:	1c41      	adds	r1, r0, #1
 8009286:	d1c7      	bne.n	8009218 <__sflush_r+0x34>
 8009288:	682b      	ldr	r3, [r5, #0]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d0c4      	beq.n	8009218 <__sflush_r+0x34>
 800928e:	2b1d      	cmp	r3, #29
 8009290:	d001      	beq.n	8009296 <__sflush_r+0xb2>
 8009292:	2b16      	cmp	r3, #22
 8009294:	d101      	bne.n	800929a <__sflush_r+0xb6>
 8009296:	602f      	str	r7, [r5, #0]
 8009298:	e7b1      	b.n	80091fe <__sflush_r+0x1a>
 800929a:	89a3      	ldrh	r3, [r4, #12]
 800929c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092a0:	81a3      	strh	r3, [r4, #12]
 80092a2:	e7ad      	b.n	8009200 <__sflush_r+0x1c>
 80092a4:	690f      	ldr	r7, [r1, #16]
 80092a6:	2f00      	cmp	r7, #0
 80092a8:	d0a9      	beq.n	80091fe <__sflush_r+0x1a>
 80092aa:	0793      	lsls	r3, r2, #30
 80092ac:	680e      	ldr	r6, [r1, #0]
 80092ae:	bf08      	it	eq
 80092b0:	694b      	ldreq	r3, [r1, #20]
 80092b2:	600f      	str	r7, [r1, #0]
 80092b4:	bf18      	it	ne
 80092b6:	2300      	movne	r3, #0
 80092b8:	eba6 0807 	sub.w	r8, r6, r7
 80092bc:	608b      	str	r3, [r1, #8]
 80092be:	f1b8 0f00 	cmp.w	r8, #0
 80092c2:	dd9c      	ble.n	80091fe <__sflush_r+0x1a>
 80092c4:	6a21      	ldr	r1, [r4, #32]
 80092c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80092c8:	4643      	mov	r3, r8
 80092ca:	463a      	mov	r2, r7
 80092cc:	4628      	mov	r0, r5
 80092ce:	47b0      	blx	r6
 80092d0:	2800      	cmp	r0, #0
 80092d2:	dc06      	bgt.n	80092e2 <__sflush_r+0xfe>
 80092d4:	89a3      	ldrh	r3, [r4, #12]
 80092d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092da:	81a3      	strh	r3, [r4, #12]
 80092dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80092e0:	e78e      	b.n	8009200 <__sflush_r+0x1c>
 80092e2:	4407      	add	r7, r0
 80092e4:	eba8 0800 	sub.w	r8, r8, r0
 80092e8:	e7e9      	b.n	80092be <__sflush_r+0xda>
 80092ea:	bf00      	nop
 80092ec:	20400001 	.word	0x20400001

080092f0 <_fflush_r>:
 80092f0:	b538      	push	{r3, r4, r5, lr}
 80092f2:	690b      	ldr	r3, [r1, #16]
 80092f4:	4605      	mov	r5, r0
 80092f6:	460c      	mov	r4, r1
 80092f8:	b913      	cbnz	r3, 8009300 <_fflush_r+0x10>
 80092fa:	2500      	movs	r5, #0
 80092fc:	4628      	mov	r0, r5
 80092fe:	bd38      	pop	{r3, r4, r5, pc}
 8009300:	b118      	cbz	r0, 800930a <_fflush_r+0x1a>
 8009302:	6983      	ldr	r3, [r0, #24]
 8009304:	b90b      	cbnz	r3, 800930a <_fflush_r+0x1a>
 8009306:	f000 f887 	bl	8009418 <__sinit>
 800930a:	4b14      	ldr	r3, [pc, #80]	; (800935c <_fflush_r+0x6c>)
 800930c:	429c      	cmp	r4, r3
 800930e:	d11b      	bne.n	8009348 <_fflush_r+0x58>
 8009310:	686c      	ldr	r4, [r5, #4]
 8009312:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d0ef      	beq.n	80092fa <_fflush_r+0xa>
 800931a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800931c:	07d0      	lsls	r0, r2, #31
 800931e:	d404      	bmi.n	800932a <_fflush_r+0x3a>
 8009320:	0599      	lsls	r1, r3, #22
 8009322:	d402      	bmi.n	800932a <_fflush_r+0x3a>
 8009324:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009326:	f000 f927 	bl	8009578 <__retarget_lock_acquire_recursive>
 800932a:	4628      	mov	r0, r5
 800932c:	4621      	mov	r1, r4
 800932e:	f7ff ff59 	bl	80091e4 <__sflush_r>
 8009332:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009334:	07da      	lsls	r2, r3, #31
 8009336:	4605      	mov	r5, r0
 8009338:	d4e0      	bmi.n	80092fc <_fflush_r+0xc>
 800933a:	89a3      	ldrh	r3, [r4, #12]
 800933c:	059b      	lsls	r3, r3, #22
 800933e:	d4dd      	bmi.n	80092fc <_fflush_r+0xc>
 8009340:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009342:	f000 f91a 	bl	800957a <__retarget_lock_release_recursive>
 8009346:	e7d9      	b.n	80092fc <_fflush_r+0xc>
 8009348:	4b05      	ldr	r3, [pc, #20]	; (8009360 <_fflush_r+0x70>)
 800934a:	429c      	cmp	r4, r3
 800934c:	d101      	bne.n	8009352 <_fflush_r+0x62>
 800934e:	68ac      	ldr	r4, [r5, #8]
 8009350:	e7df      	b.n	8009312 <_fflush_r+0x22>
 8009352:	4b04      	ldr	r3, [pc, #16]	; (8009364 <_fflush_r+0x74>)
 8009354:	429c      	cmp	r4, r3
 8009356:	bf08      	it	eq
 8009358:	68ec      	ldreq	r4, [r5, #12]
 800935a:	e7da      	b.n	8009312 <_fflush_r+0x22>
 800935c:	0800b34c 	.word	0x0800b34c
 8009360:	0800b36c 	.word	0x0800b36c
 8009364:	0800b32c 	.word	0x0800b32c

08009368 <std>:
 8009368:	2300      	movs	r3, #0
 800936a:	b510      	push	{r4, lr}
 800936c:	4604      	mov	r4, r0
 800936e:	e9c0 3300 	strd	r3, r3, [r0]
 8009372:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009376:	6083      	str	r3, [r0, #8]
 8009378:	8181      	strh	r1, [r0, #12]
 800937a:	6643      	str	r3, [r0, #100]	; 0x64
 800937c:	81c2      	strh	r2, [r0, #14]
 800937e:	6183      	str	r3, [r0, #24]
 8009380:	4619      	mov	r1, r3
 8009382:	2208      	movs	r2, #8
 8009384:	305c      	adds	r0, #92	; 0x5c
 8009386:	f7fb fb91 	bl	8004aac <memset>
 800938a:	4b05      	ldr	r3, [pc, #20]	; (80093a0 <std+0x38>)
 800938c:	6263      	str	r3, [r4, #36]	; 0x24
 800938e:	4b05      	ldr	r3, [pc, #20]	; (80093a4 <std+0x3c>)
 8009390:	62a3      	str	r3, [r4, #40]	; 0x28
 8009392:	4b05      	ldr	r3, [pc, #20]	; (80093a8 <std+0x40>)
 8009394:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009396:	4b05      	ldr	r3, [pc, #20]	; (80093ac <std+0x44>)
 8009398:	6224      	str	r4, [r4, #32]
 800939a:	6323      	str	r3, [r4, #48]	; 0x30
 800939c:	bd10      	pop	{r4, pc}
 800939e:	bf00      	nop
 80093a0:	08005855 	.word	0x08005855
 80093a4:	0800587b 	.word	0x0800587b
 80093a8:	080058b3 	.word	0x080058b3
 80093ac:	080058d7 	.word	0x080058d7

080093b0 <_cleanup_r>:
 80093b0:	4901      	ldr	r1, [pc, #4]	; (80093b8 <_cleanup_r+0x8>)
 80093b2:	f000 b8c1 	b.w	8009538 <_fwalk_reent>
 80093b6:	bf00      	nop
 80093b8:	080092f1 	.word	0x080092f1

080093bc <__sfmoreglue>:
 80093bc:	b570      	push	{r4, r5, r6, lr}
 80093be:	2268      	movs	r2, #104	; 0x68
 80093c0:	1e4d      	subs	r5, r1, #1
 80093c2:	4355      	muls	r5, r2
 80093c4:	460e      	mov	r6, r1
 80093c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80093ca:	f7ff f8c5 	bl	8008558 <_malloc_r>
 80093ce:	4604      	mov	r4, r0
 80093d0:	b140      	cbz	r0, 80093e4 <__sfmoreglue+0x28>
 80093d2:	2100      	movs	r1, #0
 80093d4:	e9c0 1600 	strd	r1, r6, [r0]
 80093d8:	300c      	adds	r0, #12
 80093da:	60a0      	str	r0, [r4, #8]
 80093dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80093e0:	f7fb fb64 	bl	8004aac <memset>
 80093e4:	4620      	mov	r0, r4
 80093e6:	bd70      	pop	{r4, r5, r6, pc}

080093e8 <__sfp_lock_acquire>:
 80093e8:	4801      	ldr	r0, [pc, #4]	; (80093f0 <__sfp_lock_acquire+0x8>)
 80093ea:	f000 b8c5 	b.w	8009578 <__retarget_lock_acquire_recursive>
 80093ee:	bf00      	nop
 80093f0:	200007e1 	.word	0x200007e1

080093f4 <__sfp_lock_release>:
 80093f4:	4801      	ldr	r0, [pc, #4]	; (80093fc <__sfp_lock_release+0x8>)
 80093f6:	f000 b8c0 	b.w	800957a <__retarget_lock_release_recursive>
 80093fa:	bf00      	nop
 80093fc:	200007e1 	.word	0x200007e1

08009400 <__sinit_lock_acquire>:
 8009400:	4801      	ldr	r0, [pc, #4]	; (8009408 <__sinit_lock_acquire+0x8>)
 8009402:	f000 b8b9 	b.w	8009578 <__retarget_lock_acquire_recursive>
 8009406:	bf00      	nop
 8009408:	200007e2 	.word	0x200007e2

0800940c <__sinit_lock_release>:
 800940c:	4801      	ldr	r0, [pc, #4]	; (8009414 <__sinit_lock_release+0x8>)
 800940e:	f000 b8b4 	b.w	800957a <__retarget_lock_release_recursive>
 8009412:	bf00      	nop
 8009414:	200007e2 	.word	0x200007e2

08009418 <__sinit>:
 8009418:	b510      	push	{r4, lr}
 800941a:	4604      	mov	r4, r0
 800941c:	f7ff fff0 	bl	8009400 <__sinit_lock_acquire>
 8009420:	69a3      	ldr	r3, [r4, #24]
 8009422:	b11b      	cbz	r3, 800942c <__sinit+0x14>
 8009424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009428:	f7ff bff0 	b.w	800940c <__sinit_lock_release>
 800942c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009430:	6523      	str	r3, [r4, #80]	; 0x50
 8009432:	4b13      	ldr	r3, [pc, #76]	; (8009480 <__sinit+0x68>)
 8009434:	4a13      	ldr	r2, [pc, #76]	; (8009484 <__sinit+0x6c>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	62a2      	str	r2, [r4, #40]	; 0x28
 800943a:	42a3      	cmp	r3, r4
 800943c:	bf04      	itt	eq
 800943e:	2301      	moveq	r3, #1
 8009440:	61a3      	streq	r3, [r4, #24]
 8009442:	4620      	mov	r0, r4
 8009444:	f000 f820 	bl	8009488 <__sfp>
 8009448:	6060      	str	r0, [r4, #4]
 800944a:	4620      	mov	r0, r4
 800944c:	f000 f81c 	bl	8009488 <__sfp>
 8009450:	60a0      	str	r0, [r4, #8]
 8009452:	4620      	mov	r0, r4
 8009454:	f000 f818 	bl	8009488 <__sfp>
 8009458:	2200      	movs	r2, #0
 800945a:	60e0      	str	r0, [r4, #12]
 800945c:	2104      	movs	r1, #4
 800945e:	6860      	ldr	r0, [r4, #4]
 8009460:	f7ff ff82 	bl	8009368 <std>
 8009464:	68a0      	ldr	r0, [r4, #8]
 8009466:	2201      	movs	r2, #1
 8009468:	2109      	movs	r1, #9
 800946a:	f7ff ff7d 	bl	8009368 <std>
 800946e:	68e0      	ldr	r0, [r4, #12]
 8009470:	2202      	movs	r2, #2
 8009472:	2112      	movs	r1, #18
 8009474:	f7ff ff78 	bl	8009368 <std>
 8009478:	2301      	movs	r3, #1
 800947a:	61a3      	str	r3, [r4, #24]
 800947c:	e7d2      	b.n	8009424 <__sinit+0xc>
 800947e:	bf00      	nop
 8009480:	0800aed0 	.word	0x0800aed0
 8009484:	080093b1 	.word	0x080093b1

08009488 <__sfp>:
 8009488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800948a:	4607      	mov	r7, r0
 800948c:	f7ff ffac 	bl	80093e8 <__sfp_lock_acquire>
 8009490:	4b1e      	ldr	r3, [pc, #120]	; (800950c <__sfp+0x84>)
 8009492:	681e      	ldr	r6, [r3, #0]
 8009494:	69b3      	ldr	r3, [r6, #24]
 8009496:	b913      	cbnz	r3, 800949e <__sfp+0x16>
 8009498:	4630      	mov	r0, r6
 800949a:	f7ff ffbd 	bl	8009418 <__sinit>
 800949e:	3648      	adds	r6, #72	; 0x48
 80094a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80094a4:	3b01      	subs	r3, #1
 80094a6:	d503      	bpl.n	80094b0 <__sfp+0x28>
 80094a8:	6833      	ldr	r3, [r6, #0]
 80094aa:	b30b      	cbz	r3, 80094f0 <__sfp+0x68>
 80094ac:	6836      	ldr	r6, [r6, #0]
 80094ae:	e7f7      	b.n	80094a0 <__sfp+0x18>
 80094b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80094b4:	b9d5      	cbnz	r5, 80094ec <__sfp+0x64>
 80094b6:	4b16      	ldr	r3, [pc, #88]	; (8009510 <__sfp+0x88>)
 80094b8:	60e3      	str	r3, [r4, #12]
 80094ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80094be:	6665      	str	r5, [r4, #100]	; 0x64
 80094c0:	f000 f859 	bl	8009576 <__retarget_lock_init_recursive>
 80094c4:	f7ff ff96 	bl	80093f4 <__sfp_lock_release>
 80094c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80094cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80094d0:	6025      	str	r5, [r4, #0]
 80094d2:	61a5      	str	r5, [r4, #24]
 80094d4:	2208      	movs	r2, #8
 80094d6:	4629      	mov	r1, r5
 80094d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80094dc:	f7fb fae6 	bl	8004aac <memset>
 80094e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80094e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80094e8:	4620      	mov	r0, r4
 80094ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094ec:	3468      	adds	r4, #104	; 0x68
 80094ee:	e7d9      	b.n	80094a4 <__sfp+0x1c>
 80094f0:	2104      	movs	r1, #4
 80094f2:	4638      	mov	r0, r7
 80094f4:	f7ff ff62 	bl	80093bc <__sfmoreglue>
 80094f8:	4604      	mov	r4, r0
 80094fa:	6030      	str	r0, [r6, #0]
 80094fc:	2800      	cmp	r0, #0
 80094fe:	d1d5      	bne.n	80094ac <__sfp+0x24>
 8009500:	f7ff ff78 	bl	80093f4 <__sfp_lock_release>
 8009504:	230c      	movs	r3, #12
 8009506:	603b      	str	r3, [r7, #0]
 8009508:	e7ee      	b.n	80094e8 <__sfp+0x60>
 800950a:	bf00      	nop
 800950c:	0800aed0 	.word	0x0800aed0
 8009510:	ffff0001 	.word	0xffff0001

08009514 <fiprintf>:
 8009514:	b40e      	push	{r1, r2, r3}
 8009516:	b503      	push	{r0, r1, lr}
 8009518:	4601      	mov	r1, r0
 800951a:	ab03      	add	r3, sp, #12
 800951c:	4805      	ldr	r0, [pc, #20]	; (8009534 <fiprintf+0x20>)
 800951e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009522:	6800      	ldr	r0, [r0, #0]
 8009524:	9301      	str	r3, [sp, #4]
 8009526:	f000 f8a7 	bl	8009678 <_vfiprintf_r>
 800952a:	b002      	add	sp, #8
 800952c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009530:	b003      	add	sp, #12
 8009532:	4770      	bx	lr
 8009534:	2000001c 	.word	0x2000001c

08009538 <_fwalk_reent>:
 8009538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800953c:	4606      	mov	r6, r0
 800953e:	4688      	mov	r8, r1
 8009540:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009544:	2700      	movs	r7, #0
 8009546:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800954a:	f1b9 0901 	subs.w	r9, r9, #1
 800954e:	d505      	bpl.n	800955c <_fwalk_reent+0x24>
 8009550:	6824      	ldr	r4, [r4, #0]
 8009552:	2c00      	cmp	r4, #0
 8009554:	d1f7      	bne.n	8009546 <_fwalk_reent+0xe>
 8009556:	4638      	mov	r0, r7
 8009558:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800955c:	89ab      	ldrh	r3, [r5, #12]
 800955e:	2b01      	cmp	r3, #1
 8009560:	d907      	bls.n	8009572 <_fwalk_reent+0x3a>
 8009562:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009566:	3301      	adds	r3, #1
 8009568:	d003      	beq.n	8009572 <_fwalk_reent+0x3a>
 800956a:	4629      	mov	r1, r5
 800956c:	4630      	mov	r0, r6
 800956e:	47c0      	blx	r8
 8009570:	4307      	orrs	r7, r0
 8009572:	3568      	adds	r5, #104	; 0x68
 8009574:	e7e9      	b.n	800954a <_fwalk_reent+0x12>

08009576 <__retarget_lock_init_recursive>:
 8009576:	4770      	bx	lr

08009578 <__retarget_lock_acquire_recursive>:
 8009578:	4770      	bx	lr

0800957a <__retarget_lock_release_recursive>:
 800957a:	4770      	bx	lr

0800957c <memmove>:
 800957c:	4288      	cmp	r0, r1
 800957e:	b510      	push	{r4, lr}
 8009580:	eb01 0402 	add.w	r4, r1, r2
 8009584:	d902      	bls.n	800958c <memmove+0x10>
 8009586:	4284      	cmp	r4, r0
 8009588:	4623      	mov	r3, r4
 800958a:	d807      	bhi.n	800959c <memmove+0x20>
 800958c:	1e43      	subs	r3, r0, #1
 800958e:	42a1      	cmp	r1, r4
 8009590:	d008      	beq.n	80095a4 <memmove+0x28>
 8009592:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009596:	f803 2f01 	strb.w	r2, [r3, #1]!
 800959a:	e7f8      	b.n	800958e <memmove+0x12>
 800959c:	4402      	add	r2, r0
 800959e:	4601      	mov	r1, r0
 80095a0:	428a      	cmp	r2, r1
 80095a2:	d100      	bne.n	80095a6 <memmove+0x2a>
 80095a4:	bd10      	pop	{r4, pc}
 80095a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80095aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80095ae:	e7f7      	b.n	80095a0 <memmove+0x24>

080095b0 <__malloc_lock>:
 80095b0:	4801      	ldr	r0, [pc, #4]	; (80095b8 <__malloc_lock+0x8>)
 80095b2:	f7ff bfe1 	b.w	8009578 <__retarget_lock_acquire_recursive>
 80095b6:	bf00      	nop
 80095b8:	200007e0 	.word	0x200007e0

080095bc <__malloc_unlock>:
 80095bc:	4801      	ldr	r0, [pc, #4]	; (80095c4 <__malloc_unlock+0x8>)
 80095be:	f7ff bfdc 	b.w	800957a <__retarget_lock_release_recursive>
 80095c2:	bf00      	nop
 80095c4:	200007e0 	.word	0x200007e0

080095c8 <_realloc_r>:
 80095c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095cc:	4680      	mov	r8, r0
 80095ce:	4614      	mov	r4, r2
 80095d0:	460e      	mov	r6, r1
 80095d2:	b921      	cbnz	r1, 80095de <_realloc_r+0x16>
 80095d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80095d8:	4611      	mov	r1, r2
 80095da:	f7fe bfbd 	b.w	8008558 <_malloc_r>
 80095de:	b92a      	cbnz	r2, 80095ec <_realloc_r+0x24>
 80095e0:	f7fe ff4e 	bl	8008480 <_free_r>
 80095e4:	4625      	mov	r5, r4
 80095e6:	4628      	mov	r0, r5
 80095e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095ec:	f000 faa0 	bl	8009b30 <_malloc_usable_size_r>
 80095f0:	4284      	cmp	r4, r0
 80095f2:	4607      	mov	r7, r0
 80095f4:	d802      	bhi.n	80095fc <_realloc_r+0x34>
 80095f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80095fa:	d812      	bhi.n	8009622 <_realloc_r+0x5a>
 80095fc:	4621      	mov	r1, r4
 80095fe:	4640      	mov	r0, r8
 8009600:	f7fe ffaa 	bl	8008558 <_malloc_r>
 8009604:	4605      	mov	r5, r0
 8009606:	2800      	cmp	r0, #0
 8009608:	d0ed      	beq.n	80095e6 <_realloc_r+0x1e>
 800960a:	42bc      	cmp	r4, r7
 800960c:	4622      	mov	r2, r4
 800960e:	4631      	mov	r1, r6
 8009610:	bf28      	it	cs
 8009612:	463a      	movcs	r2, r7
 8009614:	f7fe fa4e 	bl	8007ab4 <memcpy>
 8009618:	4631      	mov	r1, r6
 800961a:	4640      	mov	r0, r8
 800961c:	f7fe ff30 	bl	8008480 <_free_r>
 8009620:	e7e1      	b.n	80095e6 <_realloc_r+0x1e>
 8009622:	4635      	mov	r5, r6
 8009624:	e7df      	b.n	80095e6 <_realloc_r+0x1e>

08009626 <__sfputc_r>:
 8009626:	6893      	ldr	r3, [r2, #8]
 8009628:	3b01      	subs	r3, #1
 800962a:	2b00      	cmp	r3, #0
 800962c:	b410      	push	{r4}
 800962e:	6093      	str	r3, [r2, #8]
 8009630:	da08      	bge.n	8009644 <__sfputc_r+0x1e>
 8009632:	6994      	ldr	r4, [r2, #24]
 8009634:	42a3      	cmp	r3, r4
 8009636:	db01      	blt.n	800963c <__sfputc_r+0x16>
 8009638:	290a      	cmp	r1, #10
 800963a:	d103      	bne.n	8009644 <__sfputc_r+0x1e>
 800963c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009640:	f000 b94a 	b.w	80098d8 <__swbuf_r>
 8009644:	6813      	ldr	r3, [r2, #0]
 8009646:	1c58      	adds	r0, r3, #1
 8009648:	6010      	str	r0, [r2, #0]
 800964a:	7019      	strb	r1, [r3, #0]
 800964c:	4608      	mov	r0, r1
 800964e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009652:	4770      	bx	lr

08009654 <__sfputs_r>:
 8009654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009656:	4606      	mov	r6, r0
 8009658:	460f      	mov	r7, r1
 800965a:	4614      	mov	r4, r2
 800965c:	18d5      	adds	r5, r2, r3
 800965e:	42ac      	cmp	r4, r5
 8009660:	d101      	bne.n	8009666 <__sfputs_r+0x12>
 8009662:	2000      	movs	r0, #0
 8009664:	e007      	b.n	8009676 <__sfputs_r+0x22>
 8009666:	f814 1b01 	ldrb.w	r1, [r4], #1
 800966a:	463a      	mov	r2, r7
 800966c:	4630      	mov	r0, r6
 800966e:	f7ff ffda 	bl	8009626 <__sfputc_r>
 8009672:	1c43      	adds	r3, r0, #1
 8009674:	d1f3      	bne.n	800965e <__sfputs_r+0xa>
 8009676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009678 <_vfiprintf_r>:
 8009678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800967c:	460d      	mov	r5, r1
 800967e:	b09d      	sub	sp, #116	; 0x74
 8009680:	4614      	mov	r4, r2
 8009682:	4698      	mov	r8, r3
 8009684:	4606      	mov	r6, r0
 8009686:	b118      	cbz	r0, 8009690 <_vfiprintf_r+0x18>
 8009688:	6983      	ldr	r3, [r0, #24]
 800968a:	b90b      	cbnz	r3, 8009690 <_vfiprintf_r+0x18>
 800968c:	f7ff fec4 	bl	8009418 <__sinit>
 8009690:	4b89      	ldr	r3, [pc, #548]	; (80098b8 <_vfiprintf_r+0x240>)
 8009692:	429d      	cmp	r5, r3
 8009694:	d11b      	bne.n	80096ce <_vfiprintf_r+0x56>
 8009696:	6875      	ldr	r5, [r6, #4]
 8009698:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800969a:	07d9      	lsls	r1, r3, #31
 800969c:	d405      	bmi.n	80096aa <_vfiprintf_r+0x32>
 800969e:	89ab      	ldrh	r3, [r5, #12]
 80096a0:	059a      	lsls	r2, r3, #22
 80096a2:	d402      	bmi.n	80096aa <_vfiprintf_r+0x32>
 80096a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80096a6:	f7ff ff67 	bl	8009578 <__retarget_lock_acquire_recursive>
 80096aa:	89ab      	ldrh	r3, [r5, #12]
 80096ac:	071b      	lsls	r3, r3, #28
 80096ae:	d501      	bpl.n	80096b4 <_vfiprintf_r+0x3c>
 80096b0:	692b      	ldr	r3, [r5, #16]
 80096b2:	b9eb      	cbnz	r3, 80096f0 <_vfiprintf_r+0x78>
 80096b4:	4629      	mov	r1, r5
 80096b6:	4630      	mov	r0, r6
 80096b8:	f000 f960 	bl	800997c <__swsetup_r>
 80096bc:	b1c0      	cbz	r0, 80096f0 <_vfiprintf_r+0x78>
 80096be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096c0:	07dc      	lsls	r4, r3, #31
 80096c2:	d50e      	bpl.n	80096e2 <_vfiprintf_r+0x6a>
 80096c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80096c8:	b01d      	add	sp, #116	; 0x74
 80096ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096ce:	4b7b      	ldr	r3, [pc, #492]	; (80098bc <_vfiprintf_r+0x244>)
 80096d0:	429d      	cmp	r5, r3
 80096d2:	d101      	bne.n	80096d8 <_vfiprintf_r+0x60>
 80096d4:	68b5      	ldr	r5, [r6, #8]
 80096d6:	e7df      	b.n	8009698 <_vfiprintf_r+0x20>
 80096d8:	4b79      	ldr	r3, [pc, #484]	; (80098c0 <_vfiprintf_r+0x248>)
 80096da:	429d      	cmp	r5, r3
 80096dc:	bf08      	it	eq
 80096de:	68f5      	ldreq	r5, [r6, #12]
 80096e0:	e7da      	b.n	8009698 <_vfiprintf_r+0x20>
 80096e2:	89ab      	ldrh	r3, [r5, #12]
 80096e4:	0598      	lsls	r0, r3, #22
 80096e6:	d4ed      	bmi.n	80096c4 <_vfiprintf_r+0x4c>
 80096e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80096ea:	f7ff ff46 	bl	800957a <__retarget_lock_release_recursive>
 80096ee:	e7e9      	b.n	80096c4 <_vfiprintf_r+0x4c>
 80096f0:	2300      	movs	r3, #0
 80096f2:	9309      	str	r3, [sp, #36]	; 0x24
 80096f4:	2320      	movs	r3, #32
 80096f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80096fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80096fe:	2330      	movs	r3, #48	; 0x30
 8009700:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80098c4 <_vfiprintf_r+0x24c>
 8009704:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009708:	f04f 0901 	mov.w	r9, #1
 800970c:	4623      	mov	r3, r4
 800970e:	469a      	mov	sl, r3
 8009710:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009714:	b10a      	cbz	r2, 800971a <_vfiprintf_r+0xa2>
 8009716:	2a25      	cmp	r2, #37	; 0x25
 8009718:	d1f9      	bne.n	800970e <_vfiprintf_r+0x96>
 800971a:	ebba 0b04 	subs.w	fp, sl, r4
 800971e:	d00b      	beq.n	8009738 <_vfiprintf_r+0xc0>
 8009720:	465b      	mov	r3, fp
 8009722:	4622      	mov	r2, r4
 8009724:	4629      	mov	r1, r5
 8009726:	4630      	mov	r0, r6
 8009728:	f7ff ff94 	bl	8009654 <__sfputs_r>
 800972c:	3001      	adds	r0, #1
 800972e:	f000 80aa 	beq.w	8009886 <_vfiprintf_r+0x20e>
 8009732:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009734:	445a      	add	r2, fp
 8009736:	9209      	str	r2, [sp, #36]	; 0x24
 8009738:	f89a 3000 	ldrb.w	r3, [sl]
 800973c:	2b00      	cmp	r3, #0
 800973e:	f000 80a2 	beq.w	8009886 <_vfiprintf_r+0x20e>
 8009742:	2300      	movs	r3, #0
 8009744:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009748:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800974c:	f10a 0a01 	add.w	sl, sl, #1
 8009750:	9304      	str	r3, [sp, #16]
 8009752:	9307      	str	r3, [sp, #28]
 8009754:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009758:	931a      	str	r3, [sp, #104]	; 0x68
 800975a:	4654      	mov	r4, sl
 800975c:	2205      	movs	r2, #5
 800975e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009762:	4858      	ldr	r0, [pc, #352]	; (80098c4 <_vfiprintf_r+0x24c>)
 8009764:	f7f6 fd54 	bl	8000210 <memchr>
 8009768:	9a04      	ldr	r2, [sp, #16]
 800976a:	b9d8      	cbnz	r0, 80097a4 <_vfiprintf_r+0x12c>
 800976c:	06d1      	lsls	r1, r2, #27
 800976e:	bf44      	itt	mi
 8009770:	2320      	movmi	r3, #32
 8009772:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009776:	0713      	lsls	r3, r2, #28
 8009778:	bf44      	itt	mi
 800977a:	232b      	movmi	r3, #43	; 0x2b
 800977c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009780:	f89a 3000 	ldrb.w	r3, [sl]
 8009784:	2b2a      	cmp	r3, #42	; 0x2a
 8009786:	d015      	beq.n	80097b4 <_vfiprintf_r+0x13c>
 8009788:	9a07      	ldr	r2, [sp, #28]
 800978a:	4654      	mov	r4, sl
 800978c:	2000      	movs	r0, #0
 800978e:	f04f 0c0a 	mov.w	ip, #10
 8009792:	4621      	mov	r1, r4
 8009794:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009798:	3b30      	subs	r3, #48	; 0x30
 800979a:	2b09      	cmp	r3, #9
 800979c:	d94e      	bls.n	800983c <_vfiprintf_r+0x1c4>
 800979e:	b1b0      	cbz	r0, 80097ce <_vfiprintf_r+0x156>
 80097a0:	9207      	str	r2, [sp, #28]
 80097a2:	e014      	b.n	80097ce <_vfiprintf_r+0x156>
 80097a4:	eba0 0308 	sub.w	r3, r0, r8
 80097a8:	fa09 f303 	lsl.w	r3, r9, r3
 80097ac:	4313      	orrs	r3, r2
 80097ae:	9304      	str	r3, [sp, #16]
 80097b0:	46a2      	mov	sl, r4
 80097b2:	e7d2      	b.n	800975a <_vfiprintf_r+0xe2>
 80097b4:	9b03      	ldr	r3, [sp, #12]
 80097b6:	1d19      	adds	r1, r3, #4
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	9103      	str	r1, [sp, #12]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	bfbb      	ittet	lt
 80097c0:	425b      	neglt	r3, r3
 80097c2:	f042 0202 	orrlt.w	r2, r2, #2
 80097c6:	9307      	strge	r3, [sp, #28]
 80097c8:	9307      	strlt	r3, [sp, #28]
 80097ca:	bfb8      	it	lt
 80097cc:	9204      	strlt	r2, [sp, #16]
 80097ce:	7823      	ldrb	r3, [r4, #0]
 80097d0:	2b2e      	cmp	r3, #46	; 0x2e
 80097d2:	d10c      	bne.n	80097ee <_vfiprintf_r+0x176>
 80097d4:	7863      	ldrb	r3, [r4, #1]
 80097d6:	2b2a      	cmp	r3, #42	; 0x2a
 80097d8:	d135      	bne.n	8009846 <_vfiprintf_r+0x1ce>
 80097da:	9b03      	ldr	r3, [sp, #12]
 80097dc:	1d1a      	adds	r2, r3, #4
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	9203      	str	r2, [sp, #12]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	bfb8      	it	lt
 80097e6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80097ea:	3402      	adds	r4, #2
 80097ec:	9305      	str	r3, [sp, #20]
 80097ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80098d4 <_vfiprintf_r+0x25c>
 80097f2:	7821      	ldrb	r1, [r4, #0]
 80097f4:	2203      	movs	r2, #3
 80097f6:	4650      	mov	r0, sl
 80097f8:	f7f6 fd0a 	bl	8000210 <memchr>
 80097fc:	b140      	cbz	r0, 8009810 <_vfiprintf_r+0x198>
 80097fe:	2340      	movs	r3, #64	; 0x40
 8009800:	eba0 000a 	sub.w	r0, r0, sl
 8009804:	fa03 f000 	lsl.w	r0, r3, r0
 8009808:	9b04      	ldr	r3, [sp, #16]
 800980a:	4303      	orrs	r3, r0
 800980c:	3401      	adds	r4, #1
 800980e:	9304      	str	r3, [sp, #16]
 8009810:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009814:	482c      	ldr	r0, [pc, #176]	; (80098c8 <_vfiprintf_r+0x250>)
 8009816:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800981a:	2206      	movs	r2, #6
 800981c:	f7f6 fcf8 	bl	8000210 <memchr>
 8009820:	2800      	cmp	r0, #0
 8009822:	d03f      	beq.n	80098a4 <_vfiprintf_r+0x22c>
 8009824:	4b29      	ldr	r3, [pc, #164]	; (80098cc <_vfiprintf_r+0x254>)
 8009826:	bb1b      	cbnz	r3, 8009870 <_vfiprintf_r+0x1f8>
 8009828:	9b03      	ldr	r3, [sp, #12]
 800982a:	3307      	adds	r3, #7
 800982c:	f023 0307 	bic.w	r3, r3, #7
 8009830:	3308      	adds	r3, #8
 8009832:	9303      	str	r3, [sp, #12]
 8009834:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009836:	443b      	add	r3, r7
 8009838:	9309      	str	r3, [sp, #36]	; 0x24
 800983a:	e767      	b.n	800970c <_vfiprintf_r+0x94>
 800983c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009840:	460c      	mov	r4, r1
 8009842:	2001      	movs	r0, #1
 8009844:	e7a5      	b.n	8009792 <_vfiprintf_r+0x11a>
 8009846:	2300      	movs	r3, #0
 8009848:	3401      	adds	r4, #1
 800984a:	9305      	str	r3, [sp, #20]
 800984c:	4619      	mov	r1, r3
 800984e:	f04f 0c0a 	mov.w	ip, #10
 8009852:	4620      	mov	r0, r4
 8009854:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009858:	3a30      	subs	r2, #48	; 0x30
 800985a:	2a09      	cmp	r2, #9
 800985c:	d903      	bls.n	8009866 <_vfiprintf_r+0x1ee>
 800985e:	2b00      	cmp	r3, #0
 8009860:	d0c5      	beq.n	80097ee <_vfiprintf_r+0x176>
 8009862:	9105      	str	r1, [sp, #20]
 8009864:	e7c3      	b.n	80097ee <_vfiprintf_r+0x176>
 8009866:	fb0c 2101 	mla	r1, ip, r1, r2
 800986a:	4604      	mov	r4, r0
 800986c:	2301      	movs	r3, #1
 800986e:	e7f0      	b.n	8009852 <_vfiprintf_r+0x1da>
 8009870:	ab03      	add	r3, sp, #12
 8009872:	9300      	str	r3, [sp, #0]
 8009874:	462a      	mov	r2, r5
 8009876:	4b16      	ldr	r3, [pc, #88]	; (80098d0 <_vfiprintf_r+0x258>)
 8009878:	a904      	add	r1, sp, #16
 800987a:	4630      	mov	r0, r6
 800987c:	f7fb f9be 	bl	8004bfc <_printf_float>
 8009880:	4607      	mov	r7, r0
 8009882:	1c78      	adds	r0, r7, #1
 8009884:	d1d6      	bne.n	8009834 <_vfiprintf_r+0x1bc>
 8009886:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009888:	07d9      	lsls	r1, r3, #31
 800988a:	d405      	bmi.n	8009898 <_vfiprintf_r+0x220>
 800988c:	89ab      	ldrh	r3, [r5, #12]
 800988e:	059a      	lsls	r2, r3, #22
 8009890:	d402      	bmi.n	8009898 <_vfiprintf_r+0x220>
 8009892:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009894:	f7ff fe71 	bl	800957a <__retarget_lock_release_recursive>
 8009898:	89ab      	ldrh	r3, [r5, #12]
 800989a:	065b      	lsls	r3, r3, #25
 800989c:	f53f af12 	bmi.w	80096c4 <_vfiprintf_r+0x4c>
 80098a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098a2:	e711      	b.n	80096c8 <_vfiprintf_r+0x50>
 80098a4:	ab03      	add	r3, sp, #12
 80098a6:	9300      	str	r3, [sp, #0]
 80098a8:	462a      	mov	r2, r5
 80098aa:	4b09      	ldr	r3, [pc, #36]	; (80098d0 <_vfiprintf_r+0x258>)
 80098ac:	a904      	add	r1, sp, #16
 80098ae:	4630      	mov	r0, r6
 80098b0:	f7fb fc48 	bl	8005144 <_printf_i>
 80098b4:	e7e4      	b.n	8009880 <_vfiprintf_r+0x208>
 80098b6:	bf00      	nop
 80098b8:	0800b34c 	.word	0x0800b34c
 80098bc:	0800b36c 	.word	0x0800b36c
 80098c0:	0800b32c 	.word	0x0800b32c
 80098c4:	0800b2c4 	.word	0x0800b2c4
 80098c8:	0800b2ce 	.word	0x0800b2ce
 80098cc:	08004bfd 	.word	0x08004bfd
 80098d0:	08009655 	.word	0x08009655
 80098d4:	0800b2ca 	.word	0x0800b2ca

080098d8 <__swbuf_r>:
 80098d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098da:	460e      	mov	r6, r1
 80098dc:	4614      	mov	r4, r2
 80098de:	4605      	mov	r5, r0
 80098e0:	b118      	cbz	r0, 80098ea <__swbuf_r+0x12>
 80098e2:	6983      	ldr	r3, [r0, #24]
 80098e4:	b90b      	cbnz	r3, 80098ea <__swbuf_r+0x12>
 80098e6:	f7ff fd97 	bl	8009418 <__sinit>
 80098ea:	4b21      	ldr	r3, [pc, #132]	; (8009970 <__swbuf_r+0x98>)
 80098ec:	429c      	cmp	r4, r3
 80098ee:	d12b      	bne.n	8009948 <__swbuf_r+0x70>
 80098f0:	686c      	ldr	r4, [r5, #4]
 80098f2:	69a3      	ldr	r3, [r4, #24]
 80098f4:	60a3      	str	r3, [r4, #8]
 80098f6:	89a3      	ldrh	r3, [r4, #12]
 80098f8:	071a      	lsls	r2, r3, #28
 80098fa:	d52f      	bpl.n	800995c <__swbuf_r+0x84>
 80098fc:	6923      	ldr	r3, [r4, #16]
 80098fe:	b36b      	cbz	r3, 800995c <__swbuf_r+0x84>
 8009900:	6923      	ldr	r3, [r4, #16]
 8009902:	6820      	ldr	r0, [r4, #0]
 8009904:	1ac0      	subs	r0, r0, r3
 8009906:	6963      	ldr	r3, [r4, #20]
 8009908:	b2f6      	uxtb	r6, r6
 800990a:	4283      	cmp	r3, r0
 800990c:	4637      	mov	r7, r6
 800990e:	dc04      	bgt.n	800991a <__swbuf_r+0x42>
 8009910:	4621      	mov	r1, r4
 8009912:	4628      	mov	r0, r5
 8009914:	f7ff fcec 	bl	80092f0 <_fflush_r>
 8009918:	bb30      	cbnz	r0, 8009968 <__swbuf_r+0x90>
 800991a:	68a3      	ldr	r3, [r4, #8]
 800991c:	3b01      	subs	r3, #1
 800991e:	60a3      	str	r3, [r4, #8]
 8009920:	6823      	ldr	r3, [r4, #0]
 8009922:	1c5a      	adds	r2, r3, #1
 8009924:	6022      	str	r2, [r4, #0]
 8009926:	701e      	strb	r6, [r3, #0]
 8009928:	6963      	ldr	r3, [r4, #20]
 800992a:	3001      	adds	r0, #1
 800992c:	4283      	cmp	r3, r0
 800992e:	d004      	beq.n	800993a <__swbuf_r+0x62>
 8009930:	89a3      	ldrh	r3, [r4, #12]
 8009932:	07db      	lsls	r3, r3, #31
 8009934:	d506      	bpl.n	8009944 <__swbuf_r+0x6c>
 8009936:	2e0a      	cmp	r6, #10
 8009938:	d104      	bne.n	8009944 <__swbuf_r+0x6c>
 800993a:	4621      	mov	r1, r4
 800993c:	4628      	mov	r0, r5
 800993e:	f7ff fcd7 	bl	80092f0 <_fflush_r>
 8009942:	b988      	cbnz	r0, 8009968 <__swbuf_r+0x90>
 8009944:	4638      	mov	r0, r7
 8009946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009948:	4b0a      	ldr	r3, [pc, #40]	; (8009974 <__swbuf_r+0x9c>)
 800994a:	429c      	cmp	r4, r3
 800994c:	d101      	bne.n	8009952 <__swbuf_r+0x7a>
 800994e:	68ac      	ldr	r4, [r5, #8]
 8009950:	e7cf      	b.n	80098f2 <__swbuf_r+0x1a>
 8009952:	4b09      	ldr	r3, [pc, #36]	; (8009978 <__swbuf_r+0xa0>)
 8009954:	429c      	cmp	r4, r3
 8009956:	bf08      	it	eq
 8009958:	68ec      	ldreq	r4, [r5, #12]
 800995a:	e7ca      	b.n	80098f2 <__swbuf_r+0x1a>
 800995c:	4621      	mov	r1, r4
 800995e:	4628      	mov	r0, r5
 8009960:	f000 f80c 	bl	800997c <__swsetup_r>
 8009964:	2800      	cmp	r0, #0
 8009966:	d0cb      	beq.n	8009900 <__swbuf_r+0x28>
 8009968:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800996c:	e7ea      	b.n	8009944 <__swbuf_r+0x6c>
 800996e:	bf00      	nop
 8009970:	0800b34c 	.word	0x0800b34c
 8009974:	0800b36c 	.word	0x0800b36c
 8009978:	0800b32c 	.word	0x0800b32c

0800997c <__swsetup_r>:
 800997c:	4b32      	ldr	r3, [pc, #200]	; (8009a48 <__swsetup_r+0xcc>)
 800997e:	b570      	push	{r4, r5, r6, lr}
 8009980:	681d      	ldr	r5, [r3, #0]
 8009982:	4606      	mov	r6, r0
 8009984:	460c      	mov	r4, r1
 8009986:	b125      	cbz	r5, 8009992 <__swsetup_r+0x16>
 8009988:	69ab      	ldr	r3, [r5, #24]
 800998a:	b913      	cbnz	r3, 8009992 <__swsetup_r+0x16>
 800998c:	4628      	mov	r0, r5
 800998e:	f7ff fd43 	bl	8009418 <__sinit>
 8009992:	4b2e      	ldr	r3, [pc, #184]	; (8009a4c <__swsetup_r+0xd0>)
 8009994:	429c      	cmp	r4, r3
 8009996:	d10f      	bne.n	80099b8 <__swsetup_r+0x3c>
 8009998:	686c      	ldr	r4, [r5, #4]
 800999a:	89a3      	ldrh	r3, [r4, #12]
 800999c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80099a0:	0719      	lsls	r1, r3, #28
 80099a2:	d42c      	bmi.n	80099fe <__swsetup_r+0x82>
 80099a4:	06dd      	lsls	r5, r3, #27
 80099a6:	d411      	bmi.n	80099cc <__swsetup_r+0x50>
 80099a8:	2309      	movs	r3, #9
 80099aa:	6033      	str	r3, [r6, #0]
 80099ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80099b0:	81a3      	strh	r3, [r4, #12]
 80099b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80099b6:	e03e      	b.n	8009a36 <__swsetup_r+0xba>
 80099b8:	4b25      	ldr	r3, [pc, #148]	; (8009a50 <__swsetup_r+0xd4>)
 80099ba:	429c      	cmp	r4, r3
 80099bc:	d101      	bne.n	80099c2 <__swsetup_r+0x46>
 80099be:	68ac      	ldr	r4, [r5, #8]
 80099c0:	e7eb      	b.n	800999a <__swsetup_r+0x1e>
 80099c2:	4b24      	ldr	r3, [pc, #144]	; (8009a54 <__swsetup_r+0xd8>)
 80099c4:	429c      	cmp	r4, r3
 80099c6:	bf08      	it	eq
 80099c8:	68ec      	ldreq	r4, [r5, #12]
 80099ca:	e7e6      	b.n	800999a <__swsetup_r+0x1e>
 80099cc:	0758      	lsls	r0, r3, #29
 80099ce:	d512      	bpl.n	80099f6 <__swsetup_r+0x7a>
 80099d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80099d2:	b141      	cbz	r1, 80099e6 <__swsetup_r+0x6a>
 80099d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80099d8:	4299      	cmp	r1, r3
 80099da:	d002      	beq.n	80099e2 <__swsetup_r+0x66>
 80099dc:	4630      	mov	r0, r6
 80099de:	f7fe fd4f 	bl	8008480 <_free_r>
 80099e2:	2300      	movs	r3, #0
 80099e4:	6363      	str	r3, [r4, #52]	; 0x34
 80099e6:	89a3      	ldrh	r3, [r4, #12]
 80099e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80099ec:	81a3      	strh	r3, [r4, #12]
 80099ee:	2300      	movs	r3, #0
 80099f0:	6063      	str	r3, [r4, #4]
 80099f2:	6923      	ldr	r3, [r4, #16]
 80099f4:	6023      	str	r3, [r4, #0]
 80099f6:	89a3      	ldrh	r3, [r4, #12]
 80099f8:	f043 0308 	orr.w	r3, r3, #8
 80099fc:	81a3      	strh	r3, [r4, #12]
 80099fe:	6923      	ldr	r3, [r4, #16]
 8009a00:	b94b      	cbnz	r3, 8009a16 <__swsetup_r+0x9a>
 8009a02:	89a3      	ldrh	r3, [r4, #12]
 8009a04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009a08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a0c:	d003      	beq.n	8009a16 <__swsetup_r+0x9a>
 8009a0e:	4621      	mov	r1, r4
 8009a10:	4630      	mov	r0, r6
 8009a12:	f000 f84d 	bl	8009ab0 <__smakebuf_r>
 8009a16:	89a0      	ldrh	r0, [r4, #12]
 8009a18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a1c:	f010 0301 	ands.w	r3, r0, #1
 8009a20:	d00a      	beq.n	8009a38 <__swsetup_r+0xbc>
 8009a22:	2300      	movs	r3, #0
 8009a24:	60a3      	str	r3, [r4, #8]
 8009a26:	6963      	ldr	r3, [r4, #20]
 8009a28:	425b      	negs	r3, r3
 8009a2a:	61a3      	str	r3, [r4, #24]
 8009a2c:	6923      	ldr	r3, [r4, #16]
 8009a2e:	b943      	cbnz	r3, 8009a42 <__swsetup_r+0xc6>
 8009a30:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009a34:	d1ba      	bne.n	80099ac <__swsetup_r+0x30>
 8009a36:	bd70      	pop	{r4, r5, r6, pc}
 8009a38:	0781      	lsls	r1, r0, #30
 8009a3a:	bf58      	it	pl
 8009a3c:	6963      	ldrpl	r3, [r4, #20]
 8009a3e:	60a3      	str	r3, [r4, #8]
 8009a40:	e7f4      	b.n	8009a2c <__swsetup_r+0xb0>
 8009a42:	2000      	movs	r0, #0
 8009a44:	e7f7      	b.n	8009a36 <__swsetup_r+0xba>
 8009a46:	bf00      	nop
 8009a48:	2000001c 	.word	0x2000001c
 8009a4c:	0800b34c 	.word	0x0800b34c
 8009a50:	0800b36c 	.word	0x0800b36c
 8009a54:	0800b32c 	.word	0x0800b32c

08009a58 <abort>:
 8009a58:	b508      	push	{r3, lr}
 8009a5a:	2006      	movs	r0, #6
 8009a5c:	f000 f898 	bl	8009b90 <raise>
 8009a60:	2001      	movs	r0, #1
 8009a62:	f7f8 fcf5 	bl	8002450 <_exit>

08009a66 <__swhatbuf_r>:
 8009a66:	b570      	push	{r4, r5, r6, lr}
 8009a68:	460e      	mov	r6, r1
 8009a6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a6e:	2900      	cmp	r1, #0
 8009a70:	b096      	sub	sp, #88	; 0x58
 8009a72:	4614      	mov	r4, r2
 8009a74:	461d      	mov	r5, r3
 8009a76:	da08      	bge.n	8009a8a <__swhatbuf_r+0x24>
 8009a78:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	602a      	str	r2, [r5, #0]
 8009a80:	061a      	lsls	r2, r3, #24
 8009a82:	d410      	bmi.n	8009aa6 <__swhatbuf_r+0x40>
 8009a84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a88:	e00e      	b.n	8009aa8 <__swhatbuf_r+0x42>
 8009a8a:	466a      	mov	r2, sp
 8009a8c:	f000 f89c 	bl	8009bc8 <_fstat_r>
 8009a90:	2800      	cmp	r0, #0
 8009a92:	dbf1      	blt.n	8009a78 <__swhatbuf_r+0x12>
 8009a94:	9a01      	ldr	r2, [sp, #4]
 8009a96:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009a9a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009a9e:	425a      	negs	r2, r3
 8009aa0:	415a      	adcs	r2, r3
 8009aa2:	602a      	str	r2, [r5, #0]
 8009aa4:	e7ee      	b.n	8009a84 <__swhatbuf_r+0x1e>
 8009aa6:	2340      	movs	r3, #64	; 0x40
 8009aa8:	2000      	movs	r0, #0
 8009aaa:	6023      	str	r3, [r4, #0]
 8009aac:	b016      	add	sp, #88	; 0x58
 8009aae:	bd70      	pop	{r4, r5, r6, pc}

08009ab0 <__smakebuf_r>:
 8009ab0:	898b      	ldrh	r3, [r1, #12]
 8009ab2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009ab4:	079d      	lsls	r5, r3, #30
 8009ab6:	4606      	mov	r6, r0
 8009ab8:	460c      	mov	r4, r1
 8009aba:	d507      	bpl.n	8009acc <__smakebuf_r+0x1c>
 8009abc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009ac0:	6023      	str	r3, [r4, #0]
 8009ac2:	6123      	str	r3, [r4, #16]
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	6163      	str	r3, [r4, #20]
 8009ac8:	b002      	add	sp, #8
 8009aca:	bd70      	pop	{r4, r5, r6, pc}
 8009acc:	ab01      	add	r3, sp, #4
 8009ace:	466a      	mov	r2, sp
 8009ad0:	f7ff ffc9 	bl	8009a66 <__swhatbuf_r>
 8009ad4:	9900      	ldr	r1, [sp, #0]
 8009ad6:	4605      	mov	r5, r0
 8009ad8:	4630      	mov	r0, r6
 8009ada:	f7fe fd3d 	bl	8008558 <_malloc_r>
 8009ade:	b948      	cbnz	r0, 8009af4 <__smakebuf_r+0x44>
 8009ae0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ae4:	059a      	lsls	r2, r3, #22
 8009ae6:	d4ef      	bmi.n	8009ac8 <__smakebuf_r+0x18>
 8009ae8:	f023 0303 	bic.w	r3, r3, #3
 8009aec:	f043 0302 	orr.w	r3, r3, #2
 8009af0:	81a3      	strh	r3, [r4, #12]
 8009af2:	e7e3      	b.n	8009abc <__smakebuf_r+0xc>
 8009af4:	4b0d      	ldr	r3, [pc, #52]	; (8009b2c <__smakebuf_r+0x7c>)
 8009af6:	62b3      	str	r3, [r6, #40]	; 0x28
 8009af8:	89a3      	ldrh	r3, [r4, #12]
 8009afa:	6020      	str	r0, [r4, #0]
 8009afc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b00:	81a3      	strh	r3, [r4, #12]
 8009b02:	9b00      	ldr	r3, [sp, #0]
 8009b04:	6163      	str	r3, [r4, #20]
 8009b06:	9b01      	ldr	r3, [sp, #4]
 8009b08:	6120      	str	r0, [r4, #16]
 8009b0a:	b15b      	cbz	r3, 8009b24 <__smakebuf_r+0x74>
 8009b0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b10:	4630      	mov	r0, r6
 8009b12:	f000 f86b 	bl	8009bec <_isatty_r>
 8009b16:	b128      	cbz	r0, 8009b24 <__smakebuf_r+0x74>
 8009b18:	89a3      	ldrh	r3, [r4, #12]
 8009b1a:	f023 0303 	bic.w	r3, r3, #3
 8009b1e:	f043 0301 	orr.w	r3, r3, #1
 8009b22:	81a3      	strh	r3, [r4, #12]
 8009b24:	89a0      	ldrh	r0, [r4, #12]
 8009b26:	4305      	orrs	r5, r0
 8009b28:	81a5      	strh	r5, [r4, #12]
 8009b2a:	e7cd      	b.n	8009ac8 <__smakebuf_r+0x18>
 8009b2c:	080093b1 	.word	0x080093b1

08009b30 <_malloc_usable_size_r>:
 8009b30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b34:	1f18      	subs	r0, r3, #4
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	bfbc      	itt	lt
 8009b3a:	580b      	ldrlt	r3, [r1, r0]
 8009b3c:	18c0      	addlt	r0, r0, r3
 8009b3e:	4770      	bx	lr

08009b40 <_raise_r>:
 8009b40:	291f      	cmp	r1, #31
 8009b42:	b538      	push	{r3, r4, r5, lr}
 8009b44:	4604      	mov	r4, r0
 8009b46:	460d      	mov	r5, r1
 8009b48:	d904      	bls.n	8009b54 <_raise_r+0x14>
 8009b4a:	2316      	movs	r3, #22
 8009b4c:	6003      	str	r3, [r0, #0]
 8009b4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b52:	bd38      	pop	{r3, r4, r5, pc}
 8009b54:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009b56:	b112      	cbz	r2, 8009b5e <_raise_r+0x1e>
 8009b58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009b5c:	b94b      	cbnz	r3, 8009b72 <_raise_r+0x32>
 8009b5e:	4620      	mov	r0, r4
 8009b60:	f000 f830 	bl	8009bc4 <_getpid_r>
 8009b64:	462a      	mov	r2, r5
 8009b66:	4601      	mov	r1, r0
 8009b68:	4620      	mov	r0, r4
 8009b6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b6e:	f000 b817 	b.w	8009ba0 <_kill_r>
 8009b72:	2b01      	cmp	r3, #1
 8009b74:	d00a      	beq.n	8009b8c <_raise_r+0x4c>
 8009b76:	1c59      	adds	r1, r3, #1
 8009b78:	d103      	bne.n	8009b82 <_raise_r+0x42>
 8009b7a:	2316      	movs	r3, #22
 8009b7c:	6003      	str	r3, [r0, #0]
 8009b7e:	2001      	movs	r0, #1
 8009b80:	e7e7      	b.n	8009b52 <_raise_r+0x12>
 8009b82:	2400      	movs	r4, #0
 8009b84:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009b88:	4628      	mov	r0, r5
 8009b8a:	4798      	blx	r3
 8009b8c:	2000      	movs	r0, #0
 8009b8e:	e7e0      	b.n	8009b52 <_raise_r+0x12>

08009b90 <raise>:
 8009b90:	4b02      	ldr	r3, [pc, #8]	; (8009b9c <raise+0xc>)
 8009b92:	4601      	mov	r1, r0
 8009b94:	6818      	ldr	r0, [r3, #0]
 8009b96:	f7ff bfd3 	b.w	8009b40 <_raise_r>
 8009b9a:	bf00      	nop
 8009b9c:	2000001c 	.word	0x2000001c

08009ba0 <_kill_r>:
 8009ba0:	b538      	push	{r3, r4, r5, lr}
 8009ba2:	4d07      	ldr	r5, [pc, #28]	; (8009bc0 <_kill_r+0x20>)
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	4604      	mov	r4, r0
 8009ba8:	4608      	mov	r0, r1
 8009baa:	4611      	mov	r1, r2
 8009bac:	602b      	str	r3, [r5, #0]
 8009bae:	f7f8 fc3f 	bl	8002430 <_kill>
 8009bb2:	1c43      	adds	r3, r0, #1
 8009bb4:	d102      	bne.n	8009bbc <_kill_r+0x1c>
 8009bb6:	682b      	ldr	r3, [r5, #0]
 8009bb8:	b103      	cbz	r3, 8009bbc <_kill_r+0x1c>
 8009bba:	6023      	str	r3, [r4, #0]
 8009bbc:	bd38      	pop	{r3, r4, r5, pc}
 8009bbe:	bf00      	nop
 8009bc0:	200007dc 	.word	0x200007dc

08009bc4 <_getpid_r>:
 8009bc4:	f7f8 bc2c 	b.w	8002420 <_getpid>

08009bc8 <_fstat_r>:
 8009bc8:	b538      	push	{r3, r4, r5, lr}
 8009bca:	4d07      	ldr	r5, [pc, #28]	; (8009be8 <_fstat_r+0x20>)
 8009bcc:	2300      	movs	r3, #0
 8009bce:	4604      	mov	r4, r0
 8009bd0:	4608      	mov	r0, r1
 8009bd2:	4611      	mov	r1, r2
 8009bd4:	602b      	str	r3, [r5, #0]
 8009bd6:	f7f8 fc8a 	bl	80024ee <_fstat>
 8009bda:	1c43      	adds	r3, r0, #1
 8009bdc:	d102      	bne.n	8009be4 <_fstat_r+0x1c>
 8009bde:	682b      	ldr	r3, [r5, #0]
 8009be0:	b103      	cbz	r3, 8009be4 <_fstat_r+0x1c>
 8009be2:	6023      	str	r3, [r4, #0]
 8009be4:	bd38      	pop	{r3, r4, r5, pc}
 8009be6:	bf00      	nop
 8009be8:	200007dc 	.word	0x200007dc

08009bec <_isatty_r>:
 8009bec:	b538      	push	{r3, r4, r5, lr}
 8009bee:	4d06      	ldr	r5, [pc, #24]	; (8009c08 <_isatty_r+0x1c>)
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	4604      	mov	r4, r0
 8009bf4:	4608      	mov	r0, r1
 8009bf6:	602b      	str	r3, [r5, #0]
 8009bf8:	f7f8 fc89 	bl	800250e <_isatty>
 8009bfc:	1c43      	adds	r3, r0, #1
 8009bfe:	d102      	bne.n	8009c06 <_isatty_r+0x1a>
 8009c00:	682b      	ldr	r3, [r5, #0]
 8009c02:	b103      	cbz	r3, 8009c06 <_isatty_r+0x1a>
 8009c04:	6023      	str	r3, [r4, #0]
 8009c06:	bd38      	pop	{r3, r4, r5, pc}
 8009c08:	200007dc 	.word	0x200007dc
 8009c0c:	00000000 	.word	0x00000000

08009c10 <cos>:
 8009c10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009c12:	ec53 2b10 	vmov	r2, r3, d0
 8009c16:	4826      	ldr	r0, [pc, #152]	; (8009cb0 <cos+0xa0>)
 8009c18:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009c1c:	4281      	cmp	r1, r0
 8009c1e:	dc06      	bgt.n	8009c2e <cos+0x1e>
 8009c20:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8009ca8 <cos+0x98>
 8009c24:	b005      	add	sp, #20
 8009c26:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c2a:	f000 baf1 	b.w	800a210 <__kernel_cos>
 8009c2e:	4821      	ldr	r0, [pc, #132]	; (8009cb4 <cos+0xa4>)
 8009c30:	4281      	cmp	r1, r0
 8009c32:	dd09      	ble.n	8009c48 <cos+0x38>
 8009c34:	ee10 0a10 	vmov	r0, s0
 8009c38:	4619      	mov	r1, r3
 8009c3a:	f7f6 fb3d 	bl	80002b8 <__aeabi_dsub>
 8009c3e:	ec41 0b10 	vmov	d0, r0, r1
 8009c42:	b005      	add	sp, #20
 8009c44:	f85d fb04 	ldr.w	pc, [sp], #4
 8009c48:	4668      	mov	r0, sp
 8009c4a:	f000 f8d5 	bl	8009df8 <__ieee754_rem_pio2>
 8009c4e:	f000 0003 	and.w	r0, r0, #3
 8009c52:	2801      	cmp	r0, #1
 8009c54:	d00b      	beq.n	8009c6e <cos+0x5e>
 8009c56:	2802      	cmp	r0, #2
 8009c58:	d016      	beq.n	8009c88 <cos+0x78>
 8009c5a:	b9e0      	cbnz	r0, 8009c96 <cos+0x86>
 8009c5c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009c60:	ed9d 0b00 	vldr	d0, [sp]
 8009c64:	f000 fad4 	bl	800a210 <__kernel_cos>
 8009c68:	ec51 0b10 	vmov	r0, r1, d0
 8009c6c:	e7e7      	b.n	8009c3e <cos+0x2e>
 8009c6e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009c72:	ed9d 0b00 	vldr	d0, [sp]
 8009c76:	f000 fee3 	bl	800aa40 <__kernel_sin>
 8009c7a:	ec53 2b10 	vmov	r2, r3, d0
 8009c7e:	ee10 0a10 	vmov	r0, s0
 8009c82:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009c86:	e7da      	b.n	8009c3e <cos+0x2e>
 8009c88:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009c8c:	ed9d 0b00 	vldr	d0, [sp]
 8009c90:	f000 fabe 	bl	800a210 <__kernel_cos>
 8009c94:	e7f1      	b.n	8009c7a <cos+0x6a>
 8009c96:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009c9a:	ed9d 0b00 	vldr	d0, [sp]
 8009c9e:	2001      	movs	r0, #1
 8009ca0:	f000 fece 	bl	800aa40 <__kernel_sin>
 8009ca4:	e7e0      	b.n	8009c68 <cos+0x58>
 8009ca6:	bf00      	nop
	...
 8009cb0:	3fe921fb 	.word	0x3fe921fb
 8009cb4:	7fefffff 	.word	0x7fefffff

08009cb8 <round>:
 8009cb8:	ec51 0b10 	vmov	r0, r1, d0
 8009cbc:	b570      	push	{r4, r5, r6, lr}
 8009cbe:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8009cc2:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8009cc6:	2c13      	cmp	r4, #19
 8009cc8:	ee10 2a10 	vmov	r2, s0
 8009ccc:	460b      	mov	r3, r1
 8009cce:	dc19      	bgt.n	8009d04 <round+0x4c>
 8009cd0:	2c00      	cmp	r4, #0
 8009cd2:	da09      	bge.n	8009ce8 <round+0x30>
 8009cd4:	3401      	adds	r4, #1
 8009cd6:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8009cda:	d103      	bne.n	8009ce4 <round+0x2c>
 8009cdc:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009ce0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	e028      	b.n	8009d3a <round+0x82>
 8009ce8:	4d15      	ldr	r5, [pc, #84]	; (8009d40 <round+0x88>)
 8009cea:	4125      	asrs	r5, r4
 8009cec:	ea01 0605 	and.w	r6, r1, r5
 8009cf0:	4332      	orrs	r2, r6
 8009cf2:	d00e      	beq.n	8009d12 <round+0x5a>
 8009cf4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009cf8:	fa42 f404 	asr.w	r4, r2, r4
 8009cfc:	4423      	add	r3, r4
 8009cfe:	ea23 0305 	bic.w	r3, r3, r5
 8009d02:	e7ef      	b.n	8009ce4 <round+0x2c>
 8009d04:	2c33      	cmp	r4, #51	; 0x33
 8009d06:	dd07      	ble.n	8009d18 <round+0x60>
 8009d08:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8009d0c:	d101      	bne.n	8009d12 <round+0x5a>
 8009d0e:	f7f6 fad5 	bl	80002bc <__adddf3>
 8009d12:	ec41 0b10 	vmov	d0, r0, r1
 8009d16:	bd70      	pop	{r4, r5, r6, pc}
 8009d18:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8009d1c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009d20:	40f5      	lsrs	r5, r6
 8009d22:	4228      	tst	r0, r5
 8009d24:	d0f5      	beq.n	8009d12 <round+0x5a>
 8009d26:	2101      	movs	r1, #1
 8009d28:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8009d2c:	fa01 f404 	lsl.w	r4, r1, r4
 8009d30:	1912      	adds	r2, r2, r4
 8009d32:	bf28      	it	cs
 8009d34:	185b      	addcs	r3, r3, r1
 8009d36:	ea22 0205 	bic.w	r2, r2, r5
 8009d3a:	4619      	mov	r1, r3
 8009d3c:	4610      	mov	r0, r2
 8009d3e:	e7e8      	b.n	8009d12 <round+0x5a>
 8009d40:	000fffff 	.word	0x000fffff
 8009d44:	00000000 	.word	0x00000000

08009d48 <sin>:
 8009d48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009d4a:	ec53 2b10 	vmov	r2, r3, d0
 8009d4e:	4828      	ldr	r0, [pc, #160]	; (8009df0 <sin+0xa8>)
 8009d50:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009d54:	4281      	cmp	r1, r0
 8009d56:	dc07      	bgt.n	8009d68 <sin+0x20>
 8009d58:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8009de8 <sin+0xa0>
 8009d5c:	2000      	movs	r0, #0
 8009d5e:	b005      	add	sp, #20
 8009d60:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d64:	f000 be6c 	b.w	800aa40 <__kernel_sin>
 8009d68:	4822      	ldr	r0, [pc, #136]	; (8009df4 <sin+0xac>)
 8009d6a:	4281      	cmp	r1, r0
 8009d6c:	dd09      	ble.n	8009d82 <sin+0x3a>
 8009d6e:	ee10 0a10 	vmov	r0, s0
 8009d72:	4619      	mov	r1, r3
 8009d74:	f7f6 faa0 	bl	80002b8 <__aeabi_dsub>
 8009d78:	ec41 0b10 	vmov	d0, r0, r1
 8009d7c:	b005      	add	sp, #20
 8009d7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8009d82:	4668      	mov	r0, sp
 8009d84:	f000 f838 	bl	8009df8 <__ieee754_rem_pio2>
 8009d88:	f000 0003 	and.w	r0, r0, #3
 8009d8c:	2801      	cmp	r0, #1
 8009d8e:	d00c      	beq.n	8009daa <sin+0x62>
 8009d90:	2802      	cmp	r0, #2
 8009d92:	d011      	beq.n	8009db8 <sin+0x70>
 8009d94:	b9f0      	cbnz	r0, 8009dd4 <sin+0x8c>
 8009d96:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009d9a:	ed9d 0b00 	vldr	d0, [sp]
 8009d9e:	2001      	movs	r0, #1
 8009da0:	f000 fe4e 	bl	800aa40 <__kernel_sin>
 8009da4:	ec51 0b10 	vmov	r0, r1, d0
 8009da8:	e7e6      	b.n	8009d78 <sin+0x30>
 8009daa:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009dae:	ed9d 0b00 	vldr	d0, [sp]
 8009db2:	f000 fa2d 	bl	800a210 <__kernel_cos>
 8009db6:	e7f5      	b.n	8009da4 <sin+0x5c>
 8009db8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009dbc:	ed9d 0b00 	vldr	d0, [sp]
 8009dc0:	2001      	movs	r0, #1
 8009dc2:	f000 fe3d 	bl	800aa40 <__kernel_sin>
 8009dc6:	ec53 2b10 	vmov	r2, r3, d0
 8009dca:	ee10 0a10 	vmov	r0, s0
 8009dce:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009dd2:	e7d1      	b.n	8009d78 <sin+0x30>
 8009dd4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009dd8:	ed9d 0b00 	vldr	d0, [sp]
 8009ddc:	f000 fa18 	bl	800a210 <__kernel_cos>
 8009de0:	e7f1      	b.n	8009dc6 <sin+0x7e>
 8009de2:	bf00      	nop
 8009de4:	f3af 8000 	nop.w
	...
 8009df0:	3fe921fb 	.word	0x3fe921fb
 8009df4:	7fefffff 	.word	0x7fefffff

08009df8 <__ieee754_rem_pio2>:
 8009df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dfc:	ed2d 8b02 	vpush	{d8}
 8009e00:	ec55 4b10 	vmov	r4, r5, d0
 8009e04:	4bca      	ldr	r3, [pc, #808]	; (800a130 <__ieee754_rem_pio2+0x338>)
 8009e06:	b08b      	sub	sp, #44	; 0x2c
 8009e08:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8009e0c:	4598      	cmp	r8, r3
 8009e0e:	4682      	mov	sl, r0
 8009e10:	9502      	str	r5, [sp, #8]
 8009e12:	dc08      	bgt.n	8009e26 <__ieee754_rem_pio2+0x2e>
 8009e14:	2200      	movs	r2, #0
 8009e16:	2300      	movs	r3, #0
 8009e18:	ed80 0b00 	vstr	d0, [r0]
 8009e1c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009e20:	f04f 0b00 	mov.w	fp, #0
 8009e24:	e028      	b.n	8009e78 <__ieee754_rem_pio2+0x80>
 8009e26:	4bc3      	ldr	r3, [pc, #780]	; (800a134 <__ieee754_rem_pio2+0x33c>)
 8009e28:	4598      	cmp	r8, r3
 8009e2a:	dc78      	bgt.n	8009f1e <__ieee754_rem_pio2+0x126>
 8009e2c:	9b02      	ldr	r3, [sp, #8]
 8009e2e:	4ec2      	ldr	r6, [pc, #776]	; (800a138 <__ieee754_rem_pio2+0x340>)
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	ee10 0a10 	vmov	r0, s0
 8009e36:	a3b0      	add	r3, pc, #704	; (adr r3, 800a0f8 <__ieee754_rem_pio2+0x300>)
 8009e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e3c:	4629      	mov	r1, r5
 8009e3e:	dd39      	ble.n	8009eb4 <__ieee754_rem_pio2+0xbc>
 8009e40:	f7f6 fa3a 	bl	80002b8 <__aeabi_dsub>
 8009e44:	45b0      	cmp	r8, r6
 8009e46:	4604      	mov	r4, r0
 8009e48:	460d      	mov	r5, r1
 8009e4a:	d01b      	beq.n	8009e84 <__ieee754_rem_pio2+0x8c>
 8009e4c:	a3ac      	add	r3, pc, #688	; (adr r3, 800a100 <__ieee754_rem_pio2+0x308>)
 8009e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e52:	f7f6 fa31 	bl	80002b8 <__aeabi_dsub>
 8009e56:	4602      	mov	r2, r0
 8009e58:	460b      	mov	r3, r1
 8009e5a:	e9ca 2300 	strd	r2, r3, [sl]
 8009e5e:	4620      	mov	r0, r4
 8009e60:	4629      	mov	r1, r5
 8009e62:	f7f6 fa29 	bl	80002b8 <__aeabi_dsub>
 8009e66:	a3a6      	add	r3, pc, #664	; (adr r3, 800a100 <__ieee754_rem_pio2+0x308>)
 8009e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e6c:	f7f6 fa24 	bl	80002b8 <__aeabi_dsub>
 8009e70:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009e74:	f04f 0b01 	mov.w	fp, #1
 8009e78:	4658      	mov	r0, fp
 8009e7a:	b00b      	add	sp, #44	; 0x2c
 8009e7c:	ecbd 8b02 	vpop	{d8}
 8009e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e84:	a3a0      	add	r3, pc, #640	; (adr r3, 800a108 <__ieee754_rem_pio2+0x310>)
 8009e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e8a:	f7f6 fa15 	bl	80002b8 <__aeabi_dsub>
 8009e8e:	a3a0      	add	r3, pc, #640	; (adr r3, 800a110 <__ieee754_rem_pio2+0x318>)
 8009e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e94:	4604      	mov	r4, r0
 8009e96:	460d      	mov	r5, r1
 8009e98:	f7f6 fa0e 	bl	80002b8 <__aeabi_dsub>
 8009e9c:	4602      	mov	r2, r0
 8009e9e:	460b      	mov	r3, r1
 8009ea0:	e9ca 2300 	strd	r2, r3, [sl]
 8009ea4:	4620      	mov	r0, r4
 8009ea6:	4629      	mov	r1, r5
 8009ea8:	f7f6 fa06 	bl	80002b8 <__aeabi_dsub>
 8009eac:	a398      	add	r3, pc, #608	; (adr r3, 800a110 <__ieee754_rem_pio2+0x318>)
 8009eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb2:	e7db      	b.n	8009e6c <__ieee754_rem_pio2+0x74>
 8009eb4:	f7f6 fa02 	bl	80002bc <__adddf3>
 8009eb8:	45b0      	cmp	r8, r6
 8009eba:	4604      	mov	r4, r0
 8009ebc:	460d      	mov	r5, r1
 8009ebe:	d016      	beq.n	8009eee <__ieee754_rem_pio2+0xf6>
 8009ec0:	a38f      	add	r3, pc, #572	; (adr r3, 800a100 <__ieee754_rem_pio2+0x308>)
 8009ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec6:	f7f6 f9f9 	bl	80002bc <__adddf3>
 8009eca:	4602      	mov	r2, r0
 8009ecc:	460b      	mov	r3, r1
 8009ece:	e9ca 2300 	strd	r2, r3, [sl]
 8009ed2:	4620      	mov	r0, r4
 8009ed4:	4629      	mov	r1, r5
 8009ed6:	f7f6 f9ef 	bl	80002b8 <__aeabi_dsub>
 8009eda:	a389      	add	r3, pc, #548	; (adr r3, 800a100 <__ieee754_rem_pio2+0x308>)
 8009edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee0:	f7f6 f9ec 	bl	80002bc <__adddf3>
 8009ee4:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8009ee8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009eec:	e7c4      	b.n	8009e78 <__ieee754_rem_pio2+0x80>
 8009eee:	a386      	add	r3, pc, #536	; (adr r3, 800a108 <__ieee754_rem_pio2+0x310>)
 8009ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef4:	f7f6 f9e2 	bl	80002bc <__adddf3>
 8009ef8:	a385      	add	r3, pc, #532	; (adr r3, 800a110 <__ieee754_rem_pio2+0x318>)
 8009efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009efe:	4604      	mov	r4, r0
 8009f00:	460d      	mov	r5, r1
 8009f02:	f7f6 f9db 	bl	80002bc <__adddf3>
 8009f06:	4602      	mov	r2, r0
 8009f08:	460b      	mov	r3, r1
 8009f0a:	e9ca 2300 	strd	r2, r3, [sl]
 8009f0e:	4620      	mov	r0, r4
 8009f10:	4629      	mov	r1, r5
 8009f12:	f7f6 f9d1 	bl	80002b8 <__aeabi_dsub>
 8009f16:	a37e      	add	r3, pc, #504	; (adr r3, 800a110 <__ieee754_rem_pio2+0x318>)
 8009f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f1c:	e7e0      	b.n	8009ee0 <__ieee754_rem_pio2+0xe8>
 8009f1e:	4b87      	ldr	r3, [pc, #540]	; (800a13c <__ieee754_rem_pio2+0x344>)
 8009f20:	4598      	cmp	r8, r3
 8009f22:	f300 80d9 	bgt.w	800a0d8 <__ieee754_rem_pio2+0x2e0>
 8009f26:	f000 fe49 	bl	800abbc <fabs>
 8009f2a:	ec55 4b10 	vmov	r4, r5, d0
 8009f2e:	ee10 0a10 	vmov	r0, s0
 8009f32:	a379      	add	r3, pc, #484	; (adr r3, 800a118 <__ieee754_rem_pio2+0x320>)
 8009f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f38:	4629      	mov	r1, r5
 8009f3a:	f7f6 fb75 	bl	8000628 <__aeabi_dmul>
 8009f3e:	4b80      	ldr	r3, [pc, #512]	; (800a140 <__ieee754_rem_pio2+0x348>)
 8009f40:	2200      	movs	r2, #0
 8009f42:	f7f6 f9bb 	bl	80002bc <__adddf3>
 8009f46:	f7f6 fe1f 	bl	8000b88 <__aeabi_d2iz>
 8009f4a:	4683      	mov	fp, r0
 8009f4c:	f7f6 fb02 	bl	8000554 <__aeabi_i2d>
 8009f50:	4602      	mov	r2, r0
 8009f52:	460b      	mov	r3, r1
 8009f54:	ec43 2b18 	vmov	d8, r2, r3
 8009f58:	a367      	add	r3, pc, #412	; (adr r3, 800a0f8 <__ieee754_rem_pio2+0x300>)
 8009f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f5e:	f7f6 fb63 	bl	8000628 <__aeabi_dmul>
 8009f62:	4602      	mov	r2, r0
 8009f64:	460b      	mov	r3, r1
 8009f66:	4620      	mov	r0, r4
 8009f68:	4629      	mov	r1, r5
 8009f6a:	f7f6 f9a5 	bl	80002b8 <__aeabi_dsub>
 8009f6e:	a364      	add	r3, pc, #400	; (adr r3, 800a100 <__ieee754_rem_pio2+0x308>)
 8009f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f74:	4606      	mov	r6, r0
 8009f76:	460f      	mov	r7, r1
 8009f78:	ec51 0b18 	vmov	r0, r1, d8
 8009f7c:	f7f6 fb54 	bl	8000628 <__aeabi_dmul>
 8009f80:	f1bb 0f1f 	cmp.w	fp, #31
 8009f84:	4604      	mov	r4, r0
 8009f86:	460d      	mov	r5, r1
 8009f88:	dc0d      	bgt.n	8009fa6 <__ieee754_rem_pio2+0x1ae>
 8009f8a:	4b6e      	ldr	r3, [pc, #440]	; (800a144 <__ieee754_rem_pio2+0x34c>)
 8009f8c:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8009f90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f94:	4543      	cmp	r3, r8
 8009f96:	d006      	beq.n	8009fa6 <__ieee754_rem_pio2+0x1ae>
 8009f98:	4622      	mov	r2, r4
 8009f9a:	462b      	mov	r3, r5
 8009f9c:	4630      	mov	r0, r6
 8009f9e:	4639      	mov	r1, r7
 8009fa0:	f7f6 f98a 	bl	80002b8 <__aeabi_dsub>
 8009fa4:	e00f      	b.n	8009fc6 <__ieee754_rem_pio2+0x1ce>
 8009fa6:	462b      	mov	r3, r5
 8009fa8:	4622      	mov	r2, r4
 8009faa:	4630      	mov	r0, r6
 8009fac:	4639      	mov	r1, r7
 8009fae:	f7f6 f983 	bl	80002b8 <__aeabi_dsub>
 8009fb2:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009fb6:	9303      	str	r3, [sp, #12]
 8009fb8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009fbc:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8009fc0:	f1b8 0f10 	cmp.w	r8, #16
 8009fc4:	dc02      	bgt.n	8009fcc <__ieee754_rem_pio2+0x1d4>
 8009fc6:	e9ca 0100 	strd	r0, r1, [sl]
 8009fca:	e039      	b.n	800a040 <__ieee754_rem_pio2+0x248>
 8009fcc:	a34e      	add	r3, pc, #312	; (adr r3, 800a108 <__ieee754_rem_pio2+0x310>)
 8009fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd2:	ec51 0b18 	vmov	r0, r1, d8
 8009fd6:	f7f6 fb27 	bl	8000628 <__aeabi_dmul>
 8009fda:	4604      	mov	r4, r0
 8009fdc:	460d      	mov	r5, r1
 8009fde:	4602      	mov	r2, r0
 8009fe0:	460b      	mov	r3, r1
 8009fe2:	4630      	mov	r0, r6
 8009fe4:	4639      	mov	r1, r7
 8009fe6:	f7f6 f967 	bl	80002b8 <__aeabi_dsub>
 8009fea:	4602      	mov	r2, r0
 8009fec:	460b      	mov	r3, r1
 8009fee:	4680      	mov	r8, r0
 8009ff0:	4689      	mov	r9, r1
 8009ff2:	4630      	mov	r0, r6
 8009ff4:	4639      	mov	r1, r7
 8009ff6:	f7f6 f95f 	bl	80002b8 <__aeabi_dsub>
 8009ffa:	4622      	mov	r2, r4
 8009ffc:	462b      	mov	r3, r5
 8009ffe:	f7f6 f95b 	bl	80002b8 <__aeabi_dsub>
 800a002:	a343      	add	r3, pc, #268	; (adr r3, 800a110 <__ieee754_rem_pio2+0x318>)
 800a004:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a008:	4604      	mov	r4, r0
 800a00a:	460d      	mov	r5, r1
 800a00c:	ec51 0b18 	vmov	r0, r1, d8
 800a010:	f7f6 fb0a 	bl	8000628 <__aeabi_dmul>
 800a014:	4622      	mov	r2, r4
 800a016:	462b      	mov	r3, r5
 800a018:	f7f6 f94e 	bl	80002b8 <__aeabi_dsub>
 800a01c:	4602      	mov	r2, r0
 800a01e:	460b      	mov	r3, r1
 800a020:	4604      	mov	r4, r0
 800a022:	460d      	mov	r5, r1
 800a024:	4640      	mov	r0, r8
 800a026:	4649      	mov	r1, r9
 800a028:	f7f6 f946 	bl	80002b8 <__aeabi_dsub>
 800a02c:	9a03      	ldr	r2, [sp, #12]
 800a02e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a032:	1ad3      	subs	r3, r2, r3
 800a034:	2b31      	cmp	r3, #49	; 0x31
 800a036:	dc24      	bgt.n	800a082 <__ieee754_rem_pio2+0x28a>
 800a038:	e9ca 0100 	strd	r0, r1, [sl]
 800a03c:	4646      	mov	r6, r8
 800a03e:	464f      	mov	r7, r9
 800a040:	e9da 8900 	ldrd	r8, r9, [sl]
 800a044:	4630      	mov	r0, r6
 800a046:	4642      	mov	r2, r8
 800a048:	464b      	mov	r3, r9
 800a04a:	4639      	mov	r1, r7
 800a04c:	f7f6 f934 	bl	80002b8 <__aeabi_dsub>
 800a050:	462b      	mov	r3, r5
 800a052:	4622      	mov	r2, r4
 800a054:	f7f6 f930 	bl	80002b8 <__aeabi_dsub>
 800a058:	9b02      	ldr	r3, [sp, #8]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a060:	f6bf af0a 	bge.w	8009e78 <__ieee754_rem_pio2+0x80>
 800a064:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a068:	f8ca 3004 	str.w	r3, [sl, #4]
 800a06c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a070:	f8ca 8000 	str.w	r8, [sl]
 800a074:	f8ca 0008 	str.w	r0, [sl, #8]
 800a078:	f8ca 300c 	str.w	r3, [sl, #12]
 800a07c:	f1cb 0b00 	rsb	fp, fp, #0
 800a080:	e6fa      	b.n	8009e78 <__ieee754_rem_pio2+0x80>
 800a082:	a327      	add	r3, pc, #156	; (adr r3, 800a120 <__ieee754_rem_pio2+0x328>)
 800a084:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a088:	ec51 0b18 	vmov	r0, r1, d8
 800a08c:	f7f6 facc 	bl	8000628 <__aeabi_dmul>
 800a090:	4604      	mov	r4, r0
 800a092:	460d      	mov	r5, r1
 800a094:	4602      	mov	r2, r0
 800a096:	460b      	mov	r3, r1
 800a098:	4640      	mov	r0, r8
 800a09a:	4649      	mov	r1, r9
 800a09c:	f7f6 f90c 	bl	80002b8 <__aeabi_dsub>
 800a0a0:	4602      	mov	r2, r0
 800a0a2:	460b      	mov	r3, r1
 800a0a4:	4606      	mov	r6, r0
 800a0a6:	460f      	mov	r7, r1
 800a0a8:	4640      	mov	r0, r8
 800a0aa:	4649      	mov	r1, r9
 800a0ac:	f7f6 f904 	bl	80002b8 <__aeabi_dsub>
 800a0b0:	4622      	mov	r2, r4
 800a0b2:	462b      	mov	r3, r5
 800a0b4:	f7f6 f900 	bl	80002b8 <__aeabi_dsub>
 800a0b8:	a31b      	add	r3, pc, #108	; (adr r3, 800a128 <__ieee754_rem_pio2+0x330>)
 800a0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0be:	4604      	mov	r4, r0
 800a0c0:	460d      	mov	r5, r1
 800a0c2:	ec51 0b18 	vmov	r0, r1, d8
 800a0c6:	f7f6 faaf 	bl	8000628 <__aeabi_dmul>
 800a0ca:	4622      	mov	r2, r4
 800a0cc:	462b      	mov	r3, r5
 800a0ce:	f7f6 f8f3 	bl	80002b8 <__aeabi_dsub>
 800a0d2:	4604      	mov	r4, r0
 800a0d4:	460d      	mov	r5, r1
 800a0d6:	e75f      	b.n	8009f98 <__ieee754_rem_pio2+0x1a0>
 800a0d8:	4b1b      	ldr	r3, [pc, #108]	; (800a148 <__ieee754_rem_pio2+0x350>)
 800a0da:	4598      	cmp	r8, r3
 800a0dc:	dd36      	ble.n	800a14c <__ieee754_rem_pio2+0x354>
 800a0de:	ee10 2a10 	vmov	r2, s0
 800a0e2:	462b      	mov	r3, r5
 800a0e4:	4620      	mov	r0, r4
 800a0e6:	4629      	mov	r1, r5
 800a0e8:	f7f6 f8e6 	bl	80002b8 <__aeabi_dsub>
 800a0ec:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a0f0:	e9ca 0100 	strd	r0, r1, [sl]
 800a0f4:	e694      	b.n	8009e20 <__ieee754_rem_pio2+0x28>
 800a0f6:	bf00      	nop
 800a0f8:	54400000 	.word	0x54400000
 800a0fc:	3ff921fb 	.word	0x3ff921fb
 800a100:	1a626331 	.word	0x1a626331
 800a104:	3dd0b461 	.word	0x3dd0b461
 800a108:	1a600000 	.word	0x1a600000
 800a10c:	3dd0b461 	.word	0x3dd0b461
 800a110:	2e037073 	.word	0x2e037073
 800a114:	3ba3198a 	.word	0x3ba3198a
 800a118:	6dc9c883 	.word	0x6dc9c883
 800a11c:	3fe45f30 	.word	0x3fe45f30
 800a120:	2e000000 	.word	0x2e000000
 800a124:	3ba3198a 	.word	0x3ba3198a
 800a128:	252049c1 	.word	0x252049c1
 800a12c:	397b839a 	.word	0x397b839a
 800a130:	3fe921fb 	.word	0x3fe921fb
 800a134:	4002d97b 	.word	0x4002d97b
 800a138:	3ff921fb 	.word	0x3ff921fb
 800a13c:	413921fb 	.word	0x413921fb
 800a140:	3fe00000 	.word	0x3fe00000
 800a144:	0800b38c 	.word	0x0800b38c
 800a148:	7fefffff 	.word	0x7fefffff
 800a14c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800a150:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800a154:	ee10 0a10 	vmov	r0, s0
 800a158:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800a15c:	ee10 6a10 	vmov	r6, s0
 800a160:	460f      	mov	r7, r1
 800a162:	f7f6 fd11 	bl	8000b88 <__aeabi_d2iz>
 800a166:	f7f6 f9f5 	bl	8000554 <__aeabi_i2d>
 800a16a:	4602      	mov	r2, r0
 800a16c:	460b      	mov	r3, r1
 800a16e:	4630      	mov	r0, r6
 800a170:	4639      	mov	r1, r7
 800a172:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a176:	f7f6 f89f 	bl	80002b8 <__aeabi_dsub>
 800a17a:	4b23      	ldr	r3, [pc, #140]	; (800a208 <__ieee754_rem_pio2+0x410>)
 800a17c:	2200      	movs	r2, #0
 800a17e:	f7f6 fa53 	bl	8000628 <__aeabi_dmul>
 800a182:	460f      	mov	r7, r1
 800a184:	4606      	mov	r6, r0
 800a186:	f7f6 fcff 	bl	8000b88 <__aeabi_d2iz>
 800a18a:	f7f6 f9e3 	bl	8000554 <__aeabi_i2d>
 800a18e:	4602      	mov	r2, r0
 800a190:	460b      	mov	r3, r1
 800a192:	4630      	mov	r0, r6
 800a194:	4639      	mov	r1, r7
 800a196:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a19a:	f7f6 f88d 	bl	80002b8 <__aeabi_dsub>
 800a19e:	4b1a      	ldr	r3, [pc, #104]	; (800a208 <__ieee754_rem_pio2+0x410>)
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	f7f6 fa41 	bl	8000628 <__aeabi_dmul>
 800a1a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a1aa:	ad04      	add	r5, sp, #16
 800a1ac:	f04f 0803 	mov.w	r8, #3
 800a1b0:	46a9      	mov	r9, r5
 800a1b2:	2600      	movs	r6, #0
 800a1b4:	2700      	movs	r7, #0
 800a1b6:	4632      	mov	r2, r6
 800a1b8:	463b      	mov	r3, r7
 800a1ba:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800a1be:	46c3      	mov	fp, r8
 800a1c0:	3d08      	subs	r5, #8
 800a1c2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800a1c6:	f7f6 fc97 	bl	8000af8 <__aeabi_dcmpeq>
 800a1ca:	2800      	cmp	r0, #0
 800a1cc:	d1f3      	bne.n	800a1b6 <__ieee754_rem_pio2+0x3be>
 800a1ce:	4b0f      	ldr	r3, [pc, #60]	; (800a20c <__ieee754_rem_pio2+0x414>)
 800a1d0:	9301      	str	r3, [sp, #4]
 800a1d2:	2302      	movs	r3, #2
 800a1d4:	9300      	str	r3, [sp, #0]
 800a1d6:	4622      	mov	r2, r4
 800a1d8:	465b      	mov	r3, fp
 800a1da:	4651      	mov	r1, sl
 800a1dc:	4648      	mov	r0, r9
 800a1de:	f000 f8df 	bl	800a3a0 <__kernel_rem_pio2>
 800a1e2:	9b02      	ldr	r3, [sp, #8]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	4683      	mov	fp, r0
 800a1e8:	f6bf ae46 	bge.w	8009e78 <__ieee754_rem_pio2+0x80>
 800a1ec:	e9da 2100 	ldrd	r2, r1, [sl]
 800a1f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a1f4:	e9ca 2300 	strd	r2, r3, [sl]
 800a1f8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800a1fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a200:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800a204:	e73a      	b.n	800a07c <__ieee754_rem_pio2+0x284>
 800a206:	bf00      	nop
 800a208:	41700000 	.word	0x41700000
 800a20c:	0800b40c 	.word	0x0800b40c

0800a210 <__kernel_cos>:
 800a210:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a214:	ec57 6b10 	vmov	r6, r7, d0
 800a218:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800a21c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800a220:	ed8d 1b00 	vstr	d1, [sp]
 800a224:	da07      	bge.n	800a236 <__kernel_cos+0x26>
 800a226:	ee10 0a10 	vmov	r0, s0
 800a22a:	4639      	mov	r1, r7
 800a22c:	f7f6 fcac 	bl	8000b88 <__aeabi_d2iz>
 800a230:	2800      	cmp	r0, #0
 800a232:	f000 8088 	beq.w	800a346 <__kernel_cos+0x136>
 800a236:	4632      	mov	r2, r6
 800a238:	463b      	mov	r3, r7
 800a23a:	4630      	mov	r0, r6
 800a23c:	4639      	mov	r1, r7
 800a23e:	f7f6 f9f3 	bl	8000628 <__aeabi_dmul>
 800a242:	4b51      	ldr	r3, [pc, #324]	; (800a388 <__kernel_cos+0x178>)
 800a244:	2200      	movs	r2, #0
 800a246:	4604      	mov	r4, r0
 800a248:	460d      	mov	r5, r1
 800a24a:	f7f6 f9ed 	bl	8000628 <__aeabi_dmul>
 800a24e:	a340      	add	r3, pc, #256	; (adr r3, 800a350 <__kernel_cos+0x140>)
 800a250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a254:	4682      	mov	sl, r0
 800a256:	468b      	mov	fp, r1
 800a258:	4620      	mov	r0, r4
 800a25a:	4629      	mov	r1, r5
 800a25c:	f7f6 f9e4 	bl	8000628 <__aeabi_dmul>
 800a260:	a33d      	add	r3, pc, #244	; (adr r3, 800a358 <__kernel_cos+0x148>)
 800a262:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a266:	f7f6 f829 	bl	80002bc <__adddf3>
 800a26a:	4622      	mov	r2, r4
 800a26c:	462b      	mov	r3, r5
 800a26e:	f7f6 f9db 	bl	8000628 <__aeabi_dmul>
 800a272:	a33b      	add	r3, pc, #236	; (adr r3, 800a360 <__kernel_cos+0x150>)
 800a274:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a278:	f7f6 f81e 	bl	80002b8 <__aeabi_dsub>
 800a27c:	4622      	mov	r2, r4
 800a27e:	462b      	mov	r3, r5
 800a280:	f7f6 f9d2 	bl	8000628 <__aeabi_dmul>
 800a284:	a338      	add	r3, pc, #224	; (adr r3, 800a368 <__kernel_cos+0x158>)
 800a286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a28a:	f7f6 f817 	bl	80002bc <__adddf3>
 800a28e:	4622      	mov	r2, r4
 800a290:	462b      	mov	r3, r5
 800a292:	f7f6 f9c9 	bl	8000628 <__aeabi_dmul>
 800a296:	a336      	add	r3, pc, #216	; (adr r3, 800a370 <__kernel_cos+0x160>)
 800a298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a29c:	f7f6 f80c 	bl	80002b8 <__aeabi_dsub>
 800a2a0:	4622      	mov	r2, r4
 800a2a2:	462b      	mov	r3, r5
 800a2a4:	f7f6 f9c0 	bl	8000628 <__aeabi_dmul>
 800a2a8:	a333      	add	r3, pc, #204	; (adr r3, 800a378 <__kernel_cos+0x168>)
 800a2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ae:	f7f6 f805 	bl	80002bc <__adddf3>
 800a2b2:	4622      	mov	r2, r4
 800a2b4:	462b      	mov	r3, r5
 800a2b6:	f7f6 f9b7 	bl	8000628 <__aeabi_dmul>
 800a2ba:	4622      	mov	r2, r4
 800a2bc:	462b      	mov	r3, r5
 800a2be:	f7f6 f9b3 	bl	8000628 <__aeabi_dmul>
 800a2c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a2c6:	4604      	mov	r4, r0
 800a2c8:	460d      	mov	r5, r1
 800a2ca:	4630      	mov	r0, r6
 800a2cc:	4639      	mov	r1, r7
 800a2ce:	f7f6 f9ab 	bl	8000628 <__aeabi_dmul>
 800a2d2:	460b      	mov	r3, r1
 800a2d4:	4602      	mov	r2, r0
 800a2d6:	4629      	mov	r1, r5
 800a2d8:	4620      	mov	r0, r4
 800a2da:	f7f5 ffed 	bl	80002b8 <__aeabi_dsub>
 800a2de:	4b2b      	ldr	r3, [pc, #172]	; (800a38c <__kernel_cos+0x17c>)
 800a2e0:	4598      	cmp	r8, r3
 800a2e2:	4606      	mov	r6, r0
 800a2e4:	460f      	mov	r7, r1
 800a2e6:	dc10      	bgt.n	800a30a <__kernel_cos+0xfa>
 800a2e8:	4602      	mov	r2, r0
 800a2ea:	460b      	mov	r3, r1
 800a2ec:	4650      	mov	r0, sl
 800a2ee:	4659      	mov	r1, fp
 800a2f0:	f7f5 ffe2 	bl	80002b8 <__aeabi_dsub>
 800a2f4:	460b      	mov	r3, r1
 800a2f6:	4926      	ldr	r1, [pc, #152]	; (800a390 <__kernel_cos+0x180>)
 800a2f8:	4602      	mov	r2, r0
 800a2fa:	2000      	movs	r0, #0
 800a2fc:	f7f5 ffdc 	bl	80002b8 <__aeabi_dsub>
 800a300:	ec41 0b10 	vmov	d0, r0, r1
 800a304:	b003      	add	sp, #12
 800a306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a30a:	4b22      	ldr	r3, [pc, #136]	; (800a394 <__kernel_cos+0x184>)
 800a30c:	4920      	ldr	r1, [pc, #128]	; (800a390 <__kernel_cos+0x180>)
 800a30e:	4598      	cmp	r8, r3
 800a310:	bfcc      	ite	gt
 800a312:	4d21      	ldrgt	r5, [pc, #132]	; (800a398 <__kernel_cos+0x188>)
 800a314:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800a318:	2400      	movs	r4, #0
 800a31a:	4622      	mov	r2, r4
 800a31c:	462b      	mov	r3, r5
 800a31e:	2000      	movs	r0, #0
 800a320:	f7f5 ffca 	bl	80002b8 <__aeabi_dsub>
 800a324:	4622      	mov	r2, r4
 800a326:	4680      	mov	r8, r0
 800a328:	4689      	mov	r9, r1
 800a32a:	462b      	mov	r3, r5
 800a32c:	4650      	mov	r0, sl
 800a32e:	4659      	mov	r1, fp
 800a330:	f7f5 ffc2 	bl	80002b8 <__aeabi_dsub>
 800a334:	4632      	mov	r2, r6
 800a336:	463b      	mov	r3, r7
 800a338:	f7f5 ffbe 	bl	80002b8 <__aeabi_dsub>
 800a33c:	4602      	mov	r2, r0
 800a33e:	460b      	mov	r3, r1
 800a340:	4640      	mov	r0, r8
 800a342:	4649      	mov	r1, r9
 800a344:	e7da      	b.n	800a2fc <__kernel_cos+0xec>
 800a346:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800a380 <__kernel_cos+0x170>
 800a34a:	e7db      	b.n	800a304 <__kernel_cos+0xf4>
 800a34c:	f3af 8000 	nop.w
 800a350:	be8838d4 	.word	0xbe8838d4
 800a354:	bda8fae9 	.word	0xbda8fae9
 800a358:	bdb4b1c4 	.word	0xbdb4b1c4
 800a35c:	3e21ee9e 	.word	0x3e21ee9e
 800a360:	809c52ad 	.word	0x809c52ad
 800a364:	3e927e4f 	.word	0x3e927e4f
 800a368:	19cb1590 	.word	0x19cb1590
 800a36c:	3efa01a0 	.word	0x3efa01a0
 800a370:	16c15177 	.word	0x16c15177
 800a374:	3f56c16c 	.word	0x3f56c16c
 800a378:	5555554c 	.word	0x5555554c
 800a37c:	3fa55555 	.word	0x3fa55555
 800a380:	00000000 	.word	0x00000000
 800a384:	3ff00000 	.word	0x3ff00000
 800a388:	3fe00000 	.word	0x3fe00000
 800a38c:	3fd33332 	.word	0x3fd33332
 800a390:	3ff00000 	.word	0x3ff00000
 800a394:	3fe90000 	.word	0x3fe90000
 800a398:	3fd20000 	.word	0x3fd20000
 800a39c:	00000000 	.word	0x00000000

0800a3a0 <__kernel_rem_pio2>:
 800a3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3a4:	ed2d 8b02 	vpush	{d8}
 800a3a8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800a3ac:	f112 0f14 	cmn.w	r2, #20
 800a3b0:	9308      	str	r3, [sp, #32]
 800a3b2:	9101      	str	r1, [sp, #4]
 800a3b4:	4bc4      	ldr	r3, [pc, #784]	; (800a6c8 <__kernel_rem_pio2+0x328>)
 800a3b6:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800a3b8:	900b      	str	r0, [sp, #44]	; 0x2c
 800a3ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a3be:	9302      	str	r3, [sp, #8]
 800a3c0:	9b08      	ldr	r3, [sp, #32]
 800a3c2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800a3c6:	bfa8      	it	ge
 800a3c8:	1ed4      	subge	r4, r2, #3
 800a3ca:	9306      	str	r3, [sp, #24]
 800a3cc:	bfb2      	itee	lt
 800a3ce:	2400      	movlt	r4, #0
 800a3d0:	2318      	movge	r3, #24
 800a3d2:	fb94 f4f3 	sdivge	r4, r4, r3
 800a3d6:	f06f 0317 	mvn.w	r3, #23
 800a3da:	fb04 3303 	mla	r3, r4, r3, r3
 800a3de:	eb03 0a02 	add.w	sl, r3, r2
 800a3e2:	9b02      	ldr	r3, [sp, #8]
 800a3e4:	9a06      	ldr	r2, [sp, #24]
 800a3e6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800a6b8 <__kernel_rem_pio2+0x318>
 800a3ea:	eb03 0802 	add.w	r8, r3, r2
 800a3ee:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a3f0:	1aa7      	subs	r7, r4, r2
 800a3f2:	ae22      	add	r6, sp, #136	; 0x88
 800a3f4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a3f8:	2500      	movs	r5, #0
 800a3fa:	4545      	cmp	r5, r8
 800a3fc:	dd13      	ble.n	800a426 <__kernel_rem_pio2+0x86>
 800a3fe:	9b08      	ldr	r3, [sp, #32]
 800a400:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800a6b8 <__kernel_rem_pio2+0x318>
 800a404:	aa22      	add	r2, sp, #136	; 0x88
 800a406:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a40a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800a40e:	f04f 0800 	mov.w	r8, #0
 800a412:	9b02      	ldr	r3, [sp, #8]
 800a414:	4598      	cmp	r8, r3
 800a416:	dc2f      	bgt.n	800a478 <__kernel_rem_pio2+0xd8>
 800a418:	ed8d 8b04 	vstr	d8, [sp, #16]
 800a41c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800a420:	462f      	mov	r7, r5
 800a422:	2600      	movs	r6, #0
 800a424:	e01b      	b.n	800a45e <__kernel_rem_pio2+0xbe>
 800a426:	42ef      	cmn	r7, r5
 800a428:	d407      	bmi.n	800a43a <__kernel_rem_pio2+0x9a>
 800a42a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a42e:	f7f6 f891 	bl	8000554 <__aeabi_i2d>
 800a432:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a436:	3501      	adds	r5, #1
 800a438:	e7df      	b.n	800a3fa <__kernel_rem_pio2+0x5a>
 800a43a:	ec51 0b18 	vmov	r0, r1, d8
 800a43e:	e7f8      	b.n	800a432 <__kernel_rem_pio2+0x92>
 800a440:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a444:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a448:	f7f6 f8ee 	bl	8000628 <__aeabi_dmul>
 800a44c:	4602      	mov	r2, r0
 800a44e:	460b      	mov	r3, r1
 800a450:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a454:	f7f5 ff32 	bl	80002bc <__adddf3>
 800a458:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a45c:	3601      	adds	r6, #1
 800a45e:	9b06      	ldr	r3, [sp, #24]
 800a460:	429e      	cmp	r6, r3
 800a462:	f1a7 0708 	sub.w	r7, r7, #8
 800a466:	ddeb      	ble.n	800a440 <__kernel_rem_pio2+0xa0>
 800a468:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a46c:	f108 0801 	add.w	r8, r8, #1
 800a470:	ecab 7b02 	vstmia	fp!, {d7}
 800a474:	3508      	adds	r5, #8
 800a476:	e7cc      	b.n	800a412 <__kernel_rem_pio2+0x72>
 800a478:	9b02      	ldr	r3, [sp, #8]
 800a47a:	aa0e      	add	r2, sp, #56	; 0x38
 800a47c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a480:	930d      	str	r3, [sp, #52]	; 0x34
 800a482:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a484:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a488:	9c02      	ldr	r4, [sp, #8]
 800a48a:	930c      	str	r3, [sp, #48]	; 0x30
 800a48c:	00e3      	lsls	r3, r4, #3
 800a48e:	930a      	str	r3, [sp, #40]	; 0x28
 800a490:	ab9a      	add	r3, sp, #616	; 0x268
 800a492:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a496:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800a49a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800a49e:	ab72      	add	r3, sp, #456	; 0x1c8
 800a4a0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800a4a4:	46c3      	mov	fp, r8
 800a4a6:	46a1      	mov	r9, r4
 800a4a8:	f1b9 0f00 	cmp.w	r9, #0
 800a4ac:	f1a5 0508 	sub.w	r5, r5, #8
 800a4b0:	dc77      	bgt.n	800a5a2 <__kernel_rem_pio2+0x202>
 800a4b2:	ec47 6b10 	vmov	d0, r6, r7
 800a4b6:	4650      	mov	r0, sl
 800a4b8:	f000 fc0a 	bl	800acd0 <scalbn>
 800a4bc:	ec57 6b10 	vmov	r6, r7, d0
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a4c6:	ee10 0a10 	vmov	r0, s0
 800a4ca:	4639      	mov	r1, r7
 800a4cc:	f7f6 f8ac 	bl	8000628 <__aeabi_dmul>
 800a4d0:	ec41 0b10 	vmov	d0, r0, r1
 800a4d4:	f000 fb7c 	bl	800abd0 <floor>
 800a4d8:	4b7c      	ldr	r3, [pc, #496]	; (800a6cc <__kernel_rem_pio2+0x32c>)
 800a4da:	ec51 0b10 	vmov	r0, r1, d0
 800a4de:	2200      	movs	r2, #0
 800a4e0:	f7f6 f8a2 	bl	8000628 <__aeabi_dmul>
 800a4e4:	4602      	mov	r2, r0
 800a4e6:	460b      	mov	r3, r1
 800a4e8:	4630      	mov	r0, r6
 800a4ea:	4639      	mov	r1, r7
 800a4ec:	f7f5 fee4 	bl	80002b8 <__aeabi_dsub>
 800a4f0:	460f      	mov	r7, r1
 800a4f2:	4606      	mov	r6, r0
 800a4f4:	f7f6 fb48 	bl	8000b88 <__aeabi_d2iz>
 800a4f8:	9004      	str	r0, [sp, #16]
 800a4fa:	f7f6 f82b 	bl	8000554 <__aeabi_i2d>
 800a4fe:	4602      	mov	r2, r0
 800a500:	460b      	mov	r3, r1
 800a502:	4630      	mov	r0, r6
 800a504:	4639      	mov	r1, r7
 800a506:	f7f5 fed7 	bl	80002b8 <__aeabi_dsub>
 800a50a:	f1ba 0f00 	cmp.w	sl, #0
 800a50e:	4606      	mov	r6, r0
 800a510:	460f      	mov	r7, r1
 800a512:	dd6d      	ble.n	800a5f0 <__kernel_rem_pio2+0x250>
 800a514:	1e62      	subs	r2, r4, #1
 800a516:	ab0e      	add	r3, sp, #56	; 0x38
 800a518:	9d04      	ldr	r5, [sp, #16]
 800a51a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a51e:	f1ca 0118 	rsb	r1, sl, #24
 800a522:	fa40 f301 	asr.w	r3, r0, r1
 800a526:	441d      	add	r5, r3
 800a528:	408b      	lsls	r3, r1
 800a52a:	1ac0      	subs	r0, r0, r3
 800a52c:	ab0e      	add	r3, sp, #56	; 0x38
 800a52e:	9504      	str	r5, [sp, #16]
 800a530:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800a534:	f1ca 0317 	rsb	r3, sl, #23
 800a538:	fa40 fb03 	asr.w	fp, r0, r3
 800a53c:	f1bb 0f00 	cmp.w	fp, #0
 800a540:	dd65      	ble.n	800a60e <__kernel_rem_pio2+0x26e>
 800a542:	9b04      	ldr	r3, [sp, #16]
 800a544:	2200      	movs	r2, #0
 800a546:	3301      	adds	r3, #1
 800a548:	9304      	str	r3, [sp, #16]
 800a54a:	4615      	mov	r5, r2
 800a54c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a550:	4294      	cmp	r4, r2
 800a552:	f300 809c 	bgt.w	800a68e <__kernel_rem_pio2+0x2ee>
 800a556:	f1ba 0f00 	cmp.w	sl, #0
 800a55a:	dd07      	ble.n	800a56c <__kernel_rem_pio2+0x1cc>
 800a55c:	f1ba 0f01 	cmp.w	sl, #1
 800a560:	f000 80c0 	beq.w	800a6e4 <__kernel_rem_pio2+0x344>
 800a564:	f1ba 0f02 	cmp.w	sl, #2
 800a568:	f000 80c6 	beq.w	800a6f8 <__kernel_rem_pio2+0x358>
 800a56c:	f1bb 0f02 	cmp.w	fp, #2
 800a570:	d14d      	bne.n	800a60e <__kernel_rem_pio2+0x26e>
 800a572:	4632      	mov	r2, r6
 800a574:	463b      	mov	r3, r7
 800a576:	4956      	ldr	r1, [pc, #344]	; (800a6d0 <__kernel_rem_pio2+0x330>)
 800a578:	2000      	movs	r0, #0
 800a57a:	f7f5 fe9d 	bl	80002b8 <__aeabi_dsub>
 800a57e:	4606      	mov	r6, r0
 800a580:	460f      	mov	r7, r1
 800a582:	2d00      	cmp	r5, #0
 800a584:	d043      	beq.n	800a60e <__kernel_rem_pio2+0x26e>
 800a586:	4650      	mov	r0, sl
 800a588:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800a6c0 <__kernel_rem_pio2+0x320>
 800a58c:	f000 fba0 	bl	800acd0 <scalbn>
 800a590:	4630      	mov	r0, r6
 800a592:	4639      	mov	r1, r7
 800a594:	ec53 2b10 	vmov	r2, r3, d0
 800a598:	f7f5 fe8e 	bl	80002b8 <__aeabi_dsub>
 800a59c:	4606      	mov	r6, r0
 800a59e:	460f      	mov	r7, r1
 800a5a0:	e035      	b.n	800a60e <__kernel_rem_pio2+0x26e>
 800a5a2:	4b4c      	ldr	r3, [pc, #304]	; (800a6d4 <__kernel_rem_pio2+0x334>)
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	4630      	mov	r0, r6
 800a5a8:	4639      	mov	r1, r7
 800a5aa:	f7f6 f83d 	bl	8000628 <__aeabi_dmul>
 800a5ae:	f7f6 faeb 	bl	8000b88 <__aeabi_d2iz>
 800a5b2:	f7f5 ffcf 	bl	8000554 <__aeabi_i2d>
 800a5b6:	4602      	mov	r2, r0
 800a5b8:	460b      	mov	r3, r1
 800a5ba:	ec43 2b18 	vmov	d8, r2, r3
 800a5be:	4b46      	ldr	r3, [pc, #280]	; (800a6d8 <__kernel_rem_pio2+0x338>)
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	f7f6 f831 	bl	8000628 <__aeabi_dmul>
 800a5c6:	4602      	mov	r2, r0
 800a5c8:	460b      	mov	r3, r1
 800a5ca:	4630      	mov	r0, r6
 800a5cc:	4639      	mov	r1, r7
 800a5ce:	f7f5 fe73 	bl	80002b8 <__aeabi_dsub>
 800a5d2:	f7f6 fad9 	bl	8000b88 <__aeabi_d2iz>
 800a5d6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a5da:	f84b 0b04 	str.w	r0, [fp], #4
 800a5de:	ec51 0b18 	vmov	r0, r1, d8
 800a5e2:	f7f5 fe6b 	bl	80002bc <__adddf3>
 800a5e6:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800a5ea:	4606      	mov	r6, r0
 800a5ec:	460f      	mov	r7, r1
 800a5ee:	e75b      	b.n	800a4a8 <__kernel_rem_pio2+0x108>
 800a5f0:	d106      	bne.n	800a600 <__kernel_rem_pio2+0x260>
 800a5f2:	1e63      	subs	r3, r4, #1
 800a5f4:	aa0e      	add	r2, sp, #56	; 0x38
 800a5f6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a5fa:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800a5fe:	e79d      	b.n	800a53c <__kernel_rem_pio2+0x19c>
 800a600:	4b36      	ldr	r3, [pc, #216]	; (800a6dc <__kernel_rem_pio2+0x33c>)
 800a602:	2200      	movs	r2, #0
 800a604:	f7f6 fa96 	bl	8000b34 <__aeabi_dcmpge>
 800a608:	2800      	cmp	r0, #0
 800a60a:	d13d      	bne.n	800a688 <__kernel_rem_pio2+0x2e8>
 800a60c:	4683      	mov	fp, r0
 800a60e:	2200      	movs	r2, #0
 800a610:	2300      	movs	r3, #0
 800a612:	4630      	mov	r0, r6
 800a614:	4639      	mov	r1, r7
 800a616:	f7f6 fa6f 	bl	8000af8 <__aeabi_dcmpeq>
 800a61a:	2800      	cmp	r0, #0
 800a61c:	f000 80c0 	beq.w	800a7a0 <__kernel_rem_pio2+0x400>
 800a620:	1e65      	subs	r5, r4, #1
 800a622:	462b      	mov	r3, r5
 800a624:	2200      	movs	r2, #0
 800a626:	9902      	ldr	r1, [sp, #8]
 800a628:	428b      	cmp	r3, r1
 800a62a:	da6c      	bge.n	800a706 <__kernel_rem_pio2+0x366>
 800a62c:	2a00      	cmp	r2, #0
 800a62e:	f000 8089 	beq.w	800a744 <__kernel_rem_pio2+0x3a4>
 800a632:	ab0e      	add	r3, sp, #56	; 0x38
 800a634:	f1aa 0a18 	sub.w	sl, sl, #24
 800a638:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	f000 80ad 	beq.w	800a79c <__kernel_rem_pio2+0x3fc>
 800a642:	4650      	mov	r0, sl
 800a644:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800a6c0 <__kernel_rem_pio2+0x320>
 800a648:	f000 fb42 	bl	800acd0 <scalbn>
 800a64c:	ab9a      	add	r3, sp, #616	; 0x268
 800a64e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a652:	ec57 6b10 	vmov	r6, r7, d0
 800a656:	00ec      	lsls	r4, r5, #3
 800a658:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800a65c:	46aa      	mov	sl, r5
 800a65e:	f1ba 0f00 	cmp.w	sl, #0
 800a662:	f280 80d6 	bge.w	800a812 <__kernel_rem_pio2+0x472>
 800a666:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800a6b8 <__kernel_rem_pio2+0x318>
 800a66a:	462e      	mov	r6, r5
 800a66c:	2e00      	cmp	r6, #0
 800a66e:	f2c0 8104 	blt.w	800a87a <__kernel_rem_pio2+0x4da>
 800a672:	ab72      	add	r3, sp, #456	; 0x1c8
 800a674:	ed8d 8b06 	vstr	d8, [sp, #24]
 800a678:	f8df a064 	ldr.w	sl, [pc, #100]	; 800a6e0 <__kernel_rem_pio2+0x340>
 800a67c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800a680:	f04f 0800 	mov.w	r8, #0
 800a684:	1baf      	subs	r7, r5, r6
 800a686:	e0ea      	b.n	800a85e <__kernel_rem_pio2+0x4be>
 800a688:	f04f 0b02 	mov.w	fp, #2
 800a68c:	e759      	b.n	800a542 <__kernel_rem_pio2+0x1a2>
 800a68e:	f8d8 3000 	ldr.w	r3, [r8]
 800a692:	b955      	cbnz	r5, 800a6aa <__kernel_rem_pio2+0x30a>
 800a694:	b123      	cbz	r3, 800a6a0 <__kernel_rem_pio2+0x300>
 800a696:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800a69a:	f8c8 3000 	str.w	r3, [r8]
 800a69e:	2301      	movs	r3, #1
 800a6a0:	3201      	adds	r2, #1
 800a6a2:	f108 0804 	add.w	r8, r8, #4
 800a6a6:	461d      	mov	r5, r3
 800a6a8:	e752      	b.n	800a550 <__kernel_rem_pio2+0x1b0>
 800a6aa:	1acb      	subs	r3, r1, r3
 800a6ac:	f8c8 3000 	str.w	r3, [r8]
 800a6b0:	462b      	mov	r3, r5
 800a6b2:	e7f5      	b.n	800a6a0 <__kernel_rem_pio2+0x300>
 800a6b4:	f3af 8000 	nop.w
	...
 800a6c4:	3ff00000 	.word	0x3ff00000
 800a6c8:	0800b558 	.word	0x0800b558
 800a6cc:	40200000 	.word	0x40200000
 800a6d0:	3ff00000 	.word	0x3ff00000
 800a6d4:	3e700000 	.word	0x3e700000
 800a6d8:	41700000 	.word	0x41700000
 800a6dc:	3fe00000 	.word	0x3fe00000
 800a6e0:	0800b518 	.word	0x0800b518
 800a6e4:	1e62      	subs	r2, r4, #1
 800a6e6:	ab0e      	add	r3, sp, #56	; 0x38
 800a6e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6ec:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a6f0:	a90e      	add	r1, sp, #56	; 0x38
 800a6f2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a6f6:	e739      	b.n	800a56c <__kernel_rem_pio2+0x1cc>
 800a6f8:	1e62      	subs	r2, r4, #1
 800a6fa:	ab0e      	add	r3, sp, #56	; 0x38
 800a6fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a700:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a704:	e7f4      	b.n	800a6f0 <__kernel_rem_pio2+0x350>
 800a706:	a90e      	add	r1, sp, #56	; 0x38
 800a708:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a70c:	3b01      	subs	r3, #1
 800a70e:	430a      	orrs	r2, r1
 800a710:	e789      	b.n	800a626 <__kernel_rem_pio2+0x286>
 800a712:	3301      	adds	r3, #1
 800a714:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800a718:	2900      	cmp	r1, #0
 800a71a:	d0fa      	beq.n	800a712 <__kernel_rem_pio2+0x372>
 800a71c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a71e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800a722:	446a      	add	r2, sp
 800a724:	3a98      	subs	r2, #152	; 0x98
 800a726:	920a      	str	r2, [sp, #40]	; 0x28
 800a728:	9a08      	ldr	r2, [sp, #32]
 800a72a:	18e3      	adds	r3, r4, r3
 800a72c:	18a5      	adds	r5, r4, r2
 800a72e:	aa22      	add	r2, sp, #136	; 0x88
 800a730:	f104 0801 	add.w	r8, r4, #1
 800a734:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800a738:	9304      	str	r3, [sp, #16]
 800a73a:	9b04      	ldr	r3, [sp, #16]
 800a73c:	4543      	cmp	r3, r8
 800a73e:	da04      	bge.n	800a74a <__kernel_rem_pio2+0x3aa>
 800a740:	461c      	mov	r4, r3
 800a742:	e6a3      	b.n	800a48c <__kernel_rem_pio2+0xec>
 800a744:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a746:	2301      	movs	r3, #1
 800a748:	e7e4      	b.n	800a714 <__kernel_rem_pio2+0x374>
 800a74a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a74c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a750:	f7f5 ff00 	bl	8000554 <__aeabi_i2d>
 800a754:	e8e5 0102 	strd	r0, r1, [r5], #8
 800a758:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a75a:	46ab      	mov	fp, r5
 800a75c:	461c      	mov	r4, r3
 800a75e:	f04f 0900 	mov.w	r9, #0
 800a762:	2600      	movs	r6, #0
 800a764:	2700      	movs	r7, #0
 800a766:	9b06      	ldr	r3, [sp, #24]
 800a768:	4599      	cmp	r9, r3
 800a76a:	dd06      	ble.n	800a77a <__kernel_rem_pio2+0x3da>
 800a76c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a76e:	e8e3 6702 	strd	r6, r7, [r3], #8
 800a772:	f108 0801 	add.w	r8, r8, #1
 800a776:	930a      	str	r3, [sp, #40]	; 0x28
 800a778:	e7df      	b.n	800a73a <__kernel_rem_pio2+0x39a>
 800a77a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800a77e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800a782:	f7f5 ff51 	bl	8000628 <__aeabi_dmul>
 800a786:	4602      	mov	r2, r0
 800a788:	460b      	mov	r3, r1
 800a78a:	4630      	mov	r0, r6
 800a78c:	4639      	mov	r1, r7
 800a78e:	f7f5 fd95 	bl	80002bc <__adddf3>
 800a792:	f109 0901 	add.w	r9, r9, #1
 800a796:	4606      	mov	r6, r0
 800a798:	460f      	mov	r7, r1
 800a79a:	e7e4      	b.n	800a766 <__kernel_rem_pio2+0x3c6>
 800a79c:	3d01      	subs	r5, #1
 800a79e:	e748      	b.n	800a632 <__kernel_rem_pio2+0x292>
 800a7a0:	ec47 6b10 	vmov	d0, r6, r7
 800a7a4:	f1ca 0000 	rsb	r0, sl, #0
 800a7a8:	f000 fa92 	bl	800acd0 <scalbn>
 800a7ac:	ec57 6b10 	vmov	r6, r7, d0
 800a7b0:	4ba0      	ldr	r3, [pc, #640]	; (800aa34 <__kernel_rem_pio2+0x694>)
 800a7b2:	ee10 0a10 	vmov	r0, s0
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	4639      	mov	r1, r7
 800a7ba:	f7f6 f9bb 	bl	8000b34 <__aeabi_dcmpge>
 800a7be:	b1f8      	cbz	r0, 800a800 <__kernel_rem_pio2+0x460>
 800a7c0:	4b9d      	ldr	r3, [pc, #628]	; (800aa38 <__kernel_rem_pio2+0x698>)
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	4630      	mov	r0, r6
 800a7c6:	4639      	mov	r1, r7
 800a7c8:	f7f5 ff2e 	bl	8000628 <__aeabi_dmul>
 800a7cc:	f7f6 f9dc 	bl	8000b88 <__aeabi_d2iz>
 800a7d0:	4680      	mov	r8, r0
 800a7d2:	f7f5 febf 	bl	8000554 <__aeabi_i2d>
 800a7d6:	4b97      	ldr	r3, [pc, #604]	; (800aa34 <__kernel_rem_pio2+0x694>)
 800a7d8:	2200      	movs	r2, #0
 800a7da:	f7f5 ff25 	bl	8000628 <__aeabi_dmul>
 800a7de:	460b      	mov	r3, r1
 800a7e0:	4602      	mov	r2, r0
 800a7e2:	4639      	mov	r1, r7
 800a7e4:	4630      	mov	r0, r6
 800a7e6:	f7f5 fd67 	bl	80002b8 <__aeabi_dsub>
 800a7ea:	f7f6 f9cd 	bl	8000b88 <__aeabi_d2iz>
 800a7ee:	1c65      	adds	r5, r4, #1
 800a7f0:	ab0e      	add	r3, sp, #56	; 0x38
 800a7f2:	f10a 0a18 	add.w	sl, sl, #24
 800a7f6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a7fa:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800a7fe:	e720      	b.n	800a642 <__kernel_rem_pio2+0x2a2>
 800a800:	4630      	mov	r0, r6
 800a802:	4639      	mov	r1, r7
 800a804:	f7f6 f9c0 	bl	8000b88 <__aeabi_d2iz>
 800a808:	ab0e      	add	r3, sp, #56	; 0x38
 800a80a:	4625      	mov	r5, r4
 800a80c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a810:	e717      	b.n	800a642 <__kernel_rem_pio2+0x2a2>
 800a812:	ab0e      	add	r3, sp, #56	; 0x38
 800a814:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800a818:	f7f5 fe9c 	bl	8000554 <__aeabi_i2d>
 800a81c:	4632      	mov	r2, r6
 800a81e:	463b      	mov	r3, r7
 800a820:	f7f5 ff02 	bl	8000628 <__aeabi_dmul>
 800a824:	4b84      	ldr	r3, [pc, #528]	; (800aa38 <__kernel_rem_pio2+0x698>)
 800a826:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800a82a:	2200      	movs	r2, #0
 800a82c:	4630      	mov	r0, r6
 800a82e:	4639      	mov	r1, r7
 800a830:	f7f5 fefa 	bl	8000628 <__aeabi_dmul>
 800a834:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a838:	4606      	mov	r6, r0
 800a83a:	460f      	mov	r7, r1
 800a83c:	e70f      	b.n	800a65e <__kernel_rem_pio2+0x2be>
 800a83e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800a842:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800a846:	f7f5 feef 	bl	8000628 <__aeabi_dmul>
 800a84a:	4602      	mov	r2, r0
 800a84c:	460b      	mov	r3, r1
 800a84e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a852:	f7f5 fd33 	bl	80002bc <__adddf3>
 800a856:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a85a:	f108 0801 	add.w	r8, r8, #1
 800a85e:	9b02      	ldr	r3, [sp, #8]
 800a860:	4598      	cmp	r8, r3
 800a862:	dc01      	bgt.n	800a868 <__kernel_rem_pio2+0x4c8>
 800a864:	45b8      	cmp	r8, r7
 800a866:	ddea      	ble.n	800a83e <__kernel_rem_pio2+0x49e>
 800a868:	ed9d 7b06 	vldr	d7, [sp, #24]
 800a86c:	ab4a      	add	r3, sp, #296	; 0x128
 800a86e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a872:	ed87 7b00 	vstr	d7, [r7]
 800a876:	3e01      	subs	r6, #1
 800a878:	e6f8      	b.n	800a66c <__kernel_rem_pio2+0x2cc>
 800a87a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800a87c:	2b02      	cmp	r3, #2
 800a87e:	dc0b      	bgt.n	800a898 <__kernel_rem_pio2+0x4f8>
 800a880:	2b00      	cmp	r3, #0
 800a882:	dc35      	bgt.n	800a8f0 <__kernel_rem_pio2+0x550>
 800a884:	d059      	beq.n	800a93a <__kernel_rem_pio2+0x59a>
 800a886:	9b04      	ldr	r3, [sp, #16]
 800a888:	f003 0007 	and.w	r0, r3, #7
 800a88c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800a890:	ecbd 8b02 	vpop	{d8}
 800a894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a898:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800a89a:	2b03      	cmp	r3, #3
 800a89c:	d1f3      	bne.n	800a886 <__kernel_rem_pio2+0x4e6>
 800a89e:	ab4a      	add	r3, sp, #296	; 0x128
 800a8a0:	4423      	add	r3, r4
 800a8a2:	9306      	str	r3, [sp, #24]
 800a8a4:	461c      	mov	r4, r3
 800a8a6:	469a      	mov	sl, r3
 800a8a8:	9502      	str	r5, [sp, #8]
 800a8aa:	9b02      	ldr	r3, [sp, #8]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	f1aa 0a08 	sub.w	sl, sl, #8
 800a8b2:	dc6b      	bgt.n	800a98c <__kernel_rem_pio2+0x5ec>
 800a8b4:	46aa      	mov	sl, r5
 800a8b6:	f1ba 0f01 	cmp.w	sl, #1
 800a8ba:	f1a4 0408 	sub.w	r4, r4, #8
 800a8be:	f300 8085 	bgt.w	800a9cc <__kernel_rem_pio2+0x62c>
 800a8c2:	9c06      	ldr	r4, [sp, #24]
 800a8c4:	2000      	movs	r0, #0
 800a8c6:	3408      	adds	r4, #8
 800a8c8:	2100      	movs	r1, #0
 800a8ca:	2d01      	cmp	r5, #1
 800a8cc:	f300 809d 	bgt.w	800aa0a <__kernel_rem_pio2+0x66a>
 800a8d0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800a8d4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800a8d8:	f1bb 0f00 	cmp.w	fp, #0
 800a8dc:	f040 809b 	bne.w	800aa16 <__kernel_rem_pio2+0x676>
 800a8e0:	9b01      	ldr	r3, [sp, #4]
 800a8e2:	e9c3 5600 	strd	r5, r6, [r3]
 800a8e6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800a8ea:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a8ee:	e7ca      	b.n	800a886 <__kernel_rem_pio2+0x4e6>
 800a8f0:	3408      	adds	r4, #8
 800a8f2:	ab4a      	add	r3, sp, #296	; 0x128
 800a8f4:	441c      	add	r4, r3
 800a8f6:	462e      	mov	r6, r5
 800a8f8:	2000      	movs	r0, #0
 800a8fa:	2100      	movs	r1, #0
 800a8fc:	2e00      	cmp	r6, #0
 800a8fe:	da36      	bge.n	800a96e <__kernel_rem_pio2+0x5ce>
 800a900:	f1bb 0f00 	cmp.w	fp, #0
 800a904:	d039      	beq.n	800a97a <__kernel_rem_pio2+0x5da>
 800a906:	4602      	mov	r2, r0
 800a908:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a90c:	9c01      	ldr	r4, [sp, #4]
 800a90e:	e9c4 2300 	strd	r2, r3, [r4]
 800a912:	4602      	mov	r2, r0
 800a914:	460b      	mov	r3, r1
 800a916:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800a91a:	f7f5 fccd 	bl	80002b8 <__aeabi_dsub>
 800a91e:	ae4c      	add	r6, sp, #304	; 0x130
 800a920:	2401      	movs	r4, #1
 800a922:	42a5      	cmp	r5, r4
 800a924:	da2c      	bge.n	800a980 <__kernel_rem_pio2+0x5e0>
 800a926:	f1bb 0f00 	cmp.w	fp, #0
 800a92a:	d002      	beq.n	800a932 <__kernel_rem_pio2+0x592>
 800a92c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a930:	4619      	mov	r1, r3
 800a932:	9b01      	ldr	r3, [sp, #4]
 800a934:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800a938:	e7a5      	b.n	800a886 <__kernel_rem_pio2+0x4e6>
 800a93a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800a93e:	eb0d 0403 	add.w	r4, sp, r3
 800a942:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800a946:	2000      	movs	r0, #0
 800a948:	2100      	movs	r1, #0
 800a94a:	2d00      	cmp	r5, #0
 800a94c:	da09      	bge.n	800a962 <__kernel_rem_pio2+0x5c2>
 800a94e:	f1bb 0f00 	cmp.w	fp, #0
 800a952:	d002      	beq.n	800a95a <__kernel_rem_pio2+0x5ba>
 800a954:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a958:	4619      	mov	r1, r3
 800a95a:	9b01      	ldr	r3, [sp, #4]
 800a95c:	e9c3 0100 	strd	r0, r1, [r3]
 800a960:	e791      	b.n	800a886 <__kernel_rem_pio2+0x4e6>
 800a962:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a966:	f7f5 fca9 	bl	80002bc <__adddf3>
 800a96a:	3d01      	subs	r5, #1
 800a96c:	e7ed      	b.n	800a94a <__kernel_rem_pio2+0x5aa>
 800a96e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a972:	f7f5 fca3 	bl	80002bc <__adddf3>
 800a976:	3e01      	subs	r6, #1
 800a978:	e7c0      	b.n	800a8fc <__kernel_rem_pio2+0x55c>
 800a97a:	4602      	mov	r2, r0
 800a97c:	460b      	mov	r3, r1
 800a97e:	e7c5      	b.n	800a90c <__kernel_rem_pio2+0x56c>
 800a980:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800a984:	f7f5 fc9a 	bl	80002bc <__adddf3>
 800a988:	3401      	adds	r4, #1
 800a98a:	e7ca      	b.n	800a922 <__kernel_rem_pio2+0x582>
 800a98c:	e9da 8900 	ldrd	r8, r9, [sl]
 800a990:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800a994:	9b02      	ldr	r3, [sp, #8]
 800a996:	3b01      	subs	r3, #1
 800a998:	9302      	str	r3, [sp, #8]
 800a99a:	4632      	mov	r2, r6
 800a99c:	463b      	mov	r3, r7
 800a99e:	4640      	mov	r0, r8
 800a9a0:	4649      	mov	r1, r9
 800a9a2:	f7f5 fc8b 	bl	80002bc <__adddf3>
 800a9a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a9aa:	4602      	mov	r2, r0
 800a9ac:	460b      	mov	r3, r1
 800a9ae:	4640      	mov	r0, r8
 800a9b0:	4649      	mov	r1, r9
 800a9b2:	f7f5 fc81 	bl	80002b8 <__aeabi_dsub>
 800a9b6:	4632      	mov	r2, r6
 800a9b8:	463b      	mov	r3, r7
 800a9ba:	f7f5 fc7f 	bl	80002bc <__adddf3>
 800a9be:	ed9d 7b08 	vldr	d7, [sp, #32]
 800a9c2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a9c6:	ed8a 7b00 	vstr	d7, [sl]
 800a9ca:	e76e      	b.n	800a8aa <__kernel_rem_pio2+0x50a>
 800a9cc:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a9d0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800a9d4:	4640      	mov	r0, r8
 800a9d6:	4632      	mov	r2, r6
 800a9d8:	463b      	mov	r3, r7
 800a9da:	4649      	mov	r1, r9
 800a9dc:	f7f5 fc6e 	bl	80002bc <__adddf3>
 800a9e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a9e4:	4602      	mov	r2, r0
 800a9e6:	460b      	mov	r3, r1
 800a9e8:	4640      	mov	r0, r8
 800a9ea:	4649      	mov	r1, r9
 800a9ec:	f7f5 fc64 	bl	80002b8 <__aeabi_dsub>
 800a9f0:	4632      	mov	r2, r6
 800a9f2:	463b      	mov	r3, r7
 800a9f4:	f7f5 fc62 	bl	80002bc <__adddf3>
 800a9f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a9fc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800aa00:	ed84 7b00 	vstr	d7, [r4]
 800aa04:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800aa08:	e755      	b.n	800a8b6 <__kernel_rem_pio2+0x516>
 800aa0a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800aa0e:	f7f5 fc55 	bl	80002bc <__adddf3>
 800aa12:	3d01      	subs	r5, #1
 800aa14:	e759      	b.n	800a8ca <__kernel_rem_pio2+0x52a>
 800aa16:	9b01      	ldr	r3, [sp, #4]
 800aa18:	9a01      	ldr	r2, [sp, #4]
 800aa1a:	601d      	str	r5, [r3, #0]
 800aa1c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800aa20:	605c      	str	r4, [r3, #4]
 800aa22:	609f      	str	r7, [r3, #8]
 800aa24:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800aa28:	60d3      	str	r3, [r2, #12]
 800aa2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aa2e:	6110      	str	r0, [r2, #16]
 800aa30:	6153      	str	r3, [r2, #20]
 800aa32:	e728      	b.n	800a886 <__kernel_rem_pio2+0x4e6>
 800aa34:	41700000 	.word	0x41700000
 800aa38:	3e700000 	.word	0x3e700000
 800aa3c:	00000000 	.word	0x00000000

0800aa40 <__kernel_sin>:
 800aa40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa44:	ed2d 8b04 	vpush	{d8-d9}
 800aa48:	eeb0 8a41 	vmov.f32	s16, s2
 800aa4c:	eef0 8a61 	vmov.f32	s17, s3
 800aa50:	ec55 4b10 	vmov	r4, r5, d0
 800aa54:	b083      	sub	sp, #12
 800aa56:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800aa5a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800aa5e:	9001      	str	r0, [sp, #4]
 800aa60:	da06      	bge.n	800aa70 <__kernel_sin+0x30>
 800aa62:	ee10 0a10 	vmov	r0, s0
 800aa66:	4629      	mov	r1, r5
 800aa68:	f7f6 f88e 	bl	8000b88 <__aeabi_d2iz>
 800aa6c:	2800      	cmp	r0, #0
 800aa6e:	d051      	beq.n	800ab14 <__kernel_sin+0xd4>
 800aa70:	4622      	mov	r2, r4
 800aa72:	462b      	mov	r3, r5
 800aa74:	4620      	mov	r0, r4
 800aa76:	4629      	mov	r1, r5
 800aa78:	f7f5 fdd6 	bl	8000628 <__aeabi_dmul>
 800aa7c:	4682      	mov	sl, r0
 800aa7e:	468b      	mov	fp, r1
 800aa80:	4602      	mov	r2, r0
 800aa82:	460b      	mov	r3, r1
 800aa84:	4620      	mov	r0, r4
 800aa86:	4629      	mov	r1, r5
 800aa88:	f7f5 fdce 	bl	8000628 <__aeabi_dmul>
 800aa8c:	a341      	add	r3, pc, #260	; (adr r3, 800ab94 <__kernel_sin+0x154>)
 800aa8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa92:	4680      	mov	r8, r0
 800aa94:	4689      	mov	r9, r1
 800aa96:	4650      	mov	r0, sl
 800aa98:	4659      	mov	r1, fp
 800aa9a:	f7f5 fdc5 	bl	8000628 <__aeabi_dmul>
 800aa9e:	a33f      	add	r3, pc, #252	; (adr r3, 800ab9c <__kernel_sin+0x15c>)
 800aaa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa4:	f7f5 fc08 	bl	80002b8 <__aeabi_dsub>
 800aaa8:	4652      	mov	r2, sl
 800aaaa:	465b      	mov	r3, fp
 800aaac:	f7f5 fdbc 	bl	8000628 <__aeabi_dmul>
 800aab0:	a33c      	add	r3, pc, #240	; (adr r3, 800aba4 <__kernel_sin+0x164>)
 800aab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab6:	f7f5 fc01 	bl	80002bc <__adddf3>
 800aaba:	4652      	mov	r2, sl
 800aabc:	465b      	mov	r3, fp
 800aabe:	f7f5 fdb3 	bl	8000628 <__aeabi_dmul>
 800aac2:	a33a      	add	r3, pc, #232	; (adr r3, 800abac <__kernel_sin+0x16c>)
 800aac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac8:	f7f5 fbf6 	bl	80002b8 <__aeabi_dsub>
 800aacc:	4652      	mov	r2, sl
 800aace:	465b      	mov	r3, fp
 800aad0:	f7f5 fdaa 	bl	8000628 <__aeabi_dmul>
 800aad4:	a337      	add	r3, pc, #220	; (adr r3, 800abb4 <__kernel_sin+0x174>)
 800aad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aada:	f7f5 fbef 	bl	80002bc <__adddf3>
 800aade:	9b01      	ldr	r3, [sp, #4]
 800aae0:	4606      	mov	r6, r0
 800aae2:	460f      	mov	r7, r1
 800aae4:	b9eb      	cbnz	r3, 800ab22 <__kernel_sin+0xe2>
 800aae6:	4602      	mov	r2, r0
 800aae8:	460b      	mov	r3, r1
 800aaea:	4650      	mov	r0, sl
 800aaec:	4659      	mov	r1, fp
 800aaee:	f7f5 fd9b 	bl	8000628 <__aeabi_dmul>
 800aaf2:	a325      	add	r3, pc, #148	; (adr r3, 800ab88 <__kernel_sin+0x148>)
 800aaf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf8:	f7f5 fbde 	bl	80002b8 <__aeabi_dsub>
 800aafc:	4642      	mov	r2, r8
 800aafe:	464b      	mov	r3, r9
 800ab00:	f7f5 fd92 	bl	8000628 <__aeabi_dmul>
 800ab04:	4602      	mov	r2, r0
 800ab06:	460b      	mov	r3, r1
 800ab08:	4620      	mov	r0, r4
 800ab0a:	4629      	mov	r1, r5
 800ab0c:	f7f5 fbd6 	bl	80002bc <__adddf3>
 800ab10:	4604      	mov	r4, r0
 800ab12:	460d      	mov	r5, r1
 800ab14:	ec45 4b10 	vmov	d0, r4, r5
 800ab18:	b003      	add	sp, #12
 800ab1a:	ecbd 8b04 	vpop	{d8-d9}
 800ab1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab22:	4b1b      	ldr	r3, [pc, #108]	; (800ab90 <__kernel_sin+0x150>)
 800ab24:	ec51 0b18 	vmov	r0, r1, d8
 800ab28:	2200      	movs	r2, #0
 800ab2a:	f7f5 fd7d 	bl	8000628 <__aeabi_dmul>
 800ab2e:	4632      	mov	r2, r6
 800ab30:	ec41 0b19 	vmov	d9, r0, r1
 800ab34:	463b      	mov	r3, r7
 800ab36:	4640      	mov	r0, r8
 800ab38:	4649      	mov	r1, r9
 800ab3a:	f7f5 fd75 	bl	8000628 <__aeabi_dmul>
 800ab3e:	4602      	mov	r2, r0
 800ab40:	460b      	mov	r3, r1
 800ab42:	ec51 0b19 	vmov	r0, r1, d9
 800ab46:	f7f5 fbb7 	bl	80002b8 <__aeabi_dsub>
 800ab4a:	4652      	mov	r2, sl
 800ab4c:	465b      	mov	r3, fp
 800ab4e:	f7f5 fd6b 	bl	8000628 <__aeabi_dmul>
 800ab52:	ec53 2b18 	vmov	r2, r3, d8
 800ab56:	f7f5 fbaf 	bl	80002b8 <__aeabi_dsub>
 800ab5a:	a30b      	add	r3, pc, #44	; (adr r3, 800ab88 <__kernel_sin+0x148>)
 800ab5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab60:	4606      	mov	r6, r0
 800ab62:	460f      	mov	r7, r1
 800ab64:	4640      	mov	r0, r8
 800ab66:	4649      	mov	r1, r9
 800ab68:	f7f5 fd5e 	bl	8000628 <__aeabi_dmul>
 800ab6c:	4602      	mov	r2, r0
 800ab6e:	460b      	mov	r3, r1
 800ab70:	4630      	mov	r0, r6
 800ab72:	4639      	mov	r1, r7
 800ab74:	f7f5 fba2 	bl	80002bc <__adddf3>
 800ab78:	4602      	mov	r2, r0
 800ab7a:	460b      	mov	r3, r1
 800ab7c:	4620      	mov	r0, r4
 800ab7e:	4629      	mov	r1, r5
 800ab80:	f7f5 fb9a 	bl	80002b8 <__aeabi_dsub>
 800ab84:	e7c4      	b.n	800ab10 <__kernel_sin+0xd0>
 800ab86:	bf00      	nop
 800ab88:	55555549 	.word	0x55555549
 800ab8c:	3fc55555 	.word	0x3fc55555
 800ab90:	3fe00000 	.word	0x3fe00000
 800ab94:	5acfd57c 	.word	0x5acfd57c
 800ab98:	3de5d93a 	.word	0x3de5d93a
 800ab9c:	8a2b9ceb 	.word	0x8a2b9ceb
 800aba0:	3e5ae5e6 	.word	0x3e5ae5e6
 800aba4:	57b1fe7d 	.word	0x57b1fe7d
 800aba8:	3ec71de3 	.word	0x3ec71de3
 800abac:	19c161d5 	.word	0x19c161d5
 800abb0:	3f2a01a0 	.word	0x3f2a01a0
 800abb4:	1110f8a6 	.word	0x1110f8a6
 800abb8:	3f811111 	.word	0x3f811111

0800abbc <fabs>:
 800abbc:	ec51 0b10 	vmov	r0, r1, d0
 800abc0:	ee10 2a10 	vmov	r2, s0
 800abc4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800abc8:	ec43 2b10 	vmov	d0, r2, r3
 800abcc:	4770      	bx	lr
	...

0800abd0 <floor>:
 800abd0:	ec51 0b10 	vmov	r0, r1, d0
 800abd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abd8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800abdc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800abe0:	2e13      	cmp	r6, #19
 800abe2:	ee10 5a10 	vmov	r5, s0
 800abe6:	ee10 8a10 	vmov	r8, s0
 800abea:	460c      	mov	r4, r1
 800abec:	dc32      	bgt.n	800ac54 <floor+0x84>
 800abee:	2e00      	cmp	r6, #0
 800abf0:	da14      	bge.n	800ac1c <floor+0x4c>
 800abf2:	a333      	add	r3, pc, #204	; (adr r3, 800acc0 <floor+0xf0>)
 800abf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf8:	f7f5 fb60 	bl	80002bc <__adddf3>
 800abfc:	2200      	movs	r2, #0
 800abfe:	2300      	movs	r3, #0
 800ac00:	f7f5 ffa2 	bl	8000b48 <__aeabi_dcmpgt>
 800ac04:	b138      	cbz	r0, 800ac16 <floor+0x46>
 800ac06:	2c00      	cmp	r4, #0
 800ac08:	da57      	bge.n	800acba <floor+0xea>
 800ac0a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800ac0e:	431d      	orrs	r5, r3
 800ac10:	d001      	beq.n	800ac16 <floor+0x46>
 800ac12:	4c2d      	ldr	r4, [pc, #180]	; (800acc8 <floor+0xf8>)
 800ac14:	2500      	movs	r5, #0
 800ac16:	4621      	mov	r1, r4
 800ac18:	4628      	mov	r0, r5
 800ac1a:	e025      	b.n	800ac68 <floor+0x98>
 800ac1c:	4f2b      	ldr	r7, [pc, #172]	; (800accc <floor+0xfc>)
 800ac1e:	4137      	asrs	r7, r6
 800ac20:	ea01 0307 	and.w	r3, r1, r7
 800ac24:	4303      	orrs	r3, r0
 800ac26:	d01f      	beq.n	800ac68 <floor+0x98>
 800ac28:	a325      	add	r3, pc, #148	; (adr r3, 800acc0 <floor+0xf0>)
 800ac2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac2e:	f7f5 fb45 	bl	80002bc <__adddf3>
 800ac32:	2200      	movs	r2, #0
 800ac34:	2300      	movs	r3, #0
 800ac36:	f7f5 ff87 	bl	8000b48 <__aeabi_dcmpgt>
 800ac3a:	2800      	cmp	r0, #0
 800ac3c:	d0eb      	beq.n	800ac16 <floor+0x46>
 800ac3e:	2c00      	cmp	r4, #0
 800ac40:	bfbe      	ittt	lt
 800ac42:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ac46:	fa43 f606 	asrlt.w	r6, r3, r6
 800ac4a:	19a4      	addlt	r4, r4, r6
 800ac4c:	ea24 0407 	bic.w	r4, r4, r7
 800ac50:	2500      	movs	r5, #0
 800ac52:	e7e0      	b.n	800ac16 <floor+0x46>
 800ac54:	2e33      	cmp	r6, #51	; 0x33
 800ac56:	dd0b      	ble.n	800ac70 <floor+0xa0>
 800ac58:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ac5c:	d104      	bne.n	800ac68 <floor+0x98>
 800ac5e:	ee10 2a10 	vmov	r2, s0
 800ac62:	460b      	mov	r3, r1
 800ac64:	f7f5 fb2a 	bl	80002bc <__adddf3>
 800ac68:	ec41 0b10 	vmov	d0, r0, r1
 800ac6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac70:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800ac74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ac78:	fa23 f707 	lsr.w	r7, r3, r7
 800ac7c:	4207      	tst	r7, r0
 800ac7e:	d0f3      	beq.n	800ac68 <floor+0x98>
 800ac80:	a30f      	add	r3, pc, #60	; (adr r3, 800acc0 <floor+0xf0>)
 800ac82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac86:	f7f5 fb19 	bl	80002bc <__adddf3>
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	f7f5 ff5b 	bl	8000b48 <__aeabi_dcmpgt>
 800ac92:	2800      	cmp	r0, #0
 800ac94:	d0bf      	beq.n	800ac16 <floor+0x46>
 800ac96:	2c00      	cmp	r4, #0
 800ac98:	da02      	bge.n	800aca0 <floor+0xd0>
 800ac9a:	2e14      	cmp	r6, #20
 800ac9c:	d103      	bne.n	800aca6 <floor+0xd6>
 800ac9e:	3401      	adds	r4, #1
 800aca0:	ea25 0507 	bic.w	r5, r5, r7
 800aca4:	e7b7      	b.n	800ac16 <floor+0x46>
 800aca6:	2301      	movs	r3, #1
 800aca8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800acac:	fa03 f606 	lsl.w	r6, r3, r6
 800acb0:	4435      	add	r5, r6
 800acb2:	4545      	cmp	r5, r8
 800acb4:	bf38      	it	cc
 800acb6:	18e4      	addcc	r4, r4, r3
 800acb8:	e7f2      	b.n	800aca0 <floor+0xd0>
 800acba:	2500      	movs	r5, #0
 800acbc:	462c      	mov	r4, r5
 800acbe:	e7aa      	b.n	800ac16 <floor+0x46>
 800acc0:	8800759c 	.word	0x8800759c
 800acc4:	7e37e43c 	.word	0x7e37e43c
 800acc8:	bff00000 	.word	0xbff00000
 800accc:	000fffff 	.word	0x000fffff

0800acd0 <scalbn>:
 800acd0:	b570      	push	{r4, r5, r6, lr}
 800acd2:	ec55 4b10 	vmov	r4, r5, d0
 800acd6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800acda:	4606      	mov	r6, r0
 800acdc:	462b      	mov	r3, r5
 800acde:	b99a      	cbnz	r2, 800ad08 <scalbn+0x38>
 800ace0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ace4:	4323      	orrs	r3, r4
 800ace6:	d036      	beq.n	800ad56 <scalbn+0x86>
 800ace8:	4b39      	ldr	r3, [pc, #228]	; (800add0 <scalbn+0x100>)
 800acea:	4629      	mov	r1, r5
 800acec:	ee10 0a10 	vmov	r0, s0
 800acf0:	2200      	movs	r2, #0
 800acf2:	f7f5 fc99 	bl	8000628 <__aeabi_dmul>
 800acf6:	4b37      	ldr	r3, [pc, #220]	; (800add4 <scalbn+0x104>)
 800acf8:	429e      	cmp	r6, r3
 800acfa:	4604      	mov	r4, r0
 800acfc:	460d      	mov	r5, r1
 800acfe:	da10      	bge.n	800ad22 <scalbn+0x52>
 800ad00:	a32b      	add	r3, pc, #172	; (adr r3, 800adb0 <scalbn+0xe0>)
 800ad02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad06:	e03a      	b.n	800ad7e <scalbn+0xae>
 800ad08:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ad0c:	428a      	cmp	r2, r1
 800ad0e:	d10c      	bne.n	800ad2a <scalbn+0x5a>
 800ad10:	ee10 2a10 	vmov	r2, s0
 800ad14:	4620      	mov	r0, r4
 800ad16:	4629      	mov	r1, r5
 800ad18:	f7f5 fad0 	bl	80002bc <__adddf3>
 800ad1c:	4604      	mov	r4, r0
 800ad1e:	460d      	mov	r5, r1
 800ad20:	e019      	b.n	800ad56 <scalbn+0x86>
 800ad22:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ad26:	460b      	mov	r3, r1
 800ad28:	3a36      	subs	r2, #54	; 0x36
 800ad2a:	4432      	add	r2, r6
 800ad2c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ad30:	428a      	cmp	r2, r1
 800ad32:	dd08      	ble.n	800ad46 <scalbn+0x76>
 800ad34:	2d00      	cmp	r5, #0
 800ad36:	a120      	add	r1, pc, #128	; (adr r1, 800adb8 <scalbn+0xe8>)
 800ad38:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad3c:	da1c      	bge.n	800ad78 <scalbn+0xa8>
 800ad3e:	a120      	add	r1, pc, #128	; (adr r1, 800adc0 <scalbn+0xf0>)
 800ad40:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad44:	e018      	b.n	800ad78 <scalbn+0xa8>
 800ad46:	2a00      	cmp	r2, #0
 800ad48:	dd08      	ble.n	800ad5c <scalbn+0x8c>
 800ad4a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ad4e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ad52:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ad56:	ec45 4b10 	vmov	d0, r4, r5
 800ad5a:	bd70      	pop	{r4, r5, r6, pc}
 800ad5c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ad60:	da19      	bge.n	800ad96 <scalbn+0xc6>
 800ad62:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ad66:	429e      	cmp	r6, r3
 800ad68:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800ad6c:	dd0a      	ble.n	800ad84 <scalbn+0xb4>
 800ad6e:	a112      	add	r1, pc, #72	; (adr r1, 800adb8 <scalbn+0xe8>)
 800ad70:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d1e2      	bne.n	800ad3e <scalbn+0x6e>
 800ad78:	a30f      	add	r3, pc, #60	; (adr r3, 800adb8 <scalbn+0xe8>)
 800ad7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad7e:	f7f5 fc53 	bl	8000628 <__aeabi_dmul>
 800ad82:	e7cb      	b.n	800ad1c <scalbn+0x4c>
 800ad84:	a10a      	add	r1, pc, #40	; (adr r1, 800adb0 <scalbn+0xe0>)
 800ad86:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d0b8      	beq.n	800ad00 <scalbn+0x30>
 800ad8e:	a10e      	add	r1, pc, #56	; (adr r1, 800adc8 <scalbn+0xf8>)
 800ad90:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad94:	e7b4      	b.n	800ad00 <scalbn+0x30>
 800ad96:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ad9a:	3236      	adds	r2, #54	; 0x36
 800ad9c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ada0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ada4:	4620      	mov	r0, r4
 800ada6:	4b0c      	ldr	r3, [pc, #48]	; (800add8 <scalbn+0x108>)
 800ada8:	2200      	movs	r2, #0
 800adaa:	e7e8      	b.n	800ad7e <scalbn+0xae>
 800adac:	f3af 8000 	nop.w
 800adb0:	c2f8f359 	.word	0xc2f8f359
 800adb4:	01a56e1f 	.word	0x01a56e1f
 800adb8:	8800759c 	.word	0x8800759c
 800adbc:	7e37e43c 	.word	0x7e37e43c
 800adc0:	8800759c 	.word	0x8800759c
 800adc4:	fe37e43c 	.word	0xfe37e43c
 800adc8:	c2f8f359 	.word	0xc2f8f359
 800adcc:	81a56e1f 	.word	0x81a56e1f
 800add0:	43500000 	.word	0x43500000
 800add4:	ffff3cb0 	.word	0xffff3cb0
 800add8:	3c900000 	.word	0x3c900000

0800addc <_init>:
 800addc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adde:	bf00      	nop
 800ade0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ade2:	bc08      	pop	{r3}
 800ade4:	469e      	mov	lr, r3
 800ade6:	4770      	bx	lr

0800ade8 <_fini>:
 800ade8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adea:	bf00      	nop
 800adec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adee:	bc08      	pop	{r3}
 800adf0:	469e      	mov	lr, r3
 800adf2:	4770      	bx	lr
