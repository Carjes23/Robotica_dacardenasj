
Prueba_SEGGER_PATCH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a04  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08007ba4  08007ba4  00017ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d1c  08007d1c  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08007d1c  08007d1c  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007d1c  08007d1c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d1c  08007d1c  00017d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d20  08007d20  00017d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007d24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000138a0  20000078  08007d9c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20013918  08007d9c  00023918  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fc5a  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002702  00000000  00000000  0002fd02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc8  00000000  00000000  00032408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c80  00000000  00000000  000331d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013f3c  00000000  00000000  00033e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f9b5  00000000  00000000  00047d8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00067545  00000000  00000000  00057741  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bec86  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f64  00000000  00000000  000becd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007b8c 	.word	0x08007b8c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08007b8c 	.word	0x08007b8c

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20012f0c 	.word	0x20012f0c

08000274 <__aeabi_drsub>:
 8000274:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000278:	e002      	b.n	8000280 <__adddf3>
 800027a:	bf00      	nop

0800027c <__aeabi_dsub>:
 800027c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000280 <__adddf3>:
 8000280:	b530      	push	{r4, r5, lr}
 8000282:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000286:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800028a:	ea94 0f05 	teq	r4, r5
 800028e:	bf08      	it	eq
 8000290:	ea90 0f02 	teqeq	r0, r2
 8000294:	bf1f      	itttt	ne
 8000296:	ea54 0c00 	orrsne.w	ip, r4, r0
 800029a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a6:	f000 80e2 	beq.w	800046e <__adddf3+0x1ee>
 80002aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002b2:	bfb8      	it	lt
 80002b4:	426d      	neglt	r5, r5
 80002b6:	dd0c      	ble.n	80002d2 <__adddf3+0x52>
 80002b8:	442c      	add	r4, r5
 80002ba:	ea80 0202 	eor.w	r2, r0, r2
 80002be:	ea81 0303 	eor.w	r3, r1, r3
 80002c2:	ea82 0000 	eor.w	r0, r2, r0
 80002c6:	ea83 0101 	eor.w	r1, r3, r1
 80002ca:	ea80 0202 	eor.w	r2, r0, r2
 80002ce:	ea81 0303 	eor.w	r3, r1, r3
 80002d2:	2d36      	cmp	r5, #54	; 0x36
 80002d4:	bf88      	it	hi
 80002d6:	bd30      	pophi	{r4, r5, pc}
 80002d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e8:	d002      	beq.n	80002f0 <__adddf3+0x70>
 80002ea:	4240      	negs	r0, r0
 80002ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x84>
 80002fe:	4252      	negs	r2, r2
 8000300:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000304:	ea94 0f05 	teq	r4, r5
 8000308:	f000 80a7 	beq.w	800045a <__adddf3+0x1da>
 800030c:	f1a4 0401 	sub.w	r4, r4, #1
 8000310:	f1d5 0e20 	rsbs	lr, r5, #32
 8000314:	db0d      	blt.n	8000332 <__adddf3+0xb2>
 8000316:	fa02 fc0e 	lsl.w	ip, r2, lr
 800031a:	fa22 f205 	lsr.w	r2, r2, r5
 800031e:	1880      	adds	r0, r0, r2
 8000320:	f141 0100 	adc.w	r1, r1, #0
 8000324:	fa03 f20e 	lsl.w	r2, r3, lr
 8000328:	1880      	adds	r0, r0, r2
 800032a:	fa43 f305 	asr.w	r3, r3, r5
 800032e:	4159      	adcs	r1, r3
 8000330:	e00e      	b.n	8000350 <__adddf3+0xd0>
 8000332:	f1a5 0520 	sub.w	r5, r5, #32
 8000336:	f10e 0e20 	add.w	lr, lr, #32
 800033a:	2a01      	cmp	r2, #1
 800033c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000340:	bf28      	it	cs
 8000342:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	18c0      	adds	r0, r0, r3
 800034c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000350:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000354:	d507      	bpl.n	8000366 <__adddf3+0xe6>
 8000356:	f04f 0e00 	mov.w	lr, #0
 800035a:	f1dc 0c00 	rsbs	ip, ip, #0
 800035e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000362:	eb6e 0101 	sbc.w	r1, lr, r1
 8000366:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800036a:	d31b      	bcc.n	80003a4 <__adddf3+0x124>
 800036c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000370:	d30c      	bcc.n	800038c <__adddf3+0x10c>
 8000372:	0849      	lsrs	r1, r1, #1
 8000374:	ea5f 0030 	movs.w	r0, r0, rrx
 8000378:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800037c:	f104 0401 	add.w	r4, r4, #1
 8000380:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000384:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000388:	f080 809a 	bcs.w	80004c0 <__adddf3+0x240>
 800038c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000390:	bf08      	it	eq
 8000392:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000396:	f150 0000 	adcs.w	r0, r0, #0
 800039a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039e:	ea41 0105 	orr.w	r1, r1, r5
 80003a2:	bd30      	pop	{r4, r5, pc}
 80003a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a8:	4140      	adcs	r0, r0
 80003aa:	eb41 0101 	adc.w	r1, r1, r1
 80003ae:	3c01      	subs	r4, #1
 80003b0:	bf28      	it	cs
 80003b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b6:	d2e9      	bcs.n	800038c <__adddf3+0x10c>
 80003b8:	f091 0f00 	teq	r1, #0
 80003bc:	bf04      	itt	eq
 80003be:	4601      	moveq	r1, r0
 80003c0:	2000      	moveq	r0, #0
 80003c2:	fab1 f381 	clz	r3, r1
 80003c6:	bf08      	it	eq
 80003c8:	3320      	addeq	r3, #32
 80003ca:	f1a3 030b 	sub.w	r3, r3, #11
 80003ce:	f1b3 0220 	subs.w	r2, r3, #32
 80003d2:	da0c      	bge.n	80003ee <__adddf3+0x16e>
 80003d4:	320c      	adds	r2, #12
 80003d6:	dd08      	ble.n	80003ea <__adddf3+0x16a>
 80003d8:	f102 0c14 	add.w	ip, r2, #20
 80003dc:	f1c2 020c 	rsb	r2, r2, #12
 80003e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e4:	fa21 f102 	lsr.w	r1, r1, r2
 80003e8:	e00c      	b.n	8000404 <__adddf3+0x184>
 80003ea:	f102 0214 	add.w	r2, r2, #20
 80003ee:	bfd8      	it	le
 80003f0:	f1c2 0c20 	rsble	ip, r2, #32
 80003f4:	fa01 f102 	lsl.w	r1, r1, r2
 80003f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003fc:	bfdc      	itt	le
 80003fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000402:	4090      	lslle	r0, r2
 8000404:	1ae4      	subs	r4, r4, r3
 8000406:	bfa2      	ittt	ge
 8000408:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800040c:	4329      	orrge	r1, r5
 800040e:	bd30      	popge	{r4, r5, pc}
 8000410:	ea6f 0404 	mvn.w	r4, r4
 8000414:	3c1f      	subs	r4, #31
 8000416:	da1c      	bge.n	8000452 <__adddf3+0x1d2>
 8000418:	340c      	adds	r4, #12
 800041a:	dc0e      	bgt.n	800043a <__adddf3+0x1ba>
 800041c:	f104 0414 	add.w	r4, r4, #20
 8000420:	f1c4 0220 	rsb	r2, r4, #32
 8000424:	fa20 f004 	lsr.w	r0, r0, r4
 8000428:	fa01 f302 	lsl.w	r3, r1, r2
 800042c:	ea40 0003 	orr.w	r0, r0, r3
 8000430:	fa21 f304 	lsr.w	r3, r1, r4
 8000434:	ea45 0103 	orr.w	r1, r5, r3
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	f1c4 040c 	rsb	r4, r4, #12
 800043e:	f1c4 0220 	rsb	r2, r4, #32
 8000442:	fa20 f002 	lsr.w	r0, r0, r2
 8000446:	fa01 f304 	lsl.w	r3, r1, r4
 800044a:	ea40 0003 	orr.w	r0, r0, r3
 800044e:	4629      	mov	r1, r5
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	fa21 f004 	lsr.w	r0, r1, r4
 8000456:	4629      	mov	r1, r5
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	f094 0f00 	teq	r4, #0
 800045e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000462:	bf06      	itte	eq
 8000464:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000468:	3401      	addeq	r4, #1
 800046a:	3d01      	subne	r5, #1
 800046c:	e74e      	b.n	800030c <__adddf3+0x8c>
 800046e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000472:	bf18      	it	ne
 8000474:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000478:	d029      	beq.n	80004ce <__adddf3+0x24e>
 800047a:	ea94 0f05 	teq	r4, r5
 800047e:	bf08      	it	eq
 8000480:	ea90 0f02 	teqeq	r0, r2
 8000484:	d005      	beq.n	8000492 <__adddf3+0x212>
 8000486:	ea54 0c00 	orrs.w	ip, r4, r0
 800048a:	bf04      	itt	eq
 800048c:	4619      	moveq	r1, r3
 800048e:	4610      	moveq	r0, r2
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea91 0f03 	teq	r1, r3
 8000496:	bf1e      	ittt	ne
 8000498:	2100      	movne	r1, #0
 800049a:	2000      	movne	r0, #0
 800049c:	bd30      	popne	{r4, r5, pc}
 800049e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004a2:	d105      	bne.n	80004b0 <__adddf3+0x230>
 80004a4:	0040      	lsls	r0, r0, #1
 80004a6:	4149      	adcs	r1, r1
 80004a8:	bf28      	it	cs
 80004aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b4:	bf3c      	itt	cc
 80004b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004ba:	bd30      	popcc	{r4, r5, pc}
 80004bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c8:	f04f 0000 	mov.w	r0, #0
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004d2:	bf1a      	itte	ne
 80004d4:	4619      	movne	r1, r3
 80004d6:	4610      	movne	r0, r2
 80004d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004dc:	bf1c      	itt	ne
 80004de:	460b      	movne	r3, r1
 80004e0:	4602      	movne	r2, r0
 80004e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e6:	bf06      	itte	eq
 80004e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004ec:	ea91 0f03 	teqeq	r1, r3
 80004f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	bf00      	nop

080004f8 <__aeabi_ui2d>:
 80004f8:	f090 0f00 	teq	r0, #0
 80004fc:	bf04      	itt	eq
 80004fe:	2100      	moveq	r1, #0
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000508:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050c:	f04f 0500 	mov.w	r5, #0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e750      	b.n	80003b8 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_i2d>:
 8000518:	f090 0f00 	teq	r0, #0
 800051c:	bf04      	itt	eq
 800051e:	2100      	moveq	r1, #0
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000528:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000530:	bf48      	it	mi
 8000532:	4240      	negmi	r0, r0
 8000534:	f04f 0100 	mov.w	r1, #0
 8000538:	e73e      	b.n	80003b8 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_f2d>:
 800053c:	0042      	lsls	r2, r0, #1
 800053e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000542:	ea4f 0131 	mov.w	r1, r1, rrx
 8000546:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800054a:	bf1f      	itttt	ne
 800054c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000550:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000554:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000558:	4770      	bxne	lr
 800055a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055e:	bf08      	it	eq
 8000560:	4770      	bxeq	lr
 8000562:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000566:	bf04      	itt	eq
 8000568:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000574:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000578:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800057c:	e71c      	b.n	80003b8 <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_ul2d>:
 8000580:	ea50 0201 	orrs.w	r2, r0, r1
 8000584:	bf08      	it	eq
 8000586:	4770      	bxeq	lr
 8000588:	b530      	push	{r4, r5, lr}
 800058a:	f04f 0500 	mov.w	r5, #0
 800058e:	e00a      	b.n	80005a6 <__aeabi_l2d+0x16>

08000590 <__aeabi_l2d>:
 8000590:	ea50 0201 	orrs.w	r2, r0, r1
 8000594:	bf08      	it	eq
 8000596:	4770      	bxeq	lr
 8000598:	b530      	push	{r4, r5, lr}
 800059a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059e:	d502      	bpl.n	80005a6 <__aeabi_l2d+0x16>
 80005a0:	4240      	negs	r0, r0
 80005a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b2:	f43f aed8 	beq.w	8000366 <__adddf3+0xe6>
 80005b6:	f04f 0203 	mov.w	r2, #3
 80005ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005be:	bf18      	it	ne
 80005c0:	3203      	addne	r2, #3
 80005c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c6:	bf18      	it	ne
 80005c8:	3203      	addne	r2, #3
 80005ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ce:	f1c2 0320 	rsb	r3, r2, #32
 80005d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d6:	fa20 f002 	lsr.w	r0, r0, r2
 80005da:	fa01 fe03 	lsl.w	lr, r1, r3
 80005de:	ea40 000e 	orr.w	r0, r0, lr
 80005e2:	fa21 f102 	lsr.w	r1, r1, r2
 80005e6:	4414      	add	r4, r2
 80005e8:	e6bd      	b.n	8000366 <__adddf3+0xe6>
 80005ea:	bf00      	nop

080005ec <__aeabi_dmul>:
 80005ec:	b570      	push	{r4, r5, r6, lr}
 80005ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fa:	bf1d      	ittte	ne
 80005fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000600:	ea94 0f0c 	teqne	r4, ip
 8000604:	ea95 0f0c 	teqne	r5, ip
 8000608:	f000 f8de 	bleq	80007c8 <__aeabi_dmul+0x1dc>
 800060c:	442c      	add	r4, r5
 800060e:	ea81 0603 	eor.w	r6, r1, r3
 8000612:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000616:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061e:	bf18      	it	ne
 8000620:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800062c:	d038      	beq.n	80006a0 <__aeabi_dmul+0xb4>
 800062e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000632:	f04f 0500 	mov.w	r5, #0
 8000636:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000642:	f04f 0600 	mov.w	r6, #0
 8000646:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064a:	f09c 0f00 	teq	ip, #0
 800064e:	bf18      	it	ne
 8000650:	f04e 0e01 	orrne.w	lr, lr, #1
 8000654:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000658:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800065c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000660:	d204      	bcs.n	800066c <__aeabi_dmul+0x80>
 8000662:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000666:	416d      	adcs	r5, r5
 8000668:	eb46 0606 	adc.w	r6, r6, r6
 800066c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000670:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000674:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000678:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800067c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000680:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000684:	bf88      	it	hi
 8000686:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068a:	d81e      	bhi.n	80006ca <__aeabi_dmul+0xde>
 800068c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000690:	bf08      	it	eq
 8000692:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000696:	f150 0000 	adcs.w	r0, r0, #0
 800069a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069e:	bd70      	pop	{r4, r5, r6, pc}
 80006a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a4:	ea46 0101 	orr.w	r1, r6, r1
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	ea81 0103 	eor.w	r1, r1, r3
 80006b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b4:	bfc2      	ittt	gt
 80006b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006be:	bd70      	popgt	{r4, r5, r6, pc}
 80006c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c4:	f04f 0e00 	mov.w	lr, #0
 80006c8:	3c01      	subs	r4, #1
 80006ca:	f300 80ab 	bgt.w	8000824 <__aeabi_dmul+0x238>
 80006ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d2:	bfde      	ittt	le
 80006d4:	2000      	movle	r0, #0
 80006d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006da:	bd70      	pople	{r4, r5, r6, pc}
 80006dc:	f1c4 0400 	rsb	r4, r4, #0
 80006e0:	3c20      	subs	r4, #32
 80006e2:	da35      	bge.n	8000750 <__aeabi_dmul+0x164>
 80006e4:	340c      	adds	r4, #12
 80006e6:	dc1b      	bgt.n	8000720 <__aeabi_dmul+0x134>
 80006e8:	f104 0414 	add.w	r4, r4, #20
 80006ec:	f1c4 0520 	rsb	r5, r4, #32
 80006f0:	fa00 f305 	lsl.w	r3, r0, r5
 80006f4:	fa20 f004 	lsr.w	r0, r0, r4
 80006f8:	fa01 f205 	lsl.w	r2, r1, r5
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000704:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	fa21 f604 	lsr.w	r6, r1, r4
 8000710:	eb42 0106 	adc.w	r1, r2, r6
 8000714:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000718:	bf08      	it	eq
 800071a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071e:	bd70      	pop	{r4, r5, r6, pc}
 8000720:	f1c4 040c 	rsb	r4, r4, #12
 8000724:	f1c4 0520 	rsb	r5, r4, #32
 8000728:	fa00 f304 	lsl.w	r3, r0, r4
 800072c:	fa20 f005 	lsr.w	r0, r0, r5
 8000730:	fa01 f204 	lsl.w	r2, r1, r4
 8000734:	ea40 0002 	orr.w	r0, r0, r2
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000740:	f141 0100 	adc.w	r1, r1, #0
 8000744:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000748:	bf08      	it	eq
 800074a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074e:	bd70      	pop	{r4, r5, r6, pc}
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f205 	lsl.w	r2, r0, r5
 8000758:	ea4e 0e02 	orr.w	lr, lr, r2
 800075c:	fa20 f304 	lsr.w	r3, r0, r4
 8000760:	fa01 f205 	lsl.w	r2, r1, r5
 8000764:	ea43 0302 	orr.w	r3, r3, r2
 8000768:	fa21 f004 	lsr.w	r0, r1, r4
 800076c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000770:	fa21 f204 	lsr.w	r2, r1, r4
 8000774:	ea20 0002 	bic.w	r0, r0, r2
 8000778:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800077c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000780:	bf08      	it	eq
 8000782:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000786:	bd70      	pop	{r4, r5, r6, pc}
 8000788:	f094 0f00 	teq	r4, #0
 800078c:	d10f      	bne.n	80007ae <__aeabi_dmul+0x1c2>
 800078e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000792:	0040      	lsls	r0, r0, #1
 8000794:	eb41 0101 	adc.w	r1, r1, r1
 8000798:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800079c:	bf08      	it	eq
 800079e:	3c01      	subeq	r4, #1
 80007a0:	d0f7      	beq.n	8000792 <__aeabi_dmul+0x1a6>
 80007a2:	ea41 0106 	orr.w	r1, r1, r6
 80007a6:	f095 0f00 	teq	r5, #0
 80007aa:	bf18      	it	ne
 80007ac:	4770      	bxne	lr
 80007ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b2:	0052      	lsls	r2, r2, #1
 80007b4:	eb43 0303 	adc.w	r3, r3, r3
 80007b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007bc:	bf08      	it	eq
 80007be:	3d01      	subeq	r5, #1
 80007c0:	d0f7      	beq.n	80007b2 <__aeabi_dmul+0x1c6>
 80007c2:	ea43 0306 	orr.w	r3, r3, r6
 80007c6:	4770      	bx	lr
 80007c8:	ea94 0f0c 	teq	r4, ip
 80007cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d0:	bf18      	it	ne
 80007d2:	ea95 0f0c 	teqne	r5, ip
 80007d6:	d00c      	beq.n	80007f2 <__aeabi_dmul+0x206>
 80007d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007dc:	bf18      	it	ne
 80007de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e2:	d1d1      	bne.n	8000788 <__aeabi_dmul+0x19c>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f6:	bf06      	itte	eq
 80007f8:	4610      	moveq	r0, r2
 80007fa:	4619      	moveq	r1, r3
 80007fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000800:	d019      	beq.n	8000836 <__aeabi_dmul+0x24a>
 8000802:	ea94 0f0c 	teq	r4, ip
 8000806:	d102      	bne.n	800080e <__aeabi_dmul+0x222>
 8000808:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800080c:	d113      	bne.n	8000836 <__aeabi_dmul+0x24a>
 800080e:	ea95 0f0c 	teq	r5, ip
 8000812:	d105      	bne.n	8000820 <__aeabi_dmul+0x234>
 8000814:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000818:	bf1c      	itt	ne
 800081a:	4610      	movne	r0, r2
 800081c:	4619      	movne	r1, r3
 800081e:	d10a      	bne.n	8000836 <__aeabi_dmul+0x24a>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800082c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083e:	bd70      	pop	{r4, r5, r6, pc}

08000840 <__aeabi_ddiv>:
 8000840:	b570      	push	{r4, r5, r6, lr}
 8000842:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000846:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084e:	bf1d      	ittte	ne
 8000850:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000854:	ea94 0f0c 	teqne	r4, ip
 8000858:	ea95 0f0c 	teqne	r5, ip
 800085c:	f000 f8a7 	bleq	80009ae <__aeabi_ddiv+0x16e>
 8000860:	eba4 0405 	sub.w	r4, r4, r5
 8000864:	ea81 0e03 	eor.w	lr, r1, r3
 8000868:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800086c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000870:	f000 8088 	beq.w	8000984 <__aeabi_ddiv+0x144>
 8000874:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000878:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800087c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000880:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000884:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000888:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800088c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000890:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000894:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000898:	429d      	cmp	r5, r3
 800089a:	bf08      	it	eq
 800089c:	4296      	cmpeq	r6, r2
 800089e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a6:	d202      	bcs.n	80008ae <__aeabi_ddiv+0x6e>
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	1ab6      	subs	r6, r6, r2
 80008b0:	eb65 0503 	sbc.w	r5, r5, r3
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ca:	bf22      	ittt	cs
 80008cc:	1ab6      	subcs	r6, r6, r2
 80008ce:	4675      	movcs	r5, lr
 80008d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	ebb6 0e02 	subs.w	lr, r6, r2
 80008de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e2:	bf22      	ittt	cs
 80008e4:	1ab6      	subcs	r6, r6, r2
 80008e6:	4675      	movcs	r5, lr
 80008e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fa:	bf22      	ittt	cs
 80008fc:	1ab6      	subcs	r6, r6, r2
 80008fe:	4675      	movcs	r5, lr
 8000900:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	ebb6 0e02 	subs.w	lr, r6, r2
 800090e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000912:	bf22      	ittt	cs
 8000914:	1ab6      	subcs	r6, r6, r2
 8000916:	4675      	movcs	r5, lr
 8000918:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800091c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000920:	d018      	beq.n	8000954 <__aeabi_ddiv+0x114>
 8000922:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000926:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000932:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000936:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093e:	d1c0      	bne.n	80008c2 <__aeabi_ddiv+0x82>
 8000940:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000944:	d10b      	bne.n	800095e <__aeabi_ddiv+0x11e>
 8000946:	ea41 0100 	orr.w	r1, r1, r0
 800094a:	f04f 0000 	mov.w	r0, #0
 800094e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000952:	e7b6      	b.n	80008c2 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000958:	bf04      	itt	eq
 800095a:	4301      	orreq	r1, r0
 800095c:	2000      	moveq	r0, #0
 800095e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000962:	bf88      	it	hi
 8000964:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000968:	f63f aeaf 	bhi.w	80006ca <__aeabi_dmul+0xde>
 800096c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000970:	bf04      	itt	eq
 8000972:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000976:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097a:	f150 0000 	adcs.w	r0, r0, #0
 800097e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000982:	bd70      	pop	{r4, r5, r6, pc}
 8000984:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000988:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800098c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000990:	bfc2      	ittt	gt
 8000992:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000996:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099a:	bd70      	popgt	{r4, r5, r6, pc}
 800099c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a0:	f04f 0e00 	mov.w	lr, #0
 80009a4:	3c01      	subs	r4, #1
 80009a6:	e690      	b.n	80006ca <__aeabi_dmul+0xde>
 80009a8:	ea45 0e06 	orr.w	lr, r5, r6
 80009ac:	e68d      	b.n	80006ca <__aeabi_dmul+0xde>
 80009ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b2:	ea94 0f0c 	teq	r4, ip
 80009b6:	bf08      	it	eq
 80009b8:	ea95 0f0c 	teqeq	r5, ip
 80009bc:	f43f af3b 	beq.w	8000836 <__aeabi_dmul+0x24a>
 80009c0:	ea94 0f0c 	teq	r4, ip
 80009c4:	d10a      	bne.n	80009dc <__aeabi_ddiv+0x19c>
 80009c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ca:	f47f af34 	bne.w	8000836 <__aeabi_dmul+0x24a>
 80009ce:	ea95 0f0c 	teq	r5, ip
 80009d2:	f47f af25 	bne.w	8000820 <__aeabi_dmul+0x234>
 80009d6:	4610      	mov	r0, r2
 80009d8:	4619      	mov	r1, r3
 80009da:	e72c      	b.n	8000836 <__aeabi_dmul+0x24a>
 80009dc:	ea95 0f0c 	teq	r5, ip
 80009e0:	d106      	bne.n	80009f0 <__aeabi_ddiv+0x1b0>
 80009e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e6:	f43f aefd 	beq.w	80007e4 <__aeabi_dmul+0x1f8>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e722      	b.n	8000836 <__aeabi_dmul+0x24a>
 80009f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f4:	bf18      	it	ne
 80009f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fa:	f47f aec5 	bne.w	8000788 <__aeabi_dmul+0x19c>
 80009fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a02:	f47f af0d 	bne.w	8000820 <__aeabi_dmul+0x234>
 8000a06:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0a:	f47f aeeb 	bne.w	80007e4 <__aeabi_dmul+0x1f8>
 8000a0e:	e712      	b.n	8000836 <__aeabi_dmul+0x24a>

08000a10 <__aeabi_d2uiz>:
 8000a10:	004a      	lsls	r2, r1, #1
 8000a12:	d211      	bcs.n	8000a38 <__aeabi_d2uiz+0x28>
 8000a14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a18:	d211      	bcs.n	8000a3e <__aeabi_d2uiz+0x2e>
 8000a1a:	d50d      	bpl.n	8000a38 <__aeabi_d2uiz+0x28>
 8000a1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a24:	d40e      	bmi.n	8000a44 <__aeabi_d2uiz+0x34>
 8000a26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	4770      	bx	lr
 8000a38:	f04f 0000 	mov.w	r0, #0
 8000a3c:	4770      	bx	lr
 8000a3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a42:	d102      	bne.n	8000a4a <__aeabi_d2uiz+0x3a>
 8000a44:	f04f 30ff 	mov.w	r0, #4294967295
 8000a48:	4770      	bx	lr
 8000a4a:	f04f 0000 	mov.w	r0, #0
 8000a4e:	4770      	bx	lr

08000a50 <main>:
uint8_t globalCounter = 0;
uint32_t SystemCoreClock = CLOCK_MHZ * 1E6;
uint8_t rxData = 0;
char msg[8] = { 0 };

int main(void) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
	configPeripherals();
 8000a54:	f000 f806 	bl	8000a64 <configPeripherals>
	taskCreation();
 8000a58:	f000 f84e 	bl	8000af8 <taskCreation>
	//Start the created task running.
	vTaskStartScheduler();
 8000a5c:	f000 fee2 	bl	8001824 <vTaskStartScheduler>

	/* Loop forever */
	while (1) {
 8000a60:	e7fe      	b.n	8000a60 <main+0x10>
	...

08000a64 <configPeripherals>:
		/* SI llegamos es que algo salio mal... */
	}
}

void configPeripherals(void) {
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0

	//Activacion cooprocesador matematico(importante para esta tarea)
	SCB->CPACR |= (0xF << 20);
 8000a68:	4b1b      	ldr	r3, [pc, #108]	; (8000ad8 <configPeripherals+0x74>)
 8000a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a6e:	4a1a      	ldr	r2, [pc, #104]	; (8000ad8 <configPeripherals+0x74>)
 8000a70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	//Enale the CYCNT counter
	DWT->CTRL |= (1 << 0);
 8000a78:	4b18      	ldr	r3, [pc, #96]	; (8000adc <configPeripherals+0x78>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a17      	ldr	r2, [pc, #92]	; (8000adc <configPeripherals+0x78>)
 8000a7e:	f043 0301 	orr.w	r3, r3, #1
 8000a82:	6013      	str	r3, [r2, #0]

	SEGGER_UART_init(500000);
 8000a84:	4816      	ldr	r0, [pc, #88]	; (8000ae0 <configPeripherals+0x7c>)
 8000a86:	f002 ffd9 	bl	8003a3c <SEGGER_UART_init>

	SEGGER_SYSVIEW_Conf();
 8000a8a:	f002 fe01 	bl	8003690 <SEGGER_SYSVIEW_Conf>

	vInitPrioGroupValue();
 8000a8e:	f002 fa7b 	bl	8002f88 <vInitPrioGroupValue>

	configPLL(CLOCK_MHZ);
 8000a92:	2064      	movs	r0, #100	; 0x64
 8000a94:	f006 f952 	bl	8006d3c <configPLL>

	ledUsuario.pGPIOx = GPIOA;
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <configPeripherals+0x80>)
 8000a9a:	4a13      	ldr	r2, [pc, #76]	; (8000ae8 <configPeripherals+0x84>)
 8000a9c:	601a      	str	r2, [r3, #0]
	ledUsuario.GPIO_PinConfig_t.GPIO_PinMode = GPIO_MODE_OUT;
 8000a9e:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <configPeripherals+0x80>)
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	715a      	strb	r2, [r3, #5]
	ledUsuario.GPIO_PinConfig_t.GPIO_PinNumber = PIN_5;
 8000aa4:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <configPeripherals+0x80>)
 8000aa6:	2205      	movs	r2, #5
 8000aa8:	711a      	strb	r2, [r3, #4]
	GPIO_Config(&ledUsuario);
 8000aaa:	480e      	ldr	r0, [pc, #56]	; (8000ae4 <configPeripherals+0x80>)
 8000aac:	f005 ffbe 	bl	8006a2c <GPIO_Config>

	userB.pGPIOx = GPIOC;
 8000ab0:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <configPeripherals+0x88>)
 8000ab2:	4a0f      	ldr	r2, [pc, #60]	; (8000af0 <configPeripherals+0x8c>)
 8000ab4:	601a      	str	r2, [r3, #0]
	userB.GPIO_PinConfig_t.GPIO_PinNumber = PIN_13;
 8000ab6:	4b0d      	ldr	r3, [pc, #52]	; (8000aec <configPeripherals+0x88>)
 8000ab8:	220d      	movs	r2, #13
 8000aba:	711a      	strb	r2, [r3, #4]
	userB.GPIO_PinConfig_t.GPIO_PinMode = GPIO_MODE_IN;
 8000abc:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <configPeripherals+0x88>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	715a      	strb	r2, [r3, #5]

	userBE.edgeType = EXTERNAL_INTERRUPT_FALLING_EDGE;
 8000ac2:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <configPeripherals+0x90>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	711a      	strb	r2, [r3, #4]
	userBE.pGPIOHandler = &userB;
 8000ac8:	4b0a      	ldr	r3, [pc, #40]	; (8000af4 <configPeripherals+0x90>)
 8000aca:	4a08      	ldr	r2, [pc, #32]	; (8000aec <configPeripherals+0x88>)
 8000acc:	601a      	str	r2, [r3, #0]
	extInt_Config(&userBE);
 8000ace:	4809      	ldr	r0, [pc, #36]	; (8000af4 <configPeripherals+0x90>)
 8000ad0:	f004 ff78 	bl	80059c4 <extInt_Config>
}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	e000ed00 	.word	0xe000ed00
 8000adc:	e0001000 	.word	0xe0001000
 8000ae0:	0007a120 	.word	0x0007a120
 8000ae4:	20000094 	.word	0x20000094
 8000ae8:	40020000 	.word	0x40020000
 8000aec:	200000a0 	.word	0x200000a0
 8000af0:	40020800 	.word	0x40020800
 8000af4:	200000ac 	.word	0x200000ac

08000af8 <taskCreation>:

void taskCreation(void) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b086      	sub	sp, #24
 8000afc:	af02      	add	r7, sp, #8
	BaseType_t xReturned;


	xReturned = xTaskCreate(vTaskOne, /* Function that implements the task. */
 8000afe:	4b1c      	ldr	r3, [pc, #112]	; (8000b70 <taskCreation+0x78>)
 8000b00:	9301      	str	r3, [sp, #4]
 8000b02:	2302      	movs	r3, #2
 8000b04:	9300      	str	r3, [sp, #0]
 8000b06:	2300      	movs	r3, #0
 8000b08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b0c:	4919      	ldr	r1, [pc, #100]	; (8000b74 <taskCreation+0x7c>)
 8000b0e:	481a      	ldr	r0, [pc, #104]	; (8000b78 <taskCreation+0x80>)
 8000b10:	f000 fcc8 	bl	80014a4 <xTaskCreate>
 8000b14:	60f8      	str	r0, [r7, #12]
	512, /* Stack size in words, not bytes. */
	NULL, /* Parameter passed into the task. */
	2,/* Priority at which the task is created. */
	&HandleTask1); /* Used to pass out the created task's handle. */

	configASSERT(xReturned == pdPASS);
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d00a      	beq.n	8000b32 <taskCreation+0x3a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b20:	f383 8811 	msr	BASEPRI, r3
 8000b24:	f3bf 8f6f 	isb	sy
 8000b28:	f3bf 8f4f 	dsb	sy
 8000b2c:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000b2e:	bf00      	nop
 8000b30:	e7fe      	b.n	8000b30 <taskCreation+0x38>

	xReturned = xTaskCreate(vTaskTwo, /* Function that implements the task. */
 8000b32:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <taskCreation+0x84>)
 8000b34:	9301      	str	r3, [sp, #4]
 8000b36:	2302      	movs	r3, #2
 8000b38:	9300      	str	r3, [sp, #0]
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b40:	490f      	ldr	r1, [pc, #60]	; (8000b80 <taskCreation+0x88>)
 8000b42:	4810      	ldr	r0, [pc, #64]	; (8000b84 <taskCreation+0x8c>)
 8000b44:	f000 fcae 	bl	80014a4 <xTaskCreate>
 8000b48:	60f8      	str	r0, [r7, #12]
	512, /* Stack size in words, not bytes. */
	NULL, /* Parameter passed into the task. */
	2,/* Priority at which the task is created. */
	&HandleTask2); /* Used to pass out the created task's handle. */

	configASSERT(xReturned == pdPASS);
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d00a      	beq.n	8000b66 <taskCreation+0x6e>
        __asm volatile
 8000b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b54:	f383 8811 	msr	BASEPRI, r3
 8000b58:	f3bf 8f6f 	isb	sy
 8000b5c:	f3bf 8f4f 	dsb	sy
 8000b60:	607b      	str	r3, [r7, #4]
    }
 8000b62:	bf00      	nop
 8000b64:	e7fe      	b.n	8000b64 <taskCreation+0x6c>

}
 8000b66:	bf00      	nop
 8000b68:	3710      	adds	r7, #16
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	200000b4 	.word	0x200000b4
 8000b74:	08007ba4 	.word	0x08007ba4
 8000b78:	08000b89 	.word	0x08000b89
 8000b7c:	200000b8 	.word	0x200000b8
 8000b80:	08007bac 	.word	0x08007bac
 8000b84:	08000be1 	.word	0x08000be1

08000b88 <vTaskOne>:

/* Fncin que gobierna la tarea 1 */
void vTaskOne(void *pvParameters) {
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b086      	sub	sp, #24
 8000b8c:	af02      	add	r7, sp, #8
 8000b8e:	6078      	str	r0, [r7, #4]
	BaseType_t notifyState = { 0 };
 8000b90:	2300      	movs	r3, #0
 8000b92:	60bb      	str	r3, [r7, #8]
	uint8_t change_sate = 0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	73fb      	strb	r3, [r7, #15]
	while (1) {

		notifyState = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(250));
 8000b98:	23fa      	movs	r3, #250	; 0xfa
 8000b9a:	9300      	str	r3, [sp, #0]
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	2000      	movs	r0, #0
 8000ba4:	f001 fbf0 	bl	8002388 <xTaskGenericNotifyWait>
 8000ba8:	60b8      	str	r0, [r7, #8]
		if (notifyState == pdTRUE) {
 8000baa:	68bb      	ldr	r3, [r7, #8]
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d103      	bne.n	8000bb8 <vTaskOne+0x30>
			change_sate ^= 0b1;
 8000bb0:	7bfb      	ldrb	r3, [r7, #15]
 8000bb2:	f083 0301 	eor.w	r3, r3, #1
 8000bb6:	73fb      	strb	r3, [r7, #15]
		}
		if (change_sate) {
 8000bb8:	7bfb      	ldrb	r3, [r7, #15]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d006      	beq.n	8000bcc <vTaskOne+0x44>
			printf("toggle\n");
 8000bbe:	4806      	ldr	r0, [pc, #24]	; (8000bd8 <vTaskOne+0x50>)
 8000bc0:	f006 fb58 	bl	8007274 <puts>
			GPIOxTooglePin(&ledUsuario);
 8000bc4:	4805      	ldr	r0, [pc, #20]	; (8000bdc <vTaskOne+0x54>)
 8000bc6:	f006 f8a4 	bl	8006d12 <GPIOxTooglePin>
 8000bca:	e7e5      	b.n	8000b98 <vTaskOne+0x10>
		} else {
			GPIO_WritePin(&ledUsuario, RESET);
 8000bcc:	2100      	movs	r1, #0
 8000bce:	4803      	ldr	r0, [pc, #12]	; (8000bdc <vTaskOne+0x54>)
 8000bd0:	f006 f856 	bl	8006c80 <GPIO_WritePin>
		notifyState = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(250));
 8000bd4:	e7e0      	b.n	8000b98 <vTaskOne+0x10>
 8000bd6:	bf00      	nop
 8000bd8:	08007bb4 	.word	0x08007bb4
 8000bdc:	20000094 	.word	0x20000094

08000be0 <vTaskTwo>:
		}
	}
}

/* Fncin que gobierna la tarea 2 */
void vTaskTwo(void *pvParameters) {
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af02      	add	r7, sp, #8
 8000be6:	6078      	str	r0, [r7, #4]

	uint8_t button_state = 0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	73bb      	strb	r3, [r7, #14]
	uint8_t prev_button_state  = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	73fb      	strb	r3, [r7, #15]

	while (1) {

		button_state = GPIO_ReadPin(&userB);
 8000bf0:	480c      	ldr	r0, [pc, #48]	; (8000c24 <vTaskTwo+0x44>)
 8000bf2:	f006 f870 	bl	8006cd6 <GPIO_ReadPin>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	73bb      	strb	r3, [r7, #14]

		if(button_state){
 8000bfa:	7bbb      	ldrb	r3, [r7, #14]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d00b      	beq.n	8000c18 <vTaskTwo+0x38>
			if(!prev_button_state){
 8000c00:	7bfb      	ldrb	r3, [r7, #15]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d108      	bne.n	8000c18 <vTaskTwo+0x38>
				xTaskNotify(HandleTask1,0,0);
 8000c06:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <vTaskTwo+0x48>)
 8000c08:	6818      	ldr	r0, [r3, #0]
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	9300      	str	r3, [sp, #0]
 8000c0e:	2300      	movs	r3, #0
 8000c10:	2200      	movs	r2, #0
 8000c12:	2100      	movs	r1, #0
 8000c14:	f001 fc40 	bl	8002498 <xTaskGenericNotify>
			}
		}

		prev_button_state = button_state;
 8000c18:	7bbb      	ldrb	r3, [r7, #14]
 8000c1a:	73fb      	strb	r3, [r7, #15]

		vTaskDelay(pdMS_TO_TICKS(10));
 8000c1c:	200a      	movs	r0, #10
 8000c1e:	f000 fdc9 	bl	80017b4 <vTaskDelay>
		button_state = GPIO_ReadPin(&userB);
 8000c22:	e7e5      	b.n	8000bf0 <vTaskTwo+0x10>
 8000c24:	200000a0 	.word	0x200000a0
 8000c28:	200000b4 	.word	0x200000b4

08000c2c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	60b9      	str	r1, [r7, #8]
 8000c36:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c38:	2300      	movs	r3, #0
 8000c3a:	617b      	str	r3, [r7, #20]
 8000c3c:	e00a      	b.n	8000c54 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c3e:	f3af 8000 	nop.w
 8000c42:	4601      	mov	r1, r0
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	1c5a      	adds	r2, r3, #1
 8000c48:	60ba      	str	r2, [r7, #8]
 8000c4a:	b2ca      	uxtb	r2, r1
 8000c4c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	3301      	adds	r3, #1
 8000c52:	617b      	str	r3, [r7, #20]
 8000c54:	697a      	ldr	r2, [r7, #20]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	dbf0      	blt.n	8000c3e <_read+0x12>
	}

return len;
 8000c5c:	687b      	ldr	r3, [r7, #4]
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3718      	adds	r7, #24
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000c66:	b480      	push	{r7}
 8000c68:	b083      	sub	sp, #12
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
	return -1;
 8000c6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr

08000c7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	b083      	sub	sp, #12
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
 8000c86:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c8e:	605a      	str	r2, [r3, #4]
	return 0;
 8000c90:	2300      	movs	r3, #0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <_isatty>:

int _isatty(int file)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	b083      	sub	sp, #12
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
	return 1;
 8000ca6:	2301      	movs	r3, #1
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	607a      	str	r2, [r7, #4]
	return 0;
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3714      	adds	r7, #20
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
	...

08000cd0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cd0:	480d      	ldr	r0, [pc, #52]	; (8000d08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cd2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cd4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cd8:	480c      	ldr	r0, [pc, #48]	; (8000d0c <LoopForever+0x6>)
  ldr r1, =_edata
 8000cda:	490d      	ldr	r1, [pc, #52]	; (8000d10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cdc:	4a0d      	ldr	r2, [pc, #52]	; (8000d14 <LoopForever+0xe>)
  movs r3, #0
 8000cde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ce0:	e002      	b.n	8000ce8 <LoopCopyDataInit>

08000ce2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ce2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ce6:	3304      	adds	r3, #4

08000ce8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cec:	d3f9      	bcc.n	8000ce2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cee:	4a0a      	ldr	r2, [pc, #40]	; (8000d18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cf0:	4c0a      	ldr	r4, [pc, #40]	; (8000d1c <LoopForever+0x16>)
  movs r3, #0
 8000cf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf4:	e001      	b.n	8000cfa <LoopFillZerobss>

08000cf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf8:	3204      	adds	r2, #4

08000cfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cfc:	d3fb      	bcc.n	8000cf6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cfe:	f006 fa01 	bl	8007104 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d02:	f7ff fea5 	bl	8000a50 <main>

08000d06 <LoopForever>:

LoopForever:
    b LoopForever
 8000d06:	e7fe      	b.n	8000d06 <LoopForever>
  ldr   r0, =_estack
 8000d08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d10:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000d14:	08007d24 	.word	0x08007d24
  ldr r2, =_sbss
 8000d18:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000d1c:	20013918 	.word	0x20013918

08000d20 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d20:	e7fe      	b.n	8000d20 <ADC_IRQHandler>

08000d22 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000d22:	b480      	push	{r7}
 8000d24:	b083      	sub	sp, #12
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	f103 0208 	add.w	r2, r3, #8
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f04f 32ff 	mov.w	r2, #4294967295
 8000d3a:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f103 0208 	add.w	r2, r3, #8
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	f103 0208 	add.w	r2, r3, #8
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000d56:	bf00      	nop
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000d62:	b480      	push	{r7}
 8000d64:	b083      	sub	sp, #12
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000d70:	bf00      	nop
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d92:	d103      	bne.n	8000d9c <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	691b      	ldr	r3, [r3, #16]
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	e00c      	b.n	8000db6 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3308      	adds	r3, #8
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	e002      	b.n	8000daa <vListInsert+0x2e>
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	68ba      	ldr	r2, [r7, #8]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d2f6      	bcs.n	8000da4 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	685a      	ldr	r2, [r3, #4]
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	683a      	ldr	r2, [r7, #0]
 8000dc4:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	68fa      	ldr	r2, [r7, #12]
 8000dca:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	683a      	ldr	r2, [r7, #0]
 8000dd0:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	1c5a      	adds	r2, r3, #1
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	601a      	str	r2, [r3, #0]
}
 8000de2:	bf00      	nop
 8000de4:	3714      	adds	r7, #20
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr

08000dee <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000dee:	b480      	push	{r7}
 8000df0:	b085      	sub	sp, #20
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	691b      	ldr	r3, [r3, #16]
 8000dfa:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	687a      	ldr	r2, [r7, #4]
 8000e02:	6892      	ldr	r2, [r2, #8]
 8000e04:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	687a      	ldr	r2, [r7, #4]
 8000e0c:	6852      	ldr	r2, [r2, #4]
 8000e0e:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	687a      	ldr	r2, [r7, #4]
 8000e16:	429a      	cmp	r2, r3
 8000e18:	d103      	bne.n	8000e22 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	689a      	ldr	r2, [r3, #8]
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2200      	movs	r2, #0
 8000e26:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	1e5a      	subs	r2, r3, #1
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	681b      	ldr	r3, [r3, #0]
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3714      	adds	r7, #20
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
	...

08000e44 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d10a      	bne.n	8000e72 <xQueueGenericReset+0x2e>
        __asm volatile
 8000e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e60:	f383 8811 	msr	BASEPRI, r3
 8000e64:	f3bf 8f6f 	isb	sy
 8000e68:	f3bf 8f4f 	dsb	sy
 8000e6c:	60fb      	str	r3, [r7, #12]
    }
 8000e6e:	bf00      	nop
 8000e70:	e7fe      	b.n	8000e70 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d05d      	beq.n	8000f34 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d059      	beq.n	8000f34 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e88:	2100      	movs	r1, #0
 8000e8a:	fba3 2302 	umull	r2, r3, r3, r2
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d000      	beq.n	8000e94 <xQueueGenericReset+0x50>
 8000e92:	2101      	movs	r1, #1
 8000e94:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d14c      	bne.n	8000f34 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8000e9a:	f002 f8f3 	bl	8003084 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ea6:	6939      	ldr	r1, [r7, #16]
 8000ea8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000eaa:	fb01 f303 	mul.w	r3, r1, r3
 8000eae:	441a      	add	r2, r3
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	6939      	ldr	r1, [r7, #16]
 8000ece:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000ed0:	fb01 f303 	mul.w	r3, r1, r3
 8000ed4:	441a      	add	r2, r3
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	22ff      	movs	r2, #255	; 0xff
 8000ede:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	22ff      	movs	r2, #255	; 0xff
 8000ee6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d114      	bne.n	8000f1a <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	691b      	ldr	r3, [r3, #16]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d01a      	beq.n	8000f2e <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	3310      	adds	r3, #16
 8000efc:	4618      	mov	r0, r3
 8000efe:	f001 f813 	bl	8001f28 <xTaskRemoveFromEventList>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d012      	beq.n	8000f2e <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000f08:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <xQueueGenericReset+0x11c>)
 8000f0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	f3bf 8f4f 	dsb	sy
 8000f14:	f3bf 8f6f 	isb	sy
 8000f18:	e009      	b.n	8000f2e <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	3310      	adds	r3, #16
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff feff 	bl	8000d22 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	3324      	adds	r3, #36	; 0x24
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff fefa 	bl	8000d22 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8000f2e:	f002 f8d9 	bl	80030e4 <vPortExitCritical>
 8000f32:	e001      	b.n	8000f38 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d10a      	bne.n	8000f54 <xQueueGenericReset+0x110>
        __asm volatile
 8000f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f42:	f383 8811 	msr	BASEPRI, r3
 8000f46:	f3bf 8f6f 	isb	sy
 8000f4a:	f3bf 8f4f 	dsb	sy
 8000f4e:	60bb      	str	r3, [r7, #8]
    }
 8000f50:	bf00      	nop
 8000f52:	e7fe      	b.n	8000f52 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8000f54:	697b      	ldr	r3, [r7, #20]
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3718      	adds	r7, #24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	e000ed04 	.word	0xe000ed04

08000f64 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08a      	sub	sp, #40	; 0x28
 8000f68:	af02      	add	r7, sp, #8
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	4613      	mov	r3, r2
 8000f70:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d02e      	beq.n	8000fda <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	68ba      	ldr	r2, [r7, #8]
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	fba3 2302 	umull	r2, r3, r3, r2
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d000      	beq.n	8000f8c <xQueueGenericCreate+0x28>
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d123      	bne.n	8000fda <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	68ba      	ldr	r2, [r7, #8]
 8000f96:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000f9a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8000f9e:	d81c      	bhi.n	8000fda <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	68ba      	ldr	r2, [r7, #8]
 8000fa4:	fb02 f303 	mul.w	r3, r2, r3
 8000fa8:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	3350      	adds	r3, #80	; 0x50
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f002 f994 	bl	80032dc <pvPortMalloc>
 8000fb4:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d01c      	beq.n	8000ff6 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	3350      	adds	r3, #80	; 0x50
 8000fc4:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000fc6:	79fa      	ldrb	r2, [r7, #7]
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	9300      	str	r3, [sp, #0]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	697a      	ldr	r2, [r7, #20]
 8000fd0:	68b9      	ldr	r1, [r7, #8]
 8000fd2:	68f8      	ldr	r0, [r7, #12]
 8000fd4:	f000 f814 	bl	8001000 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8000fd8:	e00d      	b.n	8000ff6 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d10a      	bne.n	8000ff6 <xQueueGenericCreate+0x92>
        __asm volatile
 8000fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fe4:	f383 8811 	msr	BASEPRI, r3
 8000fe8:	f3bf 8f6f 	isb	sy
 8000fec:	f3bf 8f4f 	dsb	sy
 8000ff0:	613b      	str	r3, [r7, #16]
    }
 8000ff2:	bf00      	nop
 8000ff4:	e7fe      	b.n	8000ff4 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8000ff6:	69fb      	ldr	r3, [r7, #28]
    }
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3720      	adds	r7, #32
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
 800100c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d103      	bne.n	800101c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	e002      	b.n	8001022 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	68fa      	ldr	r2, [r7, #12]
 8001026:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	68ba      	ldr	r2, [r7, #8]
 800102c:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800102e:	2101      	movs	r1, #1
 8001030:	69b8      	ldr	r0, [r7, #24]
 8001032:	f7ff ff07 	bl	8000e44 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	78fa      	ldrb	r2, [r7, #3]
 800103a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 800103e:	78fb      	ldrb	r3, [r7, #3]
 8001040:	68ba      	ldr	r2, [r7, #8]
 8001042:	68f9      	ldr	r1, [r7, #12]
 8001044:	2073      	movs	r0, #115	; 0x73
 8001046:	f003 fd7f 	bl	8004b48 <SEGGER_SYSVIEW_RecordU32x3>
}
 800104a:	bf00      	nop
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
	...

08001054 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8001054:	b590      	push	{r4, r7, lr}
 8001056:	b08f      	sub	sp, #60	; 0x3c
 8001058:	af02      	add	r7, sp, #8
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001060:	2300      	movs	r3, #0
 8001062:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8001068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800106a:	2b00      	cmp	r3, #0
 800106c:	d10a      	bne.n	8001084 <xQueueReceive+0x30>
        __asm volatile
 800106e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001072:	f383 8811 	msr	BASEPRI, r3
 8001076:	f3bf 8f6f 	isb	sy
 800107a:	f3bf 8f4f 	dsb	sy
 800107e:	623b      	str	r3, [r7, #32]
    }
 8001080:	bf00      	nop
 8001082:	e7fe      	b.n	8001082 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d103      	bne.n	8001092 <xQueueReceive+0x3e>
 800108a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800108c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108e:	2b00      	cmp	r3, #0
 8001090:	d101      	bne.n	8001096 <xQueueReceive+0x42>
 8001092:	2301      	movs	r3, #1
 8001094:	e000      	b.n	8001098 <xQueueReceive+0x44>
 8001096:	2300      	movs	r3, #0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d10a      	bne.n	80010b2 <xQueueReceive+0x5e>
        __asm volatile
 800109c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010a0:	f383 8811 	msr	BASEPRI, r3
 80010a4:	f3bf 8f6f 	isb	sy
 80010a8:	f3bf 8f4f 	dsb	sy
 80010ac:	61fb      	str	r3, [r7, #28]
    }
 80010ae:	bf00      	nop
 80010b0:	e7fe      	b.n	80010b0 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80010b2:	f001 f94b 	bl	800234c <xTaskGetSchedulerState>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d102      	bne.n	80010c2 <xQueueReceive+0x6e>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d101      	bne.n	80010c6 <xQueueReceive+0x72>
 80010c2:	2301      	movs	r3, #1
 80010c4:	e000      	b.n	80010c8 <xQueueReceive+0x74>
 80010c6:	2300      	movs	r3, #0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d10a      	bne.n	80010e2 <xQueueReceive+0x8e>
        __asm volatile
 80010cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010d0:	f383 8811 	msr	BASEPRI, r3
 80010d4:	f3bf 8f6f 	isb	sy
 80010d8:	f3bf 8f4f 	dsb	sy
 80010dc:	61bb      	str	r3, [r7, #24]
    }
 80010de:	bf00      	nop
 80010e0:	e7fe      	b.n	80010e0 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80010e2:	f001 ffcf 	bl	8003084 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80010e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010ea:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80010ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d02f      	beq.n	8001152 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80010f2:	68b9      	ldr	r1, [r7, #8]
 80010f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80010f6:	f000 f8bd 	bl	8001274 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80010fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010fc:	4618      	mov	r0, r3
 80010fe:	f004 fab1 	bl	8005664 <SEGGER_SYSVIEW_ShrinkId>
 8001102:	4604      	mov	r4, r0
 8001104:	2000      	movs	r0, #0
 8001106:	f004 faad 	bl	8005664 <SEGGER_SYSVIEW_ShrinkId>
 800110a:	4602      	mov	r2, r0
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2101      	movs	r1, #1
 8001110:	9100      	str	r1, [sp, #0]
 8001112:	4621      	mov	r1, r4
 8001114:	205c      	movs	r0, #92	; 0x5c
 8001116:	f003 fd8d 	bl	8004c34 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800111a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111c:	1e5a      	subs	r2, r3, #1
 800111e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001120:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001124:	691b      	ldr	r3, [r3, #16]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d00f      	beq.n	800114a <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800112a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800112c:	3310      	adds	r3, #16
 800112e:	4618      	mov	r0, r3
 8001130:	f000 fefa 	bl	8001f28 <xTaskRemoveFromEventList>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d007      	beq.n	800114a <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800113a:	4b4d      	ldr	r3, [pc, #308]	; (8001270 <xQueueReceive+0x21c>)
 800113c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	f3bf 8f4f 	dsb	sy
 8001146:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800114a:	f001 ffcb 	bl	80030e4 <vPortExitCritical>
                return pdPASS;
 800114e:	2301      	movs	r3, #1
 8001150:	e08a      	b.n	8001268 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d113      	bne.n	8001180 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001158:	f001 ffc4 	bl	80030e4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 800115c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800115e:	4618      	mov	r0, r3
 8001160:	f004 fa80 	bl	8005664 <SEGGER_SYSVIEW_ShrinkId>
 8001164:	4604      	mov	r4, r0
 8001166:	2000      	movs	r0, #0
 8001168:	f004 fa7c 	bl	8005664 <SEGGER_SYSVIEW_ShrinkId>
 800116c:	4602      	mov	r2, r0
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2101      	movs	r1, #1
 8001172:	9100      	str	r1, [sp, #0]
 8001174:	4621      	mov	r1, r4
 8001176:	205c      	movs	r0, #92	; 0x5c
 8001178:	f003 fd5c 	bl	8004c34 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 800117c:	2300      	movs	r3, #0
 800117e:	e073      	b.n	8001268 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001182:	2b00      	cmp	r3, #0
 8001184:	d106      	bne.n	8001194 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001186:	f107 0310 	add.w	r3, r7, #16
 800118a:	4618      	mov	r0, r3
 800118c:	f000 ffa4 	bl	80020d8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001190:	2301      	movs	r3, #1
 8001192:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001194:	f001 ffa6 	bl	80030e4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001198:	f000 fba6 	bl	80018e8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800119c:	f001 ff72 	bl	8003084 <vPortEnterCritical>
 80011a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80011a6:	b25b      	sxtb	r3, r3
 80011a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011ac:	d103      	bne.n	80011b6 <xQueueReceive+0x162>
 80011ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011b0:	2200      	movs	r2, #0
 80011b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80011b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80011bc:	b25b      	sxtb	r3, r3
 80011be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011c2:	d103      	bne.n	80011cc <xQueueReceive+0x178>
 80011c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011c6:	2200      	movs	r2, #0
 80011c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80011cc:	f001 ff8a 	bl	80030e4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80011d0:	1d3a      	adds	r2, r7, #4
 80011d2:	f107 0310 	add.w	r3, r7, #16
 80011d6:	4611      	mov	r1, r2
 80011d8:	4618      	mov	r0, r3
 80011da:	f000 ff93 	bl	8002104 <xTaskCheckForTimeOut>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d124      	bne.n	800122e <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80011e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80011e6:	f000 f8bd 	bl	8001364 <prvIsQueueEmpty>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d018      	beq.n	8001222 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80011f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011f2:	3324      	adds	r3, #36	; 0x24
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	4611      	mov	r1, r2
 80011f8:	4618      	mov	r0, r3
 80011fa:	f000 fe29 	bl	8001e50 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80011fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001200:	f000 f85e 	bl	80012c0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001204:	f000 fb7e 	bl	8001904 <xTaskResumeAll>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	f47f af69 	bne.w	80010e2 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8001210:	4b17      	ldr	r3, [pc, #92]	; (8001270 <xQueueReceive+0x21c>)
 8001212:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	f3bf 8f4f 	dsb	sy
 800121c:	f3bf 8f6f 	isb	sy
 8001220:	e75f      	b.n	80010e2 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8001222:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001224:	f000 f84c 	bl	80012c0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001228:	f000 fb6c 	bl	8001904 <xTaskResumeAll>
 800122c:	e759      	b.n	80010e2 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800122e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001230:	f000 f846 	bl	80012c0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001234:	f000 fb66 	bl	8001904 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001238:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800123a:	f000 f893 	bl	8001364 <prvIsQueueEmpty>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	f43f af4e 	beq.w	80010e2 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8001246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001248:	4618      	mov	r0, r3
 800124a:	f004 fa0b 	bl	8005664 <SEGGER_SYSVIEW_ShrinkId>
 800124e:	4604      	mov	r4, r0
 8001250:	2000      	movs	r0, #0
 8001252:	f004 fa07 	bl	8005664 <SEGGER_SYSVIEW_ShrinkId>
 8001256:	4602      	mov	r2, r0
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2101      	movs	r1, #1
 800125c:	9100      	str	r1, [sp, #0]
 800125e:	4621      	mov	r1, r4
 8001260:	205c      	movs	r0, #92	; 0x5c
 8001262:	f003 fce7 	bl	8004c34 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8001266:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8001268:	4618      	mov	r0, r3
 800126a:	3734      	adds	r7, #52	; 0x34
 800126c:	46bd      	mov	sp, r7
 800126e:	bd90      	pop	{r4, r7, pc}
 8001270:	e000ed04 	.word	0xe000ed04

08001274 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	2b00      	cmp	r3, #0
 8001284:	d018      	beq.n	80012b8 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	68da      	ldr	r2, [r3, #12]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	441a      	add	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	68da      	ldr	r2, [r3, #12]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	429a      	cmp	r2, r3
 800129e:	d303      	bcc.n	80012a8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	68d9      	ldr	r1, [r3, #12]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b0:	461a      	mov	r2, r3
 80012b2:	6838      	ldr	r0, [r7, #0]
 80012b4:	f005 ff5a 	bl	800716c <memcpy>
    }
}
 80012b8:	bf00      	nop
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80012c8:	f001 fedc 	bl	8003084 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80012d2:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80012d4:	e011      	b.n	80012fa <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d012      	beq.n	8001304 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	3324      	adds	r3, #36	; 0x24
 80012e2:	4618      	mov	r0, r3
 80012e4:	f000 fe20 	bl	8001f28 <xTaskRemoveFromEventList>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80012ee:	f000 ff6f 	bl	80021d0 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
 80012f4:	3b01      	subs	r3, #1
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80012fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	dce9      	bgt.n	80012d6 <prvUnlockQueue+0x16>
 8001302:	e000      	b.n	8001306 <prvUnlockQueue+0x46>
                    break;
 8001304:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	22ff      	movs	r2, #255	; 0xff
 800130a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800130e:	f001 fee9 	bl	80030e4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8001312:	f001 feb7 	bl	8003084 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800131c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800131e:	e011      	b.n	8001344 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	691b      	ldr	r3, [r3, #16]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d012      	beq.n	800134e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	3310      	adds	r3, #16
 800132c:	4618      	mov	r0, r3
 800132e:	f000 fdfb 	bl	8001f28 <xTaskRemoveFromEventList>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8001338:	f000 ff4a 	bl	80021d0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800133c:	7bbb      	ldrb	r3, [r7, #14]
 800133e:	3b01      	subs	r3, #1
 8001340:	b2db      	uxtb	r3, r3
 8001342:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001344:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001348:	2b00      	cmp	r3, #0
 800134a:	dce9      	bgt.n	8001320 <prvUnlockQueue+0x60>
 800134c:	e000      	b.n	8001350 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800134e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	22ff      	movs	r2, #255	; 0xff
 8001354:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8001358:	f001 fec4 	bl	80030e4 <vPortExitCritical>
}
 800135c:	bf00      	nop
 800135e:	3710      	adds	r7, #16
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800136c:	f001 fe8a 	bl	8003084 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001374:	2b00      	cmp	r3, #0
 8001376:	d102      	bne.n	800137e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001378:	2301      	movs	r3, #1
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	e001      	b.n	8001382 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800137e:	2300      	movs	r3, #0
 8001380:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001382:	f001 feaf 	bl	80030e4 <vPortExitCritical>

    return xReturn;
 8001386:	68fb      	ldr	r3, [r7, #12]
}
 8001388:	4618      	mov	r0, r3
 800138a:	3710      	adds	r7, #16
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800139a:	2300      	movs	r3, #0
 800139c:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d10a      	bne.n	80013ba <vQueueAddToRegistry+0x2a>
        __asm volatile
 80013a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013a8:	f383 8811 	msr	BASEPRI, r3
 80013ac:	f3bf 8f6f 	isb	sy
 80013b0:	f3bf 8f4f 	dsb	sy
 80013b4:	60fb      	str	r3, [r7, #12]
    }
 80013b6:	bf00      	nop
 80013b8:	e7fe      	b.n	80013b8 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d024      	beq.n	800140a <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]
 80013c4:	e01e      	b.n	8001404 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80013c6:	4a1c      	ldr	r2, [pc, #112]	; (8001438 <vQueueAddToRegistry+0xa8>)
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	4413      	add	r3, r2
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d105      	bne.n	80013e2 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	00db      	lsls	r3, r3, #3
 80013da:	4a17      	ldr	r2, [pc, #92]	; (8001438 <vQueueAddToRegistry+0xa8>)
 80013dc:	4413      	add	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
                    break;
 80013e0:	e013      	b.n	800140a <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d10a      	bne.n	80013fe <vQueueAddToRegistry+0x6e>
 80013e8:	4a13      	ldr	r2, [pc, #76]	; (8001438 <vQueueAddToRegistry+0xa8>)
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d104      	bne.n	80013fe <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	4a0f      	ldr	r2, [pc, #60]	; (8001438 <vQueueAddToRegistry+0xa8>)
 80013fa:	4413      	add	r3, r2
 80013fc:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	3301      	adds	r3, #1
 8001402:	617b      	str	r3, [r7, #20]
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	2b07      	cmp	r3, #7
 8001408:	d9dd      	bls.n	80013c6 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d00f      	beq.n	8001430 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	683a      	ldr	r2, [r7, #0]
 8001414:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4618      	mov	r0, r3
 8001420:	f004 f920 	bl	8005664 <SEGGER_SYSVIEW_ShrinkId>
 8001424:	4601      	mov	r1, r0
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	461a      	mov	r2, r3
 800142a:	2071      	movs	r0, #113	; 0x71
 800142c:	f003 fb32 	bl	8004a94 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8001430:	bf00      	nop
 8001432:	3718      	adds	r7, #24
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	200000bc 	.word	0x200000bc

0800143c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800144c:	f001 fe1a 	bl	8003084 <vPortEnterCritical>
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001456:	b25b      	sxtb	r3, r3
 8001458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800145c:	d103      	bne.n	8001466 <vQueueWaitForMessageRestricted+0x2a>
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	2200      	movs	r2, #0
 8001462:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800146c:	b25b      	sxtb	r3, r3
 800146e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001472:	d103      	bne.n	800147c <vQueueWaitForMessageRestricted+0x40>
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	2200      	movs	r2, #0
 8001478:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800147c:	f001 fe32 	bl	80030e4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001484:	2b00      	cmp	r3, #0
 8001486:	d106      	bne.n	8001496 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	3324      	adds	r3, #36	; 0x24
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	68b9      	ldr	r1, [r7, #8]
 8001490:	4618      	mov	r0, r3
 8001492:	f000 fd01 	bl	8001e98 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8001496:	6978      	ldr	r0, [r7, #20]
 8001498:	f7ff ff12 	bl	80012c0 <prvUnlockQueue>
    }
 800149c:	bf00      	nop
 800149e:	3718      	adds	r7, #24
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08c      	sub	sp, #48	; 0x30
 80014a8:	af04      	add	r7, sp, #16
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	603b      	str	r3, [r7, #0]
 80014b0:	4613      	mov	r3, r2
 80014b2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80014b4:	88fb      	ldrh	r3, [r7, #6]
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	4618      	mov	r0, r3
 80014ba:	f001 ff0f 	bl	80032dc <pvPortMalloc>
 80014be:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d013      	beq.n	80014ee <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80014c6:	2058      	movs	r0, #88	; 0x58
 80014c8:	f001 ff08 	bl	80032dc <pvPortMalloc>
 80014cc:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d008      	beq.n	80014e6 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80014d4:	2258      	movs	r2, #88	; 0x58
 80014d6:	2100      	movs	r1, #0
 80014d8:	69f8      	ldr	r0, [r7, #28]
 80014da:	f005 fe55 	bl	8007188 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	697a      	ldr	r2, [r7, #20]
 80014e2:	631a      	str	r2, [r3, #48]	; 0x30
 80014e4:	e005      	b.n	80014f2 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80014e6:	6978      	ldr	r0, [r7, #20]
 80014e8:	f001 ffb2 	bl	8003450 <vPortFree>
 80014ec:	e001      	b.n	80014f2 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d013      	beq.n	8001520 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80014f8:	88fa      	ldrh	r2, [r7, #6]
 80014fa:	2300      	movs	r3, #0
 80014fc:	9303      	str	r3, [sp, #12]
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	9302      	str	r3, [sp, #8]
 8001502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001504:	9301      	str	r3, [sp, #4]
 8001506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001508:	9300      	str	r3, [sp, #0]
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	68b9      	ldr	r1, [r7, #8]
 800150e:	68f8      	ldr	r0, [r7, #12]
 8001510:	f000 f80e 	bl	8001530 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001514:	69f8      	ldr	r0, [r7, #28]
 8001516:	f000 f899 	bl	800164c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800151a:	2301      	movs	r3, #1
 800151c:	61bb      	str	r3, [r7, #24]
 800151e:	e002      	b.n	8001526 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001520:	f04f 33ff 	mov.w	r3, #4294967295
 8001524:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001526:	69bb      	ldr	r3, [r7, #24]
    }
 8001528:	4618      	mov	r0, r3
 800152a:	3720      	adds	r7, #32
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b088      	sub	sp, #32
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
 800153c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800153e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001540:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	461a      	mov	r2, r3
 8001548:	21a5      	movs	r1, #165	; 0xa5
 800154a:	f005 fe1d 	bl	8007188 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800154e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001550:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001558:	3b01      	subs	r3, #1
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	4413      	add	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	f023 0307 	bic.w	r3, r3, #7
 8001566:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	f003 0307 	and.w	r3, r3, #7
 800156e:	2b00      	cmp	r3, #0
 8001570:	d00a      	beq.n	8001588 <prvInitialiseNewTask+0x58>
        __asm volatile
 8001572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001576:	f383 8811 	msr	BASEPRI, r3
 800157a:	f3bf 8f6f 	isb	sy
 800157e:	f3bf 8f4f 	dsb	sy
 8001582:	617b      	str	r3, [r7, #20]
    }
 8001584:	bf00      	nop
 8001586:	e7fe      	b.n	8001586 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d01e      	beq.n	80015cc <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800158e:	2300      	movs	r3, #0
 8001590:	61fb      	str	r3, [r7, #28]
 8001592:	e012      	b.n	80015ba <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001594:	68ba      	ldr	r2, [r7, #8]
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	4413      	add	r3, r2
 800159a:	7819      	ldrb	r1, [r3, #0]
 800159c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	4413      	add	r3, r2
 80015a2:	3334      	adds	r3, #52	; 0x34
 80015a4:	460a      	mov	r2, r1
 80015a6:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80015a8:	68ba      	ldr	r2, [r7, #8]
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	4413      	add	r3, r2
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d006      	beq.n	80015c2 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	3301      	adds	r3, #1
 80015b8:	61fb      	str	r3, [r7, #28]
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	2b09      	cmp	r3, #9
 80015be:	d9e9      	bls.n	8001594 <prvInitialiseNewTask+0x64>
 80015c0:	e000      	b.n	80015c4 <prvInitialiseNewTask+0x94>
            {
                break;
 80015c2:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80015c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015c6:	2200      	movs	r2, #0
 80015c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80015cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ce:	2b04      	cmp	r3, #4
 80015d0:	d90a      	bls.n	80015e8 <prvInitialiseNewTask+0xb8>
        __asm volatile
 80015d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015d6:	f383 8811 	msr	BASEPRI, r3
 80015da:	f3bf 8f6f 	isb	sy
 80015de:	f3bf 8f4f 	dsb	sy
 80015e2:	613b      	str	r3, [r7, #16]
    }
 80015e4:	bf00      	nop
 80015e6:	e7fe      	b.n	80015e6 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80015e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ea:	2b04      	cmp	r3, #4
 80015ec:	d901      	bls.n	80015f2 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80015ee:	2304      	movs	r3, #4
 80015f0:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80015f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015f6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80015f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015fc:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80015fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001600:	3304      	adds	r3, #4
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff fbad 	bl	8000d62 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800160a:	3318      	adds	r3, #24
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff fba8 	bl	8000d62 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001614:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001616:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800161a:	f1c3 0205 	rsb	r2, r3, #5
 800161e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001620:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001624:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001626:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001628:	683a      	ldr	r2, [r7, #0]
 800162a:	68f9      	ldr	r1, [r7, #12]
 800162c:	69b8      	ldr	r0, [r7, #24]
 800162e:	f001 fb7d 	bl	8002d2c <pxPortInitialiseStack>
 8001632:	4602      	mov	r2, r0
 8001634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001636:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800163a:	2b00      	cmp	r3, #0
 800163c:	d002      	beq.n	8001644 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800163e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001640:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001642:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001644:	bf00      	nop
 8001646:	3720      	adds	r7, #32
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800164c:	b5b0      	push	{r4, r5, r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af02      	add	r7, sp, #8
 8001652:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001654:	f001 fd16 	bl	8003084 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001658:	4b4f      	ldr	r3, [pc, #316]	; (8001798 <prvAddNewTaskToReadyList+0x14c>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	3301      	adds	r3, #1
 800165e:	4a4e      	ldr	r2, [pc, #312]	; (8001798 <prvAddNewTaskToReadyList+0x14c>)
 8001660:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8001662:	4b4e      	ldr	r3, [pc, #312]	; (800179c <prvAddNewTaskToReadyList+0x150>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d109      	bne.n	800167e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800166a:	4a4c      	ldr	r2, [pc, #304]	; (800179c <prvAddNewTaskToReadyList+0x150>)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001670:	4b49      	ldr	r3, [pc, #292]	; (8001798 <prvAddNewTaskToReadyList+0x14c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d110      	bne.n	800169a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001678:	f000 fdce 	bl	8002218 <prvInitialiseTaskLists>
 800167c:	e00d      	b.n	800169a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800167e:	4b48      	ldr	r3, [pc, #288]	; (80017a0 <prvAddNewTaskToReadyList+0x154>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d109      	bne.n	800169a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001686:	4b45      	ldr	r3, [pc, #276]	; (800179c <prvAddNewTaskToReadyList+0x150>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001690:	429a      	cmp	r2, r3
 8001692:	d802      	bhi.n	800169a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001694:	4a41      	ldr	r2, [pc, #260]	; (800179c <prvAddNewTaskToReadyList+0x150>)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800169a:	4b42      	ldr	r3, [pc, #264]	; (80017a4 <prvAddNewTaskToReadyList+0x158>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	3301      	adds	r3, #1
 80016a0:	4a40      	ldr	r2, [pc, #256]	; (80017a4 <prvAddNewTaskToReadyList+0x158>)
 80016a2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80016a4:	4b3f      	ldr	r3, [pc, #252]	; (80017a4 <prvAddNewTaskToReadyList+0x158>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d016      	beq.n	80016e0 <prvAddNewTaskToReadyList+0x94>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f003 feaf 	bl	8005418 <SEGGER_SYSVIEW_OnTaskCreate>
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	461d      	mov	r5, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	461c      	mov	r4, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	1ae3      	subs	r3, r4, r3
 80016d8:	9300      	str	r3, [sp, #0]
 80016da:	462b      	mov	r3, r5
 80016dc:	f002 f87a 	bl	80037d4 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f003 ff1c 	bl	8005520 <SEGGER_SYSVIEW_OnTaskStartReady>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ec:	2201      	movs	r2, #1
 80016ee:	409a      	lsls	r2, r3
 80016f0:	4b2d      	ldr	r3, [pc, #180]	; (80017a8 <prvAddNewTaskToReadyList+0x15c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	4a2c      	ldr	r2, [pc, #176]	; (80017a8 <prvAddNewTaskToReadyList+0x15c>)
 80016f8:	6013      	str	r3, [r2, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016fe:	492b      	ldr	r1, [pc, #172]	; (80017ac <prvAddNewTaskToReadyList+0x160>)
 8001700:	4613      	mov	r3, r2
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	4413      	add	r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	440b      	add	r3, r1
 800170a:	3304      	adds	r3, #4
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	68fa      	ldr	r2, [r7, #12]
 8001714:	609a      	str	r2, [r3, #8]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	689a      	ldr	r2, [r3, #8]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	60da      	str	r2, [r3, #12]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	3204      	adds	r2, #4
 8001726:	605a      	str	r2, [r3, #4]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	1d1a      	adds	r2, r3, #4
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001734:	4613      	mov	r3, r2
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	4413      	add	r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	4a1b      	ldr	r2, [pc, #108]	; (80017ac <prvAddNewTaskToReadyList+0x160>)
 800173e:	441a      	add	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	615a      	str	r2, [r3, #20]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001748:	4918      	ldr	r1, [pc, #96]	; (80017ac <prvAddNewTaskToReadyList+0x160>)
 800174a:	4613      	mov	r3, r2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	4413      	add	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	440b      	add	r3, r1
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	1c59      	adds	r1, r3, #1
 8001758:	4814      	ldr	r0, [pc, #80]	; (80017ac <prvAddNewTaskToReadyList+0x160>)
 800175a:	4613      	mov	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4413      	add	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4403      	add	r3, r0
 8001764:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001766:	f001 fcbd 	bl	80030e4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800176a:	4b0d      	ldr	r3, [pc, #52]	; (80017a0 <prvAddNewTaskToReadyList+0x154>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d00e      	beq.n	8001790 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001772:	4b0a      	ldr	r3, [pc, #40]	; (800179c <prvAddNewTaskToReadyList+0x150>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177c:	429a      	cmp	r2, r3
 800177e:	d207      	bcs.n	8001790 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001780:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <prvAddNewTaskToReadyList+0x164>)
 8001782:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	f3bf 8f4f 	dsb	sy
 800178c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001790:	bf00      	nop
 8001792:	3710      	adds	r7, #16
 8001794:	46bd      	mov	sp, r7
 8001796:	bdb0      	pop	{r4, r5, r7, pc}
 8001798:	200001d4 	.word	0x200001d4
 800179c:	200000fc 	.word	0x200000fc
 80017a0:	200001e0 	.word	0x200001e0
 80017a4:	200001f0 	.word	0x200001f0
 80017a8:	200001dc 	.word	0x200001dc
 80017ac:	20000100 	.word	0x20000100
 80017b0:	e000ed04 	.word	0xe000ed04

080017b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80017bc:	2300      	movs	r3, #0
 80017be:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d01b      	beq.n	80017fe <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80017c6:	4b15      	ldr	r3, [pc, #84]	; (800181c <vTaskDelay+0x68>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d00a      	beq.n	80017e4 <vTaskDelay+0x30>
        __asm volatile
 80017ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017d2:	f383 8811 	msr	BASEPRI, r3
 80017d6:	f3bf 8f6f 	isb	sy
 80017da:	f3bf 8f4f 	dsb	sy
 80017de:	60bb      	str	r3, [r7, #8]
    }
 80017e0:	bf00      	nop
 80017e2:	e7fe      	b.n	80017e2 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80017e4:	f000 f880 	bl	80018e8 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 80017e8:	6879      	ldr	r1, [r7, #4]
 80017ea:	2023      	movs	r0, #35	; 0x23
 80017ec:	f003 f916 	bl	8004a1c <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80017f0:	2100      	movs	r1, #0
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f000 ff84 	bl	8002700 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80017f8:	f000 f884 	bl	8001904 <xTaskResumeAll>
 80017fc:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d107      	bne.n	8001814 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8001804:	4b06      	ldr	r3, [pc, #24]	; (8001820 <vTaskDelay+0x6c>)
 8001806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	f3bf 8f4f 	dsb	sy
 8001810:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001814:	bf00      	nop
 8001816:	3710      	adds	r7, #16
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	200001fc 	.word	0x200001fc
 8001820:	e000ed04 	.word	0xe000ed04

08001824 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 800182a:	4b27      	ldr	r3, [pc, #156]	; (80018c8 <vTaskStartScheduler+0xa4>)
 800182c:	9301      	str	r3, [sp, #4]
 800182e:	2300      	movs	r3, #0
 8001830:	9300      	str	r3, [sp, #0]
 8001832:	2300      	movs	r3, #0
 8001834:	2282      	movs	r2, #130	; 0x82
 8001836:	4925      	ldr	r1, [pc, #148]	; (80018cc <vTaskStartScheduler+0xa8>)
 8001838:	4825      	ldr	r0, [pc, #148]	; (80018d0 <vTaskStartScheduler+0xac>)
 800183a:	f7ff fe33 	bl	80014a4 <xTaskCreate>
 800183e:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d102      	bne.n	800184c <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8001846:	f000 ffed 	bl	8002824 <xTimerCreateTimerTask>
 800184a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d124      	bne.n	800189c <vTaskStartScheduler+0x78>
        __asm volatile
 8001852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001856:	f383 8811 	msr	BASEPRI, r3
 800185a:	f3bf 8f6f 	isb	sy
 800185e:	f3bf 8f4f 	dsb	sy
 8001862:	60bb      	str	r3, [r7, #8]
    }
 8001864:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8001866:	4b1b      	ldr	r3, [pc, #108]	; (80018d4 <vTaskStartScheduler+0xb0>)
 8001868:	f04f 32ff 	mov.w	r2, #4294967295
 800186c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800186e:	4b1a      	ldr	r3, [pc, #104]	; (80018d8 <vTaskStartScheduler+0xb4>)
 8001870:	2201      	movs	r2, #1
 8001872:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001874:	4b19      	ldr	r3, [pc, #100]	; (80018dc <vTaskStartScheduler+0xb8>)
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800187a:	4b19      	ldr	r3, [pc, #100]	; (80018e0 <vTaskStartScheduler+0xbc>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <vTaskStartScheduler+0xa4>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	429a      	cmp	r2, r3
 8001884:	d102      	bne.n	800188c <vTaskStartScheduler+0x68>
 8001886:	f003 fdab 	bl	80053e0 <SEGGER_SYSVIEW_OnIdle>
 800188a:	e004      	b.n	8001896 <vTaskStartScheduler+0x72>
 800188c:	4b14      	ldr	r3, [pc, #80]	; (80018e0 <vTaskStartScheduler+0xbc>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4618      	mov	r0, r3
 8001892:	f003 fe03 	bl	800549c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8001896:	f001 fad5 	bl	8002e44 <xPortStartScheduler>
 800189a:	e00e      	b.n	80018ba <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018a2:	d10a      	bne.n	80018ba <vTaskStartScheduler+0x96>
        __asm volatile
 80018a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018a8:	f383 8811 	msr	BASEPRI, r3
 80018ac:	f3bf 8f6f 	isb	sy
 80018b0:	f3bf 8f4f 	dsb	sy
 80018b4:	607b      	str	r3, [r7, #4]
    }
 80018b6:	bf00      	nop
 80018b8:	e7fe      	b.n	80018b8 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80018ba:	4b0a      	ldr	r3, [pc, #40]	; (80018e4 <vTaskStartScheduler+0xc0>)
 80018bc:	681b      	ldr	r3, [r3, #0]
}
 80018be:	bf00      	nop
 80018c0:	3710      	adds	r7, #16
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	200001f8 	.word	0x200001f8
 80018cc:	08007bbc 	.word	0x08007bbc
 80018d0:	080021e9 	.word	0x080021e9
 80018d4:	200001f4 	.word	0x200001f4
 80018d8:	200001e0 	.word	0x200001e0
 80018dc:	200001d8 	.word	0x200001d8
 80018e0:	200000fc 	.word	0x200000fc
 80018e4:	20000004 	.word	0x20000004

080018e8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80018ec:	4b04      	ldr	r3, [pc, #16]	; (8001900 <vTaskSuspendAll+0x18>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	3301      	adds	r3, #1
 80018f2:	4a03      	ldr	r2, [pc, #12]	; (8001900 <vTaskSuspendAll+0x18>)
 80018f4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80018f6:	bf00      	nop
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	200001fc 	.word	0x200001fc

08001904 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b088      	sub	sp, #32
 8001908:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800190a:	2300      	movs	r3, #0
 800190c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800190e:	2300      	movs	r3, #0
 8001910:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8001912:	4b73      	ldr	r3, [pc, #460]	; (8001ae0 <xTaskResumeAll+0x1dc>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d10a      	bne.n	8001930 <xTaskResumeAll+0x2c>
        __asm volatile
 800191a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800191e:	f383 8811 	msr	BASEPRI, r3
 8001922:	f3bf 8f6f 	isb	sy
 8001926:	f3bf 8f4f 	dsb	sy
 800192a:	607b      	str	r3, [r7, #4]
    }
 800192c:	bf00      	nop
 800192e:	e7fe      	b.n	800192e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001930:	f001 fba8 	bl	8003084 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001934:	4b6a      	ldr	r3, [pc, #424]	; (8001ae0 <xTaskResumeAll+0x1dc>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	3b01      	subs	r3, #1
 800193a:	4a69      	ldr	r2, [pc, #420]	; (8001ae0 <xTaskResumeAll+0x1dc>)
 800193c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800193e:	4b68      	ldr	r3, [pc, #416]	; (8001ae0 <xTaskResumeAll+0x1dc>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2b00      	cmp	r3, #0
 8001944:	f040 80c4 	bne.w	8001ad0 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001948:	4b66      	ldr	r3, [pc, #408]	; (8001ae4 <xTaskResumeAll+0x1e0>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	f000 80bf 	beq.w	8001ad0 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001952:	e08e      	b.n	8001a72 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001954:	4b64      	ldr	r3, [pc, #400]	; (8001ae8 <xTaskResumeAll+0x1e4>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001960:	613b      	str	r3, [r7, #16]
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	69db      	ldr	r3, [r3, #28]
 8001966:	69fa      	ldr	r2, [r7, #28]
 8001968:	6a12      	ldr	r2, [r2, #32]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	6a1b      	ldr	r3, [r3, #32]
 8001970:	69fa      	ldr	r2, [r7, #28]
 8001972:	69d2      	ldr	r2, [r2, #28]
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	685a      	ldr	r2, [r3, #4]
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	3318      	adds	r3, #24
 800197e:	429a      	cmp	r2, r3
 8001980:	d103      	bne.n	800198a <xTaskResumeAll+0x86>
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	6a1a      	ldr	r2, [r3, #32]
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	2200      	movs	r2, #0
 800198e:	629a      	str	r2, [r3, #40]	; 0x28
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	1e5a      	subs	r2, r3, #1
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	695b      	ldr	r3, [r3, #20]
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	69fa      	ldr	r2, [r7, #28]
 80019a6:	68d2      	ldr	r2, [r2, #12]
 80019a8:	609a      	str	r2, [r3, #8]
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	69fa      	ldr	r2, [r7, #28]
 80019b0:	6892      	ldr	r2, [r2, #8]
 80019b2:	605a      	str	r2, [r3, #4]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	685a      	ldr	r2, [r3, #4]
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	3304      	adds	r3, #4
 80019bc:	429a      	cmp	r2, r3
 80019be:	d103      	bne.n	80019c8 <xTaskResumeAll+0xc4>
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	68da      	ldr	r2, [r3, #12]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	605a      	str	r2, [r3, #4]
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	2200      	movs	r2, #0
 80019cc:	615a      	str	r2, [r3, #20]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	1e5a      	subs	r2, r3, #1
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	4618      	mov	r0, r3
 80019dc:	f003 fda0 	bl	8005520 <SEGGER_SYSVIEW_OnTaskStartReady>
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e4:	2201      	movs	r2, #1
 80019e6:	409a      	lsls	r2, r3
 80019e8:	4b40      	ldr	r3, [pc, #256]	; (8001aec <xTaskResumeAll+0x1e8>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	4a3f      	ldr	r2, [pc, #252]	; (8001aec <xTaskResumeAll+0x1e8>)
 80019f0:	6013      	str	r3, [r2, #0]
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019f6:	493e      	ldr	r1, [pc, #248]	; (8001af0 <xTaskResumeAll+0x1ec>)
 80019f8:	4613      	mov	r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4413      	add	r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	440b      	add	r3, r1
 8001a02:	3304      	adds	r3, #4
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	60bb      	str	r3, [r7, #8]
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	68ba      	ldr	r2, [r7, #8]
 8001a0c:	609a      	str	r2, [r3, #8]
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	689a      	ldr	r2, [r3, #8]
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	60da      	str	r2, [r3, #12]
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	69fa      	ldr	r2, [r7, #28]
 8001a1c:	3204      	adds	r2, #4
 8001a1e:	605a      	str	r2, [r3, #4]
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	1d1a      	adds	r2, r3, #4
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	609a      	str	r2, [r3, #8]
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4413      	add	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4a2e      	ldr	r2, [pc, #184]	; (8001af0 <xTaskResumeAll+0x1ec>)
 8001a36:	441a      	add	r2, r3
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	615a      	str	r2, [r3, #20]
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a40:	492b      	ldr	r1, [pc, #172]	; (8001af0 <xTaskResumeAll+0x1ec>)
 8001a42:	4613      	mov	r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	4413      	add	r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	440b      	add	r3, r1
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	1c59      	adds	r1, r3, #1
 8001a50:	4827      	ldr	r0, [pc, #156]	; (8001af0 <xTaskResumeAll+0x1ec>)
 8001a52:	4613      	mov	r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	4413      	add	r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	4403      	add	r3, r0
 8001a5c:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a62:	4b24      	ldr	r3, [pc, #144]	; (8001af4 <xTaskResumeAll+0x1f0>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d302      	bcc.n	8001a72 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8001a6c:	4b22      	ldr	r3, [pc, #136]	; (8001af8 <xTaskResumeAll+0x1f4>)
 8001a6e:	2201      	movs	r2, #1
 8001a70:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001a72:	4b1d      	ldr	r3, [pc, #116]	; (8001ae8 <xTaskResumeAll+0x1e4>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	f47f af6c 	bne.w	8001954 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001a82:	f000 fc47 	bl	8002314 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001a86:	4b1d      	ldr	r3, [pc, #116]	; (8001afc <xTaskResumeAll+0x1f8>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d010      	beq.n	8001ab4 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001a92:	f000 f859 	bl	8001b48 <xTaskIncrementTick>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d002      	beq.n	8001aa2 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8001a9c:	4b16      	ldr	r3, [pc, #88]	; (8001af8 <xTaskResumeAll+0x1f4>)
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1f1      	bne.n	8001a92 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8001aae:	4b13      	ldr	r3, [pc, #76]	; (8001afc <xTaskResumeAll+0x1f8>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001ab4:	4b10      	ldr	r3, [pc, #64]	; (8001af8 <xTaskResumeAll+0x1f4>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d009      	beq.n	8001ad0 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8001abc:	2301      	movs	r3, #1
 8001abe:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001ac0:	4b0f      	ldr	r3, [pc, #60]	; (8001b00 <xTaskResumeAll+0x1fc>)
 8001ac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	f3bf 8f4f 	dsb	sy
 8001acc:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001ad0:	f001 fb08 	bl	80030e4 <vPortExitCritical>

    return xAlreadyYielded;
 8001ad4:	69bb      	ldr	r3, [r7, #24]
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3720      	adds	r7, #32
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	200001fc 	.word	0x200001fc
 8001ae4:	200001d4 	.word	0x200001d4
 8001ae8:	20000194 	.word	0x20000194
 8001aec:	200001dc 	.word	0x200001dc
 8001af0:	20000100 	.word	0x20000100
 8001af4:	200000fc 	.word	0x200000fc
 8001af8:	200001e8 	.word	0x200001e8
 8001afc:	200001e4 	.word	0x200001e4
 8001b00:	e000ed04 	.word	0xe000ed04

08001b04 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8001b0a:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <xTaskGetTickCount+0x1c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8001b10:	687b      	ldr	r3, [r7, #4]
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	200001d8 	.word	0x200001d8

08001b24 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001b2a:	f001 fb97 	bl	800325c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8001b32:	4b04      	ldr	r3, [pc, #16]	; (8001b44 <xTaskGetTickCountFromISR+0x20>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8001b38:	683b      	ldr	r3, [r7, #0]
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	200001d8 	.word	0x200001d8

08001b48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b08a      	sub	sp, #40	; 0x28
 8001b4c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001b52:	4b7f      	ldr	r3, [pc, #508]	; (8001d50 <xTaskIncrementTick+0x208>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f040 80f0 	bne.w	8001d3c <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001b5c:	4b7d      	ldr	r3, [pc, #500]	; (8001d54 <xTaskIncrementTick+0x20c>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	3301      	adds	r3, #1
 8001b62:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001b64:	4a7b      	ldr	r2, [pc, #492]	; (8001d54 <xTaskIncrementTick+0x20c>)
 8001b66:	6a3b      	ldr	r3, [r7, #32]
 8001b68:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001b6a:	6a3b      	ldr	r3, [r7, #32]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d120      	bne.n	8001bb2 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8001b70:	4b79      	ldr	r3, [pc, #484]	; (8001d58 <xTaskIncrementTick+0x210>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d00a      	beq.n	8001b90 <xTaskIncrementTick+0x48>
        __asm volatile
 8001b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b7e:	f383 8811 	msr	BASEPRI, r3
 8001b82:	f3bf 8f6f 	isb	sy
 8001b86:	f3bf 8f4f 	dsb	sy
 8001b8a:	607b      	str	r3, [r7, #4]
    }
 8001b8c:	bf00      	nop
 8001b8e:	e7fe      	b.n	8001b8e <xTaskIncrementTick+0x46>
 8001b90:	4b71      	ldr	r3, [pc, #452]	; (8001d58 <xTaskIncrementTick+0x210>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	61fb      	str	r3, [r7, #28]
 8001b96:	4b71      	ldr	r3, [pc, #452]	; (8001d5c <xTaskIncrementTick+0x214>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a6f      	ldr	r2, [pc, #444]	; (8001d58 <xTaskIncrementTick+0x210>)
 8001b9c:	6013      	str	r3, [r2, #0]
 8001b9e:	4a6f      	ldr	r2, [pc, #444]	; (8001d5c <xTaskIncrementTick+0x214>)
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	6013      	str	r3, [r2, #0]
 8001ba4:	4b6e      	ldr	r3, [pc, #440]	; (8001d60 <xTaskIncrementTick+0x218>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	4a6d      	ldr	r2, [pc, #436]	; (8001d60 <xTaskIncrementTick+0x218>)
 8001bac:	6013      	str	r3, [r2, #0]
 8001bae:	f000 fbb1 	bl	8002314 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001bb2:	4b6c      	ldr	r3, [pc, #432]	; (8001d64 <xTaskIncrementTick+0x21c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	6a3a      	ldr	r2, [r7, #32]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	f0c0 80aa 	bcc.w	8001d12 <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001bbe:	4b66      	ldr	r3, [pc, #408]	; (8001d58 <xTaskIncrementTick+0x210>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d104      	bne.n	8001bd2 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001bc8:	4b66      	ldr	r3, [pc, #408]	; (8001d64 <xTaskIncrementTick+0x21c>)
 8001bca:	f04f 32ff 	mov.w	r2, #4294967295
 8001bce:	601a      	str	r2, [r3, #0]
                    break;
 8001bd0:	e09f      	b.n	8001d12 <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001bd2:	4b61      	ldr	r3, [pc, #388]	; (8001d58 <xTaskIncrementTick+0x210>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8001be2:	6a3a      	ldr	r2, [r7, #32]
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d203      	bcs.n	8001bf2 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001bea:	4a5e      	ldr	r2, [pc, #376]	; (8001d64 <xTaskIncrementTick+0x21c>)
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8001bf0:	e08f      	b.n	8001d12 <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	695b      	ldr	r3, [r3, #20]
 8001bf6:	613b      	str	r3, [r7, #16]
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	68d2      	ldr	r2, [r2, #12]
 8001c00:	609a      	str	r2, [r3, #8]
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	6892      	ldr	r2, [r2, #8]
 8001c0a:	605a      	str	r2, [r3, #4]
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	685a      	ldr	r2, [r3, #4]
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	3304      	adds	r3, #4
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d103      	bne.n	8001c20 <xTaskIncrementTick+0xd8>
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	68da      	ldr	r2, [r3, #12]
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	605a      	str	r2, [r3, #4]
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	2200      	movs	r2, #0
 8001c24:	615a      	str	r2, [r3, #20]
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	1e5a      	subs	r2, r3, #1
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d01e      	beq.n	8001c76 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c3c:	60fb      	str	r3, [r7, #12]
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	6a12      	ldr	r2, [r2, #32]
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	6a1b      	ldr	r3, [r3, #32]
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	69d2      	ldr	r2, [r2, #28]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	685a      	ldr	r2, [r3, #4]
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	3318      	adds	r3, #24
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d103      	bne.n	8001c66 <xTaskIncrementTick+0x11e>
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	6a1a      	ldr	r2, [r3, #32]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	605a      	str	r2, [r3, #4]
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	629a      	str	r2, [r3, #40]	; 0x28
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	1e5a      	subs	r2, r3, #1
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f003 fc51 	bl	8005520 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c82:	2201      	movs	r2, #1
 8001c84:	409a      	lsls	r2, r3
 8001c86:	4b38      	ldr	r3, [pc, #224]	; (8001d68 <xTaskIncrementTick+0x220>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	4a36      	ldr	r2, [pc, #216]	; (8001d68 <xTaskIncrementTick+0x220>)
 8001c8e:	6013      	str	r3, [r2, #0]
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c94:	4935      	ldr	r1, [pc, #212]	; (8001d6c <xTaskIncrementTick+0x224>)
 8001c96:	4613      	mov	r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	4413      	add	r3, r2
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	440b      	add	r3, r1
 8001ca0:	3304      	adds	r3, #4
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	60bb      	str	r3, [r7, #8]
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	68ba      	ldr	r2, [r7, #8]
 8001caa:	609a      	str	r2, [r3, #8]
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	689a      	ldr	r2, [r3, #8]
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	60da      	str	r2, [r3, #12]
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	3204      	adds	r2, #4
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	1d1a      	adds	r2, r3, #4
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	609a      	str	r2, [r3, #8]
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cca:	4613      	mov	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4413      	add	r3, r2
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	4a26      	ldr	r2, [pc, #152]	; (8001d6c <xTaskIncrementTick+0x224>)
 8001cd4:	441a      	add	r2, r3
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	615a      	str	r2, [r3, #20]
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cde:	4923      	ldr	r1, [pc, #140]	; (8001d6c <xTaskIncrementTick+0x224>)
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4413      	add	r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	440b      	add	r3, r1
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	1c59      	adds	r1, r3, #1
 8001cee:	481f      	ldr	r0, [pc, #124]	; (8001d6c <xTaskIncrementTick+0x224>)
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	4413      	add	r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4403      	add	r3, r0
 8001cfa:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d00:	4b1b      	ldr	r3, [pc, #108]	; (8001d70 <xTaskIncrementTick+0x228>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d06:	429a      	cmp	r2, r3
 8001d08:	f67f af59 	bls.w	8001bbe <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001d10:	e755      	b.n	8001bbe <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001d12:	4b17      	ldr	r3, [pc, #92]	; (8001d70 <xTaskIncrementTick+0x228>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d18:	4914      	ldr	r1, [pc, #80]	; (8001d6c <xTaskIncrementTick+0x224>)
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	4413      	add	r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	440b      	add	r3, r1
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d901      	bls.n	8001d2e <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8001d2e:	4b11      	ldr	r3, [pc, #68]	; (8001d74 <xTaskIncrementTick+0x22c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d007      	beq.n	8001d46 <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 8001d36:	2301      	movs	r3, #1
 8001d38:	627b      	str	r3, [r7, #36]	; 0x24
 8001d3a:	e004      	b.n	8001d46 <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001d3c:	4b0e      	ldr	r3, [pc, #56]	; (8001d78 <xTaskIncrementTick+0x230>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	3301      	adds	r3, #1
 8001d42:	4a0d      	ldr	r2, [pc, #52]	; (8001d78 <xTaskIncrementTick+0x230>)
 8001d44:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3728      	adds	r7, #40	; 0x28
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	200001fc 	.word	0x200001fc
 8001d54:	200001d8 	.word	0x200001d8
 8001d58:	2000018c 	.word	0x2000018c
 8001d5c:	20000190 	.word	0x20000190
 8001d60:	200001ec 	.word	0x200001ec
 8001d64:	200001f4 	.word	0x200001f4
 8001d68:	200001dc 	.word	0x200001dc
 8001d6c:	20000100 	.word	0x20000100
 8001d70:	200000fc 	.word	0x200000fc
 8001d74:	200001e8 	.word	0x200001e8
 8001d78:	200001e4 	.word	0x200001e4

08001d7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001d82:	4b2d      	ldr	r3, [pc, #180]	; (8001e38 <vTaskSwitchContext+0xbc>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001d8a:	4b2c      	ldr	r3, [pc, #176]	; (8001e3c <vTaskSwitchContext+0xc0>)
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8001d90:	e04d      	b.n	8001e2e <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8001d92:	4b2a      	ldr	r3, [pc, #168]	; (8001e3c <vTaskSwitchContext+0xc0>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001d98:	4b29      	ldr	r3, [pc, #164]	; (8001e40 <vTaskSwitchContext+0xc4>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	fab3 f383 	clz	r3, r3
 8001da4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8001da6:	7afb      	ldrb	r3, [r7, #11]
 8001da8:	f1c3 031f 	rsb	r3, r3, #31
 8001dac:	617b      	str	r3, [r7, #20]
 8001dae:	4925      	ldr	r1, [pc, #148]	; (8001e44 <vTaskSwitchContext+0xc8>)
 8001db0:	697a      	ldr	r2, [r7, #20]
 8001db2:	4613      	mov	r3, r2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	4413      	add	r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	440b      	add	r3, r1
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d10a      	bne.n	8001dd8 <vTaskSwitchContext+0x5c>
        __asm volatile
 8001dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dc6:	f383 8811 	msr	BASEPRI, r3
 8001dca:	f3bf 8f6f 	isb	sy
 8001dce:	f3bf 8f4f 	dsb	sy
 8001dd2:	607b      	str	r3, [r7, #4]
    }
 8001dd4:	bf00      	nop
 8001dd6:	e7fe      	b.n	8001dd6 <vTaskSwitchContext+0x5a>
 8001dd8:	697a      	ldr	r2, [r7, #20]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	4413      	add	r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	4a18      	ldr	r2, [pc, #96]	; (8001e44 <vTaskSwitchContext+0xc8>)
 8001de4:	4413      	add	r3, r2
 8001de6:	613b      	str	r3, [r7, #16]
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	685a      	ldr	r2, [r3, #4]
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	685a      	ldr	r2, [r3, #4]
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	3308      	adds	r3, #8
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d104      	bne.n	8001e08 <vTaskSwitchContext+0x8c>
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	685a      	ldr	r2, [r3, #4]
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	605a      	str	r2, [r3, #4]
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	4a0e      	ldr	r2, [pc, #56]	; (8001e48 <vTaskSwitchContext+0xcc>)
 8001e10:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8001e12:	4b0d      	ldr	r3, [pc, #52]	; (8001e48 <vTaskSwitchContext+0xcc>)
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	4b0d      	ldr	r3, [pc, #52]	; (8001e4c <vTaskSwitchContext+0xd0>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d102      	bne.n	8001e24 <vTaskSwitchContext+0xa8>
 8001e1e:	f003 fadf 	bl	80053e0 <SEGGER_SYSVIEW_OnIdle>
}
 8001e22:	e004      	b.n	8001e2e <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8001e24:	4b08      	ldr	r3, [pc, #32]	; (8001e48 <vTaskSwitchContext+0xcc>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f003 fb37 	bl	800549c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8001e2e:	bf00      	nop
 8001e30:	3718      	adds	r7, #24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	200001fc 	.word	0x200001fc
 8001e3c:	200001e8 	.word	0x200001e8
 8001e40:	200001dc 	.word	0x200001dc
 8001e44:	20000100 	.word	0x20000100
 8001e48:	200000fc 	.word	0x200000fc
 8001e4c:	200001f8 	.word	0x200001f8

08001e50 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d10a      	bne.n	8001e76 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8001e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e64:	f383 8811 	msr	BASEPRI, r3
 8001e68:	f3bf 8f6f 	isb	sy
 8001e6c:	f3bf 8f4f 	dsb	sy
 8001e70:	60fb      	str	r3, [r7, #12]
    }
 8001e72:	bf00      	nop
 8001e74:	e7fe      	b.n	8001e74 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001e76:	4b07      	ldr	r3, [pc, #28]	; (8001e94 <vTaskPlaceOnEventList+0x44>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	3318      	adds	r3, #24
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f7fe ff7c 	bl	8000d7c <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001e84:	2101      	movs	r1, #1
 8001e86:	6838      	ldr	r0, [r7, #0]
 8001e88:	f000 fc3a 	bl	8002700 <prvAddCurrentTaskToDelayedList>
}
 8001e8c:	bf00      	nop
 8001e8e:	3710      	adds	r7, #16
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	200000fc 	.word	0x200000fc

08001e98 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d10a      	bne.n	8001ec0 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8001eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001eae:	f383 8811 	msr	BASEPRI, r3
 8001eb2:	f3bf 8f6f 	isb	sy
 8001eb6:	f3bf 8f4f 	dsb	sy
 8001eba:	613b      	str	r3, [r7, #16]
    }
 8001ebc:	bf00      	nop
 8001ebe:	e7fe      	b.n	8001ebe <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	617b      	str	r3, [r7, #20]
 8001ec6:	4b17      	ldr	r3, [pc, #92]	; (8001f24 <vTaskPlaceOnEventListRestricted+0x8c>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	697a      	ldr	r2, [r7, #20]
 8001ecc:	61da      	str	r2, [r3, #28]
 8001ece:	4b15      	ldr	r3, [pc, #84]	; (8001f24 <vTaskPlaceOnEventListRestricted+0x8c>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	6892      	ldr	r2, [r2, #8]
 8001ed6:	621a      	str	r2, [r3, #32]
 8001ed8:	4b12      	ldr	r3, [pc, #72]	; (8001f24 <vTaskPlaceOnEventListRestricted+0x8c>)
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	3218      	adds	r2, #24
 8001ee2:	605a      	str	r2, [r3, #4]
 8001ee4:	4b0f      	ldr	r3, [pc, #60]	; (8001f24 <vTaskPlaceOnEventListRestricted+0x8c>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f103 0218 	add.w	r2, r3, #24
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	609a      	str	r2, [r3, #8]
 8001ef0:	4b0c      	ldr	r3, [pc, #48]	; (8001f24 <vTaskPlaceOnEventListRestricted+0x8c>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	629a      	str	r2, [r3, #40]	; 0x28
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	1c5a      	adds	r2, r3, #1
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d002      	beq.n	8001f0e <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8001f08:	f04f 33ff 	mov.w	r3, #4294967295
 8001f0c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8001f0e:	2024      	movs	r0, #36	; 0x24
 8001f10:	f002 fd66 	bl	80049e0 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001f14:	6879      	ldr	r1, [r7, #4]
 8001f16:	68b8      	ldr	r0, [r7, #8]
 8001f18:	f000 fbf2 	bl	8002700 <prvAddCurrentTaskToDelayedList>
    }
 8001f1c:	bf00      	nop
 8001f1e:	3718      	adds	r7, #24
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	200000fc 	.word	0x200000fc

08001f28 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b08a      	sub	sp, #40	; 0x28
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8001f38:	6a3b      	ldr	r3, [r7, #32]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d10a      	bne.n	8001f54 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8001f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f42:	f383 8811 	msr	BASEPRI, r3
 8001f46:	f3bf 8f6f 	isb	sy
 8001f4a:	f3bf 8f4f 	dsb	sy
 8001f4e:	60fb      	str	r3, [r7, #12]
    }
 8001f50:	bf00      	nop
 8001f52:	e7fe      	b.n	8001f52 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8001f54:	6a3b      	ldr	r3, [r7, #32]
 8001f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f58:	61fb      	str	r3, [r7, #28]
 8001f5a:	6a3b      	ldr	r3, [r7, #32]
 8001f5c:	69db      	ldr	r3, [r3, #28]
 8001f5e:	6a3a      	ldr	r2, [r7, #32]
 8001f60:	6a12      	ldr	r2, [r2, #32]
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	6a3b      	ldr	r3, [r7, #32]
 8001f66:	6a1b      	ldr	r3, [r3, #32]
 8001f68:	6a3a      	ldr	r2, [r7, #32]
 8001f6a:	69d2      	ldr	r2, [r2, #28]
 8001f6c:	605a      	str	r2, [r3, #4]
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	685a      	ldr	r2, [r3, #4]
 8001f72:	6a3b      	ldr	r3, [r7, #32]
 8001f74:	3318      	adds	r3, #24
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d103      	bne.n	8001f82 <xTaskRemoveFromEventList+0x5a>
 8001f7a:	6a3b      	ldr	r3, [r7, #32]
 8001f7c:	6a1a      	ldr	r2, [r3, #32]
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	605a      	str	r2, [r3, #4]
 8001f82:	6a3b      	ldr	r3, [r7, #32]
 8001f84:	2200      	movs	r2, #0
 8001f86:	629a      	str	r2, [r3, #40]	; 0x28
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	1e5a      	subs	r2, r3, #1
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001f92:	4b4b      	ldr	r3, [pc, #300]	; (80020c0 <xTaskRemoveFromEventList+0x198>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d162      	bne.n	8002060 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8001f9a:	6a3b      	ldr	r3, [r7, #32]
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	617b      	str	r3, [r7, #20]
 8001fa0:	6a3b      	ldr	r3, [r7, #32]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	6a3a      	ldr	r2, [r7, #32]
 8001fa6:	68d2      	ldr	r2, [r2, #12]
 8001fa8:	609a      	str	r2, [r3, #8]
 8001faa:	6a3b      	ldr	r3, [r7, #32]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	6a3a      	ldr	r2, [r7, #32]
 8001fb0:	6892      	ldr	r2, [r2, #8]
 8001fb2:	605a      	str	r2, [r3, #4]
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	685a      	ldr	r2, [r3, #4]
 8001fb8:	6a3b      	ldr	r3, [r7, #32]
 8001fba:	3304      	adds	r3, #4
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d103      	bne.n	8001fc8 <xTaskRemoveFromEventList+0xa0>
 8001fc0:	6a3b      	ldr	r3, [r7, #32]
 8001fc2:	68da      	ldr	r2, [r3, #12]
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	605a      	str	r2, [r3, #4]
 8001fc8:	6a3b      	ldr	r3, [r7, #32]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	615a      	str	r2, [r3, #20]
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	1e5a      	subs	r2, r3, #1
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001fd8:	6a3b      	ldr	r3, [r7, #32]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f003 faa0 	bl	8005520 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001fe0:	6a3b      	ldr	r3, [r7, #32]
 8001fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	409a      	lsls	r2, r3
 8001fe8:	4b36      	ldr	r3, [pc, #216]	; (80020c4 <xTaskRemoveFromEventList+0x19c>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	4a35      	ldr	r2, [pc, #212]	; (80020c4 <xTaskRemoveFromEventList+0x19c>)
 8001ff0:	6013      	str	r3, [r2, #0]
 8001ff2:	6a3b      	ldr	r3, [r7, #32]
 8001ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ff6:	4934      	ldr	r1, [pc, #208]	; (80020c8 <xTaskRemoveFromEventList+0x1a0>)
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	4413      	add	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	440b      	add	r3, r1
 8002002:	3304      	adds	r3, #4
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	613b      	str	r3, [r7, #16]
 8002008:	6a3b      	ldr	r3, [r7, #32]
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	609a      	str	r2, [r3, #8]
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	689a      	ldr	r2, [r3, #8]
 8002012:	6a3b      	ldr	r3, [r7, #32]
 8002014:	60da      	str	r2, [r3, #12]
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	6a3a      	ldr	r2, [r7, #32]
 800201c:	3204      	adds	r2, #4
 800201e:	605a      	str	r2, [r3, #4]
 8002020:	6a3b      	ldr	r3, [r7, #32]
 8002022:	1d1a      	adds	r2, r3, #4
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	609a      	str	r2, [r3, #8]
 8002028:	6a3b      	ldr	r3, [r7, #32]
 800202a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800202c:	4613      	mov	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4413      	add	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	4a24      	ldr	r2, [pc, #144]	; (80020c8 <xTaskRemoveFromEventList+0x1a0>)
 8002036:	441a      	add	r2, r3
 8002038:	6a3b      	ldr	r3, [r7, #32]
 800203a:	615a      	str	r2, [r3, #20]
 800203c:	6a3b      	ldr	r3, [r7, #32]
 800203e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002040:	4921      	ldr	r1, [pc, #132]	; (80020c8 <xTaskRemoveFromEventList+0x1a0>)
 8002042:	4613      	mov	r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	4413      	add	r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	440b      	add	r3, r1
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	1c59      	adds	r1, r3, #1
 8002050:	481d      	ldr	r0, [pc, #116]	; (80020c8 <xTaskRemoveFromEventList+0x1a0>)
 8002052:	4613      	mov	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4413      	add	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4403      	add	r3, r0
 800205c:	6019      	str	r1, [r3, #0]
 800205e:	e01b      	b.n	8002098 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002060:	4b1a      	ldr	r3, [pc, #104]	; (80020cc <xTaskRemoveFromEventList+0x1a4>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	61bb      	str	r3, [r7, #24]
 8002066:	6a3b      	ldr	r3, [r7, #32]
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	61da      	str	r2, [r3, #28]
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	689a      	ldr	r2, [r3, #8]
 8002070:	6a3b      	ldr	r3, [r7, #32]
 8002072:	621a      	str	r2, [r3, #32]
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	6a3a      	ldr	r2, [r7, #32]
 800207a:	3218      	adds	r2, #24
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	6a3b      	ldr	r3, [r7, #32]
 8002080:	f103 0218 	add.w	r2, r3, #24
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	609a      	str	r2, [r3, #8]
 8002088:	6a3b      	ldr	r3, [r7, #32]
 800208a:	4a10      	ldr	r2, [pc, #64]	; (80020cc <xTaskRemoveFromEventList+0x1a4>)
 800208c:	629a      	str	r2, [r3, #40]	; 0x28
 800208e:	4b0f      	ldr	r3, [pc, #60]	; (80020cc <xTaskRemoveFromEventList+0x1a4>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	3301      	adds	r3, #1
 8002094:	4a0d      	ldr	r2, [pc, #52]	; (80020cc <xTaskRemoveFromEventList+0x1a4>)
 8002096:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002098:	6a3b      	ldr	r3, [r7, #32]
 800209a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800209c:	4b0c      	ldr	r3, [pc, #48]	; (80020d0 <xTaskRemoveFromEventList+0x1a8>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d905      	bls.n	80020b2 <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80020a6:	2301      	movs	r3, #1
 80020a8:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80020aa:	4b0a      	ldr	r3, [pc, #40]	; (80020d4 <xTaskRemoveFromEventList+0x1ac>)
 80020ac:	2201      	movs	r2, #1
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	e001      	b.n	80020b6 <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 80020b2:	2300      	movs	r3, #0
 80020b4:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80020b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3728      	adds	r7, #40	; 0x28
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	200001fc 	.word	0x200001fc
 80020c4:	200001dc 	.word	0x200001dc
 80020c8:	20000100 	.word	0x20000100
 80020cc:	20000194 	.word	0x20000194
 80020d0:	200000fc 	.word	0x200000fc
 80020d4:	200001e8 	.word	0x200001e8

080020d8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80020e0:	4b06      	ldr	r3, [pc, #24]	; (80020fc <vTaskInternalSetTimeOutState+0x24>)
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80020e8:	4b05      	ldr	r3, [pc, #20]	; (8002100 <vTaskInternalSetTimeOutState+0x28>)
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	605a      	str	r2, [r3, #4]
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	200001ec 	.word	0x200001ec
 8002100:	200001d8 	.word	0x200001d8

08002104 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b088      	sub	sp, #32
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d10a      	bne.n	800212a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8002114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002118:	f383 8811 	msr	BASEPRI, r3
 800211c:	f3bf 8f6f 	isb	sy
 8002120:	f3bf 8f4f 	dsb	sy
 8002124:	613b      	str	r3, [r7, #16]
    }
 8002126:	bf00      	nop
 8002128:	e7fe      	b.n	8002128 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d10a      	bne.n	8002146 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8002130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002134:	f383 8811 	msr	BASEPRI, r3
 8002138:	f3bf 8f6f 	isb	sy
 800213c:	f3bf 8f4f 	dsb	sy
 8002140:	60fb      	str	r3, [r7, #12]
    }
 8002142:	bf00      	nop
 8002144:	e7fe      	b.n	8002144 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8002146:	f000 ff9d 	bl	8003084 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800214a:	4b1f      	ldr	r3, [pc, #124]	; (80021c8 <xTaskCheckForTimeOut+0xc4>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002162:	d102      	bne.n	800216a <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8002164:	2300      	movs	r3, #0
 8002166:	61fb      	str	r3, [r7, #28]
 8002168:	e026      	b.n	80021b8 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	4b17      	ldr	r3, [pc, #92]	; (80021cc <xTaskCheckForTimeOut+0xc8>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	429a      	cmp	r2, r3
 8002174:	d00a      	beq.n	800218c <xTaskCheckForTimeOut+0x88>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	429a      	cmp	r2, r3
 800217e:	d305      	bcc.n	800218c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002180:	2301      	movs	r3, #1
 8002182:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	e015      	b.n	80021b8 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	697a      	ldr	r2, [r7, #20]
 8002192:	429a      	cmp	r2, r3
 8002194:	d20b      	bcs.n	80021ae <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	1ad2      	subs	r2, r2, r3
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f7ff ff98 	bl	80020d8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80021a8:	2300      	movs	r3, #0
 80021aa:	61fb      	str	r3, [r7, #28]
 80021ac:	e004      	b.n	80021b8 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80021b4:	2301      	movs	r3, #1
 80021b6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80021b8:	f000 ff94 	bl	80030e4 <vPortExitCritical>

    return xReturn;
 80021bc:	69fb      	ldr	r3, [r7, #28]
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3720      	adds	r7, #32
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	200001d8 	.word	0x200001d8
 80021cc:	200001ec 	.word	0x200001ec

080021d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80021d4:	4b03      	ldr	r3, [pc, #12]	; (80021e4 <vTaskMissedYield+0x14>)
 80021d6:	2201      	movs	r2, #1
 80021d8:	601a      	str	r2, [r3, #0]
}
 80021da:	bf00      	nop
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	200001e8 	.word	0x200001e8

080021e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80021f0:	f000 f852 	bl	8002298 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80021f4:	4b06      	ldr	r3, [pc, #24]	; (8002210 <prvIdleTask+0x28>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d9f9      	bls.n	80021f0 <prvIdleTask+0x8>
            {
                taskYIELD();
 80021fc:	4b05      	ldr	r3, [pc, #20]	; (8002214 <prvIdleTask+0x2c>)
 80021fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	f3bf 8f4f 	dsb	sy
 8002208:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800220c:	e7f0      	b.n	80021f0 <prvIdleTask+0x8>
 800220e:	bf00      	nop
 8002210:	20000100 	.word	0x20000100
 8002214:	e000ed04 	.word	0xe000ed04

08002218 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800221e:	2300      	movs	r3, #0
 8002220:	607b      	str	r3, [r7, #4]
 8002222:	e00c      	b.n	800223e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	4613      	mov	r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4413      	add	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	4a12      	ldr	r2, [pc, #72]	; (8002278 <prvInitialiseTaskLists+0x60>)
 8002230:	4413      	add	r3, r2
 8002232:	4618      	mov	r0, r3
 8002234:	f7fe fd75 	bl	8000d22 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3301      	adds	r3, #1
 800223c:	607b      	str	r3, [r7, #4]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2b04      	cmp	r3, #4
 8002242:	d9ef      	bls.n	8002224 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002244:	480d      	ldr	r0, [pc, #52]	; (800227c <prvInitialiseTaskLists+0x64>)
 8002246:	f7fe fd6c 	bl	8000d22 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800224a:	480d      	ldr	r0, [pc, #52]	; (8002280 <prvInitialiseTaskLists+0x68>)
 800224c:	f7fe fd69 	bl	8000d22 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002250:	480c      	ldr	r0, [pc, #48]	; (8002284 <prvInitialiseTaskLists+0x6c>)
 8002252:	f7fe fd66 	bl	8000d22 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8002256:	480c      	ldr	r0, [pc, #48]	; (8002288 <prvInitialiseTaskLists+0x70>)
 8002258:	f7fe fd63 	bl	8000d22 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800225c:	480b      	ldr	r0, [pc, #44]	; (800228c <prvInitialiseTaskLists+0x74>)
 800225e:	f7fe fd60 	bl	8000d22 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002262:	4b0b      	ldr	r3, [pc, #44]	; (8002290 <prvInitialiseTaskLists+0x78>)
 8002264:	4a05      	ldr	r2, [pc, #20]	; (800227c <prvInitialiseTaskLists+0x64>)
 8002266:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002268:	4b0a      	ldr	r3, [pc, #40]	; (8002294 <prvInitialiseTaskLists+0x7c>)
 800226a:	4a05      	ldr	r2, [pc, #20]	; (8002280 <prvInitialiseTaskLists+0x68>)
 800226c:	601a      	str	r2, [r3, #0]
}
 800226e:	bf00      	nop
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	20000100 	.word	0x20000100
 800227c:	20000164 	.word	0x20000164
 8002280:	20000178 	.word	0x20000178
 8002284:	20000194 	.word	0x20000194
 8002288:	200001a8 	.word	0x200001a8
 800228c:	200001c0 	.word	0x200001c0
 8002290:	2000018c 	.word	0x2000018c
 8002294:	20000190 	.word	0x20000190

08002298 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800229e:	e019      	b.n	80022d4 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80022a0:	f000 fef0 	bl	8003084 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80022a4:	4b10      	ldr	r3, [pc, #64]	; (80022e8 <prvCheckTasksWaitingTermination+0x50>)
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	3304      	adds	r3, #4
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7fe fd9c 	bl	8000dee <uxListRemove>
                --uxCurrentNumberOfTasks;
 80022b6:	4b0d      	ldr	r3, [pc, #52]	; (80022ec <prvCheckTasksWaitingTermination+0x54>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	3b01      	subs	r3, #1
 80022bc:	4a0b      	ldr	r2, [pc, #44]	; (80022ec <prvCheckTasksWaitingTermination+0x54>)
 80022be:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80022c0:	4b0b      	ldr	r3, [pc, #44]	; (80022f0 <prvCheckTasksWaitingTermination+0x58>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	3b01      	subs	r3, #1
 80022c6:	4a0a      	ldr	r2, [pc, #40]	; (80022f0 <prvCheckTasksWaitingTermination+0x58>)
 80022c8:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80022ca:	f000 ff0b 	bl	80030e4 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f000 f810 	bl	80022f4 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80022d4:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <prvCheckTasksWaitingTermination+0x58>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1e1      	bne.n	80022a0 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80022dc:	bf00      	nop
 80022de:	bf00      	nop
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	200001a8 	.word	0x200001a8
 80022ec:	200001d4 	.word	0x200001d4
 80022f0:	200001bc 	.word	0x200001bc

080022f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002300:	4618      	mov	r0, r3
 8002302:	f001 f8a5 	bl	8003450 <vPortFree>
            vPortFree( pxTCB );
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f001 f8a2 	bl	8003450 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800230c:	bf00      	nop
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002318:	4b0a      	ldr	r3, [pc, #40]	; (8002344 <prvResetNextTaskUnblockTime+0x30>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d104      	bne.n	800232c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002322:	4b09      	ldr	r3, [pc, #36]	; (8002348 <prvResetNextTaskUnblockTime+0x34>)
 8002324:	f04f 32ff 	mov.w	r2, #4294967295
 8002328:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800232a:	e005      	b.n	8002338 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800232c:	4b05      	ldr	r3, [pc, #20]	; (8002344 <prvResetNextTaskUnblockTime+0x30>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a04      	ldr	r2, [pc, #16]	; (8002348 <prvResetNextTaskUnblockTime+0x34>)
 8002336:	6013      	str	r3, [r2, #0]
}
 8002338:	bf00      	nop
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	2000018c 	.word	0x2000018c
 8002348:	200001f4 	.word	0x200001f4

0800234c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8002352:	4b0b      	ldr	r3, [pc, #44]	; (8002380 <xTaskGetSchedulerState+0x34>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d102      	bne.n	8002360 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800235a:	2301      	movs	r3, #1
 800235c:	607b      	str	r3, [r7, #4]
 800235e:	e008      	b.n	8002372 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002360:	4b08      	ldr	r3, [pc, #32]	; (8002384 <xTaskGetSchedulerState+0x38>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d102      	bne.n	800236e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8002368:	2302      	movs	r3, #2
 800236a:	607b      	str	r3, [r7, #4]
 800236c:	e001      	b.n	8002372 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800236e:	2300      	movs	r3, #0
 8002370:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8002372:	687b      	ldr	r3, [r7, #4]
    }
 8002374:	4618      	mov	r0, r3
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr
 8002380:	200001e0 	.word	0x200001e0
 8002384:	200001fc 	.word	0x200001fc

08002388 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8002388:	b580      	push	{r7, lr}
 800238a:	b088      	sub	sp, #32
 800238c:	af02      	add	r7, sp, #8
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
 8002394:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d00a      	beq.n	80023b2 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 800239c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023a0:	f383 8811 	msr	BASEPRI, r3
 80023a4:	f3bf 8f6f 	isb	sy
 80023a8:	f3bf 8f4f 	dsb	sy
 80023ac:	613b      	str	r3, [r7, #16]
    }
 80023ae:	bf00      	nop
 80023b0:	e7fe      	b.n	80023b0 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 80023b2:	f000 fe67 	bl	8003084 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80023b6:	4b36      	ldr	r3, [pc, #216]	; (8002490 <xTaskGenericNotifyWait+0x108>)
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	4413      	add	r3, r2
 80023be:	3354      	adds	r3, #84	; 0x54
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d022      	beq.n	800240e <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 80023c8:	4b31      	ldr	r3, [pc, #196]	; (8002490 <xTaskGenericNotifyWait+0x108>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68fa      	ldr	r2, [r7, #12]
 80023ce:	3214      	adds	r2, #20
 80023d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80023d4:	68ba      	ldr	r2, [r7, #8]
 80023d6:	43d2      	mvns	r2, r2
 80023d8:	4011      	ands	r1, r2
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	3214      	adds	r2, #20
 80023de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 80023e2:	4b2b      	ldr	r3, [pc, #172]	; (8002490 <xTaskGenericNotifyWait+0x108>)
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	4413      	add	r3, r2
 80023ea:	3354      	adds	r3, #84	; 0x54
 80023ec:	2201      	movs	r2, #1
 80023ee:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 80023f0:	6a3b      	ldr	r3, [r7, #32]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00b      	beq.n	800240e <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80023f6:	2101      	movs	r1, #1
 80023f8:	6a38      	ldr	r0, [r7, #32]
 80023fa:	f000 f981 	bl	8002700 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 80023fe:	4b25      	ldr	r3, [pc, #148]	; (8002494 <xTaskGenericNotifyWait+0x10c>)
 8002400:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002404:	601a      	str	r2, [r3, #0]
 8002406:	f3bf 8f4f 	dsb	sy
 800240a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800240e:	f000 fe69 	bl	80030e4 <vPortExitCritical>

        taskENTER_CRITICAL();
 8002412:	f000 fe37 	bl	8003084 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	6a3b      	ldr	r3, [r7, #32]
 800241a:	9300      	str	r3, [sp, #0]
 800241c:	4613      	mov	r3, r2
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	68b9      	ldr	r1, [r7, #8]
 8002422:	2040      	movs	r0, #64	; 0x40
 8002424:	f002 fc06 	bl	8004c34 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d007      	beq.n	800243e <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 800242e:	4b18      	ldr	r3, [pc, #96]	; (8002490 <xTaskGenericNotifyWait+0x108>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	3214      	adds	r2, #20
 8002436:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800243e:	4b14      	ldr	r3, [pc, #80]	; (8002490 <xTaskGenericNotifyWait+0x108>)
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	4413      	add	r3, r2
 8002446:	3354      	adds	r3, #84	; 0x54
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	b2db      	uxtb	r3, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d002      	beq.n	8002456 <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8002450:	2300      	movs	r3, #0
 8002452:	617b      	str	r3, [r7, #20]
 8002454:	e00e      	b.n	8002474 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8002456:	4b0e      	ldr	r3, [pc, #56]	; (8002490 <xTaskGenericNotifyWait+0x108>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	3214      	adds	r2, #20
 800245e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	43d2      	mvns	r2, r2
 8002466:	4011      	ands	r1, r2
 8002468:	68fa      	ldr	r2, [r7, #12]
 800246a:	3214      	adds	r2, #20
 800246c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8002470:	2301      	movs	r3, #1
 8002472:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8002474:	4b06      	ldr	r3, [pc, #24]	; (8002490 <xTaskGenericNotifyWait+0x108>)
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	4413      	add	r3, r2
 800247c:	3354      	adds	r3, #84	; 0x54
 800247e:	2200      	movs	r2, #0
 8002480:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8002482:	f000 fe2f 	bl	80030e4 <vPortExitCritical>

        return xReturn;
 8002486:	697b      	ldr	r3, [r7, #20]
    }
 8002488:	4618      	mov	r0, r3
 800248a:	3718      	adds	r7, #24
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	200000fc 	.word	0x200000fc
 8002494:	e000ed04 	.word	0xe000ed04

08002498 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8002498:	b580      	push	{r7, lr}
 800249a:	b090      	sub	sp, #64	; 0x40
 800249c:	af02      	add	r7, sp, #8
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
 80024a4:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 80024a6:	2301      	movs	r3, #1
 80024a8:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d00a      	beq.n	80024c6 <xTaskGenericNotify+0x2e>
        __asm volatile
 80024b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024b4:	f383 8811 	msr	BASEPRI, r3
 80024b8:	f3bf 8f6f 	isb	sy
 80024bc:	f3bf 8f4f 	dsb	sy
 80024c0:	623b      	str	r3, [r7, #32]
    }
 80024c2:	bf00      	nop
 80024c4:	e7fe      	b.n	80024c4 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d10a      	bne.n	80024e2 <xTaskGenericNotify+0x4a>
        __asm volatile
 80024cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024d0:	f383 8811 	msr	BASEPRI, r3
 80024d4:	f3bf 8f6f 	isb	sy
 80024d8:	f3bf 8f4f 	dsb	sy
 80024dc:	61fb      	str	r3, [r7, #28]
    }
 80024de:	bf00      	nop
 80024e0:	e7fe      	b.n	80024e0 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	633b      	str	r3, [r7, #48]	; 0x30

        taskENTER_CRITICAL();
 80024e6:	f000 fdcd 	bl	8003084 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 80024ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d006      	beq.n	80024fe <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80024f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f2:	68ba      	ldr	r2, [r7, #8]
 80024f4:	3214      	adds	r2, #20
 80024f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80024fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024fc:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80024fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	4413      	add	r3, r2
 8002504:	3354      	adds	r3, #84	; 0x54
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800250c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	4413      	add	r3, r2
 8002512:	3354      	adds	r3, #84	; 0x54
 8002514:	2202      	movs	r2, #2
 8002516:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8002518:	78fb      	ldrb	r3, [r7, #3]
 800251a:	2b04      	cmp	r3, #4
 800251c:	d83b      	bhi.n	8002596 <xTaskGenericNotify+0xfe>
 800251e:	a201      	add	r2, pc, #4	; (adr r2, 8002524 <xTaskGenericNotify+0x8c>)
 8002520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002524:	080025b5 	.word	0x080025b5
 8002528:	08002539 	.word	0x08002539
 800252c:	08002555 	.word	0x08002555
 8002530:	0800256d 	.word	0x0800256d
 8002534:	0800257b 	.word	0x0800257b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8002538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800253a:	68ba      	ldr	r2, [r7, #8]
 800253c:	3214      	adds	r2, #20
 800253e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	ea42 0103 	orr.w	r1, r2, r3
 8002548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800254a:	68ba      	ldr	r2, [r7, #8]
 800254c:	3214      	adds	r2, #20
 800254e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002552:	e032      	b.n	80025ba <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8002554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002556:	68ba      	ldr	r2, [r7, #8]
 8002558:	3214      	adds	r2, #20
 800255a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800255e:	1c59      	adds	r1, r3, #1
 8002560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002562:	68ba      	ldr	r2, [r7, #8]
 8002564:	3214      	adds	r2, #20
 8002566:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800256a:	e026      	b.n	80025ba <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800256c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800256e:	68ba      	ldr	r2, [r7, #8]
 8002570:	3214      	adds	r2, #20
 8002572:	6879      	ldr	r1, [r7, #4]
 8002574:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002578:	e01f      	b.n	80025ba <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800257a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800257e:	2b02      	cmp	r3, #2
 8002580:	d006      	beq.n	8002590 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8002582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002584:	68ba      	ldr	r2, [r7, #8]
 8002586:	3214      	adds	r2, #20
 8002588:	6879      	ldr	r1, [r7, #4]
 800258a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800258e:	e014      	b.n	80025ba <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8002590:	2300      	movs	r3, #0
 8002592:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
 8002594:	e011      	b.n	80025ba <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8002596:	4b55      	ldr	r3, [pc, #340]	; (80026ec <xTaskGenericNotify+0x254>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00c      	beq.n	80025b8 <xTaskGenericNotify+0x120>
        __asm volatile
 800259e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025a2:	f383 8811 	msr	BASEPRI, r3
 80025a6:	f3bf 8f6f 	isb	sy
 80025aa:	f3bf 8f4f 	dsb	sy
 80025ae:	61bb      	str	r3, [r7, #24]
    }
 80025b0:	bf00      	nop
 80025b2:	e7fe      	b.n	80025b2 <xTaskGenericNotify+0x11a>
                    break;
 80025b4:	bf00      	nop
 80025b6:	e000      	b.n	80025ba <xTaskGenericNotify+0x122>

                    break;
 80025b8:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 80025ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025bc:	4618      	mov	r0, r3
 80025be:	f003 f851 	bl	8005664 <SEGGER_SYSVIEW_ShrinkId>
 80025c2:	4601      	mov	r1, r0
 80025c4:	78fa      	ldrb	r2, [r7, #3]
 80025c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025c8:	9300      	str	r3, [sp, #0]
 80025ca:	4613      	mov	r3, r2
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	203e      	movs	r0, #62	; 0x3e
 80025d0:	f002 fb30 	bl	8004c34 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80025d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d17f      	bne.n	80026dc <xTaskGenericNotify+0x244>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80025dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025de:	695b      	ldr	r3, [r3, #20]
 80025e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80025e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025e8:	68d2      	ldr	r2, [r2, #12]
 80025ea:	609a      	str	r2, [r3, #8]
 80025ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025f2:	6892      	ldr	r2, [r2, #8]
 80025f4:	605a      	str	r2, [r3, #4]
 80025f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025fc:	3304      	adds	r3, #4
 80025fe:	429a      	cmp	r2, r3
 8002600:	d103      	bne.n	800260a <xTaskGenericNotify+0x172>
 8002602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002604:	68da      	ldr	r2, [r3, #12]
 8002606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002608:	605a      	str	r2, [r3, #4]
 800260a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800260c:	2200      	movs	r2, #0
 800260e:	615a      	str	r2, [r3, #20]
 8002610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	1e5a      	subs	r2, r3, #1
 8002616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002618:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 800261a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800261c:	4618      	mov	r0, r3
 800261e:	f002 ff7f 	bl	8005520 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002626:	2201      	movs	r2, #1
 8002628:	409a      	lsls	r2, r3
 800262a:	4b31      	ldr	r3, [pc, #196]	; (80026f0 <xTaskGenericNotify+0x258>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4313      	orrs	r3, r2
 8002630:	4a2f      	ldr	r2, [pc, #188]	; (80026f0 <xTaskGenericNotify+0x258>)
 8002632:	6013      	str	r3, [r2, #0]
 8002634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002638:	492e      	ldr	r1, [pc, #184]	; (80026f4 <xTaskGenericNotify+0x25c>)
 800263a:	4613      	mov	r3, r2
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	4413      	add	r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	440b      	add	r3, r1
 8002644:	3304      	adds	r3, #4
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	627b      	str	r3, [r7, #36]	; 0x24
 800264a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800264c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800264e:	609a      	str	r2, [r3, #8]
 8002650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002652:	689a      	ldr	r2, [r3, #8]
 8002654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002656:	60da      	str	r2, [r3, #12]
 8002658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800265e:	3204      	adds	r2, #4
 8002660:	605a      	str	r2, [r3, #4]
 8002662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002664:	1d1a      	adds	r2, r3, #4
 8002666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002668:	609a      	str	r2, [r3, #8]
 800266a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800266c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800266e:	4613      	mov	r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	4413      	add	r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	4a1f      	ldr	r2, [pc, #124]	; (80026f4 <xTaskGenericNotify+0x25c>)
 8002678:	441a      	add	r2, r3
 800267a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800267c:	615a      	str	r2, [r3, #20]
 800267e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002682:	491c      	ldr	r1, [pc, #112]	; (80026f4 <xTaskGenericNotify+0x25c>)
 8002684:	4613      	mov	r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	4413      	add	r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	440b      	add	r3, r1
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	1c59      	adds	r1, r3, #1
 8002692:	4818      	ldr	r0, [pc, #96]	; (80026f4 <xTaskGenericNotify+0x25c>)
 8002694:	4613      	mov	r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	4413      	add	r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	4403      	add	r3, r0
 800269e:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80026a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d00a      	beq.n	80026be <xTaskGenericNotify+0x226>
        __asm volatile
 80026a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ac:	f383 8811 	msr	BASEPRI, r3
 80026b0:	f3bf 8f6f 	isb	sy
 80026b4:	f3bf 8f4f 	dsb	sy
 80026b8:	617b      	str	r3, [r7, #20]
    }
 80026ba:	bf00      	nop
 80026bc:	e7fe      	b.n	80026bc <xTaskGenericNotify+0x224>
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime();
                }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80026be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026c2:	4b0d      	ldr	r3, [pc, #52]	; (80026f8 <xTaskGenericNotify+0x260>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d907      	bls.n	80026dc <xTaskGenericNotify+0x244>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 80026cc:	4b0b      	ldr	r3, [pc, #44]	; (80026fc <xTaskGenericNotify+0x264>)
 80026ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	f3bf 8f4f 	dsb	sy
 80026d8:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80026dc:	f000 fd02 	bl	80030e4 <vPortExitCritical>

        return xReturn;
 80026e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 80026e2:	4618      	mov	r0, r3
 80026e4:	3738      	adds	r7, #56	; 0x38
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	200001d8 	.word	0x200001d8
 80026f0:	200001dc 	.word	0x200001dc
 80026f4:	20000100 	.word	0x20000100
 80026f8:	200000fc 	.word	0x200000fc
 80026fc:	e000ed04 	.word	0xe000ed04

08002700 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800270a:	4b3f      	ldr	r3, [pc, #252]	; (8002808 <prvAddCurrentTaskToDelayedList+0x108>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002710:	4b3e      	ldr	r3, [pc, #248]	; (800280c <prvAddCurrentTaskToDelayedList+0x10c>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	3304      	adds	r3, #4
 8002716:	4618      	mov	r0, r3
 8002718:	f7fe fb69 	bl	8000dee <uxListRemove>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10b      	bne.n	800273a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002722:	4b3a      	ldr	r3, [pc, #232]	; (800280c <prvAddCurrentTaskToDelayedList+0x10c>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002728:	2201      	movs	r2, #1
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	43da      	mvns	r2, r3
 8002730:	4b37      	ldr	r3, [pc, #220]	; (8002810 <prvAddCurrentTaskToDelayedList+0x110>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4013      	ands	r3, r2
 8002736:	4a36      	ldr	r2, [pc, #216]	; (8002810 <prvAddCurrentTaskToDelayedList+0x110>)
 8002738:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002740:	d12a      	bne.n	8002798 <prvAddCurrentTaskToDelayedList+0x98>
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d027      	beq.n	8002798 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
        	traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8002748:	4b30      	ldr	r3, [pc, #192]	; (800280c <prvAddCurrentTaskToDelayedList+0x10c>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	211b      	movs	r1, #27
 800274e:	4618      	mov	r0, r3
 8002750:	f002 ff28 	bl	80055a4 <SEGGER_SYSVIEW_OnTaskStopReady>
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002754:	4b2f      	ldr	r3, [pc, #188]	; (8002814 <prvAddCurrentTaskToDelayedList+0x114>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	613b      	str	r3, [r7, #16]
 800275a:	4b2c      	ldr	r3, [pc, #176]	; (800280c <prvAddCurrentTaskToDelayedList+0x10c>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	609a      	str	r2, [r3, #8]
 8002762:	4b2a      	ldr	r3, [pc, #168]	; (800280c <prvAddCurrentTaskToDelayedList+0x10c>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	6892      	ldr	r2, [r2, #8]
 800276a:	60da      	str	r2, [r3, #12]
 800276c:	4b27      	ldr	r3, [pc, #156]	; (800280c <prvAddCurrentTaskToDelayedList+0x10c>)
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	3204      	adds	r2, #4
 8002776:	605a      	str	r2, [r3, #4]
 8002778:	4b24      	ldr	r3, [pc, #144]	; (800280c <prvAddCurrentTaskToDelayedList+0x10c>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	1d1a      	adds	r2, r3, #4
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	609a      	str	r2, [r3, #8]
 8002782:	4b22      	ldr	r3, [pc, #136]	; (800280c <prvAddCurrentTaskToDelayedList+0x10c>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a23      	ldr	r2, [pc, #140]	; (8002814 <prvAddCurrentTaskToDelayedList+0x114>)
 8002788:	615a      	str	r2, [r3, #20]
 800278a:	4b22      	ldr	r3, [pc, #136]	; (8002814 <prvAddCurrentTaskToDelayedList+0x114>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	3301      	adds	r3, #1
 8002790:	4a20      	ldr	r2, [pc, #128]	; (8002814 <prvAddCurrentTaskToDelayedList+0x114>)
 8002792:	6013      	str	r3, [r2, #0]
 8002794:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002796:	e032      	b.n	80027fe <prvAddCurrentTaskToDelayedList+0xfe>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4413      	add	r3, r2
 800279e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80027a0:	4b1a      	ldr	r3, [pc, #104]	; (800280c <prvAddCurrentTaskToDelayedList+0x10c>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80027a8:	68fa      	ldr	r2, [r7, #12]
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d20f      	bcs.n	80027d0 <prvAddCurrentTaskToDelayedList+0xd0>
            	traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80027b0:	4b16      	ldr	r3, [pc, #88]	; (800280c <prvAddCurrentTaskToDelayedList+0x10c>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2104      	movs	r1, #4
 80027b6:	4618      	mov	r0, r3
 80027b8:	f002 fef4 	bl	80055a4 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80027bc:	4b16      	ldr	r3, [pc, #88]	; (8002818 <prvAddCurrentTaskToDelayedList+0x118>)
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	4b12      	ldr	r3, [pc, #72]	; (800280c <prvAddCurrentTaskToDelayedList+0x10c>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	3304      	adds	r3, #4
 80027c6:	4619      	mov	r1, r3
 80027c8:	4610      	mov	r0, r2
 80027ca:	f7fe fad7 	bl	8000d7c <vListInsert>
}
 80027ce:	e016      	b.n	80027fe <prvAddCurrentTaskToDelayedList+0xfe>
            	traceMOVED_TASK_TO_DELAYED_LIST();
 80027d0:	4b0e      	ldr	r3, [pc, #56]	; (800280c <prvAddCurrentTaskToDelayedList+0x10c>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2104      	movs	r1, #4
 80027d6:	4618      	mov	r0, r3
 80027d8:	f002 fee4 	bl	80055a4 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80027dc:	4b0f      	ldr	r3, [pc, #60]	; (800281c <prvAddCurrentTaskToDelayedList+0x11c>)
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	4b0a      	ldr	r3, [pc, #40]	; (800280c <prvAddCurrentTaskToDelayedList+0x10c>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	3304      	adds	r3, #4
 80027e6:	4619      	mov	r1, r3
 80027e8:	4610      	mov	r0, r2
 80027ea:	f7fe fac7 	bl	8000d7c <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80027ee:	4b0c      	ldr	r3, [pc, #48]	; (8002820 <prvAddCurrentTaskToDelayedList+0x120>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d202      	bcs.n	80027fe <prvAddCurrentTaskToDelayedList+0xfe>
                    xNextTaskUnblockTime = xTimeToWake;
 80027f8:	4a09      	ldr	r2, [pc, #36]	; (8002820 <prvAddCurrentTaskToDelayedList+0x120>)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6013      	str	r3, [r2, #0]
}
 80027fe:	bf00      	nop
 8002800:	3718      	adds	r7, #24
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	200001d8 	.word	0x200001d8
 800280c:	200000fc 	.word	0x200000fc
 8002810:	200001dc 	.word	0x200001dc
 8002814:	200001c0 	.word	0x200001c0
 8002818:	20000190 	.word	0x20000190
 800281c:	2000018c 	.word	0x2000018c
 8002820:	200001f4 	.word	0x200001f4

08002824 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800282a:	2300      	movs	r3, #0
 800282c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800282e:	f000 fa47 	bl	8002cc0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8002832:	4b11      	ldr	r3, [pc, #68]	; (8002878 <xTimerCreateTimerTask+0x54>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00b      	beq.n	8002852 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 800283a:	4b10      	ldr	r3, [pc, #64]	; (800287c <xTimerCreateTimerTask+0x58>)
 800283c:	9301      	str	r3, [sp, #4]
 800283e:	2302      	movs	r3, #2
 8002840:	9300      	str	r3, [sp, #0]
 8002842:	2300      	movs	r3, #0
 8002844:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002848:	490d      	ldr	r1, [pc, #52]	; (8002880 <xTimerCreateTimerTask+0x5c>)
 800284a:	480e      	ldr	r0, [pc, #56]	; (8002884 <xTimerCreateTimerTask+0x60>)
 800284c:	f7fe fe2a 	bl	80014a4 <xTaskCreate>
 8002850:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d10a      	bne.n	800286e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8002858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800285c:	f383 8811 	msr	BASEPRI, r3
 8002860:	f3bf 8f6f 	isb	sy
 8002864:	f3bf 8f4f 	dsb	sy
 8002868:	603b      	str	r3, [r7, #0]
    }
 800286a:	bf00      	nop
 800286c:	e7fe      	b.n	800286c <xTimerCreateTimerTask+0x48>
        return xReturn;
 800286e:	687b      	ldr	r3, [r7, #4]
    }
 8002870:	4618      	mov	r0, r3
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	20000230 	.word	0x20000230
 800287c:	20000234 	.word	0x20000234
 8002880:	08007bc4 	.word	0x08007bc4
 8002884:	0800292d 	.word	0x0800292d

08002888 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002894:	e008      	b.n	80028a8 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	699b      	ldr	r3, [r3, #24]
 800289a:	68ba      	ldr	r2, [r7, #8]
 800289c:	4413      	add	r3, r2
 800289e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	699a      	ldr	r2, [r3, #24]
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	18d1      	adds	r1, r2, r3
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	f000 f8dd 	bl	8002a74 <prvInsertTimerInActiveList>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1ea      	bne.n	8002896 <prvReloadTimer+0xe>
        }
    }
 80028c0:	bf00      	nop
 80028c2:	bf00      	nop
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
	...

080028cc <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80028d6:	4b14      	ldr	r3, [pc, #80]	; (8002928 <prvProcessExpiredTimer+0x5c>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	3304      	adds	r3, #4
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7fe fa82 	bl	8000dee <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80028f0:	f003 0304 	and.w	r3, r3, #4
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d005      	beq.n	8002904 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	6879      	ldr	r1, [r7, #4]
 80028fc:	68f8      	ldr	r0, [r7, #12]
 80028fe:	f7ff ffc3 	bl	8002888 <prvReloadTimer>
 8002902:	e008      	b.n	8002916 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800290a:	f023 0301 	bic.w	r3, r3, #1
 800290e:	b2da      	uxtb	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6a1b      	ldr	r3, [r3, #32]
 800291a:	68f8      	ldr	r0, [r7, #12]
 800291c:	4798      	blx	r3
    }
 800291e:	bf00      	nop
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	20000228 	.word	0x20000228

0800292c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002934:	f107 0308 	add.w	r3, r7, #8
 8002938:	4618      	mov	r0, r3
 800293a:	f000 f857 	bl	80029ec <prvGetNextExpireTime>
 800293e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	4619      	mov	r1, r3
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f000 f803 	bl	8002950 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800294a:	f000 f8d5 	bl	8002af8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800294e:	e7f1      	b.n	8002934 <prvTimerTask+0x8>

08002950 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800295a:	f7fe ffc5 	bl	80018e8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800295e:	f107 0308 	add.w	r3, r7, #8
 8002962:	4618      	mov	r0, r3
 8002964:	f000 f866 	bl	8002a34 <prvSampleTimeNow>
 8002968:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d130      	bne.n	80029d2 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d10a      	bne.n	800298c <prvProcessTimerOrBlockTask+0x3c>
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	429a      	cmp	r2, r3
 800297c:	d806      	bhi.n	800298c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800297e:	f7fe ffc1 	bl	8001904 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002982:	68f9      	ldr	r1, [r7, #12]
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f7ff ffa1 	bl	80028cc <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800298a:	e024      	b.n	80029d6 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d008      	beq.n	80029a4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002992:	4b13      	ldr	r3, [pc, #76]	; (80029e0 <prvProcessTimerOrBlockTask+0x90>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d101      	bne.n	80029a0 <prvProcessTimerOrBlockTask+0x50>
 800299c:	2301      	movs	r3, #1
 800299e:	e000      	b.n	80029a2 <prvProcessTimerOrBlockTask+0x52>
 80029a0:	2300      	movs	r3, #0
 80029a2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80029a4:	4b0f      	ldr	r3, [pc, #60]	; (80029e4 <prvProcessTimerOrBlockTask+0x94>)
 80029a6:	6818      	ldr	r0, [r3, #0]
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	4619      	mov	r1, r3
 80029b2:	f7fe fd43 	bl	800143c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80029b6:	f7fe ffa5 	bl	8001904 <xTaskResumeAll>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d10a      	bne.n	80029d6 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80029c0:	4b09      	ldr	r3, [pc, #36]	; (80029e8 <prvProcessTimerOrBlockTask+0x98>)
 80029c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029c6:	601a      	str	r2, [r3, #0]
 80029c8:	f3bf 8f4f 	dsb	sy
 80029cc:	f3bf 8f6f 	isb	sy
    }
 80029d0:	e001      	b.n	80029d6 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80029d2:	f7fe ff97 	bl	8001904 <xTaskResumeAll>
    }
 80029d6:	bf00      	nop
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	2000022c 	.word	0x2000022c
 80029e4:	20000230 	.word	0x20000230
 80029e8:	e000ed04 	.word	0xe000ed04

080029ec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80029ec:	b480      	push	{r7}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80029f4:	4b0e      	ldr	r3, [pc, #56]	; (8002a30 <prvGetNextExpireTime+0x44>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <prvGetNextExpireTime+0x16>
 80029fe:	2201      	movs	r2, #1
 8002a00:	e000      	b.n	8002a04 <prvGetNextExpireTime+0x18>
 8002a02:	2200      	movs	r2, #0
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d105      	bne.n	8002a1c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002a10:	4b07      	ldr	r3, [pc, #28]	; (8002a30 <prvGetNextExpireTime+0x44>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	60fb      	str	r3, [r7, #12]
 8002a1a:	e001      	b.n	8002a20 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8002a20:	68fb      	ldr	r3, [r7, #12]
    }
 8002a22:	4618      	mov	r0, r3
 8002a24:	3714      	adds	r7, #20
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	20000228 	.word	0x20000228

08002a34 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8002a3c:	f7ff f862 	bl	8001b04 <xTaskGetTickCount>
 8002a40:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8002a42:	4b0b      	ldr	r3, [pc, #44]	; (8002a70 <prvSampleTimeNow+0x3c>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d205      	bcs.n	8002a58 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8002a4c:	f000 f912 	bl	8002c74 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	e002      	b.n	8002a5e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8002a5e:	4a04      	ldr	r2, [pc, #16]	; (8002a70 <prvSampleTimeNow+0x3c>)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8002a64:	68fb      	ldr	r3, [r7, #12]
    }
 8002a66:	4618      	mov	r0, r3
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	20000238 	.word	0x20000238

08002a74 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
 8002a80:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8002a82:	2300      	movs	r3, #0
 8002a84:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	68ba      	ldr	r2, [r7, #8]
 8002a8a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8002a92:	68ba      	ldr	r2, [r7, #8]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d812      	bhi.n	8002ac0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	1ad2      	subs	r2, r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d302      	bcc.n	8002aae <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	617b      	str	r3, [r7, #20]
 8002aac:	e01b      	b.n	8002ae6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002aae:	4b10      	ldr	r3, [pc, #64]	; (8002af0 <prvInsertTimerInActiveList+0x7c>)
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	3304      	adds	r3, #4
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	4610      	mov	r0, r2
 8002aba:	f7fe f95f 	bl	8000d7c <vListInsert>
 8002abe:	e012      	b.n	8002ae6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d206      	bcs.n	8002ad6 <prvInsertTimerInActiveList+0x62>
 8002ac8:	68ba      	ldr	r2, [r7, #8]
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d302      	bcc.n	8002ad6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	617b      	str	r3, [r7, #20]
 8002ad4:	e007      	b.n	8002ae6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002ad6:	4b07      	ldr	r3, [pc, #28]	; (8002af4 <prvInsertTimerInActiveList+0x80>)
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	3304      	adds	r3, #4
 8002ade:	4619      	mov	r1, r3
 8002ae0:	4610      	mov	r0, r2
 8002ae2:	f7fe f94b 	bl	8000d7c <vListInsert>
            }
        }

        return xProcessTimerNow;
 8002ae6:	697b      	ldr	r3, [r7, #20]
    }
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3718      	adds	r7, #24
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	2000022c 	.word	0x2000022c
 8002af4:	20000228 	.word	0x20000228

08002af8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b088      	sub	sp, #32
 8002afc:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002afe:	e0a6      	b.n	8002c4e <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	f2c0 80a2 	blt.w	8002c4c <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	695b      	ldr	r3, [r3, #20]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d004      	beq.n	8002b1e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	3304      	adds	r3, #4
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7fe f968 	bl	8000dee <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002b1e:	1d3b      	adds	r3, r7, #4
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7ff ff87 	bl	8002a34 <prvSampleTimeNow>
 8002b26:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	2b08      	cmp	r3, #8
 8002b2e:	f200 808e 	bhi.w	8002c4e <prvProcessReceivedCommands+0x156>
 8002b32:	a201      	add	r2, pc, #4	; (adr r2, 8002b38 <prvProcessReceivedCommands+0x40>)
 8002b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b38:	08002b5d 	.word	0x08002b5d
 8002b3c:	08002b5d 	.word	0x08002b5d
 8002b40:	08002bc5 	.word	0x08002bc5
 8002b44:	08002bd9 	.word	0x08002bd9
 8002b48:	08002c23 	.word	0x08002c23
 8002b4c:	08002b5d 	.word	0x08002b5d
 8002b50:	08002b5d 	.word	0x08002b5d
 8002b54:	08002bc5 	.word	0x08002bc5
 8002b58:	08002bd9 	.word	0x08002bd9
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002b62:	f043 0301 	orr.w	r3, r3, #1
 8002b66:	b2da      	uxtb	r2, r3
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	18d1      	adds	r1, r2, r3
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	69f8      	ldr	r0, [r7, #28]
 8002b7c:	f7ff ff7a 	bl	8002a74 <prvInsertTimerInActiveList>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d063      	beq.n	8002c4e <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002b8c:	f003 0304 	and.w	r3, r3, #4
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d009      	beq.n	8002ba8 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8002b94:	68fa      	ldr	r2, [r7, #12]
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	69f8      	ldr	r0, [r7, #28]
 8002ba2:	f7ff fe71 	bl	8002888 <prvReloadTimer>
 8002ba6:	e008      	b.n	8002bba <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002bae:	f023 0301 	bic.w	r3, r3, #1
 8002bb2:	b2da      	uxtb	r2, r3
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	69f8      	ldr	r0, [r7, #28]
 8002bc0:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8002bc2:	e044      	b.n	8002c4e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002bca:	f023 0301 	bic.w	r3, r3, #1
 8002bce:	b2da      	uxtb	r2, r3
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8002bd6:	e03a      	b.n	8002c4e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002bde:	f043 0301 	orr.w	r3, r3, #1
 8002be2:	b2da      	uxtb	r2, r3
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002bea:	68fa      	ldr	r2, [r7, #12]
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d10a      	bne.n	8002c0e <prvProcessReceivedCommands+0x116>
        __asm volatile
 8002bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bfc:	f383 8811 	msr	BASEPRI, r3
 8002c00:	f3bf 8f6f 	isb	sy
 8002c04:	f3bf 8f4f 	dsb	sy
 8002c08:	617b      	str	r3, [r7, #20]
    }
 8002c0a:	bf00      	nop
 8002c0c:	e7fe      	b.n	8002c0c <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	699a      	ldr	r2, [r3, #24]
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	18d1      	adds	r1, r2, r3
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	69f8      	ldr	r0, [r7, #28]
 8002c1c:	f7ff ff2a 	bl	8002a74 <prvInsertTimerInActiveList>
                        break;
 8002c20:	e015      	b.n	8002c4e <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d103      	bne.n	8002c38 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8002c30:	69f8      	ldr	r0, [r7, #28]
 8002c32:	f000 fc0d 	bl	8003450 <vPortFree>
 8002c36:	e00a      	b.n	8002c4e <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002c3e:	f023 0301 	bic.w	r3, r3, #1
 8002c42:	b2da      	uxtb	r2, r3
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8002c4a:	e000      	b.n	8002c4e <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8002c4c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002c4e:	4b08      	ldr	r3, [pc, #32]	; (8002c70 <prvProcessReceivedCommands+0x178>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f107 0108 	add.w	r1, r7, #8
 8002c56:	2200      	movs	r2, #0
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7fe f9fb 	bl	8001054 <xQueueReceive>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f47f af4d 	bne.w	8002b00 <prvProcessReceivedCommands+0x8>
        }
    }
 8002c66:	bf00      	nop
 8002c68:	bf00      	nop
 8002c6a:	3720      	adds	r7, #32
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	20000230 	.word	0x20000230

08002c74 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002c7a:	e009      	b.n	8002c90 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002c7c:	4b0e      	ldr	r3, [pc, #56]	; (8002cb8 <prvSwitchTimerLists+0x44>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8002c86:	f04f 31ff 	mov.w	r1, #4294967295
 8002c8a:	6838      	ldr	r0, [r7, #0]
 8002c8c:	f7ff fe1e 	bl	80028cc <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002c90:	4b09      	ldr	r3, [pc, #36]	; (8002cb8 <prvSwitchTimerLists+0x44>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1f0      	bne.n	8002c7c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8002c9a:	4b07      	ldr	r3, [pc, #28]	; (8002cb8 <prvSwitchTimerLists+0x44>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8002ca0:	4b06      	ldr	r3, [pc, #24]	; (8002cbc <prvSwitchTimerLists+0x48>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a04      	ldr	r2, [pc, #16]	; (8002cb8 <prvSwitchTimerLists+0x44>)
 8002ca6:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8002ca8:	4a04      	ldr	r2, [pc, #16]	; (8002cbc <prvSwitchTimerLists+0x48>)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6013      	str	r3, [r2, #0]
    }
 8002cae:	bf00      	nop
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	20000228 	.word	0x20000228
 8002cbc:	2000022c 	.word	0x2000022c

08002cc0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002cc4:	f000 f9de 	bl	8003084 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002cc8:	4b12      	ldr	r3, [pc, #72]	; (8002d14 <prvCheckForValidListAndQueue+0x54>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d11d      	bne.n	8002d0c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8002cd0:	4811      	ldr	r0, [pc, #68]	; (8002d18 <prvCheckForValidListAndQueue+0x58>)
 8002cd2:	f7fe f826 	bl	8000d22 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8002cd6:	4811      	ldr	r0, [pc, #68]	; (8002d1c <prvCheckForValidListAndQueue+0x5c>)
 8002cd8:	f7fe f823 	bl	8000d22 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8002cdc:	4b10      	ldr	r3, [pc, #64]	; (8002d20 <prvCheckForValidListAndQueue+0x60>)
 8002cde:	4a0e      	ldr	r2, [pc, #56]	; (8002d18 <prvCheckForValidListAndQueue+0x58>)
 8002ce0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8002ce2:	4b10      	ldr	r3, [pc, #64]	; (8002d24 <prvCheckForValidListAndQueue+0x64>)
 8002ce4:	4a0d      	ldr	r2, [pc, #52]	; (8002d1c <prvCheckForValidListAndQueue+0x5c>)
 8002ce6:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002ce8:	2200      	movs	r2, #0
 8002cea:	210c      	movs	r1, #12
 8002cec:	200a      	movs	r0, #10
 8002cee:	f7fe f939 	bl	8000f64 <xQueueGenericCreate>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	4a07      	ldr	r2, [pc, #28]	; (8002d14 <prvCheckForValidListAndQueue+0x54>)
 8002cf6:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8002cf8:	4b06      	ldr	r3, [pc, #24]	; (8002d14 <prvCheckForValidListAndQueue+0x54>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d005      	beq.n	8002d0c <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002d00:	4b04      	ldr	r3, [pc, #16]	; (8002d14 <prvCheckForValidListAndQueue+0x54>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4908      	ldr	r1, [pc, #32]	; (8002d28 <prvCheckForValidListAndQueue+0x68>)
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7fe fb42 	bl	8001390 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002d0c:	f000 f9ea 	bl	80030e4 <vPortExitCritical>
    }
 8002d10:	bf00      	nop
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	20000230 	.word	0x20000230
 8002d18:	20000200 	.word	0x20000200
 8002d1c:	20000214 	.word	0x20000214
 8002d20:	20000228 	.word	0x20000228
 8002d24:	2000022c 	.word	0x2000022c
 8002d28:	08007bcc 	.word	0x08007bcc

08002d2c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	3b04      	subs	r3, #4
 8002d3c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d44:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	3b04      	subs	r3, #4
 8002d4a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	f023 0201 	bic.w	r2, r3, #1
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	3b04      	subs	r3, #4
 8002d5a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002d5c:	4a0c      	ldr	r2, [pc, #48]	; (8002d90 <pxPortInitialiseStack+0x64>)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	3b14      	subs	r3, #20
 8002d66:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	3b04      	subs	r3, #4
 8002d72:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f06f 0202 	mvn.w	r2, #2
 8002d7a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	3b20      	subs	r3, #32
 8002d80:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002d82:	68fb      	ldr	r3, [r7, #12]
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3714      	adds	r7, #20
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr
 8002d90:	08002d95 	.word	0x08002d95

08002d94 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002d9e:	4b12      	ldr	r3, [pc, #72]	; (8002de8 <prvTaskExitError+0x54>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da6:	d00a      	beq.n	8002dbe <prvTaskExitError+0x2a>
        __asm volatile
 8002da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dac:	f383 8811 	msr	BASEPRI, r3
 8002db0:	f3bf 8f6f 	isb	sy
 8002db4:	f3bf 8f4f 	dsb	sy
 8002db8:	60fb      	str	r3, [r7, #12]
    }
 8002dba:	bf00      	nop
 8002dbc:	e7fe      	b.n	8002dbc <prvTaskExitError+0x28>
        __asm volatile
 8002dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc2:	f383 8811 	msr	BASEPRI, r3
 8002dc6:	f3bf 8f6f 	isb	sy
 8002dca:	f3bf 8f4f 	dsb	sy
 8002dce:	60bb      	str	r3, [r7, #8]
    }
 8002dd0:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002dd2:	bf00      	nop
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d0fc      	beq.n	8002dd4 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002dda:	bf00      	nop
 8002ddc:	bf00      	nop
 8002dde:	3714      	adds	r7, #20
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr
 8002de8:	20000008 	.word	0x20000008
 8002dec:	00000000 	.word	0x00000000

08002df0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002df0:	4b07      	ldr	r3, [pc, #28]	; (8002e10 <pxCurrentTCBConst2>)
 8002df2:	6819      	ldr	r1, [r3, #0]
 8002df4:	6808      	ldr	r0, [r1, #0]
 8002df6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dfa:	f380 8809 	msr	PSP, r0
 8002dfe:	f3bf 8f6f 	isb	sy
 8002e02:	f04f 0000 	mov.w	r0, #0
 8002e06:	f380 8811 	msr	BASEPRI, r0
 8002e0a:	4770      	bx	lr
 8002e0c:	f3af 8000 	nop.w

08002e10 <pxCurrentTCBConst2>:
 8002e10:	200000fc 	.word	0x200000fc
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002e14:	bf00      	nop
 8002e16:	bf00      	nop

08002e18 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002e18:	4808      	ldr	r0, [pc, #32]	; (8002e3c <prvPortStartFirstTask+0x24>)
 8002e1a:	6800      	ldr	r0, [r0, #0]
 8002e1c:	6800      	ldr	r0, [r0, #0]
 8002e1e:	f380 8808 	msr	MSP, r0
 8002e22:	f04f 0000 	mov.w	r0, #0
 8002e26:	f380 8814 	msr	CONTROL, r0
 8002e2a:	b662      	cpsie	i
 8002e2c:	b661      	cpsie	f
 8002e2e:	f3bf 8f4f 	dsb	sy
 8002e32:	f3bf 8f6f 	isb	sy
 8002e36:	df00      	svc	0
 8002e38:	bf00      	nop
 8002e3a:	0000      	.short	0x0000
 8002e3c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002e40:	bf00      	nop
 8002e42:	bf00      	nop

08002e44 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002e4a:	4b46      	ldr	r3, [pc, #280]	; (8002f64 <xPortStartScheduler+0x120>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a46      	ldr	r2, [pc, #280]	; (8002f68 <xPortStartScheduler+0x124>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d10a      	bne.n	8002e6a <xPortStartScheduler+0x26>
        __asm volatile
 8002e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e58:	f383 8811 	msr	BASEPRI, r3
 8002e5c:	f3bf 8f6f 	isb	sy
 8002e60:	f3bf 8f4f 	dsb	sy
 8002e64:	613b      	str	r3, [r7, #16]
    }
 8002e66:	bf00      	nop
 8002e68:	e7fe      	b.n	8002e68 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002e6a:	4b3e      	ldr	r3, [pc, #248]	; (8002f64 <xPortStartScheduler+0x120>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a3f      	ldr	r2, [pc, #252]	; (8002f6c <xPortStartScheduler+0x128>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d10a      	bne.n	8002e8a <xPortStartScheduler+0x46>
        __asm volatile
 8002e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e78:	f383 8811 	msr	BASEPRI, r3
 8002e7c:	f3bf 8f6f 	isb	sy
 8002e80:	f3bf 8f4f 	dsb	sy
 8002e84:	60fb      	str	r3, [r7, #12]
    }
 8002e86:	bf00      	nop
 8002e88:	e7fe      	b.n	8002e88 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002e8a:	4b39      	ldr	r3, [pc, #228]	; (8002f70 <xPortStartScheduler+0x12c>)
 8002e8c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	22ff      	movs	r2, #255	; 0xff
 8002e9a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002ea4:	78fb      	ldrb	r3, [r7, #3]
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002eac:	b2da      	uxtb	r2, r3
 8002eae:	4b31      	ldr	r3, [pc, #196]	; (8002f74 <xPortStartScheduler+0x130>)
 8002eb0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002eb2:	4b31      	ldr	r3, [pc, #196]	; (8002f78 <xPortStartScheduler+0x134>)
 8002eb4:	2207      	movs	r2, #7
 8002eb6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002eb8:	e009      	b.n	8002ece <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 8002eba:	4b2f      	ldr	r3, [pc, #188]	; (8002f78 <xPortStartScheduler+0x134>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	4a2d      	ldr	r2, [pc, #180]	; (8002f78 <xPortStartScheduler+0x134>)
 8002ec2:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002ec4:	78fb      	ldrb	r3, [r7, #3]
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002ece:	78fb      	ldrb	r3, [r7, #3]
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ed6:	2b80      	cmp	r3, #128	; 0x80
 8002ed8:	d0ef      	beq.n	8002eba <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002eda:	4b27      	ldr	r3, [pc, #156]	; (8002f78 <xPortStartScheduler+0x134>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f1c3 0307 	rsb	r3, r3, #7
 8002ee2:	2b04      	cmp	r3, #4
 8002ee4:	d00a      	beq.n	8002efc <xPortStartScheduler+0xb8>
        __asm volatile
 8002ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eea:	f383 8811 	msr	BASEPRI, r3
 8002eee:	f3bf 8f6f 	isb	sy
 8002ef2:	f3bf 8f4f 	dsb	sy
 8002ef6:	60bb      	str	r3, [r7, #8]
    }
 8002ef8:	bf00      	nop
 8002efa:	e7fe      	b.n	8002efa <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002efc:	4b1e      	ldr	r3, [pc, #120]	; (8002f78 <xPortStartScheduler+0x134>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	021b      	lsls	r3, r3, #8
 8002f02:	4a1d      	ldr	r2, [pc, #116]	; (8002f78 <xPortStartScheduler+0x134>)
 8002f04:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002f06:	4b1c      	ldr	r3, [pc, #112]	; (8002f78 <xPortStartScheduler+0x134>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f0e:	4a1a      	ldr	r2, [pc, #104]	; (8002f78 <xPortStartScheduler+0x134>)
 8002f10:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	b2da      	uxtb	r2, r3
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002f1a:	4b18      	ldr	r3, [pc, #96]	; (8002f7c <xPortStartScheduler+0x138>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a17      	ldr	r2, [pc, #92]	; (8002f7c <xPortStartScheduler+0x138>)
 8002f20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f24:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002f26:	4b15      	ldr	r3, [pc, #84]	; (8002f7c <xPortStartScheduler+0x138>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a14      	ldr	r2, [pc, #80]	; (8002f7c <xPortStartScheduler+0x138>)
 8002f2c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002f30:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002f32:	f000 f963 	bl	80031fc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002f36:	4b12      	ldr	r3, [pc, #72]	; (8002f80 <xPortStartScheduler+0x13c>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002f3c:	f000 f982 	bl	8003244 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002f40:	4b10      	ldr	r3, [pc, #64]	; (8002f84 <xPortStartScheduler+0x140>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a0f      	ldr	r2, [pc, #60]	; (8002f84 <xPortStartScheduler+0x140>)
 8002f46:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002f4a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002f4c:	f7ff ff64 	bl	8002e18 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002f50:	f7fe ff14 	bl	8001d7c <vTaskSwitchContext>
    prvTaskExitError();
 8002f54:	f7ff ff1e 	bl	8002d94 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3718      	adds	r7, #24
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	e000ed00 	.word	0xe000ed00
 8002f68:	410fc271 	.word	0x410fc271
 8002f6c:	410fc270 	.word	0x410fc270
 8002f70:	e000e400 	.word	0xe000e400
 8002f74:	2000023c 	.word	0x2000023c
 8002f78:	20000240 	.word	0x20000240
 8002f7c:	e000ed20 	.word	0xe000ed20
 8002f80:	20000008 	.word	0x20000008
 8002f84:	e000ef34 	.word	0xe000ef34

08002f88 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b087      	sub	sp, #28
 8002f8c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002f8e:	4b37      	ldr	r3, [pc, #220]	; (800306c <vInitPrioGroupValue+0xe4>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a37      	ldr	r2, [pc, #220]	; (8003070 <vInitPrioGroupValue+0xe8>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d10a      	bne.n	8002fae <vInitPrioGroupValue+0x26>
        __asm volatile
 8002f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f9c:	f383 8811 	msr	BASEPRI, r3
 8002fa0:	f3bf 8f6f 	isb	sy
 8002fa4:	f3bf 8f4f 	dsb	sy
 8002fa8:	613b      	str	r3, [r7, #16]
    }
 8002faa:	bf00      	nop
 8002fac:	e7fe      	b.n	8002fac <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002fae:	4b2f      	ldr	r3, [pc, #188]	; (800306c <vInitPrioGroupValue+0xe4>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a30      	ldr	r2, [pc, #192]	; (8003074 <vInitPrioGroupValue+0xec>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d10a      	bne.n	8002fce <vInitPrioGroupValue+0x46>
        __asm volatile
 8002fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fbc:	f383 8811 	msr	BASEPRI, r3
 8002fc0:	f3bf 8f6f 	isb	sy
 8002fc4:	f3bf 8f4f 	dsb	sy
 8002fc8:	60fb      	str	r3, [r7, #12]
    }
 8002fca:	bf00      	nop
 8002fcc:	e7fe      	b.n	8002fcc <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002fce:	4b2a      	ldr	r3, [pc, #168]	; (8003078 <vInitPrioGroupValue+0xf0>)
 8002fd0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	22ff      	movs	r2, #255	; 0xff
 8002fde:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002fe8:	78fb      	ldrb	r3, [r7, #3]
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002ff0:	b2da      	uxtb	r2, r3
 8002ff2:	4b22      	ldr	r3, [pc, #136]	; (800307c <vInitPrioGroupValue+0xf4>)
 8002ff4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002ff6:	4b22      	ldr	r3, [pc, #136]	; (8003080 <vInitPrioGroupValue+0xf8>)
 8002ff8:	2207      	movs	r2, #7
 8002ffa:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002ffc:	e009      	b.n	8003012 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002ffe:	4b20      	ldr	r3, [pc, #128]	; (8003080 <vInitPrioGroupValue+0xf8>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	3b01      	subs	r3, #1
 8003004:	4a1e      	ldr	r2, [pc, #120]	; (8003080 <vInitPrioGroupValue+0xf8>)
 8003006:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003008:	78fb      	ldrb	r3, [r7, #3]
 800300a:	b2db      	uxtb	r3, r3
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	b2db      	uxtb	r3, r3
 8003010:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003012:	78fb      	ldrb	r3, [r7, #3]
 8003014:	b2db      	uxtb	r3, r3
 8003016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800301a:	2b80      	cmp	r3, #128	; 0x80
 800301c:	d0ef      	beq.n	8002ffe <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800301e:	4b18      	ldr	r3, [pc, #96]	; (8003080 <vInitPrioGroupValue+0xf8>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f1c3 0307 	rsb	r3, r3, #7
 8003026:	2b04      	cmp	r3, #4
 8003028:	d00a      	beq.n	8003040 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800302a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800302e:	f383 8811 	msr	BASEPRI, r3
 8003032:	f3bf 8f6f 	isb	sy
 8003036:	f3bf 8f4f 	dsb	sy
 800303a:	60bb      	str	r3, [r7, #8]
    }
 800303c:	bf00      	nop
 800303e:	e7fe      	b.n	800303e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003040:	4b0f      	ldr	r3, [pc, #60]	; (8003080 <vInitPrioGroupValue+0xf8>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	021b      	lsls	r3, r3, #8
 8003046:	4a0e      	ldr	r2, [pc, #56]	; (8003080 <vInitPrioGroupValue+0xf8>)
 8003048:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800304a:	4b0d      	ldr	r3, [pc, #52]	; (8003080 <vInitPrioGroupValue+0xf8>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003052:	4a0b      	ldr	r2, [pc, #44]	; (8003080 <vInitPrioGroupValue+0xf8>)
 8003054:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	b2da      	uxtb	r2, r3
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800305e:	bf00      	nop
 8003060:	371c      	adds	r7, #28
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	e000ed00 	.word	0xe000ed00
 8003070:	410fc271 	.word	0x410fc271
 8003074:	410fc270 	.word	0x410fc270
 8003078:	e000e400 	.word	0xe000e400
 800307c:	2000023c 	.word	0x2000023c
 8003080:	20000240 	.word	0x20000240

08003084 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
        __asm volatile
 800308a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800308e:	f383 8811 	msr	BASEPRI, r3
 8003092:	f3bf 8f6f 	isb	sy
 8003096:	f3bf 8f4f 	dsb	sy
 800309a:	607b      	str	r3, [r7, #4]
    }
 800309c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800309e:	4b0f      	ldr	r3, [pc, #60]	; (80030dc <vPortEnterCritical+0x58>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	3301      	adds	r3, #1
 80030a4:	4a0d      	ldr	r2, [pc, #52]	; (80030dc <vPortEnterCritical+0x58>)
 80030a6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80030a8:	4b0c      	ldr	r3, [pc, #48]	; (80030dc <vPortEnterCritical+0x58>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d10f      	bne.n	80030d0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80030b0:	4b0b      	ldr	r3, [pc, #44]	; (80030e0 <vPortEnterCritical+0x5c>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00a      	beq.n	80030d0 <vPortEnterCritical+0x4c>
        __asm volatile
 80030ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030be:	f383 8811 	msr	BASEPRI, r3
 80030c2:	f3bf 8f6f 	isb	sy
 80030c6:	f3bf 8f4f 	dsb	sy
 80030ca:	603b      	str	r3, [r7, #0]
    }
 80030cc:	bf00      	nop
 80030ce:	e7fe      	b.n	80030ce <vPortEnterCritical+0x4a>
    }
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	20000008 	.word	0x20000008
 80030e0:	e000ed04 	.word	0xe000ed04

080030e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80030ea:	4b12      	ldr	r3, [pc, #72]	; (8003134 <vPortExitCritical+0x50>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d10a      	bne.n	8003108 <vPortExitCritical+0x24>
        __asm volatile
 80030f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f6:	f383 8811 	msr	BASEPRI, r3
 80030fa:	f3bf 8f6f 	isb	sy
 80030fe:	f3bf 8f4f 	dsb	sy
 8003102:	607b      	str	r3, [r7, #4]
    }
 8003104:	bf00      	nop
 8003106:	e7fe      	b.n	8003106 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003108:	4b0a      	ldr	r3, [pc, #40]	; (8003134 <vPortExitCritical+0x50>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	3b01      	subs	r3, #1
 800310e:	4a09      	ldr	r2, [pc, #36]	; (8003134 <vPortExitCritical+0x50>)
 8003110:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003112:	4b08      	ldr	r3, [pc, #32]	; (8003134 <vPortExitCritical+0x50>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d105      	bne.n	8003126 <vPortExitCritical+0x42>
 800311a:	2300      	movs	r3, #0
 800311c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003124:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003126:	bf00      	nop
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	20000008 	.word	0x20000008
	...

08003140 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003140:	f3ef 8009 	mrs	r0, PSP
 8003144:	f3bf 8f6f 	isb	sy
 8003148:	4b15      	ldr	r3, [pc, #84]	; (80031a0 <pxCurrentTCBConst>)
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	f01e 0f10 	tst.w	lr, #16
 8003150:	bf08      	it	eq
 8003152:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003156:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800315a:	6010      	str	r0, [r2, #0]
 800315c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003160:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003164:	f380 8811 	msr	BASEPRI, r0
 8003168:	f3bf 8f4f 	dsb	sy
 800316c:	f3bf 8f6f 	isb	sy
 8003170:	f7fe fe04 	bl	8001d7c <vTaskSwitchContext>
 8003174:	f04f 0000 	mov.w	r0, #0
 8003178:	f380 8811 	msr	BASEPRI, r0
 800317c:	bc09      	pop	{r0, r3}
 800317e:	6819      	ldr	r1, [r3, #0]
 8003180:	6808      	ldr	r0, [r1, #0]
 8003182:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003186:	f01e 0f10 	tst.w	lr, #16
 800318a:	bf08      	it	eq
 800318c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003190:	f380 8809 	msr	PSP, r0
 8003194:	f3bf 8f6f 	isb	sy
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	f3af 8000 	nop.w

080031a0 <pxCurrentTCBConst>:
 80031a0:	200000fc 	.word	0x200000fc
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80031a4:	bf00      	nop
 80031a6:	bf00      	nop

080031a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
        __asm volatile
 80031ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b2:	f383 8811 	msr	BASEPRI, r3
 80031b6:	f3bf 8f6f 	isb	sy
 80031ba:	f3bf 8f4f 	dsb	sy
 80031be:	607b      	str	r3, [r7, #4]
    }
 80031c0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80031c2:	f002 f893 	bl	80052ec <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80031c6:	f7fe fcbf 	bl	8001b48 <xTaskIncrementTick>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d006      	beq.n	80031de <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80031d0:	f002 f8ea 	bl	80053a8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80031d4:	4b08      	ldr	r3, [pc, #32]	; (80031f8 <SysTick_Handler+0x50>)
 80031d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031da:	601a      	str	r2, [r3, #0]
 80031dc:	e001      	b.n	80031e2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80031de:	f002 f8c7 	bl	8005370 <SEGGER_SYSVIEW_RecordExitISR>
 80031e2:	2300      	movs	r3, #0
 80031e4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	f383 8811 	msr	BASEPRI, r3
    }
 80031ec:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80031ee:	bf00      	nop
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	e000ed04 	.word	0xe000ed04

080031fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003200:	4b0b      	ldr	r3, [pc, #44]	; (8003230 <vPortSetupTimerInterrupt+0x34>)
 8003202:	2200      	movs	r2, #0
 8003204:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003206:	4b0b      	ldr	r3, [pc, #44]	; (8003234 <vPortSetupTimerInterrupt+0x38>)
 8003208:	2200      	movs	r2, #0
 800320a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800320c:	4b0a      	ldr	r3, [pc, #40]	; (8003238 <vPortSetupTimerInterrupt+0x3c>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a0a      	ldr	r2, [pc, #40]	; (800323c <vPortSetupTimerInterrupt+0x40>)
 8003212:	fba2 2303 	umull	r2, r3, r2, r3
 8003216:	099b      	lsrs	r3, r3, #6
 8003218:	4a09      	ldr	r2, [pc, #36]	; (8003240 <vPortSetupTimerInterrupt+0x44>)
 800321a:	3b01      	subs	r3, #1
 800321c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800321e:	4b04      	ldr	r3, [pc, #16]	; (8003230 <vPortSetupTimerInterrupt+0x34>)
 8003220:	2207      	movs	r2, #7
 8003222:	601a      	str	r2, [r3, #0]
}
 8003224:	bf00      	nop
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	e000e010 	.word	0xe000e010
 8003234:	e000e018 	.word	0xe000e018
 8003238:	20000000 	.word	0x20000000
 800323c:	10624dd3 	.word	0x10624dd3
 8003240:	e000e014 	.word	0xe000e014

08003244 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003244:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003254 <vPortEnableVFP+0x10>
 8003248:	6801      	ldr	r1, [r0, #0]
 800324a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800324e:	6001      	str	r1, [r0, #0]
 8003250:	4770      	bx	lr
 8003252:	0000      	.short	0x0000
 8003254:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003258:	bf00      	nop
 800325a:	bf00      	nop

0800325c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003262:	f3ef 8305 	mrs	r3, IPSR
 8003266:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2b0f      	cmp	r3, #15
 800326c:	d914      	bls.n	8003298 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800326e:	4a17      	ldr	r2, [pc, #92]	; (80032cc <vPortValidateInterruptPriority+0x70>)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	4413      	add	r3, r2
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003278:	4b15      	ldr	r3, [pc, #84]	; (80032d0 <vPortValidateInterruptPriority+0x74>)
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	7afa      	ldrb	r2, [r7, #11]
 800327e:	429a      	cmp	r2, r3
 8003280:	d20a      	bcs.n	8003298 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003286:	f383 8811 	msr	BASEPRI, r3
 800328a:	f3bf 8f6f 	isb	sy
 800328e:	f3bf 8f4f 	dsb	sy
 8003292:	607b      	str	r3, [r7, #4]
    }
 8003294:	bf00      	nop
 8003296:	e7fe      	b.n	8003296 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003298:	4b0e      	ldr	r3, [pc, #56]	; (80032d4 <vPortValidateInterruptPriority+0x78>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80032a0:	4b0d      	ldr	r3, [pc, #52]	; (80032d8 <vPortValidateInterruptPriority+0x7c>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d90a      	bls.n	80032be <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80032a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ac:	f383 8811 	msr	BASEPRI, r3
 80032b0:	f3bf 8f6f 	isb	sy
 80032b4:	f3bf 8f4f 	dsb	sy
 80032b8:	603b      	str	r3, [r7, #0]
    }
 80032ba:	bf00      	nop
 80032bc:	e7fe      	b.n	80032bc <vPortValidateInterruptPriority+0x60>
    }
 80032be:	bf00      	nop
 80032c0:	3714      	adds	r7, #20
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	e000e3f0 	.word	0xe000e3f0
 80032d0:	2000023c 	.word	0x2000023c
 80032d4:	e000ed0c 	.word	0xe000ed0c
 80032d8:	20000240 	.word	0x20000240

080032dc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b08a      	sub	sp, #40	; 0x28
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80032e4:	2300      	movs	r3, #0
 80032e6:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80032e8:	f7fe fafe 	bl	80018e8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80032ec:	4b53      	ldr	r3, [pc, #332]	; (800343c <pvPortMalloc+0x160>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d101      	bne.n	80032f8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80032f4:	f000 f908 	bl	8003508 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d012      	beq.n	8003324 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80032fe:	2208      	movs	r2, #8
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f003 0307 	and.w	r3, r3, #7
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	3308      	adds	r3, #8
 800330a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	43db      	mvns	r3, r3
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	429a      	cmp	r2, r3
 8003314:	d804      	bhi.n	8003320 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	4413      	add	r3, r2
 800331c:	607b      	str	r3, [r7, #4]
 800331e:	e001      	b.n	8003324 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8003320:	2300      	movs	r3, #0
 8003322:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	db70      	blt.n	800340c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d06d      	beq.n	800340c <pvPortMalloc+0x130>
 8003330:	4b43      	ldr	r3, [pc, #268]	; (8003440 <pvPortMalloc+0x164>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	429a      	cmp	r2, r3
 8003338:	d868      	bhi.n	800340c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800333a:	4b42      	ldr	r3, [pc, #264]	; (8003444 <pvPortMalloc+0x168>)
 800333c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800333e:	4b41      	ldr	r3, [pc, #260]	; (8003444 <pvPortMalloc+0x168>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003344:	e004      	b.n	8003350 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8003346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003348:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800334a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	429a      	cmp	r2, r3
 8003358:	d903      	bls.n	8003362 <pvPortMalloc+0x86>
 800335a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1f1      	bne.n	8003346 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003362:	4b36      	ldr	r3, [pc, #216]	; (800343c <pvPortMalloc+0x160>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003368:	429a      	cmp	r2, r3
 800336a:	d04f      	beq.n	800340c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800336c:	6a3b      	ldr	r3, [r7, #32]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2208      	movs	r2, #8
 8003372:	4413      	add	r3, r2
 8003374:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	6a3b      	ldr	r3, [r7, #32]
 800337c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003380:	685a      	ldr	r2, [r3, #4]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	1ad2      	subs	r2, r2, r3
 8003386:	2308      	movs	r3, #8
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	429a      	cmp	r2, r3
 800338c:	d91f      	bls.n	80033ce <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800338e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4413      	add	r3, r2
 8003394:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	f003 0307 	and.w	r3, r3, #7
 800339c:	2b00      	cmp	r3, #0
 800339e:	d00a      	beq.n	80033b6 <pvPortMalloc+0xda>
        __asm volatile
 80033a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a4:	f383 8811 	msr	BASEPRI, r3
 80033a8:	f3bf 8f6f 	isb	sy
 80033ac:	f3bf 8f4f 	dsb	sy
 80033b0:	613b      	str	r3, [r7, #16]
    }
 80033b2:	bf00      	nop
 80033b4:	e7fe      	b.n	80033b4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80033b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b8:	685a      	ldr	r2, [r3, #4]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	1ad2      	subs	r2, r2, r3
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80033c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80033c8:	6978      	ldr	r0, [r7, #20]
 80033ca:	f000 f8f9 	bl	80035c0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80033ce:	4b1c      	ldr	r3, [pc, #112]	; (8003440 <pvPortMalloc+0x164>)
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	4a19      	ldr	r2, [pc, #100]	; (8003440 <pvPortMalloc+0x164>)
 80033da:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80033dc:	4b18      	ldr	r3, [pc, #96]	; (8003440 <pvPortMalloc+0x164>)
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	4b19      	ldr	r3, [pc, #100]	; (8003448 <pvPortMalloc+0x16c>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d203      	bcs.n	80033f0 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80033e8:	4b15      	ldr	r3, [pc, #84]	; (8003440 <pvPortMalloc+0x164>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a16      	ldr	r2, [pc, #88]	; (8003448 <pvPortMalloc+0x16c>)
 80033ee:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80033f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80033f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fa:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80033fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fe:	2200      	movs	r2, #0
 8003400:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003402:	4b12      	ldr	r3, [pc, #72]	; (800344c <pvPortMalloc+0x170>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	3301      	adds	r3, #1
 8003408:	4a10      	ldr	r2, [pc, #64]	; (800344c <pvPortMalloc+0x170>)
 800340a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800340c:	f7fe fa7a 	bl	8001904 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	f003 0307 	and.w	r3, r3, #7
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00a      	beq.n	8003430 <pvPortMalloc+0x154>
        __asm volatile
 800341a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800341e:	f383 8811 	msr	BASEPRI, r3
 8003422:	f3bf 8f6f 	isb	sy
 8003426:	f3bf 8f4f 	dsb	sy
 800342a:	60fb      	str	r3, [r7, #12]
    }
 800342c:	bf00      	nop
 800342e:	e7fe      	b.n	800342e <pvPortMalloc+0x152>
    return pvReturn;
 8003430:	69fb      	ldr	r3, [r7, #28]
}
 8003432:	4618      	mov	r0, r3
 8003434:	3728      	adds	r7, #40	; 0x28
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	20012e4c 	.word	0x20012e4c
 8003440:	20012e50 	.word	0x20012e50
 8003444:	20012e44 	.word	0x20012e44
 8003448:	20012e54 	.word	0x20012e54
 800344c:	20012e58 	.word	0x20012e58

08003450 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d049      	beq.n	80034f6 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003462:	2308      	movs	r3, #8
 8003464:	425b      	negs	r3, r3
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	4413      	add	r3, r2
 800346a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	2b00      	cmp	r3, #0
 8003476:	db0a      	blt.n	800348e <vPortFree+0x3e>
        __asm volatile
 8003478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800347c:	f383 8811 	msr	BASEPRI, r3
 8003480:	f3bf 8f6f 	isb	sy
 8003484:	f3bf 8f4f 	dsb	sy
 8003488:	60fb      	str	r3, [r7, #12]
    }
 800348a:	bf00      	nop
 800348c:	e7fe      	b.n	800348c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00a      	beq.n	80034ac <vPortFree+0x5c>
        __asm volatile
 8003496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800349a:	f383 8811 	msr	BASEPRI, r3
 800349e:	f3bf 8f6f 	isb	sy
 80034a2:	f3bf 8f4f 	dsb	sy
 80034a6:	60bb      	str	r3, [r7, #8]
    }
 80034a8:	bf00      	nop
 80034aa:	e7fe      	b.n	80034aa <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	0fdb      	lsrs	r3, r3, #31
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d01c      	beq.n	80034f6 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d118      	bne.n	80034f6 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80034d0:	f7fe fa0a 	bl	80018e8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	4b09      	ldr	r3, [pc, #36]	; (8003500 <vPortFree+0xb0>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4413      	add	r3, r2
 80034de:	4a08      	ldr	r2, [pc, #32]	; (8003500 <vPortFree+0xb0>)
 80034e0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80034e2:	6938      	ldr	r0, [r7, #16]
 80034e4:	f000 f86c 	bl	80035c0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80034e8:	4b06      	ldr	r3, [pc, #24]	; (8003504 <vPortFree+0xb4>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	3301      	adds	r3, #1
 80034ee:	4a05      	ldr	r2, [pc, #20]	; (8003504 <vPortFree+0xb4>)
 80034f0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80034f2:	f7fe fa07 	bl	8001904 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80034f6:	bf00      	nop
 80034f8:	3718      	adds	r7, #24
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	20012e50 	.word	0x20012e50
 8003504:	20012e5c 	.word	0x20012e5c

08003508 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003508:	b480      	push	{r7}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800350e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8003512:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003514:	4b25      	ldr	r3, [pc, #148]	; (80035ac <prvHeapInit+0xa4>)
 8003516:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f003 0307 	and.w	r3, r3, #7
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00c      	beq.n	800353c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	3307      	adds	r3, #7
 8003526:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f023 0307 	bic.w	r3, r3, #7
 800352e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003530:	68ba      	ldr	r2, [r7, #8]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	4a1d      	ldr	r2, [pc, #116]	; (80035ac <prvHeapInit+0xa4>)
 8003538:	4413      	add	r3, r2
 800353a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003540:	4a1b      	ldr	r2, [pc, #108]	; (80035b0 <prvHeapInit+0xa8>)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003546:	4b1a      	ldr	r3, [pc, #104]	; (80035b0 <prvHeapInit+0xa8>)
 8003548:	2200      	movs	r2, #0
 800354a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	68ba      	ldr	r2, [r7, #8]
 8003550:	4413      	add	r3, r2
 8003552:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003554:	2208      	movs	r2, #8
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	1a9b      	subs	r3, r3, r2
 800355a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f023 0307 	bic.w	r3, r3, #7
 8003562:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	4a13      	ldr	r2, [pc, #76]	; (80035b4 <prvHeapInit+0xac>)
 8003568:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800356a:	4b12      	ldr	r3, [pc, #72]	; (80035b4 <prvHeapInit+0xac>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2200      	movs	r2, #0
 8003570:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003572:	4b10      	ldr	r3, [pc, #64]	; (80035b4 <prvHeapInit+0xac>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2200      	movs	r2, #0
 8003578:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	1ad2      	subs	r2, r2, r3
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003588:	4b0a      	ldr	r3, [pc, #40]	; (80035b4 <prvHeapInit+0xac>)
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	4a08      	ldr	r2, [pc, #32]	; (80035b8 <prvHeapInit+0xb0>)
 8003596:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	4a07      	ldr	r2, [pc, #28]	; (80035bc <prvHeapInit+0xb4>)
 800359e:	6013      	str	r3, [r2, #0]
}
 80035a0:	bf00      	nop
 80035a2:	3714      	adds	r7, #20
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr
 80035ac:	20000244 	.word	0x20000244
 80035b0:	20012e44 	.word	0x20012e44
 80035b4:	20012e4c 	.word	0x20012e4c
 80035b8:	20012e54 	.word	0x20012e54
 80035bc:	20012e50 	.word	0x20012e50

080035c0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80035c0:	b480      	push	{r7}
 80035c2:	b085      	sub	sp, #20
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80035c8:	4b28      	ldr	r3, [pc, #160]	; (800366c <prvInsertBlockIntoFreeList+0xac>)
 80035ca:	60fb      	str	r3, [r7, #12]
 80035cc:	e002      	b.n	80035d4 <prvInsertBlockIntoFreeList+0x14>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	60fb      	str	r3, [r7, #12]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d8f7      	bhi.n	80035ce <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	68ba      	ldr	r2, [r7, #8]
 80035e8:	4413      	add	r3, r2
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d108      	bne.n	8003602 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	685a      	ldr	r2, [r3, #4]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	441a      	add	r2, r3
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	441a      	add	r2, r3
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	429a      	cmp	r2, r3
 8003614:	d118      	bne.n	8003648 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	4b15      	ldr	r3, [pc, #84]	; (8003670 <prvInsertBlockIntoFreeList+0xb0>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	429a      	cmp	r2, r3
 8003620:	d00d      	beq.n	800363e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685a      	ldr	r2, [r3, #4]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	441a      	add	r2, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	601a      	str	r2, [r3, #0]
 800363c:	e008      	b.n	8003650 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800363e:	4b0c      	ldr	r3, [pc, #48]	; (8003670 <prvInsertBlockIntoFreeList+0xb0>)
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	601a      	str	r2, [r3, #0]
 8003646:	e003      	b.n	8003650 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	429a      	cmp	r2, r3
 8003656:	d002      	beq.n	800365e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800365e:	bf00      	nop
 8003660:	3714      	adds	r7, #20
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	20012e44 	.word	0x20012e44
 8003670:	20012e4c 	.word	0x20012e4c

08003674 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003674:	b580      	push	{r7, lr}
 8003676:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003678:	4803      	ldr	r0, [pc, #12]	; (8003688 <_cbSendSystemDesc+0x14>)
 800367a:	f001 fde1 	bl	8005240 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800367e:	4803      	ldr	r0, [pc, #12]	; (800368c <_cbSendSystemDesc+0x18>)
 8003680:	f001 fdde 	bl	8005240 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003684:	bf00      	nop
 8003686:	bd80      	pop	{r7, pc}
 8003688:	08007bd4 	.word	0x08007bd4
 800368c:	08007c08 	.word	0x08007c08

08003690 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003690:	b580      	push	{r7, lr}
 8003692:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003694:	4b06      	ldr	r3, [pc, #24]	; (80036b0 <SEGGER_SYSVIEW_Conf+0x20>)
 8003696:	6818      	ldr	r0, [r3, #0]
 8003698:	4b05      	ldr	r3, [pc, #20]	; (80036b0 <SEGGER_SYSVIEW_Conf+0x20>)
 800369a:	6819      	ldr	r1, [r3, #0]
 800369c:	4b05      	ldr	r3, [pc, #20]	; (80036b4 <SEGGER_SYSVIEW_Conf+0x24>)
 800369e:	4a06      	ldr	r2, [pc, #24]	; (80036b8 <SEGGER_SYSVIEW_Conf+0x28>)
 80036a0:	f001 f94a 	bl	8004938 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80036a4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80036a8:	f001 f98a 	bl	80049c0 <SEGGER_SYSVIEW_SetRAMBase>
}
 80036ac:	bf00      	nop
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	20000000 	.word	0x20000000
 80036b4:	08003675 	.word	0x08003675
 80036b8:	08007c8c 	.word	0x08007c8c

080036bc <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80036bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036be:	b085      	sub	sp, #20
 80036c0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80036c2:	2300      	movs	r3, #0
 80036c4:	607b      	str	r3, [r7, #4]
 80036c6:	e033      	b.n	8003730 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80036c8:	491e      	ldr	r1, [pc, #120]	; (8003744 <_cbSendTaskList+0x88>)
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	4613      	mov	r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	4413      	add	r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	440b      	add	r3, r1
 80036d6:	6818      	ldr	r0, [r3, #0]
 80036d8:	491a      	ldr	r1, [pc, #104]	; (8003744 <_cbSendTaskList+0x88>)
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	4613      	mov	r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	4413      	add	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	440b      	add	r3, r1
 80036e6:	3304      	adds	r3, #4
 80036e8:	6819      	ldr	r1, [r3, #0]
 80036ea:	4c16      	ldr	r4, [pc, #88]	; (8003744 <_cbSendTaskList+0x88>)
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	4613      	mov	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	4413      	add	r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	4423      	add	r3, r4
 80036f8:	3308      	adds	r3, #8
 80036fa:	681c      	ldr	r4, [r3, #0]
 80036fc:	4d11      	ldr	r5, [pc, #68]	; (8003744 <_cbSendTaskList+0x88>)
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	4613      	mov	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	4413      	add	r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	442b      	add	r3, r5
 800370a:	330c      	adds	r3, #12
 800370c:	681d      	ldr	r5, [r3, #0]
 800370e:	4e0d      	ldr	r6, [pc, #52]	; (8003744 <_cbSendTaskList+0x88>)
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	4613      	mov	r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	4413      	add	r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	4433      	add	r3, r6
 800371c:	3310      	adds	r3, #16
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	9300      	str	r3, [sp, #0]
 8003722:	462b      	mov	r3, r5
 8003724:	4622      	mov	r2, r4
 8003726:	f000 f8bd 	bl	80038a4 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	3301      	adds	r3, #1
 800372e:	607b      	str	r3, [r7, #4]
 8003730:	4b05      	ldr	r3, [pc, #20]	; (8003748 <_cbSendTaskList+0x8c>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	429a      	cmp	r2, r3
 8003738:	d3c6      	bcc.n	80036c8 <_cbSendTaskList+0xc>
  }
}
 800373a:	bf00      	nop
 800373c:	bf00      	nop
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003744:	20012e60 	.word	0x20012e60
 8003748:	20012f00 	.word	0x20012f00

0800374c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800374c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003750:	b082      	sub	sp, #8
 8003752:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003754:	f7fe f9e6 	bl	8001b24 <xTaskGetTickCountFromISR>
 8003758:	4603      	mov	r3, r0
 800375a:	2200      	movs	r2, #0
 800375c:	469a      	mov	sl, r3
 800375e:	4693      	mov	fp, r2
 8003760:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003764:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003768:	4602      	mov	r2, r0
 800376a:	460b      	mov	r3, r1
 800376c:	f04f 0a00 	mov.w	sl, #0
 8003770:	f04f 0b00 	mov.w	fp, #0
 8003774:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8003778:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800377c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8003780:	4652      	mov	r2, sl
 8003782:	465b      	mov	r3, fp
 8003784:	1a14      	subs	r4, r2, r0
 8003786:	eb63 0501 	sbc.w	r5, r3, r1
 800378a:	f04f 0200 	mov.w	r2, #0
 800378e:	f04f 0300 	mov.w	r3, #0
 8003792:	00ab      	lsls	r3, r5, #2
 8003794:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8003798:	00a2      	lsls	r2, r4, #2
 800379a:	4614      	mov	r4, r2
 800379c:	461d      	mov	r5, r3
 800379e:	eb14 0800 	adds.w	r8, r4, r0
 80037a2:	eb45 0901 	adc.w	r9, r5, r1
 80037a6:	f04f 0200 	mov.w	r2, #0
 80037aa:	f04f 0300 	mov.w	r3, #0
 80037ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037ba:	4690      	mov	r8, r2
 80037bc:	4699      	mov	r9, r3
 80037be:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80037c2:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80037c6:	4610      	mov	r0, r2
 80037c8:	4619      	mov	r1, r3
 80037ca:	3708      	adds	r7, #8
 80037cc:	46bd      	mov	sp, r7
 80037ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080037d4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af02      	add	r7, sp, #8
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
 80037e0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80037e2:	2205      	movs	r2, #5
 80037e4:	492b      	ldr	r1, [pc, #172]	; (8003894 <SYSVIEW_AddTask+0xc0>)
 80037e6:	68b8      	ldr	r0, [r7, #8]
 80037e8:	f003 fcb0 	bl	800714c <memcmp>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d04b      	beq.n	800388a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80037f2:	4b29      	ldr	r3, [pc, #164]	; (8003898 <SYSVIEW_AddTask+0xc4>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2b07      	cmp	r3, #7
 80037f8:	d903      	bls.n	8003802 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80037fa:	4828      	ldr	r0, [pc, #160]	; (800389c <SYSVIEW_AddTask+0xc8>)
 80037fc:	f002 f828 	bl	8005850 <SEGGER_SYSVIEW_Warn>
    return;
 8003800:	e044      	b.n	800388c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003802:	4b25      	ldr	r3, [pc, #148]	; (8003898 <SYSVIEW_AddTask+0xc4>)
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	4926      	ldr	r1, [pc, #152]	; (80038a0 <SYSVIEW_AddTask+0xcc>)
 8003808:	4613      	mov	r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	4413      	add	r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	440b      	add	r3, r1
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003816:	4b20      	ldr	r3, [pc, #128]	; (8003898 <SYSVIEW_AddTask+0xc4>)
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	4921      	ldr	r1, [pc, #132]	; (80038a0 <SYSVIEW_AddTask+0xcc>)
 800381c:	4613      	mov	r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	4413      	add	r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	440b      	add	r3, r1
 8003826:	3304      	adds	r3, #4
 8003828:	68ba      	ldr	r2, [r7, #8]
 800382a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800382c:	4b1a      	ldr	r3, [pc, #104]	; (8003898 <SYSVIEW_AddTask+0xc4>)
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	491b      	ldr	r1, [pc, #108]	; (80038a0 <SYSVIEW_AddTask+0xcc>)
 8003832:	4613      	mov	r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	4413      	add	r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	440b      	add	r3, r1
 800383c:	3308      	adds	r3, #8
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003842:	4b15      	ldr	r3, [pc, #84]	; (8003898 <SYSVIEW_AddTask+0xc4>)
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	4916      	ldr	r1, [pc, #88]	; (80038a0 <SYSVIEW_AddTask+0xcc>)
 8003848:	4613      	mov	r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	4413      	add	r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	440b      	add	r3, r1
 8003852:	330c      	adds	r3, #12
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003858:	4b0f      	ldr	r3, [pc, #60]	; (8003898 <SYSVIEW_AddTask+0xc4>)
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	4910      	ldr	r1, [pc, #64]	; (80038a0 <SYSVIEW_AddTask+0xcc>)
 800385e:	4613      	mov	r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	4413      	add	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	440b      	add	r3, r1
 8003868:	3310      	adds	r3, #16
 800386a:	69ba      	ldr	r2, [r7, #24]
 800386c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800386e:	4b0a      	ldr	r3, [pc, #40]	; (8003898 <SYSVIEW_AddTask+0xc4>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	3301      	adds	r3, #1
 8003874:	4a08      	ldr	r2, [pc, #32]	; (8003898 <SYSVIEW_AddTask+0xc4>)
 8003876:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	68b9      	ldr	r1, [r7, #8]
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f000 f80e 	bl	80038a4 <SYSVIEW_SendTaskInfo>
 8003888:	e000      	b.n	800388c <SYSVIEW_AddTask+0xb8>
    return;
 800388a:	bf00      	nop

}
 800388c:	3710      	adds	r7, #16
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	08007c18 	.word	0x08007c18
 8003898:	20012f00 	.word	0x20012f00
 800389c:	08007c20 	.word	0x08007c20
 80038a0:	20012e60 	.word	0x20012e60

080038a4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b08a      	sub	sp, #40	; 0x28
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
 80038b0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80038b2:	f107 0314 	add.w	r3, r7, #20
 80038b6:	2214      	movs	r2, #20
 80038b8:	2100      	movs	r1, #0
 80038ba:	4618      	mov	r0, r3
 80038bc:	f003 fc64 	bl	8007188 <memset>
  TaskInfo.TaskID     = TaskID;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80038d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d2:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80038d4:	f107 0314 	add.w	r3, r7, #20
 80038d8:	4618      	mov	r0, r3
 80038da:	f001 fbb9 	bl	8005050 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80038de:	bf00      	nop
 80038e0:	3728      	adds	r7, #40	; 0x28
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
	...

080038e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	4603      	mov	r3, r0
 80038f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	db0b      	blt.n	8003912 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038fa:	79fb      	ldrb	r3, [r7, #7]
 80038fc:	f003 021f 	and.w	r2, r3, #31
 8003900:	4907      	ldr	r1, [pc, #28]	; (8003920 <__NVIC_EnableIRQ+0x38>)
 8003902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003906:	095b      	lsrs	r3, r3, #5
 8003908:	2001      	movs	r0, #1
 800390a:	fa00 f202 	lsl.w	r2, r0, r2
 800390e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003912:	bf00      	nop
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	e000e100 	.word	0xe000e100

08003924 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	4603      	mov	r3, r0
 800392c:	6039      	str	r1, [r7, #0]
 800392e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003934:	2b00      	cmp	r3, #0
 8003936:	db0a      	blt.n	800394e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	b2da      	uxtb	r2, r3
 800393c:	490c      	ldr	r1, [pc, #48]	; (8003970 <__NVIC_SetPriority+0x4c>)
 800393e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003942:	0112      	lsls	r2, r2, #4
 8003944:	b2d2      	uxtb	r2, r2
 8003946:	440b      	add	r3, r1
 8003948:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800394c:	e00a      	b.n	8003964 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	b2da      	uxtb	r2, r3
 8003952:	4908      	ldr	r1, [pc, #32]	; (8003974 <__NVIC_SetPriority+0x50>)
 8003954:	79fb      	ldrb	r3, [r7, #7]
 8003956:	f003 030f 	and.w	r3, r3, #15
 800395a:	3b04      	subs	r3, #4
 800395c:	0112      	lsls	r2, r2, #4
 800395e:	b2d2      	uxtb	r2, r2
 8003960:	440b      	add	r3, r1
 8003962:	761a      	strb	r2, [r3, #24]
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr
 8003970:	e000e100 	.word	0xe000e100
 8003974:	e000ed00 	.word	0xe000ed00

08003978 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 800397e:	f001 ffc3 	bl	8005908 <SEGGER_SYSVIEW_IsStarted>
 8003982:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d101      	bne.n	800398e <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 800398a:	f001 f9e5 	bl	8004d58 <SEGGER_SYSVIEW_Start>
  }
}
 800398e:	bf00      	nop
 8003990:	3708      	adds	r7, #8
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
	...

08003998 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	4603      	mov	r3, r0
 80039a0:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 80039a2:	4b0c      	ldr	r3, [pc, #48]	; (80039d4 <_cbOnUARTRx+0x3c>)
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	2b03      	cmp	r3, #3
 80039a8:	d806      	bhi.n	80039b8 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 80039aa:	4b0a      	ldr	r3, [pc, #40]	; (80039d4 <_cbOnUARTRx+0x3c>)
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	3301      	adds	r3, #1
 80039b0:	b2da      	uxtb	r2, r3
 80039b2:	4b08      	ldr	r3, [pc, #32]	; (80039d4 <_cbOnUARTRx+0x3c>)
 80039b4:	701a      	strb	r2, [r3, #0]
    goto Done;
 80039b6:	e009      	b.n	80039cc <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 80039b8:	f7ff ffde 	bl	8003978 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 80039bc:	4b05      	ldr	r3, [pc, #20]	; (80039d4 <_cbOnUARTRx+0x3c>)
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	4618      	mov	r0, r3
 80039c2:	1dfb      	adds	r3, r7, #7
 80039c4:	2201      	movs	r2, #1
 80039c6:	4619      	mov	r1, r3
 80039c8:	f000 fc0a 	bl	80041e0 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 80039cc:	bf00      	nop
}
 80039ce:	3708      	adds	r7, #8
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	2000000c 	.word	0x2000000c

080039d8 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 80039e0:	4b14      	ldr	r3, [pc, #80]	; (8003a34 <_cbOnUARTTx+0x5c>)
 80039e2:	785b      	ldrb	r3, [r3, #1]
 80039e4:	2b03      	cmp	r3, #3
 80039e6:	d80f      	bhi.n	8003a08 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 80039e8:	4b12      	ldr	r3, [pc, #72]	; (8003a34 <_cbOnUARTTx+0x5c>)
 80039ea:	785b      	ldrb	r3, [r3, #1]
 80039ec:	461a      	mov	r2, r3
 80039ee:	4b12      	ldr	r3, [pc, #72]	; (8003a38 <_cbOnUARTTx+0x60>)
 80039f0:	5c9a      	ldrb	r2, [r3, r2]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 80039f6:	4b0f      	ldr	r3, [pc, #60]	; (8003a34 <_cbOnUARTTx+0x5c>)
 80039f8:	785b      	ldrb	r3, [r3, #1]
 80039fa:	3301      	adds	r3, #1
 80039fc:	b2da      	uxtb	r2, r3
 80039fe:	4b0d      	ldr	r3, [pc, #52]	; (8003a34 <_cbOnUARTTx+0x5c>)
 8003a00:	705a      	strb	r2, [r3, #1]
    r = 1;
 8003a02:	2301      	movs	r3, #1
 8003a04:	60fb      	str	r3, [r7, #12]
    goto Done;
 8003a06:	e00f      	b.n	8003a28 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8003a08:	4b0a      	ldr	r3, [pc, #40]	; (8003a34 <_cbOnUARTTx+0x5c>)
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	6879      	ldr	r1, [r7, #4]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f000 fa39 	bl	8003e88 <SEGGER_RTT_ReadUpBufferNoLock>
 8003a16:	4603      	mov	r3, r0
 8003a18:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	da02      	bge.n	8003a26 <_cbOnUARTTx+0x4e>
    r = 0;
 8003a20:	2300      	movs	r3, #0
 8003a22:	60fb      	str	r3, [r7, #12]
 8003a24:	e000      	b.n	8003a28 <_cbOnUARTTx+0x50>
  }
Done:
 8003a26:	bf00      	nop
  return r;
 8003a28:	68fb      	ldr	r3, [r7, #12]
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3710      	adds	r7, #16
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	2000000c 	.word	0x2000000c
 8003a38:	08007c94 	.word	0x08007c94

08003a3c <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8003a44:	4a04      	ldr	r2, [pc, #16]	; (8003a58 <SEGGER_UART_init+0x1c>)
 8003a46:	4905      	ldr	r1, [pc, #20]	; (8003a5c <SEGGER_UART_init+0x20>)
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 f865 	bl	8003b18 <HIF_UART_Init>
}
 8003a4e:	bf00      	nop
 8003a50:	3708      	adds	r7, #8
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	08003999 	.word	0x08003999
 8003a5c:	080039d9 	.word	0x080039d9

08003a60 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8003a66:	4b1e      	ldr	r3, [pc, #120]	; (8003ae0 <USART2_IRQHandler+0x80>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f003 0320 	and.w	r3, r3, #32
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d011      	beq.n	8003a9a <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8003a76:	4b1b      	ldr	r3, [pc, #108]	; (8003ae4 <USART2_IRQHandler+0x84>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f003 030b 	and.w	r3, r3, #11
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d108      	bne.n	8003a9a <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8003a88:	4b17      	ldr	r3, [pc, #92]	; (8003ae8 <USART2_IRQHandler+0x88>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d004      	beq.n	8003a9a <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8003a90:	4b15      	ldr	r3, [pc, #84]	; (8003ae8 <USART2_IRQHandler+0x88>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	79fa      	ldrb	r2, [r7, #7]
 8003a96:	4610      	mov	r0, r2
 8003a98:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d01a      	beq.n	8003ada <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8003aa4:	4b11      	ldr	r3, [pc, #68]	; (8003aec <USART2_IRQHandler+0x8c>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d015      	beq.n	8003ad8 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8003aac:	4b0f      	ldr	r3, [pc, #60]	; (8003aec <USART2_IRQHandler+0x8c>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	1dfa      	adds	r2, r7, #7
 8003ab2:	4610      	mov	r0, r2
 8003ab4:	4798      	blx	r3
 8003ab6:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d106      	bne.n	8003acc <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8003abe:	4b0c      	ldr	r3, [pc, #48]	; (8003af0 <USART2_IRQHandler+0x90>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a0b      	ldr	r2, [pc, #44]	; (8003af0 <USART2_IRQHandler+0x90>)
 8003ac4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ac8:	6013      	str	r3, [r2, #0]
 8003aca:	e006      	b.n	8003ada <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8003acc:	4b04      	ldr	r3, [pc, #16]	; (8003ae0 <USART2_IRQHandler+0x80>)
 8003ace:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8003ad0:	79fa      	ldrb	r2, [r7, #7]
 8003ad2:	4b04      	ldr	r3, [pc, #16]	; (8003ae4 <USART2_IRQHandler+0x84>)
 8003ad4:	601a      	str	r2, [r3, #0]
 8003ad6:	e000      	b.n	8003ada <USART2_IRQHandler+0x7a>
      return;
 8003ad8:	bf00      	nop
    }
  }
}
 8003ada:	3710      	adds	r7, #16
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	40004400 	.word	0x40004400
 8003ae4:	40004404 	.word	0x40004404
 8003ae8:	20012f04 	.word	0x20012f04
 8003aec:	20012f08 	.word	0x20012f08
 8003af0:	4000440c 	.word	0x4000440c

08003af4 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8003af4:	b480      	push	{r7}
 8003af6:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8003af8:	4b05      	ldr	r3, [pc, #20]	; (8003b10 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a04      	ldr	r2, [pc, #16]	; (8003b10 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003afe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b02:	6013      	str	r3, [r2, #0]
}
 8003b04:	bf00      	nop
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	4000440c 	.word	0x4000440c
 8003b14:	00000000 	.word	0x00000000

08003b18 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b086      	sub	sp, #24
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8003b24:	4b3c      	ldr	r3, [pc, #240]	; (8003c18 <HIF_UART_Init+0x100>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a3b      	ldr	r2, [pc, #236]	; (8003c18 <HIF_UART_Init+0x100>)
 8003b2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b2e:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8003b30:	4b3a      	ldr	r3, [pc, #232]	; (8003c1c <HIF_UART_Init+0x104>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a39      	ldr	r2, [pc, #228]	; (8003c1c <HIF_UART_Init+0x104>)
 8003b36:	f043 0301 	orr.w	r3, r3, #1
 8003b3a:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8003b3c:	4b38      	ldr	r3, [pc, #224]	; (8003c20 <HIF_UART_Init+0x108>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b48:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8003b50:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8003b52:	4a33      	ldr	r2, [pc, #204]	; (8003c20 <HIF_UART_Init+0x108>)
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8003b58:	4b32      	ldr	r3, [pc, #200]	; (8003c24 <HIF_UART_Init+0x10c>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b64:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8003b6c:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8003b6e:	4a2d      	ldr	r2, [pc, #180]	; (8003c24 <HIF_UART_Init+0x10c>)
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8003b74:	4b2c      	ldr	r3, [pc, #176]	; (8003c28 <HIF_UART_Init+0x110>)
 8003b76:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8003b7a:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8003b7c:	4b2b      	ldr	r3, [pc, #172]	; (8003c2c <HIF_UART_Init+0x114>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8003b82:	4b2b      	ldr	r3, [pc, #172]	; (8003c30 <HIF_UART_Init+0x118>)
 8003b84:	2280      	movs	r2, #128	; 0x80
 8003b86:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	00db      	lsls	r3, r3, #3
 8003b8c:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8003b8e:	6978      	ldr	r0, [r7, #20]
 8003b90:	f7fc fcb2 	bl	80004f8 <__aeabi_ui2d>
 8003b94:	4602      	mov	r2, r0
 8003b96:	460b      	mov	r3, r1
 8003b98:	a11d      	add	r1, pc, #116	; (adr r1, 8003c10 <HIF_UART_Init+0xf8>)
 8003b9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b9e:	f7fc fe4f 	bl	8000840 <__aeabi_ddiv>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	4610      	mov	r0, r2
 8003ba8:	4619      	mov	r1, r3
 8003baa:	f04f 0200 	mov.w	r2, #0
 8003bae:	4b21      	ldr	r3, [pc, #132]	; (8003c34 <HIF_UART_Init+0x11c>)
 8003bb0:	f7fc fb66 	bl	8000280 <__adddf3>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	4610      	mov	r0, r2
 8003bba:	4619      	mov	r1, r3
 8003bbc:	f7fc ff28 	bl	8000a10 <__aeabi_d2uiz>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	085b      	lsrs	r3, r3, #1
 8003bc8:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bd0:	d302      	bcc.n	8003bd8 <HIF_UART_Init+0xc0>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8003bd2:	f640 73ff 	movw	r3, #4095	; 0xfff
 8003bd6:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d004      	beq.n	8003be8 <HIF_UART_Init+0xd0>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	011b      	lsls	r3, r3, #4
 8003be2:	4a15      	ldr	r2, [pc, #84]	; (8003c38 <HIF_UART_Init+0x120>)
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8003be8:	4a14      	ldr	r2, [pc, #80]	; (8003c3c <HIF_UART_Init+0x124>)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8003bee:	4a14      	ldr	r2, [pc, #80]	; (8003c40 <HIF_UART_Init+0x128>)
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8003bf4:	2106      	movs	r1, #6
 8003bf6:	2026      	movs	r0, #38	; 0x26
 8003bf8:	f7ff fe94 	bl	8003924 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8003bfc:	2026      	movs	r0, #38	; 0x26
 8003bfe:	f7ff fe73 	bl	80038e8 <__NVIC_EnableIRQ>
}
 8003c02:	bf00      	nop
 8003c04:	3718      	adds	r7, #24
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	f3af 8000 	nop.w
 8003c10:	00000000 	.word	0x00000000
 8003c14:	4197d784 	.word	0x4197d784
 8003c18:	40023840 	.word	0x40023840
 8003c1c:	40023830 	.word	0x40023830
 8003c20:	40020020 	.word	0x40020020
 8003c24:	40020000 	.word	0x40020000
 8003c28:	4000440c 	.word	0x4000440c
 8003c2c:	40004410 	.word	0x40004410
 8003c30:	40004414 	.word	0x40004414
 8003c34:	3ff00000 	.word	0x3ff00000
 8003c38:	40004408 	.word	0x40004408
 8003c3c:	20012f04 	.word	0x20012f04
 8003c40:	20012f08 	.word	0x20012f08

08003c44 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003c4a:	4b26      	ldr	r3, [pc, #152]	; (8003ce4 <_DoInit+0xa0>)
 8003c4c:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8003c4e:	22a8      	movs	r2, #168	; 0xa8
 8003c50:	2100      	movs	r1, #0
 8003c52:	6838      	ldr	r0, [r7, #0]
 8003c54:	f003 fa98 	bl	8007188 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	2203      	movs	r2, #3
 8003c5c:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	2203      	movs	r2, #3
 8003c62:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	4a20      	ldr	r2, [pc, #128]	; (8003ce8 <_DoInit+0xa4>)
 8003c68:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	4a1f      	ldr	r2, [pc, #124]	; (8003cec <_DoInit+0xa8>)
 8003c6e:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c76:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	2200      	movs	r2, #0
 8003c82:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	2200      	movs	r2, #0
 8003c88:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	4a16      	ldr	r2, [pc, #88]	; (8003ce8 <_DoInit+0xa4>)
 8003c8e:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	4a17      	ldr	r2, [pc, #92]	; (8003cf0 <_DoInit+0xac>)
 8003c94:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	2210      	movs	r2, #16
 8003c9a:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	2200      	movs	r2, #0
 8003cac:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003cae:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	607b      	str	r3, [r7, #4]
 8003cb6:	e00c      	b.n	8003cd2 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f1c3 030f 	rsb	r3, r3, #15
 8003cbe:	4a0d      	ldr	r2, [pc, #52]	; (8003cf4 <_DoInit+0xb0>)
 8003cc0:	5cd1      	ldrb	r1, [r2, r3]
 8003cc2:	683a      	ldr	r2, [r7, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	460a      	mov	r2, r1
 8003cca:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	3301      	adds	r3, #1
 8003cd0:	607b      	str	r3, [r7, #4]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2b0f      	cmp	r3, #15
 8003cd6:	d9ef      	bls.n	8003cb8 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003cd8:	f3bf 8f5f 	dmb	sy
}
 8003cdc:	bf00      	nop
 8003cde:	3708      	adds	r7, #8
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	20012f0c 	.word	0x20012f0c
 8003ce8:	08007c70 	.word	0x08007c70
 8003cec:	20012fb4 	.word	0x20012fb4
 8003cf0:	200133b4 	.word	0x200133b4
 8003cf4:	08007c98 	.word	0x08007c98

08003cf8 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b08a      	sub	sp, #40	; 0x28
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8003d04:	2300      	movs	r3, #0
 8003d06:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d905      	bls.n	8003d28 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	3b01      	subs	r3, #1
 8003d24:	627b      	str	r3, [r7, #36]	; 0x24
 8003d26:	e007      	b.n	8003d38 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	689a      	ldr	r2, [r3, #8]
 8003d2c:	69b9      	ldr	r1, [r7, #24]
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	1acb      	subs	r3, r1, r3
 8003d32:	4413      	add	r3, r2
 8003d34:	3b01      	subs	r3, #1
 8003d36:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	689a      	ldr	r2, [r3, #8]
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d42:	4293      	cmp	r3, r2
 8003d44:	bf28      	it	cs
 8003d46:	4613      	movcs	r3, r2
 8003d48:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8003d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	bf28      	it	cs
 8003d52:	4613      	movcs	r3, r2
 8003d54:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	685a      	ldr	r2, [r3, #4]
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d62:	68b9      	ldr	r1, [r7, #8]
 8003d64:	6978      	ldr	r0, [r7, #20]
 8003d66:	f003 fa01 	bl	800716c <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8003d6a:	6a3a      	ldr	r2, [r7, #32]
 8003d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6e:	4413      	add	r3, r2
 8003d70:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8003d72:	68ba      	ldr	r2, [r7, #8]
 8003d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d76:	4413      	add	r3, r2
 8003d78:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003d82:	69fa      	ldr	r2, [r7, #28]
 8003d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d86:	4413      	add	r3, r2
 8003d88:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	69fa      	ldr	r2, [r7, #28]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d101      	bne.n	8003d98 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8003d94:	2300      	movs	r3, #0
 8003d96:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003d98:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	69fa      	ldr	r2, [r7, #28]
 8003da0:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1b2      	bne.n	8003d0e <_WriteBlocking+0x16>
  return NumBytesWritten;
 8003da8:	6a3b      	ldr	r3, [r7, #32]
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3728      	adds	r7, #40	; 0x28
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b088      	sub	sp, #32
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	60f8      	str	r0, [r7, #12]
 8003dba:	60b9      	str	r1, [r7, #8]
 8003dbc:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	689a      	ldr	r2, [r3, #8]
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003dce:	69ba      	ldr	r2, [r7, #24]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d911      	bls.n	8003dfa <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	685a      	ldr	r2, [r3, #4]
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	4413      	add	r3, r2
 8003dde:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	68b9      	ldr	r1, [r7, #8]
 8003de4:	6938      	ldr	r0, [r7, #16]
 8003de6:	f003 f9c1 	bl	800716c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003dea:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8003dee:	69fa      	ldr	r2, [r7, #28]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	441a      	add	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8003df8:	e01f      	b.n	8003e3a <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	685a      	ldr	r2, [r3, #4]
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	4413      	add	r3, r2
 8003e06:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	68b9      	ldr	r1, [r7, #8]
 8003e0c:	6938      	ldr	r0, [r7, #16]
 8003e0e:	f003 f9ad 	bl	800716c <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8003e20:	68ba      	ldr	r2, [r7, #8]
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	4413      	add	r3, r2
 8003e26:	697a      	ldr	r2, [r7, #20]
 8003e28:	4619      	mov	r1, r3
 8003e2a:	6938      	ldr	r0, [r7, #16]
 8003e2c:	f003 f99e 	bl	800716c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003e30:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	697a      	ldr	r2, [r7, #20]
 8003e38:	60da      	str	r2, [r3, #12]
}
 8003e3a:	bf00      	nop
 8003e3c:	3720      	adds	r7, #32
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003e42:	b480      	push	{r7}
 8003e44:	b087      	sub	sp, #28
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d808      	bhi.n	8003e70 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	689a      	ldr	r2, [r3, #8]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	1ad2      	subs	r2, r2, r3
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	4413      	add	r3, r2
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	617b      	str	r3, [r7, #20]
 8003e6e:	e004      	b.n	8003e7a <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	3b01      	subs	r3, #1
 8003e78:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003e7a:	697b      	ldr	r3, [r7, #20]
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	371c      	adds	r7, #28
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b08c      	sub	sp, #48	; 0x30
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8003e94:	4b3e      	ldr	r3, [pc, #248]	; (8003f90 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003e96:	623b      	str	r3, [r7, #32]
 8003e98:	6a3b      	ldr	r3, [r7, #32]
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b53      	cmp	r3, #83	; 0x53
 8003ea0:	d001      	beq.n	8003ea6 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8003ea2:	f7ff fecf 	bl	8003c44 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	1c5a      	adds	r2, r3, #1
 8003eaa:	4613      	mov	r3, r2
 8003eac:	005b      	lsls	r3, r3, #1
 8003eae:	4413      	add	r3, r2
 8003eb0:	00db      	lsls	r3, r3, #3
 8003eb2:	4a37      	ldr	r2, [pc, #220]	; (8003f90 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003eb4:	4413      	add	r3, r2
 8003eb6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003ecc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d92b      	bls.n	8003f2c <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	689a      	ldr	r2, [r3, #8]
 8003ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003ede:	697a      	ldr	r2, [r7, #20]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	bf28      	it	cs
 8003ee6:	4613      	movcs	r3, r2
 8003ee8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	685a      	ldr	r2, [r3, #4]
 8003eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef0:	4413      	add	r3, r2
 8003ef2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003ef4:	697a      	ldr	r2, [r7, #20]
 8003ef6:	6939      	ldr	r1, [r7, #16]
 8003ef8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003efa:	f003 f937 	bl	800716c <memcpy>
    NumBytesRead += NumBytesRem;
 8003efe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	4413      	add	r3, r2
 8003f04:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003f06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003f16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d101      	bne.n	8003f2c <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003f2c:	69ba      	ldr	r2, [r7, #24]
 8003f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003f34:	697a      	ldr	r2, [r7, #20]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	bf28      	it	cs
 8003f3c:	4613      	movcs	r3, r2
 8003f3e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d019      	beq.n	8003f7a <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	685a      	ldr	r2, [r3, #4]
 8003f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f4c:	4413      	add	r3, r2
 8003f4e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003f50:	697a      	ldr	r2, [r7, #20]
 8003f52:	6939      	ldr	r1, [r7, #16]
 8003f54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f56:	f003 f909 	bl	800716c <memcpy>
    NumBytesRead += NumBytesRem;
 8003f5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	4413      	add	r3, r2
 8003f60:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003f62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	4413      	add	r3, r2
 8003f68:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003f72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	4413      	add	r3, r2
 8003f78:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8003f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d002      	beq.n	8003f86 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f84:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3730      	adds	r7, #48	; 0x30
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	20012f0c 	.word	0x20012f0c

08003f94 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b08c      	sub	sp, #48	; 0x30
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003fa0:	4b3e      	ldr	r3, [pc, #248]	; (800409c <SEGGER_RTT_ReadNoLock+0x108>)
 8003fa2:	623b      	str	r3, [r7, #32]
 8003fa4:	6a3b      	ldr	r3, [r7, #32]
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b53      	cmp	r3, #83	; 0x53
 8003fac:	d001      	beq.n	8003fb2 <SEGGER_RTT_ReadNoLock+0x1e>
 8003fae:	f7ff fe49 	bl	8003c44 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	005b      	lsls	r3, r3, #1
 8003fb8:	4413      	add	r3, r2
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	3360      	adds	r3, #96	; 0x60
 8003fbe:	4a37      	ldr	r2, [pc, #220]	; (800409c <SEGGER_RTT_ReadNoLock+0x108>)
 8003fc0:	4413      	add	r3, r2
 8003fc2:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003fd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d92b      	bls.n	8004038 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	689a      	ldr	r2, [r3, #8]
 8003fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	bf28      	it	cs
 8003ff2:	4613      	movcs	r3, r2
 8003ff4:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	685a      	ldr	r2, [r3, #4]
 8003ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ffc:	4413      	add	r3, r2
 8003ffe:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004000:	697a      	ldr	r2, [r7, #20]
 8004002:	6939      	ldr	r1, [r7, #16]
 8004004:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004006:	f003 f8b1 	bl	800716c <memcpy>
    NumBytesRead += NumBytesRem;
 800400a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	4413      	add	r3, r2
 8004010:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	4413      	add	r3, r2
 8004018:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004022:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	4413      	add	r3, r2
 8004028:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004030:	429a      	cmp	r2, r3
 8004032:	d101      	bne.n	8004038 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004034:	2300      	movs	r3, #0
 8004036:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004038:	69ba      	ldr	r2, [r7, #24]
 800403a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004040:	697a      	ldr	r2, [r7, #20]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4293      	cmp	r3, r2
 8004046:	bf28      	it	cs
 8004048:	4613      	movcs	r3, r2
 800404a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d019      	beq.n	8004086 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	685a      	ldr	r2, [r3, #4]
 8004056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004058:	4413      	add	r3, r2
 800405a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800405c:	697a      	ldr	r2, [r7, #20]
 800405e:	6939      	ldr	r1, [r7, #16]
 8004060:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004062:	f003 f883 	bl	800716c <memcpy>
    NumBytesRead += NumBytesRem;
 8004066:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	4413      	add	r3, r2
 800406c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800406e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	4413      	add	r3, r2
 8004074:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800407e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	4413      	add	r3, r2
 8004084:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004088:	2b00      	cmp	r3, #0
 800408a:	d002      	beq.n	8004092 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004090:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004094:	4618      	mov	r0, r3
 8004096:	3730      	adds	r7, #48	; 0x30
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	20012f0c 	.word	0x20012f0c

080040a0 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b088      	sub	sp, #32
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	4613      	mov	r3, r2
 80040b4:	005b      	lsls	r3, r3, #1
 80040b6:	4413      	add	r3, r2
 80040b8:	00db      	lsls	r3, r3, #3
 80040ba:	3360      	adds	r3, #96	; 0x60
 80040bc:	4a1f      	ldr	r2, [pc, #124]	; (800413c <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 80040be:	4413      	add	r3, r2
 80040c0:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d029      	beq.n	800411e <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d82e      	bhi.n	800412c <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d002      	beq.n	80040d8 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d013      	beq.n	80040fe <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 80040d6:	e029      	b.n	800412c <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80040d8:	6978      	ldr	r0, [r7, #20]
 80040da:	f7ff feb2 	bl	8003e42 <_GetAvailWriteSpace>
 80040de:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80040e0:	693a      	ldr	r2, [r7, #16]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d202      	bcs.n	80040ee <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 80040e8:	2300      	movs	r3, #0
 80040ea:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80040ec:	e021      	b.n	8004132 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	69b9      	ldr	r1, [r7, #24]
 80040f6:	6978      	ldr	r0, [r7, #20]
 80040f8:	f7ff fe5b 	bl	8003db2 <_WriteNoCheck>
    break;
 80040fc:	e019      	b.n	8004132 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80040fe:	6978      	ldr	r0, [r7, #20]
 8004100:	f7ff fe9f 	bl	8003e42 <_GetAvailWriteSpace>
 8004104:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	4293      	cmp	r3, r2
 800410c:	bf28      	it	cs
 800410e:	4613      	movcs	r3, r2
 8004110:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8004112:	69fa      	ldr	r2, [r7, #28]
 8004114:	69b9      	ldr	r1, [r7, #24]
 8004116:	6978      	ldr	r0, [r7, #20]
 8004118:	f7ff fe4b 	bl	8003db2 <_WriteNoCheck>
    break;
 800411c:	e009      	b.n	8004132 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	69b9      	ldr	r1, [r7, #24]
 8004122:	6978      	ldr	r0, [r7, #20]
 8004124:	f7ff fde8 	bl	8003cf8 <_WriteBlocking>
 8004128:	61f8      	str	r0, [r7, #28]
    break;
 800412a:	e002      	b.n	8004132 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 800412c:	2300      	movs	r3, #0
 800412e:	61fb      	str	r3, [r7, #28]
    break;
 8004130:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8004132:	69fb      	ldr	r3, [r7, #28]
}
 8004134:	4618      	mov	r0, r3
 8004136:	3720      	adds	r7, #32
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	20012f0c 	.word	0x20012f0c

08004140 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004140:	b580      	push	{r7, lr}
 8004142:	b088      	sub	sp, #32
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	1c5a      	adds	r2, r3, #1
 8004154:	4613      	mov	r3, r2
 8004156:	005b      	lsls	r3, r3, #1
 8004158:	4413      	add	r3, r2
 800415a:	00db      	lsls	r3, r3, #3
 800415c:	4a1f      	ldr	r2, [pc, #124]	; (80041dc <SEGGER_RTT_WriteNoLock+0x9c>)
 800415e:	4413      	add	r3, r2
 8004160:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	2b02      	cmp	r3, #2
 8004168:	d029      	beq.n	80041be <SEGGER_RTT_WriteNoLock+0x7e>
 800416a:	2b02      	cmp	r3, #2
 800416c:	d82e      	bhi.n	80041cc <SEGGER_RTT_WriteNoLock+0x8c>
 800416e:	2b00      	cmp	r3, #0
 8004170:	d002      	beq.n	8004178 <SEGGER_RTT_WriteNoLock+0x38>
 8004172:	2b01      	cmp	r3, #1
 8004174:	d013      	beq.n	800419e <SEGGER_RTT_WriteNoLock+0x5e>
 8004176:	e029      	b.n	80041cc <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004178:	6978      	ldr	r0, [r7, #20]
 800417a:	f7ff fe62 	bl	8003e42 <_GetAvailWriteSpace>
 800417e:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	429a      	cmp	r2, r3
 8004186:	d202      	bcs.n	800418e <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8004188:	2300      	movs	r3, #0
 800418a:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 800418c:	e021      	b.n	80041d2 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	69b9      	ldr	r1, [r7, #24]
 8004196:	6978      	ldr	r0, [r7, #20]
 8004198:	f7ff fe0b 	bl	8003db2 <_WriteNoCheck>
    break;
 800419c:	e019      	b.n	80041d2 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800419e:	6978      	ldr	r0, [r7, #20]
 80041a0:	f7ff fe4f 	bl	8003e42 <_GetAvailWriteSpace>
 80041a4:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	4293      	cmp	r3, r2
 80041ac:	bf28      	it	cs
 80041ae:	4613      	movcs	r3, r2
 80041b0:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80041b2:	69fa      	ldr	r2, [r7, #28]
 80041b4:	69b9      	ldr	r1, [r7, #24]
 80041b6:	6978      	ldr	r0, [r7, #20]
 80041b8:	f7ff fdfb 	bl	8003db2 <_WriteNoCheck>
    break;
 80041bc:	e009      	b.n	80041d2 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	69b9      	ldr	r1, [r7, #24]
 80041c2:	6978      	ldr	r0, [r7, #20]
 80041c4:	f7ff fd98 	bl	8003cf8 <_WriteBlocking>
 80041c8:	61f8      	str	r0, [r7, #28]
    break;
 80041ca:	e002      	b.n	80041d2 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 80041cc:	2300      	movs	r3, #0
 80041ce:	61fb      	str	r3, [r7, #28]
    break;
 80041d0:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80041d2:	69fb      	ldr	r3, [r7, #28]
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3720      	adds	r7, #32
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	20012f0c 	.word	0x20012f0c

080041e0 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b088      	sub	sp, #32
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80041ec:	4b0e      	ldr	r3, [pc, #56]	; (8004228 <SEGGER_RTT_WriteDownBuffer+0x48>)
 80041ee:	61fb      	str	r3, [r7, #28]
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b53      	cmp	r3, #83	; 0x53
 80041f8:	d001      	beq.n	80041fe <SEGGER_RTT_WriteDownBuffer+0x1e>
 80041fa:	f7ff fd23 	bl	8003c44 <_DoInit>
  SEGGER_RTT_LOCK();
 80041fe:	f3ef 8311 	mrs	r3, BASEPRI
 8004202:	f04f 0120 	mov.w	r1, #32
 8004206:	f381 8811 	msr	BASEPRI, r1
 800420a:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	68b9      	ldr	r1, [r7, #8]
 8004210:	68f8      	ldr	r0, [r7, #12]
 8004212:	f7ff ff45 	bl	80040a0 <SEGGER_RTT_WriteDownBufferNoLock>
 8004216:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800421e:	697b      	ldr	r3, [r7, #20]
}
 8004220:	4618      	mov	r0, r3
 8004222:	3720      	adds	r7, #32
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	20012f0c 	.word	0x20012f0c

0800422c <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800422c:	b580      	push	{r7, lr}
 800422e:	b088      	sub	sp, #32
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8004238:	4b0e      	ldr	r3, [pc, #56]	; (8004274 <SEGGER_RTT_Write+0x48>)
 800423a:	61fb      	str	r3, [r7, #28]
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	b2db      	uxtb	r3, r3
 8004242:	2b53      	cmp	r3, #83	; 0x53
 8004244:	d001      	beq.n	800424a <SEGGER_RTT_Write+0x1e>
 8004246:	f7ff fcfd 	bl	8003c44 <_DoInit>
  SEGGER_RTT_LOCK();
 800424a:	f3ef 8311 	mrs	r3, BASEPRI
 800424e:	f04f 0120 	mov.w	r1, #32
 8004252:	f381 8811 	msr	BASEPRI, r1
 8004256:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	68b9      	ldr	r1, [r7, #8]
 800425c:	68f8      	ldr	r0, [r7, #12]
 800425e:	f7ff ff6f 	bl	8004140 <SEGGER_RTT_WriteNoLock>
 8004262:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800426a:	697b      	ldr	r3, [r7, #20]
}
 800426c:	4618      	mov	r0, r3
 800426e:	3720      	adds	r7, #32
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	20012f0c 	.word	0x20012f0c

08004278 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004278:	b580      	push	{r7, lr}
 800427a:	b088      	sub	sp, #32
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	607a      	str	r2, [r7, #4]
 8004284:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004286:	4b3d      	ldr	r3, [pc, #244]	; (800437c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004288:	61bb      	str	r3, [r7, #24]
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	b2db      	uxtb	r3, r3
 8004290:	2b53      	cmp	r3, #83	; 0x53
 8004292:	d001      	beq.n	8004298 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004294:	f7ff fcd6 	bl	8003c44 <_DoInit>
  SEGGER_RTT_LOCK();
 8004298:	f3ef 8311 	mrs	r3, BASEPRI
 800429c:	f04f 0120 	mov.w	r1, #32
 80042a0:	f381 8811 	msr	BASEPRI, r1
 80042a4:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80042a6:	4b35      	ldr	r3, [pc, #212]	; (800437c <SEGGER_RTT_AllocUpBuffer+0x104>)
 80042a8:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80042aa:	2300      	movs	r3, #0
 80042ac:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80042ae:	6939      	ldr	r1, [r7, #16]
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	1c5a      	adds	r2, r3, #1
 80042b4:	4613      	mov	r3, r2
 80042b6:	005b      	lsls	r3, r3, #1
 80042b8:	4413      	add	r3, r2
 80042ba:	00db      	lsls	r3, r3, #3
 80042bc:	440b      	add	r3, r1
 80042be:	3304      	adds	r3, #4
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d008      	beq.n	80042d8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	3301      	adds	r3, #1
 80042ca:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	69fa      	ldr	r2, [r7, #28]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	dbeb      	blt.n	80042ae <SEGGER_RTT_AllocUpBuffer+0x36>
 80042d6:	e000      	b.n	80042da <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80042d8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	69fa      	ldr	r2, [r7, #28]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	da3f      	bge.n	8004364 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80042e4:	6939      	ldr	r1, [r7, #16]
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	1c5a      	adds	r2, r3, #1
 80042ea:	4613      	mov	r3, r2
 80042ec:	005b      	lsls	r3, r3, #1
 80042ee:	4413      	add	r3, r2
 80042f0:	00db      	lsls	r3, r3, #3
 80042f2:	440b      	add	r3, r1
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80042f8:	6939      	ldr	r1, [r7, #16]
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	1c5a      	adds	r2, r3, #1
 80042fe:	4613      	mov	r3, r2
 8004300:	005b      	lsls	r3, r3, #1
 8004302:	4413      	add	r3, r2
 8004304:	00db      	lsls	r3, r3, #3
 8004306:	440b      	add	r3, r1
 8004308:	3304      	adds	r3, #4
 800430a:	68ba      	ldr	r2, [r7, #8]
 800430c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800430e:	6939      	ldr	r1, [r7, #16]
 8004310:	69fa      	ldr	r2, [r7, #28]
 8004312:	4613      	mov	r3, r2
 8004314:	005b      	lsls	r3, r3, #1
 8004316:	4413      	add	r3, r2
 8004318:	00db      	lsls	r3, r3, #3
 800431a:	440b      	add	r3, r1
 800431c:	3320      	adds	r3, #32
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004322:	6939      	ldr	r1, [r7, #16]
 8004324:	69fa      	ldr	r2, [r7, #28]
 8004326:	4613      	mov	r3, r2
 8004328:	005b      	lsls	r3, r3, #1
 800432a:	4413      	add	r3, r2
 800432c:	00db      	lsls	r3, r3, #3
 800432e:	440b      	add	r3, r1
 8004330:	3328      	adds	r3, #40	; 0x28
 8004332:	2200      	movs	r2, #0
 8004334:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004336:	6939      	ldr	r1, [r7, #16]
 8004338:	69fa      	ldr	r2, [r7, #28]
 800433a:	4613      	mov	r3, r2
 800433c:	005b      	lsls	r3, r3, #1
 800433e:	4413      	add	r3, r2
 8004340:	00db      	lsls	r3, r3, #3
 8004342:	440b      	add	r3, r1
 8004344:	3324      	adds	r3, #36	; 0x24
 8004346:	2200      	movs	r2, #0
 8004348:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800434a:	6939      	ldr	r1, [r7, #16]
 800434c:	69fa      	ldr	r2, [r7, #28]
 800434e:	4613      	mov	r3, r2
 8004350:	005b      	lsls	r3, r3, #1
 8004352:	4413      	add	r3, r2
 8004354:	00db      	lsls	r3, r3, #3
 8004356:	440b      	add	r3, r1
 8004358:	332c      	adds	r3, #44	; 0x2c
 800435a:	683a      	ldr	r2, [r7, #0]
 800435c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800435e:	f3bf 8f5f 	dmb	sy
 8004362:	e002      	b.n	800436a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004364:	f04f 33ff 	mov.w	r3, #4294967295
 8004368:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004370:	69fb      	ldr	r3, [r7, #28]
}
 8004372:	4618      	mov	r0, r3
 8004374:	3720      	adds	r7, #32
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	20012f0c 	.word	0x20012f0c

08004380 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004380:	b580      	push	{r7, lr}
 8004382:	b08a      	sub	sp, #40	; 0x28
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]
 800438c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800438e:	4b21      	ldr	r3, [pc, #132]	; (8004414 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004390:	623b      	str	r3, [r7, #32]
 8004392:	6a3b      	ldr	r3, [r7, #32]
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	b2db      	uxtb	r3, r3
 8004398:	2b53      	cmp	r3, #83	; 0x53
 800439a:	d001      	beq.n	80043a0 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800439c:	f7ff fc52 	bl	8003c44 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80043a0:	4b1c      	ldr	r3, [pc, #112]	; (8004414 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80043a2:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d82c      	bhi.n	8004404 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80043aa:	f3ef 8311 	mrs	r3, BASEPRI
 80043ae:	f04f 0120 	mov.w	r1, #32
 80043b2:	f381 8811 	msr	BASEPRI, r1
 80043b6:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80043b8:	68fa      	ldr	r2, [r7, #12]
 80043ba:	4613      	mov	r3, r2
 80043bc:	005b      	lsls	r3, r3, #1
 80043be:	4413      	add	r3, r2
 80043c0:	00db      	lsls	r3, r3, #3
 80043c2:	3360      	adds	r3, #96	; 0x60
 80043c4:	69fa      	ldr	r2, [r7, #28]
 80043c6:	4413      	add	r3, r2
 80043c8:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d00e      	beq.n	80043ee <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	68ba      	ldr	r2, [r7, #8]
 80043d4:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	683a      	ldr	r2, [r7, #0]
 80043e0:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	2200      	movs	r2, #0
 80043e6:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	2200      	movs	r2, #0
 80043ec:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043f2:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80043f4:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80043fe:	2300      	movs	r3, #0
 8004400:	627b      	str	r3, [r7, #36]	; 0x24
 8004402:	e002      	b.n	800440a <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8004404:	f04f 33ff 	mov.w	r3, #4294967295
 8004408:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800440a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800440c:	4618      	mov	r0, r3
 800440e:	3728      	adds	r7, #40	; 0x28
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	20012f0c 	.word	0x20012f0c

08004418 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004418:	b480      	push	{r7}
 800441a:	b087      	sub	sp, #28
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	1c5a      	adds	r2, r3, #1
 800442c:	60fa      	str	r2, [r7, #12]
 800442e:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b80      	cmp	r3, #128	; 0x80
 8004434:	d90a      	bls.n	800444c <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8004436:	2380      	movs	r3, #128	; 0x80
 8004438:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 800443a:	e007      	b.n	800444c <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 800443c:	68ba      	ldr	r2, [r7, #8]
 800443e:	1c53      	adds	r3, r2, #1
 8004440:	60bb      	str	r3, [r7, #8]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	1c59      	adds	r1, r3, #1
 8004446:	60f9      	str	r1, [r7, #12]
 8004448:	7812      	ldrb	r2, [r2, #0]
 800444a:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	1e5a      	subs	r2, r3, #1
 8004450:	607a      	str	r2, [r7, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d003      	beq.n	800445e <_EncodeStr+0x46>
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1ee      	bne.n	800443c <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 800445e:	68ba      	ldr	r2, [r7, #8]
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	b2da      	uxtb	r2, r3
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 800446a:	68fb      	ldr	r3, [r7, #12]
}
 800446c:	4618      	mov	r0, r3
 800446e:	371c      	adds	r7, #28
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	3307      	adds	r3, #7
}
 8004484:	4618      	mov	r0, r3
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004496:	4b35      	ldr	r3, [pc, #212]	; (800456c <_HandleIncomingPacket+0xdc>)
 8004498:	7e1b      	ldrb	r3, [r3, #24]
 800449a:	4618      	mov	r0, r3
 800449c:	1cfb      	adds	r3, r7, #3
 800449e:	2201      	movs	r2, #1
 80044a0:	4619      	mov	r1, r3
 80044a2:	f7ff fd77 	bl	8003f94 <SEGGER_RTT_ReadNoLock>
 80044a6:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d052      	beq.n	8004554 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 80044ae:	78fb      	ldrb	r3, [r7, #3]
 80044b0:	2b80      	cmp	r3, #128	; 0x80
 80044b2:	d031      	beq.n	8004518 <_HandleIncomingPacket+0x88>
 80044b4:	2b80      	cmp	r3, #128	; 0x80
 80044b6:	dc40      	bgt.n	800453a <_HandleIncomingPacket+0xaa>
 80044b8:	2b07      	cmp	r3, #7
 80044ba:	dc15      	bgt.n	80044e8 <_HandleIncomingPacket+0x58>
 80044bc:	2b00      	cmp	r3, #0
 80044be:	dd3c      	ble.n	800453a <_HandleIncomingPacket+0xaa>
 80044c0:	3b01      	subs	r3, #1
 80044c2:	2b06      	cmp	r3, #6
 80044c4:	d839      	bhi.n	800453a <_HandleIncomingPacket+0xaa>
 80044c6:	a201      	add	r2, pc, #4	; (adr r2, 80044cc <_HandleIncomingPacket+0x3c>)
 80044c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044cc:	080044ef 	.word	0x080044ef
 80044d0:	080044f5 	.word	0x080044f5
 80044d4:	080044fb 	.word	0x080044fb
 80044d8:	08004501 	.word	0x08004501
 80044dc:	08004507 	.word	0x08004507
 80044e0:	0800450d 	.word	0x0800450d
 80044e4:	08004513 	.word	0x08004513
 80044e8:	2b7f      	cmp	r3, #127	; 0x7f
 80044ea:	d035      	beq.n	8004558 <_HandleIncomingPacket+0xc8>
 80044ec:	e025      	b.n	800453a <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80044ee:	f000 fc33 	bl	8004d58 <SEGGER_SYSVIEW_Start>
      break;
 80044f2:	e036      	b.n	8004562 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80044f4:	f000 fcec 	bl	8004ed0 <SEGGER_SYSVIEW_Stop>
      break;
 80044f8:	e033      	b.n	8004562 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80044fa:	f000 fec5 	bl	8005288 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80044fe:	e030      	b.n	8004562 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004500:	f000 fe8a 	bl	8005218 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004504:	e02d      	b.n	8004562 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004506:	f000 fd09 	bl	8004f1c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800450a:	e02a      	b.n	8004562 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800450c:	f001 f962 	bl	80057d4 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004510:	e027      	b.n	8004562 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004512:	f001 f941 	bl	8005798 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004516:	e024      	b.n	8004562 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004518:	4b14      	ldr	r3, [pc, #80]	; (800456c <_HandleIncomingPacket+0xdc>)
 800451a:	7e1b      	ldrb	r3, [r3, #24]
 800451c:	4618      	mov	r0, r3
 800451e:	1cfb      	adds	r3, r7, #3
 8004520:	2201      	movs	r2, #1
 8004522:	4619      	mov	r1, r3
 8004524:	f7ff fd36 	bl	8003f94 <SEGGER_RTT_ReadNoLock>
 8004528:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d015      	beq.n	800455c <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004530:	78fb      	ldrb	r3, [r7, #3]
 8004532:	4618      	mov	r0, r3
 8004534:	f001 f8a6 	bl	8005684 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004538:	e010      	b.n	800455c <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800453a:	78fb      	ldrb	r3, [r7, #3]
 800453c:	b25b      	sxtb	r3, r3
 800453e:	2b00      	cmp	r3, #0
 8004540:	da0e      	bge.n	8004560 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004542:	4b0a      	ldr	r3, [pc, #40]	; (800456c <_HandleIncomingPacket+0xdc>)
 8004544:	7e1b      	ldrb	r3, [r3, #24]
 8004546:	4618      	mov	r0, r3
 8004548:	1cfb      	adds	r3, r7, #3
 800454a:	2201      	movs	r2, #1
 800454c:	4619      	mov	r1, r3
 800454e:	f7ff fd21 	bl	8003f94 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004552:	e005      	b.n	8004560 <_HandleIncomingPacket+0xd0>
    }
  }
 8004554:	bf00      	nop
 8004556:	e004      	b.n	8004562 <_HandleIncomingPacket+0xd2>
      break;
 8004558:	bf00      	nop
 800455a:	e002      	b.n	8004562 <_HandleIncomingPacket+0xd2>
      break;
 800455c:	bf00      	nop
 800455e:	e000      	b.n	8004562 <_HandleIncomingPacket+0xd2>
      break;
 8004560:	bf00      	nop
}
 8004562:	bf00      	nop
 8004564:	3708      	adds	r7, #8
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	200137cc 	.word	0x200137cc

08004570 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004570:	b580      	push	{r7, lr}
 8004572:	b08c      	sub	sp, #48	; 0x30
 8004574:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004576:	2301      	movs	r3, #1
 8004578:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800457a:	1d3b      	adds	r3, r7, #4
 800457c:	3301      	adds	r3, #1
 800457e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004584:	4b32      	ldr	r3, [pc, #200]	; (8004650 <_TrySendOverflowPacket+0xe0>)
 8004586:	695b      	ldr	r3, [r3, #20]
 8004588:	62bb      	str	r3, [r7, #40]	; 0x28
 800458a:	e00b      	b.n	80045a4 <_TrySendOverflowPacket+0x34>
 800458c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800458e:	b2da      	uxtb	r2, r3
 8004590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004592:	1c59      	adds	r1, r3, #1
 8004594:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004596:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800459a:	b2d2      	uxtb	r2, r2
 800459c:	701a      	strb	r2, [r3, #0]
 800459e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a0:	09db      	lsrs	r3, r3, #7
 80045a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80045a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a6:	2b7f      	cmp	r3, #127	; 0x7f
 80045a8:	d8f0      	bhi.n	800458c <_TrySendOverflowPacket+0x1c>
 80045aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ac:	1c5a      	adds	r2, r3, #1
 80045ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045b2:	b2d2      	uxtb	r2, r2
 80045b4:	701a      	strb	r2, [r3, #0]
 80045b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80045ba:	4b26      	ldr	r3, [pc, #152]	; (8004654 <_TrySendOverflowPacket+0xe4>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80045c0:	4b23      	ldr	r3, [pc, #140]	; (8004650 <_TrySendOverflowPacket+0xe0>)
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	69ba      	ldr	r2, [r7, #24]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	627b      	str	r3, [r7, #36]	; 0x24
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	623b      	str	r3, [r7, #32]
 80045d2:	e00b      	b.n	80045ec <_TrySendOverflowPacket+0x7c>
 80045d4:	6a3b      	ldr	r3, [r7, #32]
 80045d6:	b2da      	uxtb	r2, r3
 80045d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045da:	1c59      	adds	r1, r3, #1
 80045dc:	6279      	str	r1, [r7, #36]	; 0x24
 80045de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045e2:	b2d2      	uxtb	r2, r2
 80045e4:	701a      	strb	r2, [r3, #0]
 80045e6:	6a3b      	ldr	r3, [r7, #32]
 80045e8:	09db      	lsrs	r3, r3, #7
 80045ea:	623b      	str	r3, [r7, #32]
 80045ec:	6a3b      	ldr	r3, [r7, #32]
 80045ee:	2b7f      	cmp	r3, #127	; 0x7f
 80045f0:	d8f0      	bhi.n	80045d4 <_TrySendOverflowPacket+0x64>
 80045f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f4:	1c5a      	adds	r2, r3, #1
 80045f6:	627a      	str	r2, [r7, #36]	; 0x24
 80045f8:	6a3a      	ldr	r2, [r7, #32]
 80045fa:	b2d2      	uxtb	r2, r2
 80045fc:	701a      	strb	r2, [r3, #0]
 80045fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004600:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8004602:	4b13      	ldr	r3, [pc, #76]	; (8004650 <_TrySendOverflowPacket+0xe0>)
 8004604:	785b      	ldrb	r3, [r3, #1]
 8004606:	4618      	mov	r0, r3
 8004608:	1d3b      	adds	r3, r7, #4
 800460a:	69fa      	ldr	r2, [r7, #28]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	461a      	mov	r2, r3
 8004610:	1d3b      	adds	r3, r7, #4
 8004612:	4619      	mov	r1, r3
 8004614:	f7fb fde4 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004618:	4603      	mov	r3, r0
 800461a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 800461c:	f7ff fa6a 	bl	8003af4 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d009      	beq.n	800463a <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004626:	4a0a      	ldr	r2, [pc, #40]	; (8004650 <_TrySendOverflowPacket+0xe0>)
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800462c:	4b08      	ldr	r3, [pc, #32]	; (8004650 <_TrySendOverflowPacket+0xe0>)
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	3b01      	subs	r3, #1
 8004632:	b2da      	uxtb	r2, r3
 8004634:	4b06      	ldr	r3, [pc, #24]	; (8004650 <_TrySendOverflowPacket+0xe0>)
 8004636:	701a      	strb	r2, [r3, #0]
 8004638:	e004      	b.n	8004644 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800463a:	4b05      	ldr	r3, [pc, #20]	; (8004650 <_TrySendOverflowPacket+0xe0>)
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	3301      	adds	r3, #1
 8004640:	4a03      	ldr	r2, [pc, #12]	; (8004650 <_TrySendOverflowPacket+0xe0>)
 8004642:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004644:	693b      	ldr	r3, [r7, #16]
}
 8004646:	4618      	mov	r0, r3
 8004648:	3730      	adds	r7, #48	; 0x30
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	200137cc 	.word	0x200137cc
 8004654:	e0001004 	.word	0xe0001004

08004658 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004658:	b580      	push	{r7, lr}
 800465a:	b08a      	sub	sp, #40	; 0x28
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004664:	4b96      	ldr	r3, [pc, #600]	; (80048c0 <_SendPacket+0x268>)
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	2b01      	cmp	r3, #1
 800466a:	d010      	beq.n	800468e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800466c:	4b94      	ldr	r3, [pc, #592]	; (80048c0 <_SendPacket+0x268>)
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	f000 8130 	beq.w	80048d6 <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004676:	4b92      	ldr	r3, [pc, #584]	; (80048c0 <_SendPacket+0x268>)
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	2b02      	cmp	r3, #2
 800467c:	d109      	bne.n	8004692 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800467e:	f7ff ff77 	bl	8004570 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004682:	4b8f      	ldr	r3, [pc, #572]	; (80048c0 <_SendPacket+0x268>)
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	2b01      	cmp	r3, #1
 8004688:	f040 8127 	bne.w	80048da <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 800468c:	e001      	b.n	8004692 <_SendPacket+0x3a>
    goto Send;
 800468e:	bf00      	nop
 8004690:	e000      	b.n	8004694 <_SendPacket+0x3c>
Send:
 8004692:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2b1f      	cmp	r3, #31
 8004698:	d809      	bhi.n	80046ae <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800469a:	4b89      	ldr	r3, [pc, #548]	; (80048c0 <_SendPacket+0x268>)
 800469c:	69da      	ldr	r2, [r3, #28]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	fa22 f303 	lsr.w	r3, r2, r3
 80046a4:	f003 0301 	and.w	r3, r3, #1
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f040 8118 	bne.w	80048de <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2b17      	cmp	r3, #23
 80046b2:	d807      	bhi.n	80046c4 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	3b01      	subs	r3, #1
 80046b8:	60fb      	str	r3, [r7, #12]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	b2da      	uxtb	r2, r3
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	701a      	strb	r2, [r3, #0]
 80046c2:	e0c4      	b.n	800484e <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80046c4:	68ba      	ldr	r2, [r7, #8]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	2b7f      	cmp	r3, #127	; 0x7f
 80046d0:	d912      	bls.n	80046f8 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	09da      	lsrs	r2, r3, #7
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	3b01      	subs	r3, #1
 80046da:	60fb      	str	r3, [r7, #12]
 80046dc:	b2d2      	uxtb	r2, r2
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	68fa      	ldr	r2, [r7, #12]
 80046e8:	3a01      	subs	r2, #1
 80046ea:	60fa      	str	r2, [r7, #12]
 80046ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80046f0:	b2da      	uxtb	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	701a      	strb	r2, [r3, #0]
 80046f6:	e006      	b.n	8004706 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	3b01      	subs	r3, #1
 80046fc:	60fb      	str	r3, [r7, #12]
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	b2da      	uxtb	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2b7e      	cmp	r3, #126	; 0x7e
 800470a:	d807      	bhi.n	800471c <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	3b01      	subs	r3, #1
 8004710:	60fb      	str	r3, [r7, #12]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	b2da      	uxtb	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	701a      	strb	r2, [r3, #0]
 800471a:	e098      	b.n	800484e <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004722:	d212      	bcs.n	800474a <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	09da      	lsrs	r2, r3, #7
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	3b01      	subs	r3, #1
 800472c:	60fb      	str	r3, [r7, #12]
 800472e:	b2d2      	uxtb	r2, r2
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	b2db      	uxtb	r3, r3
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	3a01      	subs	r2, #1
 800473c:	60fa      	str	r2, [r7, #12]
 800473e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004742:	b2da      	uxtb	r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	701a      	strb	r2, [r3, #0]
 8004748:	e081      	b.n	800484e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004750:	d21d      	bcs.n	800478e <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	0b9a      	lsrs	r2, r3, #14
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	3b01      	subs	r3, #1
 800475a:	60fb      	str	r3, [r7, #12]
 800475c:	b2d2      	uxtb	r2, r2
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	09db      	lsrs	r3, r3, #7
 8004766:	b2db      	uxtb	r3, r3
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	3a01      	subs	r2, #1
 800476c:	60fa      	str	r2, [r7, #12]
 800476e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004772:	b2da      	uxtb	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	b2db      	uxtb	r3, r3
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	3a01      	subs	r2, #1
 8004780:	60fa      	str	r2, [r7, #12]
 8004782:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004786:	b2da      	uxtb	r2, r3
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	701a      	strb	r2, [r3, #0]
 800478c:	e05f      	b.n	800484e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004794:	d228      	bcs.n	80047e8 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	0d5a      	lsrs	r2, r3, #21
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	3b01      	subs	r3, #1
 800479e:	60fb      	str	r3, [r7, #12]
 80047a0:	b2d2      	uxtb	r2, r2
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	0b9b      	lsrs	r3, r3, #14
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	3a01      	subs	r2, #1
 80047b0:	60fa      	str	r2, [r7, #12]
 80047b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80047b6:	b2da      	uxtb	r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	09db      	lsrs	r3, r3, #7
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	3a01      	subs	r2, #1
 80047c6:	60fa      	str	r2, [r7, #12]
 80047c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80047cc:	b2da      	uxtb	r2, r3
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	3a01      	subs	r2, #1
 80047da:	60fa      	str	r2, [r7, #12]
 80047dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80047e0:	b2da      	uxtb	r2, r3
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	701a      	strb	r2, [r3, #0]
 80047e6:	e032      	b.n	800484e <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	0f1a      	lsrs	r2, r3, #28
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	3b01      	subs	r3, #1
 80047f0:	60fb      	str	r3, [r7, #12]
 80047f2:	b2d2      	uxtb	r2, r2
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	0d5b      	lsrs	r3, r3, #21
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	3a01      	subs	r2, #1
 8004802:	60fa      	str	r2, [r7, #12]
 8004804:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004808:	b2da      	uxtb	r2, r3
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	0b9b      	lsrs	r3, r3, #14
 8004812:	b2db      	uxtb	r3, r3
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	3a01      	subs	r2, #1
 8004818:	60fa      	str	r2, [r7, #12]
 800481a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800481e:	b2da      	uxtb	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	09db      	lsrs	r3, r3, #7
 8004828:	b2db      	uxtb	r3, r3
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	3a01      	subs	r2, #1
 800482e:	60fa      	str	r2, [r7, #12]
 8004830:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004834:	b2da      	uxtb	r2, r3
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	b2db      	uxtb	r3, r3
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	3a01      	subs	r2, #1
 8004842:	60fa      	str	r2, [r7, #12]
 8004844:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004848:	b2da      	uxtb	r2, r3
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800484e:	4b1d      	ldr	r3, [pc, #116]	; (80048c4 <_SendPacket+0x26c>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004854:	4b1a      	ldr	r3, [pc, #104]	; (80048c0 <_SendPacket+0x268>)
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	69ba      	ldr	r2, [r7, #24]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	627b      	str	r3, [r7, #36]	; 0x24
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	623b      	str	r3, [r7, #32]
 8004866:	e00b      	b.n	8004880 <_SendPacket+0x228>
 8004868:	6a3b      	ldr	r3, [r7, #32]
 800486a:	b2da      	uxtb	r2, r3
 800486c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486e:	1c59      	adds	r1, r3, #1
 8004870:	6279      	str	r1, [r7, #36]	; 0x24
 8004872:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004876:	b2d2      	uxtb	r2, r2
 8004878:	701a      	strb	r2, [r3, #0]
 800487a:	6a3b      	ldr	r3, [r7, #32]
 800487c:	09db      	lsrs	r3, r3, #7
 800487e:	623b      	str	r3, [r7, #32]
 8004880:	6a3b      	ldr	r3, [r7, #32]
 8004882:	2b7f      	cmp	r3, #127	; 0x7f
 8004884:	d8f0      	bhi.n	8004868 <_SendPacket+0x210>
 8004886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004888:	1c5a      	adds	r2, r3, #1
 800488a:	627a      	str	r2, [r7, #36]	; 0x24
 800488c:	6a3a      	ldr	r2, [r7, #32]
 800488e:	b2d2      	uxtb	r2, r2
 8004890:	701a      	strb	r2, [r3, #0]
 8004892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004894:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8004896:	4b0a      	ldr	r3, [pc, #40]	; (80048c0 <_SendPacket+0x268>)
 8004898:	785b      	ldrb	r3, [r3, #1]
 800489a:	4618      	mov	r0, r3
 800489c:	68ba      	ldr	r2, [r7, #8]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	461a      	mov	r2, r3
 80048a4:	68f9      	ldr	r1, [r7, #12]
 80048a6:	f7fb fc9b 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80048aa:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80048ac:	f7ff f922 	bl	8003af4 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d008      	beq.n	80048c8 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80048b6:	4a02      	ldr	r2, [pc, #8]	; (80048c0 <_SendPacket+0x268>)
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	60d3      	str	r3, [r2, #12]
 80048bc:	e010      	b.n	80048e0 <_SendPacket+0x288>
 80048be:	bf00      	nop
 80048c0:	200137cc 	.word	0x200137cc
 80048c4:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80048c8:	4b19      	ldr	r3, [pc, #100]	; (8004930 <_SendPacket+0x2d8>)
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	3301      	adds	r3, #1
 80048ce:	b2da      	uxtb	r2, r3
 80048d0:	4b17      	ldr	r3, [pc, #92]	; (8004930 <_SendPacket+0x2d8>)
 80048d2:	701a      	strb	r2, [r3, #0]
 80048d4:	e004      	b.n	80048e0 <_SendPacket+0x288>
    goto SendDone;
 80048d6:	bf00      	nop
 80048d8:	e002      	b.n	80048e0 <_SendPacket+0x288>
      goto SendDone;
 80048da:	bf00      	nop
 80048dc:	e000      	b.n	80048e0 <_SendPacket+0x288>
      goto SendDone;
 80048de:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80048e0:	4b13      	ldr	r3, [pc, #76]	; (8004930 <_SendPacket+0x2d8>)
 80048e2:	7e1b      	ldrb	r3, [r3, #24]
 80048e4:	4619      	mov	r1, r3
 80048e6:	4a13      	ldr	r2, [pc, #76]	; (8004934 <_SendPacket+0x2dc>)
 80048e8:	460b      	mov	r3, r1
 80048ea:	005b      	lsls	r3, r3, #1
 80048ec:	440b      	add	r3, r1
 80048ee:	00db      	lsls	r3, r3, #3
 80048f0:	4413      	add	r3, r2
 80048f2:	336c      	adds	r3, #108	; 0x6c
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	4b0e      	ldr	r3, [pc, #56]	; (8004930 <_SendPacket+0x2d8>)
 80048f8:	7e1b      	ldrb	r3, [r3, #24]
 80048fa:	4618      	mov	r0, r3
 80048fc:	490d      	ldr	r1, [pc, #52]	; (8004934 <_SendPacket+0x2dc>)
 80048fe:	4603      	mov	r3, r0
 8004900:	005b      	lsls	r3, r3, #1
 8004902:	4403      	add	r3, r0
 8004904:	00db      	lsls	r3, r3, #3
 8004906:	440b      	add	r3, r1
 8004908:	3370      	adds	r3, #112	; 0x70
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	429a      	cmp	r2, r3
 800490e:	d00b      	beq.n	8004928 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004910:	4b07      	ldr	r3, [pc, #28]	; (8004930 <_SendPacket+0x2d8>)
 8004912:	789b      	ldrb	r3, [r3, #2]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d107      	bne.n	8004928 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004918:	4b05      	ldr	r3, [pc, #20]	; (8004930 <_SendPacket+0x2d8>)
 800491a:	2201      	movs	r2, #1
 800491c:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800491e:	f7ff fdb7 	bl	8004490 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004922:	4b03      	ldr	r3, [pc, #12]	; (8004930 <_SendPacket+0x2d8>)
 8004924:	2200      	movs	r2, #0
 8004926:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004928:	bf00      	nop
 800492a:	3728      	adds	r7, #40	; 0x28
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	200137cc 	.word	0x200137cc
 8004934:	20012f0c 	.word	0x20012f0c

08004938 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004938:	b580      	push	{r7, lr}
 800493a:	b086      	sub	sp, #24
 800493c:	af02      	add	r7, sp, #8
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
 8004944:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004946:	2300      	movs	r3, #0
 8004948:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800494c:	4917      	ldr	r1, [pc, #92]	; (80049ac <SEGGER_SYSVIEW_Init+0x74>)
 800494e:	4818      	ldr	r0, [pc, #96]	; (80049b0 <SEGGER_SYSVIEW_Init+0x78>)
 8004950:	f7ff fc92 	bl	8004278 <SEGGER_RTT_AllocUpBuffer>
 8004954:	4603      	mov	r3, r0
 8004956:	b2da      	uxtb	r2, r3
 8004958:	4b16      	ldr	r3, [pc, #88]	; (80049b4 <SEGGER_SYSVIEW_Init+0x7c>)
 800495a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800495c:	4b15      	ldr	r3, [pc, #84]	; (80049b4 <SEGGER_SYSVIEW_Init+0x7c>)
 800495e:	785a      	ldrb	r2, [r3, #1]
 8004960:	4b14      	ldr	r3, [pc, #80]	; (80049b4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004962:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004964:	4b13      	ldr	r3, [pc, #76]	; (80049b4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004966:	7e1b      	ldrb	r3, [r3, #24]
 8004968:	4618      	mov	r0, r3
 800496a:	2300      	movs	r3, #0
 800496c:	9300      	str	r3, [sp, #0]
 800496e:	2308      	movs	r3, #8
 8004970:	4a11      	ldr	r2, [pc, #68]	; (80049b8 <SEGGER_SYSVIEW_Init+0x80>)
 8004972:	490f      	ldr	r1, [pc, #60]	; (80049b0 <SEGGER_SYSVIEW_Init+0x78>)
 8004974:	f7ff fd04 	bl	8004380 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004978:	4b0e      	ldr	r3, [pc, #56]	; (80049b4 <SEGGER_SYSVIEW_Init+0x7c>)
 800497a:	2200      	movs	r2, #0
 800497c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800497e:	4b0f      	ldr	r3, [pc, #60]	; (80049bc <SEGGER_SYSVIEW_Init+0x84>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a0c      	ldr	r2, [pc, #48]	; (80049b4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004984:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004986:	4a0b      	ldr	r2, [pc, #44]	; (80049b4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800498c:	4a09      	ldr	r2, [pc, #36]	; (80049b4 <SEGGER_SYSVIEW_Init+0x7c>)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004992:	4a08      	ldr	r2, [pc, #32]	; (80049b4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004998:	4a06      	ldr	r2, [pc, #24]	; (80049b4 <SEGGER_SYSVIEW_Init+0x7c>)
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800499e:	4b05      	ldr	r3, [pc, #20]	; (80049b4 <SEGGER_SYSVIEW_Init+0x7c>)
 80049a0:	2200      	movs	r2, #0
 80049a2:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80049a4:	bf00      	nop
 80049a6:	3710      	adds	r7, #16
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	200133c4 	.word	0x200133c4
 80049b0:	08007c84 	.word	0x08007c84
 80049b4:	200137cc 	.word	0x200137cc
 80049b8:	200137c4 	.word	0x200137c4
 80049bc:	e0001004 	.word	0xe0001004

080049c0 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80049c8:	4a04      	ldr	r2, [pc, #16]	; (80049dc <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6113      	str	r3, [r2, #16]
}
 80049ce:	bf00      	nop
 80049d0:	370c      	adds	r7, #12
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	200137cc 	.word	0x200137cc

080049e0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80049e8:	f3ef 8311 	mrs	r3, BASEPRI
 80049ec:	f04f 0120 	mov.w	r1, #32
 80049f0:	f381 8811 	msr	BASEPRI, r1
 80049f4:	60fb      	str	r3, [r7, #12]
 80049f6:	4808      	ldr	r0, [pc, #32]	; (8004a18 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80049f8:	f7ff fd3e 	bl	8004478 <_PreparePacket>
 80049fc:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	68b9      	ldr	r1, [r7, #8]
 8004a02:	68b8      	ldr	r0, [r7, #8]
 8004a04:	f7ff fe28 	bl	8004658 <_SendPacket>
  RECORD_END();
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f383 8811 	msr	BASEPRI, r3
}
 8004a0e:	bf00      	nop
 8004a10:	3710      	adds	r7, #16
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	200137fc 	.word	0x200137fc

08004a1c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b088      	sub	sp, #32
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004a26:	f3ef 8311 	mrs	r3, BASEPRI
 8004a2a:	f04f 0120 	mov.w	r1, #32
 8004a2e:	f381 8811 	msr	BASEPRI, r1
 8004a32:	617b      	str	r3, [r7, #20]
 8004a34:	4816      	ldr	r0, [pc, #88]	; (8004a90 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004a36:	f7ff fd1f 	bl	8004478 <_PreparePacket>
 8004a3a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	61fb      	str	r3, [r7, #28]
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	61bb      	str	r3, [r7, #24]
 8004a48:	e00b      	b.n	8004a62 <SEGGER_SYSVIEW_RecordU32+0x46>
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	b2da      	uxtb	r2, r3
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	1c59      	adds	r1, r3, #1
 8004a52:	61f9      	str	r1, [r7, #28]
 8004a54:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a58:	b2d2      	uxtb	r2, r2
 8004a5a:	701a      	strb	r2, [r3, #0]
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	09db      	lsrs	r3, r3, #7
 8004a60:	61bb      	str	r3, [r7, #24]
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	2b7f      	cmp	r3, #127	; 0x7f
 8004a66:	d8f0      	bhi.n	8004a4a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	1c5a      	adds	r2, r3, #1
 8004a6c:	61fa      	str	r2, [r7, #28]
 8004a6e:	69ba      	ldr	r2, [r7, #24]
 8004a70:	b2d2      	uxtb	r2, r2
 8004a72:	701a      	strb	r2, [r3, #0]
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	68f9      	ldr	r1, [r7, #12]
 8004a7c:	6938      	ldr	r0, [r7, #16]
 8004a7e:	f7ff fdeb 	bl	8004658 <_SendPacket>
  RECORD_END();
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	f383 8811 	msr	BASEPRI, r3
}
 8004a88:	bf00      	nop
 8004a8a:	3720      	adds	r7, #32
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	200137fc 	.word	0x200137fc

08004a94 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b08c      	sub	sp, #48	; 0x30
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004aa0:	f3ef 8311 	mrs	r3, BASEPRI
 8004aa4:	f04f 0120 	mov.w	r1, #32
 8004aa8:	f381 8811 	msr	BASEPRI, r1
 8004aac:	61fb      	str	r3, [r7, #28]
 8004aae:	4825      	ldr	r0, [pc, #148]	; (8004b44 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004ab0:	f7ff fce2 	bl	8004478 <_PreparePacket>
 8004ab4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ac2:	e00b      	b.n	8004adc <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac6:	b2da      	uxtb	r2, r3
 8004ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aca:	1c59      	adds	r1, r3, #1
 8004acc:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004ace:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ad2:	b2d2      	uxtb	r2, r2
 8004ad4:	701a      	strb	r2, [r3, #0]
 8004ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad8:	09db      	lsrs	r3, r3, #7
 8004ada:	62bb      	str	r3, [r7, #40]	; 0x28
 8004adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ade:	2b7f      	cmp	r3, #127	; 0x7f
 8004ae0:	d8f0      	bhi.n	8004ac4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae4:	1c5a      	adds	r2, r3, #1
 8004ae6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ae8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004aea:	b2d2      	uxtb	r2, r2
 8004aec:	701a      	strb	r2, [r3, #0]
 8004aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	627b      	str	r3, [r7, #36]	; 0x24
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	623b      	str	r3, [r7, #32]
 8004afa:	e00b      	b.n	8004b14 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004afc:	6a3b      	ldr	r3, [r7, #32]
 8004afe:	b2da      	uxtb	r2, r3
 8004b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b02:	1c59      	adds	r1, r3, #1
 8004b04:	6279      	str	r1, [r7, #36]	; 0x24
 8004b06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b0a:	b2d2      	uxtb	r2, r2
 8004b0c:	701a      	strb	r2, [r3, #0]
 8004b0e:	6a3b      	ldr	r3, [r7, #32]
 8004b10:	09db      	lsrs	r3, r3, #7
 8004b12:	623b      	str	r3, [r7, #32]
 8004b14:	6a3b      	ldr	r3, [r7, #32]
 8004b16:	2b7f      	cmp	r3, #127	; 0x7f
 8004b18:	d8f0      	bhi.n	8004afc <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1c:	1c5a      	adds	r2, r3, #1
 8004b1e:	627a      	str	r2, [r7, #36]	; 0x24
 8004b20:	6a3a      	ldr	r2, [r7, #32]
 8004b22:	b2d2      	uxtb	r2, r2
 8004b24:	701a      	strb	r2, [r3, #0]
 8004b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b28:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	6979      	ldr	r1, [r7, #20]
 8004b2e:	69b8      	ldr	r0, [r7, #24]
 8004b30:	f7ff fd92 	bl	8004658 <_SendPacket>
  RECORD_END();
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	f383 8811 	msr	BASEPRI, r3
}
 8004b3a:	bf00      	nop
 8004b3c:	3730      	adds	r7, #48	; 0x30
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	200137fc 	.word	0x200137fc

08004b48 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b08e      	sub	sp, #56	; 0x38
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
 8004b54:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8004b56:	f3ef 8311 	mrs	r3, BASEPRI
 8004b5a:	f04f 0120 	mov.w	r1, #32
 8004b5e:	f381 8811 	msr	BASEPRI, r1
 8004b62:	61fb      	str	r3, [r7, #28]
 8004b64:	4832      	ldr	r0, [pc, #200]	; (8004c30 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8004b66:	f7ff fc87 	bl	8004478 <_PreparePacket>
 8004b6a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	637b      	str	r3, [r7, #52]	; 0x34
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	633b      	str	r3, [r7, #48]	; 0x30
 8004b78:	e00b      	b.n	8004b92 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8004b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b7c:	b2da      	uxtb	r2, r3
 8004b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b80:	1c59      	adds	r1, r3, #1
 8004b82:	6379      	str	r1, [r7, #52]	; 0x34
 8004b84:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b88:	b2d2      	uxtb	r2, r2
 8004b8a:	701a      	strb	r2, [r3, #0]
 8004b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b8e:	09db      	lsrs	r3, r3, #7
 8004b90:	633b      	str	r3, [r7, #48]	; 0x30
 8004b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b94:	2b7f      	cmp	r3, #127	; 0x7f
 8004b96:	d8f0      	bhi.n	8004b7a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8004b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b9a:	1c5a      	adds	r2, r3, #1
 8004b9c:	637a      	str	r2, [r7, #52]	; 0x34
 8004b9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ba0:	b2d2      	uxtb	r2, r2
 8004ba2:	701a      	strb	r2, [r3, #0]
 8004ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ba6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bb0:	e00b      	b.n	8004bca <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8004bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb4:	b2da      	uxtb	r2, r3
 8004bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb8:	1c59      	adds	r1, r3, #1
 8004bba:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004bbc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004bc0:	b2d2      	uxtb	r2, r2
 8004bc2:	701a      	strb	r2, [r3, #0]
 8004bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc6:	09db      	lsrs	r3, r3, #7
 8004bc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bcc:	2b7f      	cmp	r3, #127	; 0x7f
 8004bce:	d8f0      	bhi.n	8004bb2 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8004bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd2:	1c5a      	adds	r2, r3, #1
 8004bd4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004bd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bd8:	b2d2      	uxtb	r2, r2
 8004bda:	701a      	strb	r2, [r3, #0]
 8004bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bde:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	627b      	str	r3, [r7, #36]	; 0x24
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	623b      	str	r3, [r7, #32]
 8004be8:	e00b      	b.n	8004c02 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8004bea:	6a3b      	ldr	r3, [r7, #32]
 8004bec:	b2da      	uxtb	r2, r3
 8004bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf0:	1c59      	adds	r1, r3, #1
 8004bf2:	6279      	str	r1, [r7, #36]	; 0x24
 8004bf4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004bf8:	b2d2      	uxtb	r2, r2
 8004bfa:	701a      	strb	r2, [r3, #0]
 8004bfc:	6a3b      	ldr	r3, [r7, #32]
 8004bfe:	09db      	lsrs	r3, r3, #7
 8004c00:	623b      	str	r3, [r7, #32]
 8004c02:	6a3b      	ldr	r3, [r7, #32]
 8004c04:	2b7f      	cmp	r3, #127	; 0x7f
 8004c06:	d8f0      	bhi.n	8004bea <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8004c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0a:	1c5a      	adds	r2, r3, #1
 8004c0c:	627a      	str	r2, [r7, #36]	; 0x24
 8004c0e:	6a3a      	ldr	r2, [r7, #32]
 8004c10:	b2d2      	uxtb	r2, r2
 8004c12:	701a      	strb	r2, [r3, #0]
 8004c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c16:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	6979      	ldr	r1, [r7, #20]
 8004c1c:	69b8      	ldr	r0, [r7, #24]
 8004c1e:	f7ff fd1b 	bl	8004658 <_SendPacket>
  RECORD_END();
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	f383 8811 	msr	BASEPRI, r3
}
 8004c28:	bf00      	nop
 8004c2a:	3738      	adds	r7, #56	; 0x38
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	200137fc 	.word	0x200137fc

08004c34 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b090      	sub	sp, #64	; 0x40
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
 8004c40:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004c42:	f3ef 8311 	mrs	r3, BASEPRI
 8004c46:	f04f 0120 	mov.w	r1, #32
 8004c4a:	f381 8811 	msr	BASEPRI, r1
 8004c4e:	61fb      	str	r3, [r7, #28]
 8004c50:	4840      	ldr	r0, [pc, #256]	; (8004d54 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8004c52:	f7ff fc11 	bl	8004478 <_PreparePacket>
 8004c56:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c64:	e00b      	b.n	8004c7e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8004c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c68:	b2da      	uxtb	r2, r3
 8004c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c6c:	1c59      	adds	r1, r3, #1
 8004c6e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004c70:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c74:	b2d2      	uxtb	r2, r2
 8004c76:	701a      	strb	r2, [r3, #0]
 8004c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c7a:	09db      	lsrs	r3, r3, #7
 8004c7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c80:	2b7f      	cmp	r3, #127	; 0x7f
 8004c82:	d8f0      	bhi.n	8004c66 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8004c84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c86:	1c5a      	adds	r2, r3, #1
 8004c88:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004c8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c8c:	b2d2      	uxtb	r2, r2
 8004c8e:	701a      	strb	r2, [r3, #0]
 8004c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c92:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	637b      	str	r3, [r7, #52]	; 0x34
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	633b      	str	r3, [r7, #48]	; 0x30
 8004c9c:	e00b      	b.n	8004cb6 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8004c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca0:	b2da      	uxtb	r2, r3
 8004ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ca4:	1c59      	adds	r1, r3, #1
 8004ca6:	6379      	str	r1, [r7, #52]	; 0x34
 8004ca8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cac:	b2d2      	uxtb	r2, r2
 8004cae:	701a      	strb	r2, [r3, #0]
 8004cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb2:	09db      	lsrs	r3, r3, #7
 8004cb4:	633b      	str	r3, [r7, #48]	; 0x30
 8004cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb8:	2b7f      	cmp	r3, #127	; 0x7f
 8004cba:	d8f0      	bhi.n	8004c9e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8004cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cbe:	1c5a      	adds	r2, r3, #1
 8004cc0:	637a      	str	r2, [r7, #52]	; 0x34
 8004cc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cc4:	b2d2      	uxtb	r2, r2
 8004cc6:	701a      	strb	r2, [r3, #0]
 8004cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cca:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cd4:	e00b      	b.n	8004cee <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8004cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd8:	b2da      	uxtb	r2, r3
 8004cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cdc:	1c59      	adds	r1, r3, #1
 8004cde:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004ce0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ce4:	b2d2      	uxtb	r2, r2
 8004ce6:	701a      	strb	r2, [r3, #0]
 8004ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cea:	09db      	lsrs	r3, r3, #7
 8004cec:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf0:	2b7f      	cmp	r3, #127	; 0x7f
 8004cf2:	d8f0      	bhi.n	8004cd6 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8004cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf6:	1c5a      	adds	r2, r3, #1
 8004cf8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004cfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cfc:	b2d2      	uxtb	r2, r2
 8004cfe:	701a      	strb	r2, [r3, #0]
 8004d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d02:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	627b      	str	r3, [r7, #36]	; 0x24
 8004d08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d0a:	623b      	str	r3, [r7, #32]
 8004d0c:	e00b      	b.n	8004d26 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8004d0e:	6a3b      	ldr	r3, [r7, #32]
 8004d10:	b2da      	uxtb	r2, r3
 8004d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d14:	1c59      	adds	r1, r3, #1
 8004d16:	6279      	str	r1, [r7, #36]	; 0x24
 8004d18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d1c:	b2d2      	uxtb	r2, r2
 8004d1e:	701a      	strb	r2, [r3, #0]
 8004d20:	6a3b      	ldr	r3, [r7, #32]
 8004d22:	09db      	lsrs	r3, r3, #7
 8004d24:	623b      	str	r3, [r7, #32]
 8004d26:	6a3b      	ldr	r3, [r7, #32]
 8004d28:	2b7f      	cmp	r3, #127	; 0x7f
 8004d2a:	d8f0      	bhi.n	8004d0e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8004d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2e:	1c5a      	adds	r2, r3, #1
 8004d30:	627a      	str	r2, [r7, #36]	; 0x24
 8004d32:	6a3a      	ldr	r2, [r7, #32]
 8004d34:	b2d2      	uxtb	r2, r2
 8004d36:	701a      	strb	r2, [r3, #0]
 8004d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004d3c:	68fa      	ldr	r2, [r7, #12]
 8004d3e:	6979      	ldr	r1, [r7, #20]
 8004d40:	69b8      	ldr	r0, [r7, #24]
 8004d42:	f7ff fc89 	bl	8004658 <_SendPacket>
  RECORD_END();
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	f383 8811 	msr	BASEPRI, r3
}
 8004d4c:	bf00      	nop
 8004d4e:	3740      	adds	r7, #64	; 0x40
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	200137fc 	.word	0x200137fc

08004d58 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b08c      	sub	sp, #48	; 0x30
 8004d5c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004d5e:	4b59      	ldr	r3, [pc, #356]	; (8004ec4 <SEGGER_SYSVIEW_Start+0x16c>)
 8004d60:	2201      	movs	r2, #1
 8004d62:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004d64:	f3ef 8311 	mrs	r3, BASEPRI
 8004d68:	f04f 0120 	mov.w	r1, #32
 8004d6c:	f381 8811 	msr	BASEPRI, r1
 8004d70:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004d72:	4b54      	ldr	r3, [pc, #336]	; (8004ec4 <SEGGER_SYSVIEW_Start+0x16c>)
 8004d74:	785b      	ldrb	r3, [r3, #1]
 8004d76:	220a      	movs	r2, #10
 8004d78:	4953      	ldr	r1, [pc, #332]	; (8004ec8 <SEGGER_SYSVIEW_Start+0x170>)
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7fb fa30 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8004d86:	f7fe feb5 	bl	8003af4 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004d8a:	200a      	movs	r0, #10
 8004d8c:	f7ff fe28 	bl	80049e0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004d90:	f3ef 8311 	mrs	r3, BASEPRI
 8004d94:	f04f 0120 	mov.w	r1, #32
 8004d98:	f381 8811 	msr	BASEPRI, r1
 8004d9c:	60bb      	str	r3, [r7, #8]
 8004d9e:	484b      	ldr	r0, [pc, #300]	; (8004ecc <SEGGER_SYSVIEW_Start+0x174>)
 8004da0:	f7ff fb6a 	bl	8004478 <_PreparePacket>
 8004da4:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dae:	4b45      	ldr	r3, [pc, #276]	; (8004ec4 <SEGGER_SYSVIEW_Start+0x16c>)
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004db4:	e00b      	b.n	8004dce <SEGGER_SYSVIEW_Start+0x76>
 8004db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db8:	b2da      	uxtb	r2, r3
 8004dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dbc:	1c59      	adds	r1, r3, #1
 8004dbe:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004dc0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004dc4:	b2d2      	uxtb	r2, r2
 8004dc6:	701a      	strb	r2, [r3, #0]
 8004dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dca:	09db      	lsrs	r3, r3, #7
 8004dcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd0:	2b7f      	cmp	r3, #127	; 0x7f
 8004dd2:	d8f0      	bhi.n	8004db6 <SEGGER_SYSVIEW_Start+0x5e>
 8004dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd6:	1c5a      	adds	r2, r3, #1
 8004dd8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004dda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ddc:	b2d2      	uxtb	r2, r2
 8004dde:	701a      	strb	r2, [r3, #0]
 8004de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	627b      	str	r3, [r7, #36]	; 0x24
 8004de8:	4b36      	ldr	r3, [pc, #216]	; (8004ec4 <SEGGER_SYSVIEW_Start+0x16c>)
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	623b      	str	r3, [r7, #32]
 8004dee:	e00b      	b.n	8004e08 <SEGGER_SYSVIEW_Start+0xb0>
 8004df0:	6a3b      	ldr	r3, [r7, #32]
 8004df2:	b2da      	uxtb	r2, r3
 8004df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df6:	1c59      	adds	r1, r3, #1
 8004df8:	6279      	str	r1, [r7, #36]	; 0x24
 8004dfa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004dfe:	b2d2      	uxtb	r2, r2
 8004e00:	701a      	strb	r2, [r3, #0]
 8004e02:	6a3b      	ldr	r3, [r7, #32]
 8004e04:	09db      	lsrs	r3, r3, #7
 8004e06:	623b      	str	r3, [r7, #32]
 8004e08:	6a3b      	ldr	r3, [r7, #32]
 8004e0a:	2b7f      	cmp	r3, #127	; 0x7f
 8004e0c:	d8f0      	bhi.n	8004df0 <SEGGER_SYSVIEW_Start+0x98>
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e10:	1c5a      	adds	r2, r3, #1
 8004e12:	627a      	str	r2, [r7, #36]	; 0x24
 8004e14:	6a3a      	ldr	r2, [r7, #32]
 8004e16:	b2d2      	uxtb	r2, r2
 8004e18:	701a      	strb	r2, [r3, #0]
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	61fb      	str	r3, [r7, #28]
 8004e22:	4b28      	ldr	r3, [pc, #160]	; (8004ec4 <SEGGER_SYSVIEW_Start+0x16c>)
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	61bb      	str	r3, [r7, #24]
 8004e28:	e00b      	b.n	8004e42 <SEGGER_SYSVIEW_Start+0xea>
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	b2da      	uxtb	r2, r3
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	1c59      	adds	r1, r3, #1
 8004e32:	61f9      	str	r1, [r7, #28]
 8004e34:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e38:	b2d2      	uxtb	r2, r2
 8004e3a:	701a      	strb	r2, [r3, #0]
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	09db      	lsrs	r3, r3, #7
 8004e40:	61bb      	str	r3, [r7, #24]
 8004e42:	69bb      	ldr	r3, [r7, #24]
 8004e44:	2b7f      	cmp	r3, #127	; 0x7f
 8004e46:	d8f0      	bhi.n	8004e2a <SEGGER_SYSVIEW_Start+0xd2>
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	1c5a      	adds	r2, r3, #1
 8004e4c:	61fa      	str	r2, [r7, #28]
 8004e4e:	69ba      	ldr	r2, [r7, #24]
 8004e50:	b2d2      	uxtb	r2, r2
 8004e52:	701a      	strb	r2, [r3, #0]
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	617b      	str	r3, [r7, #20]
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	613b      	str	r3, [r7, #16]
 8004e60:	e00b      	b.n	8004e7a <SEGGER_SYSVIEW_Start+0x122>
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	b2da      	uxtb	r2, r3
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	1c59      	adds	r1, r3, #1
 8004e6a:	6179      	str	r1, [r7, #20]
 8004e6c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e70:	b2d2      	uxtb	r2, r2
 8004e72:	701a      	strb	r2, [r3, #0]
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	09db      	lsrs	r3, r3, #7
 8004e78:	613b      	str	r3, [r7, #16]
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	2b7f      	cmp	r3, #127	; 0x7f
 8004e7e:	d8f0      	bhi.n	8004e62 <SEGGER_SYSVIEW_Start+0x10a>
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	1c5a      	adds	r2, r3, #1
 8004e84:	617a      	str	r2, [r7, #20]
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	b2d2      	uxtb	r2, r2
 8004e8a:	701a      	strb	r2, [r3, #0]
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004e90:	2218      	movs	r2, #24
 8004e92:	6839      	ldr	r1, [r7, #0]
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f7ff fbdf 	bl	8004658 <_SendPacket>
      RECORD_END();
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004ea0:	4b08      	ldr	r3, [pc, #32]	; (8004ec4 <SEGGER_SYSVIEW_Start+0x16c>)
 8004ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d002      	beq.n	8004eae <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004ea8:	4b06      	ldr	r3, [pc, #24]	; (8004ec4 <SEGGER_SYSVIEW_Start+0x16c>)
 8004eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eac:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004eae:	f000 f9eb 	bl	8005288 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004eb2:	f000 f9b1 	bl	8005218 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004eb6:	f000 fc8d 	bl	80057d4 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004eba:	bf00      	nop
 8004ebc:	3730      	adds	r7, #48	; 0x30
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	200137cc 	.word	0x200137cc
 8004ec8:	08007cac 	.word	0x08007cac
 8004ecc:	200137fc 	.word	0x200137fc

08004ed0 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004ed6:	f3ef 8311 	mrs	r3, BASEPRI
 8004eda:	f04f 0120 	mov.w	r1, #32
 8004ede:	f381 8811 	msr	BASEPRI, r1
 8004ee2:	607b      	str	r3, [r7, #4]
 8004ee4:	480b      	ldr	r0, [pc, #44]	; (8004f14 <SEGGER_SYSVIEW_Stop+0x44>)
 8004ee6:	f7ff fac7 	bl	8004478 <_PreparePacket>
 8004eea:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004eec:	4b0a      	ldr	r3, [pc, #40]	; (8004f18 <SEGGER_SYSVIEW_Stop+0x48>)
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d007      	beq.n	8004f04 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004ef4:	220b      	movs	r2, #11
 8004ef6:	6839      	ldr	r1, [r7, #0]
 8004ef8:	6838      	ldr	r0, [r7, #0]
 8004efa:	f7ff fbad 	bl	8004658 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004efe:	4b06      	ldr	r3, [pc, #24]	; (8004f18 <SEGGER_SYSVIEW_Stop+0x48>)
 8004f00:	2200      	movs	r2, #0
 8004f02:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f383 8811 	msr	BASEPRI, r3
}
 8004f0a:	bf00      	nop
 8004f0c:	3708      	adds	r7, #8
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	200137fc 	.word	0x200137fc
 8004f18:	200137cc 	.word	0x200137cc

08004f1c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b08c      	sub	sp, #48	; 0x30
 8004f20:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004f22:	f3ef 8311 	mrs	r3, BASEPRI
 8004f26:	f04f 0120 	mov.w	r1, #32
 8004f2a:	f381 8811 	msr	BASEPRI, r1
 8004f2e:	60fb      	str	r3, [r7, #12]
 8004f30:	4845      	ldr	r0, [pc, #276]	; (8005048 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8004f32:	f7ff faa1 	bl	8004478 <_PreparePacket>
 8004f36:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f40:	4b42      	ldr	r3, [pc, #264]	; (800504c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f46:	e00b      	b.n	8004f60 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f4a:	b2da      	uxtb	r2, r3
 8004f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f4e:	1c59      	adds	r1, r3, #1
 8004f50:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004f52:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f56:	b2d2      	uxtb	r2, r2
 8004f58:	701a      	strb	r2, [r3, #0]
 8004f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5c:	09db      	lsrs	r3, r3, #7
 8004f5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f62:	2b7f      	cmp	r3, #127	; 0x7f
 8004f64:	d8f0      	bhi.n	8004f48 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f68:	1c5a      	adds	r2, r3, #1
 8004f6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f6e:	b2d2      	uxtb	r2, r2
 8004f70:	701a      	strb	r2, [r3, #0]
 8004f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f74:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	627b      	str	r3, [r7, #36]	; 0x24
 8004f7a:	4b34      	ldr	r3, [pc, #208]	; (800504c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	623b      	str	r3, [r7, #32]
 8004f80:	e00b      	b.n	8004f9a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004f82:	6a3b      	ldr	r3, [r7, #32]
 8004f84:	b2da      	uxtb	r2, r3
 8004f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f88:	1c59      	adds	r1, r3, #1
 8004f8a:	6279      	str	r1, [r7, #36]	; 0x24
 8004f8c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f90:	b2d2      	uxtb	r2, r2
 8004f92:	701a      	strb	r2, [r3, #0]
 8004f94:	6a3b      	ldr	r3, [r7, #32]
 8004f96:	09db      	lsrs	r3, r3, #7
 8004f98:	623b      	str	r3, [r7, #32]
 8004f9a:	6a3b      	ldr	r3, [r7, #32]
 8004f9c:	2b7f      	cmp	r3, #127	; 0x7f
 8004f9e:	d8f0      	bhi.n	8004f82 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa2:	1c5a      	adds	r2, r3, #1
 8004fa4:	627a      	str	r2, [r7, #36]	; 0x24
 8004fa6:	6a3a      	ldr	r2, [r7, #32]
 8004fa8:	b2d2      	uxtb	r2, r2
 8004faa:	701a      	strb	r2, [r3, #0]
 8004fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	61fb      	str	r3, [r7, #28]
 8004fb4:	4b25      	ldr	r3, [pc, #148]	; (800504c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	61bb      	str	r3, [r7, #24]
 8004fba:	e00b      	b.n	8004fd4 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	b2da      	uxtb	r2, r3
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	1c59      	adds	r1, r3, #1
 8004fc4:	61f9      	str	r1, [r7, #28]
 8004fc6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fca:	b2d2      	uxtb	r2, r2
 8004fcc:	701a      	strb	r2, [r3, #0]
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	09db      	lsrs	r3, r3, #7
 8004fd2:	61bb      	str	r3, [r7, #24]
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	2b7f      	cmp	r3, #127	; 0x7f
 8004fd8:	d8f0      	bhi.n	8004fbc <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	1c5a      	adds	r2, r3, #1
 8004fde:	61fa      	str	r2, [r7, #28]
 8004fe0:	69ba      	ldr	r2, [r7, #24]
 8004fe2:	b2d2      	uxtb	r2, r2
 8004fe4:	701a      	strb	r2, [r3, #0]
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	617b      	str	r3, [r7, #20]
 8004fee:	2300      	movs	r3, #0
 8004ff0:	613b      	str	r3, [r7, #16]
 8004ff2:	e00b      	b.n	800500c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	b2da      	uxtb	r2, r3
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	1c59      	adds	r1, r3, #1
 8004ffc:	6179      	str	r1, [r7, #20]
 8004ffe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005002:	b2d2      	uxtb	r2, r2
 8005004:	701a      	strb	r2, [r3, #0]
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	09db      	lsrs	r3, r3, #7
 800500a:	613b      	str	r3, [r7, #16]
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	2b7f      	cmp	r3, #127	; 0x7f
 8005010:	d8f0      	bhi.n	8004ff4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	1c5a      	adds	r2, r3, #1
 8005016:	617a      	str	r2, [r7, #20]
 8005018:	693a      	ldr	r2, [r7, #16]
 800501a:	b2d2      	uxtb	r2, r2
 800501c:	701a      	strb	r2, [r3, #0]
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005022:	2218      	movs	r2, #24
 8005024:	6879      	ldr	r1, [r7, #4]
 8005026:	68b8      	ldr	r0, [r7, #8]
 8005028:	f7ff fb16 	bl	8004658 <_SendPacket>
  RECORD_END();
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005032:	4b06      	ldr	r3, [pc, #24]	; (800504c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005036:	2b00      	cmp	r3, #0
 8005038:	d002      	beq.n	8005040 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800503a:	4b04      	ldr	r3, [pc, #16]	; (800504c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800503c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503e:	4798      	blx	r3
  }
}
 8005040:	bf00      	nop
 8005042:	3730      	adds	r7, #48	; 0x30
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}
 8005048:	200137fc 	.word	0x200137fc
 800504c:	200137cc 	.word	0x200137cc

08005050 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005050:	b580      	push	{r7, lr}
 8005052:	b092      	sub	sp, #72	; 0x48
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005058:	f3ef 8311 	mrs	r3, BASEPRI
 800505c:	f04f 0120 	mov.w	r1, #32
 8005060:	f381 8811 	msr	BASEPRI, r1
 8005064:	617b      	str	r3, [r7, #20]
 8005066:	486a      	ldr	r0, [pc, #424]	; (8005210 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005068:	f7ff fa06 	bl	8004478 <_PreparePacket>
 800506c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	647b      	str	r3, [r7, #68]	; 0x44
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	4b66      	ldr	r3, [pc, #408]	; (8005214 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	643b      	str	r3, [r7, #64]	; 0x40
 8005082:	e00b      	b.n	800509c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005084:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005086:	b2da      	uxtb	r2, r3
 8005088:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800508a:	1c59      	adds	r1, r3, #1
 800508c:	6479      	str	r1, [r7, #68]	; 0x44
 800508e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005092:	b2d2      	uxtb	r2, r2
 8005094:	701a      	strb	r2, [r3, #0]
 8005096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005098:	09db      	lsrs	r3, r3, #7
 800509a:	643b      	str	r3, [r7, #64]	; 0x40
 800509c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800509e:	2b7f      	cmp	r3, #127	; 0x7f
 80050a0:	d8f0      	bhi.n	8005084 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80050a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050a4:	1c5a      	adds	r2, r3, #1
 80050a6:	647a      	str	r2, [r7, #68]	; 0x44
 80050a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80050aa:	b2d2      	uxtb	r2, r2
 80050ac:	701a      	strb	r2, [r3, #0]
 80050ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050b0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80050bc:	e00b      	b.n	80050d6 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80050be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c0:	b2da      	uxtb	r2, r3
 80050c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050c4:	1c59      	adds	r1, r3, #1
 80050c6:	63f9      	str	r1, [r7, #60]	; 0x3c
 80050c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050cc:	b2d2      	uxtb	r2, r2
 80050ce:	701a      	strb	r2, [r3, #0]
 80050d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d2:	09db      	lsrs	r3, r3, #7
 80050d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80050d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d8:	2b7f      	cmp	r3, #127	; 0x7f
 80050da:	d8f0      	bhi.n	80050be <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80050dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050de:	1c5a      	adds	r2, r3, #1
 80050e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80050e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050e4:	b2d2      	uxtb	r2, r2
 80050e6:	701a      	strb	r2, [r3, #0]
 80050e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050ea:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	2220      	movs	r2, #32
 80050f2:	4619      	mov	r1, r3
 80050f4:	68f8      	ldr	r0, [r7, #12]
 80050f6:	f7ff f98f 	bl	8004418 <_EncodeStr>
 80050fa:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80050fc:	2209      	movs	r2, #9
 80050fe:	68f9      	ldr	r1, [r7, #12]
 8005100:	6938      	ldr	r0, [r7, #16]
 8005102:	f7ff faa9 	bl	8004658 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	637b      	str	r3, [r7, #52]	; 0x34
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	4b40      	ldr	r3, [pc, #256]	; (8005214 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	633b      	str	r3, [r7, #48]	; 0x30
 800511a:	e00b      	b.n	8005134 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800511c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800511e:	b2da      	uxtb	r2, r3
 8005120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005122:	1c59      	adds	r1, r3, #1
 8005124:	6379      	str	r1, [r7, #52]	; 0x34
 8005126:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800512a:	b2d2      	uxtb	r2, r2
 800512c:	701a      	strb	r2, [r3, #0]
 800512e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005130:	09db      	lsrs	r3, r3, #7
 8005132:	633b      	str	r3, [r7, #48]	; 0x30
 8005134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005136:	2b7f      	cmp	r3, #127	; 0x7f
 8005138:	d8f0      	bhi.n	800511c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800513a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800513c:	1c5a      	adds	r2, r3, #1
 800513e:	637a      	str	r2, [r7, #52]	; 0x34
 8005140:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005142:	b2d2      	uxtb	r2, r2
 8005144:	701a      	strb	r2, [r3, #0]
 8005146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005148:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	62bb      	str	r3, [r7, #40]	; 0x28
 8005154:	e00b      	b.n	800516e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005158:	b2da      	uxtb	r2, r3
 800515a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800515c:	1c59      	adds	r1, r3, #1
 800515e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005160:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005164:	b2d2      	uxtb	r2, r2
 8005166:	701a      	strb	r2, [r3, #0]
 8005168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800516a:	09db      	lsrs	r3, r3, #7
 800516c:	62bb      	str	r3, [r7, #40]	; 0x28
 800516e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005170:	2b7f      	cmp	r3, #127	; 0x7f
 8005172:	d8f0      	bhi.n	8005156 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005176:	1c5a      	adds	r2, r3, #1
 8005178:	62fa      	str	r2, [r7, #44]	; 0x2c
 800517a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800517c:	b2d2      	uxtb	r2, r2
 800517e:	701a      	strb	r2, [r3, #0]
 8005180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005182:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	627b      	str	r3, [r7, #36]	; 0x24
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	623b      	str	r3, [r7, #32]
 800518e:	e00b      	b.n	80051a8 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005190:	6a3b      	ldr	r3, [r7, #32]
 8005192:	b2da      	uxtb	r2, r3
 8005194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005196:	1c59      	adds	r1, r3, #1
 8005198:	6279      	str	r1, [r7, #36]	; 0x24
 800519a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800519e:	b2d2      	uxtb	r2, r2
 80051a0:	701a      	strb	r2, [r3, #0]
 80051a2:	6a3b      	ldr	r3, [r7, #32]
 80051a4:	09db      	lsrs	r3, r3, #7
 80051a6:	623b      	str	r3, [r7, #32]
 80051a8:	6a3b      	ldr	r3, [r7, #32]
 80051aa:	2b7f      	cmp	r3, #127	; 0x7f
 80051ac:	d8f0      	bhi.n	8005190 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80051ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b0:	1c5a      	adds	r2, r3, #1
 80051b2:	627a      	str	r2, [r7, #36]	; 0x24
 80051b4:	6a3a      	ldr	r2, [r7, #32]
 80051b6:	b2d2      	uxtb	r2, r2
 80051b8:	701a      	strb	r2, [r3, #0]
 80051ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051bc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	61fb      	str	r3, [r7, #28]
 80051c2:	2300      	movs	r3, #0
 80051c4:	61bb      	str	r3, [r7, #24]
 80051c6:	e00b      	b.n	80051e0 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	b2da      	uxtb	r2, r3
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	1c59      	adds	r1, r3, #1
 80051d0:	61f9      	str	r1, [r7, #28]
 80051d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051d6:	b2d2      	uxtb	r2, r2
 80051d8:	701a      	strb	r2, [r3, #0]
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	09db      	lsrs	r3, r3, #7
 80051de:	61bb      	str	r3, [r7, #24]
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	2b7f      	cmp	r3, #127	; 0x7f
 80051e4:	d8f0      	bhi.n	80051c8 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	1c5a      	adds	r2, r3, #1
 80051ea:	61fa      	str	r2, [r7, #28]
 80051ec:	69ba      	ldr	r2, [r7, #24]
 80051ee:	b2d2      	uxtb	r2, r2
 80051f0:	701a      	strb	r2, [r3, #0]
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80051f6:	2215      	movs	r2, #21
 80051f8:	68f9      	ldr	r1, [r7, #12]
 80051fa:	6938      	ldr	r0, [r7, #16]
 80051fc:	f7ff fa2c 	bl	8004658 <_SendPacket>
  RECORD_END();
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	f383 8811 	msr	BASEPRI, r3
}
 8005206:	bf00      	nop
 8005208:	3748      	adds	r7, #72	; 0x48
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	200137fc 	.word	0x200137fc
 8005214:	200137cc 	.word	0x200137cc

08005218 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005218:	b580      	push	{r7, lr}
 800521a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800521c:	4b07      	ldr	r3, [pc, #28]	; (800523c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800521e:	6a1b      	ldr	r3, [r3, #32]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d008      	beq.n	8005236 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005224:	4b05      	ldr	r3, [pc, #20]	; (800523c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005226:	6a1b      	ldr	r3, [r3, #32]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d003      	beq.n	8005236 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800522e:	4b03      	ldr	r3, [pc, #12]	; (800523c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005230:	6a1b      	ldr	r3, [r3, #32]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	4798      	blx	r3
  }
}
 8005236:	bf00      	nop
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	200137cc 	.word	0x200137cc

08005240 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005240:	b580      	push	{r7, lr}
 8005242:	b086      	sub	sp, #24
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005248:	f3ef 8311 	mrs	r3, BASEPRI
 800524c:	f04f 0120 	mov.w	r1, #32
 8005250:	f381 8811 	msr	BASEPRI, r1
 8005254:	617b      	str	r3, [r7, #20]
 8005256:	480b      	ldr	r0, [pc, #44]	; (8005284 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005258:	f7ff f90e 	bl	8004478 <_PreparePacket>
 800525c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800525e:	2280      	movs	r2, #128	; 0x80
 8005260:	6879      	ldr	r1, [r7, #4]
 8005262:	6938      	ldr	r0, [r7, #16]
 8005264:	f7ff f8d8 	bl	8004418 <_EncodeStr>
 8005268:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800526a:	220e      	movs	r2, #14
 800526c:	68f9      	ldr	r1, [r7, #12]
 800526e:	6938      	ldr	r0, [r7, #16]
 8005270:	f7ff f9f2 	bl	8004658 <_SendPacket>
  RECORD_END();
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	f383 8811 	msr	BASEPRI, r3
}
 800527a:	bf00      	nop
 800527c:	3718      	adds	r7, #24
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	200137fc 	.word	0x200137fc

08005288 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005288:	b590      	push	{r4, r7, lr}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800528e:	4b15      	ldr	r3, [pc, #84]	; (80052e4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005290:	6a1b      	ldr	r3, [r3, #32]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d01a      	beq.n	80052cc <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005296:	4b13      	ldr	r3, [pc, #76]	; (80052e4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005298:	6a1b      	ldr	r3, [r3, #32]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d015      	beq.n	80052cc <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80052a0:	4b10      	ldr	r3, [pc, #64]	; (80052e4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80052a2:	6a1b      	ldr	r3, [r3, #32]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4798      	blx	r3
 80052a8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80052ac:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80052ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80052b2:	f04f 0200 	mov.w	r2, #0
 80052b6:	f04f 0300 	mov.w	r3, #0
 80052ba:	000a      	movs	r2, r1
 80052bc:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80052be:	4613      	mov	r3, r2
 80052c0:	461a      	mov	r2, r3
 80052c2:	4621      	mov	r1, r4
 80052c4:	200d      	movs	r0, #13
 80052c6:	f7ff fbe5 	bl	8004a94 <SEGGER_SYSVIEW_RecordU32x2>
 80052ca:	e006      	b.n	80052da <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80052cc:	4b06      	ldr	r3, [pc, #24]	; (80052e8 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4619      	mov	r1, r3
 80052d2:	200c      	movs	r0, #12
 80052d4:	f7ff fba2 	bl	8004a1c <SEGGER_SYSVIEW_RecordU32>
  }
}
 80052d8:	bf00      	nop
 80052da:	bf00      	nop
 80052dc:	370c      	adds	r7, #12
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd90      	pop	{r4, r7, pc}
 80052e2:	bf00      	nop
 80052e4:	200137cc 	.word	0x200137cc
 80052e8:	e0001004 	.word	0xe0001004

080052ec <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b086      	sub	sp, #24
 80052f0:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80052f2:	f3ef 8311 	mrs	r3, BASEPRI
 80052f6:	f04f 0120 	mov.w	r1, #32
 80052fa:	f381 8811 	msr	BASEPRI, r1
 80052fe:	60fb      	str	r3, [r7, #12]
 8005300:	4819      	ldr	r0, [pc, #100]	; (8005368 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005302:	f7ff f8b9 	bl	8004478 <_PreparePacket>
 8005306:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800530c:	4b17      	ldr	r3, [pc, #92]	; (800536c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005314:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	617b      	str	r3, [r7, #20]
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	613b      	str	r3, [r7, #16]
 800531e:	e00b      	b.n	8005338 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	b2da      	uxtb	r2, r3
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	1c59      	adds	r1, r3, #1
 8005328:	6179      	str	r1, [r7, #20]
 800532a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800532e:	b2d2      	uxtb	r2, r2
 8005330:	701a      	strb	r2, [r3, #0]
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	09db      	lsrs	r3, r3, #7
 8005336:	613b      	str	r3, [r7, #16]
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	2b7f      	cmp	r3, #127	; 0x7f
 800533c:	d8f0      	bhi.n	8005320 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	1c5a      	adds	r2, r3, #1
 8005342:	617a      	str	r2, [r7, #20]
 8005344:	693a      	ldr	r2, [r7, #16]
 8005346:	b2d2      	uxtb	r2, r2
 8005348:	701a      	strb	r2, [r3, #0]
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800534e:	2202      	movs	r2, #2
 8005350:	6879      	ldr	r1, [r7, #4]
 8005352:	68b8      	ldr	r0, [r7, #8]
 8005354:	f7ff f980 	bl	8004658 <_SendPacket>
  RECORD_END();
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f383 8811 	msr	BASEPRI, r3
}
 800535e:	bf00      	nop
 8005360:	3718      	adds	r7, #24
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	200137fc 	.word	0x200137fc
 800536c:	e000ed04 	.word	0xe000ed04

08005370 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005376:	f3ef 8311 	mrs	r3, BASEPRI
 800537a:	f04f 0120 	mov.w	r1, #32
 800537e:	f381 8811 	msr	BASEPRI, r1
 8005382:	607b      	str	r3, [r7, #4]
 8005384:	4807      	ldr	r0, [pc, #28]	; (80053a4 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005386:	f7ff f877 	bl	8004478 <_PreparePacket>
 800538a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800538c:	2203      	movs	r2, #3
 800538e:	6839      	ldr	r1, [r7, #0]
 8005390:	6838      	ldr	r0, [r7, #0]
 8005392:	f7ff f961 	bl	8004658 <_SendPacket>
  RECORD_END();
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f383 8811 	msr	BASEPRI, r3
}
 800539c:	bf00      	nop
 800539e:	3708      	adds	r7, #8
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	200137fc 	.word	0x200137fc

080053a8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80053ae:	f3ef 8311 	mrs	r3, BASEPRI
 80053b2:	f04f 0120 	mov.w	r1, #32
 80053b6:	f381 8811 	msr	BASEPRI, r1
 80053ba:	607b      	str	r3, [r7, #4]
 80053bc:	4807      	ldr	r0, [pc, #28]	; (80053dc <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80053be:	f7ff f85b 	bl	8004478 <_PreparePacket>
 80053c2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80053c4:	2212      	movs	r2, #18
 80053c6:	6839      	ldr	r1, [r7, #0]
 80053c8:	6838      	ldr	r0, [r7, #0]
 80053ca:	f7ff f945 	bl	8004658 <_SendPacket>
  RECORD_END();
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f383 8811 	msr	BASEPRI, r3
}
 80053d4:	bf00      	nop
 80053d6:	3708      	adds	r7, #8
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	200137fc 	.word	0x200137fc

080053e0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80053e6:	f3ef 8311 	mrs	r3, BASEPRI
 80053ea:	f04f 0120 	mov.w	r1, #32
 80053ee:	f381 8811 	msr	BASEPRI, r1
 80053f2:	607b      	str	r3, [r7, #4]
 80053f4:	4807      	ldr	r0, [pc, #28]	; (8005414 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80053f6:	f7ff f83f 	bl	8004478 <_PreparePacket>
 80053fa:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80053fc:	2211      	movs	r2, #17
 80053fe:	6839      	ldr	r1, [r7, #0]
 8005400:	6838      	ldr	r0, [r7, #0]
 8005402:	f7ff f929 	bl	8004658 <_SendPacket>
  RECORD_END();
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f383 8811 	msr	BASEPRI, r3
}
 800540c:	bf00      	nop
 800540e:	3708      	adds	r7, #8
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}
 8005414:	200137fc 	.word	0x200137fc

08005418 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005418:	b580      	push	{r7, lr}
 800541a:	b088      	sub	sp, #32
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005420:	f3ef 8311 	mrs	r3, BASEPRI
 8005424:	f04f 0120 	mov.w	r1, #32
 8005428:	f381 8811 	msr	BASEPRI, r1
 800542c:	617b      	str	r3, [r7, #20]
 800542e:	4819      	ldr	r0, [pc, #100]	; (8005494 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005430:	f7ff f822 	bl	8004478 <_PreparePacket>
 8005434:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800543a:	4b17      	ldr	r3, [pc, #92]	; (8005498 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	61fb      	str	r3, [r7, #28]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	61bb      	str	r3, [r7, #24]
 800544c:	e00b      	b.n	8005466 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	b2da      	uxtb	r2, r3
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	1c59      	adds	r1, r3, #1
 8005456:	61f9      	str	r1, [r7, #28]
 8005458:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800545c:	b2d2      	uxtb	r2, r2
 800545e:	701a      	strb	r2, [r3, #0]
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	09db      	lsrs	r3, r3, #7
 8005464:	61bb      	str	r3, [r7, #24]
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	2b7f      	cmp	r3, #127	; 0x7f
 800546a:	d8f0      	bhi.n	800544e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	1c5a      	adds	r2, r3, #1
 8005470:	61fa      	str	r2, [r7, #28]
 8005472:	69ba      	ldr	r2, [r7, #24]
 8005474:	b2d2      	uxtb	r2, r2
 8005476:	701a      	strb	r2, [r3, #0]
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800547c:	2208      	movs	r2, #8
 800547e:	68f9      	ldr	r1, [r7, #12]
 8005480:	6938      	ldr	r0, [r7, #16]
 8005482:	f7ff f8e9 	bl	8004658 <_SendPacket>
  RECORD_END();
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	f383 8811 	msr	BASEPRI, r3
}
 800548c:	bf00      	nop
 800548e:	3720      	adds	r7, #32
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}
 8005494:	200137fc 	.word	0x200137fc
 8005498:	200137cc 	.word	0x200137cc

0800549c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800549c:	b580      	push	{r7, lr}
 800549e:	b088      	sub	sp, #32
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80054a4:	f3ef 8311 	mrs	r3, BASEPRI
 80054a8:	f04f 0120 	mov.w	r1, #32
 80054ac:	f381 8811 	msr	BASEPRI, r1
 80054b0:	617b      	str	r3, [r7, #20]
 80054b2:	4819      	ldr	r0, [pc, #100]	; (8005518 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80054b4:	f7fe ffe0 	bl	8004478 <_PreparePacket>
 80054b8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80054be:	4b17      	ldr	r3, [pc, #92]	; (800551c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	61fb      	str	r3, [r7, #28]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	61bb      	str	r3, [r7, #24]
 80054d0:	e00b      	b.n	80054ea <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	b2da      	uxtb	r2, r3
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	1c59      	adds	r1, r3, #1
 80054da:	61f9      	str	r1, [r7, #28]
 80054dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054e0:	b2d2      	uxtb	r2, r2
 80054e2:	701a      	strb	r2, [r3, #0]
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	09db      	lsrs	r3, r3, #7
 80054e8:	61bb      	str	r3, [r7, #24]
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	2b7f      	cmp	r3, #127	; 0x7f
 80054ee:	d8f0      	bhi.n	80054d2 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	1c5a      	adds	r2, r3, #1
 80054f4:	61fa      	str	r2, [r7, #28]
 80054f6:	69ba      	ldr	r2, [r7, #24]
 80054f8:	b2d2      	uxtb	r2, r2
 80054fa:	701a      	strb	r2, [r3, #0]
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005500:	2204      	movs	r2, #4
 8005502:	68f9      	ldr	r1, [r7, #12]
 8005504:	6938      	ldr	r0, [r7, #16]
 8005506:	f7ff f8a7 	bl	8004658 <_SendPacket>
  RECORD_END();
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	f383 8811 	msr	BASEPRI, r3
}
 8005510:	bf00      	nop
 8005512:	3720      	adds	r7, #32
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}
 8005518:	200137fc 	.word	0x200137fc
 800551c:	200137cc 	.word	0x200137cc

08005520 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005520:	b580      	push	{r7, lr}
 8005522:	b088      	sub	sp, #32
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005528:	f3ef 8311 	mrs	r3, BASEPRI
 800552c:	f04f 0120 	mov.w	r1, #32
 8005530:	f381 8811 	msr	BASEPRI, r1
 8005534:	617b      	str	r3, [r7, #20]
 8005536:	4819      	ldr	r0, [pc, #100]	; (800559c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005538:	f7fe ff9e 	bl	8004478 <_PreparePacket>
 800553c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005542:	4b17      	ldr	r3, [pc, #92]	; (80055a0 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005544:	691b      	ldr	r3, [r3, #16]
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	61fb      	str	r3, [r7, #28]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	61bb      	str	r3, [r7, #24]
 8005554:	e00b      	b.n	800556e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	b2da      	uxtb	r2, r3
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	1c59      	adds	r1, r3, #1
 800555e:	61f9      	str	r1, [r7, #28]
 8005560:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005564:	b2d2      	uxtb	r2, r2
 8005566:	701a      	strb	r2, [r3, #0]
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	09db      	lsrs	r3, r3, #7
 800556c:	61bb      	str	r3, [r7, #24]
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	2b7f      	cmp	r3, #127	; 0x7f
 8005572:	d8f0      	bhi.n	8005556 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	1c5a      	adds	r2, r3, #1
 8005578:	61fa      	str	r2, [r7, #28]
 800557a:	69ba      	ldr	r2, [r7, #24]
 800557c:	b2d2      	uxtb	r2, r2
 800557e:	701a      	strb	r2, [r3, #0]
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005584:	2206      	movs	r2, #6
 8005586:	68f9      	ldr	r1, [r7, #12]
 8005588:	6938      	ldr	r0, [r7, #16]
 800558a:	f7ff f865 	bl	8004658 <_SendPacket>
  RECORD_END();
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	f383 8811 	msr	BASEPRI, r3
}
 8005594:	bf00      	nop
 8005596:	3720      	adds	r7, #32
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	200137fc 	.word	0x200137fc
 80055a0:	200137cc 	.word	0x200137cc

080055a4 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b08a      	sub	sp, #40	; 0x28
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80055ae:	f3ef 8311 	mrs	r3, BASEPRI
 80055b2:	f04f 0120 	mov.w	r1, #32
 80055b6:	f381 8811 	msr	BASEPRI, r1
 80055ba:	617b      	str	r3, [r7, #20]
 80055bc:	4827      	ldr	r0, [pc, #156]	; (800565c <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80055be:	f7fe ff5b 	bl	8004478 <_PreparePacket>
 80055c2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80055c8:	4b25      	ldr	r3, [pc, #148]	; (8005660 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	627b      	str	r3, [r7, #36]	; 0x24
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	623b      	str	r3, [r7, #32]
 80055da:	e00b      	b.n	80055f4 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80055dc:	6a3b      	ldr	r3, [r7, #32]
 80055de:	b2da      	uxtb	r2, r3
 80055e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e2:	1c59      	adds	r1, r3, #1
 80055e4:	6279      	str	r1, [r7, #36]	; 0x24
 80055e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055ea:	b2d2      	uxtb	r2, r2
 80055ec:	701a      	strb	r2, [r3, #0]
 80055ee:	6a3b      	ldr	r3, [r7, #32]
 80055f0:	09db      	lsrs	r3, r3, #7
 80055f2:	623b      	str	r3, [r7, #32]
 80055f4:	6a3b      	ldr	r3, [r7, #32]
 80055f6:	2b7f      	cmp	r3, #127	; 0x7f
 80055f8:	d8f0      	bhi.n	80055dc <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80055fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fc:	1c5a      	adds	r2, r3, #1
 80055fe:	627a      	str	r2, [r7, #36]	; 0x24
 8005600:	6a3a      	ldr	r2, [r7, #32]
 8005602:	b2d2      	uxtb	r2, r2
 8005604:	701a      	strb	r2, [r3, #0]
 8005606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005608:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	61fb      	str	r3, [r7, #28]
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	61bb      	str	r3, [r7, #24]
 8005612:	e00b      	b.n	800562c <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	b2da      	uxtb	r2, r3
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	1c59      	adds	r1, r3, #1
 800561c:	61f9      	str	r1, [r7, #28]
 800561e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005622:	b2d2      	uxtb	r2, r2
 8005624:	701a      	strb	r2, [r3, #0]
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	09db      	lsrs	r3, r3, #7
 800562a:	61bb      	str	r3, [r7, #24]
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	2b7f      	cmp	r3, #127	; 0x7f
 8005630:	d8f0      	bhi.n	8005614 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	1c5a      	adds	r2, r3, #1
 8005636:	61fa      	str	r2, [r7, #28]
 8005638:	69ba      	ldr	r2, [r7, #24]
 800563a:	b2d2      	uxtb	r2, r2
 800563c:	701a      	strb	r2, [r3, #0]
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8005642:	2207      	movs	r2, #7
 8005644:	68f9      	ldr	r1, [r7, #12]
 8005646:	6938      	ldr	r0, [r7, #16]
 8005648:	f7ff f806 	bl	8004658 <_SendPacket>
  RECORD_END();
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	f383 8811 	msr	BASEPRI, r3
}
 8005652:	bf00      	nop
 8005654:	3728      	adds	r7, #40	; 0x28
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	200137fc 	.word	0x200137fc
 8005660:	200137cc 	.word	0x200137cc

08005664 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800566c:	4b04      	ldr	r3, [pc, #16]	; (8005680 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	1ad3      	subs	r3, r2, r3
}
 8005674:	4618      	mov	r0, r3
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr
 8005680:	200137cc 	.word	0x200137cc

08005684 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005684:	b580      	push	{r7, lr}
 8005686:	b08c      	sub	sp, #48	; 0x30
 8005688:	af00      	add	r7, sp, #0
 800568a:	4603      	mov	r3, r0
 800568c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800568e:	4b40      	ldr	r3, [pc, #256]	; (8005790 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d077      	beq.n	8005786 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8005696:	4b3e      	ldr	r3, [pc, #248]	; (8005790 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800569c:	2300      	movs	r3, #0
 800569e:	62bb      	str	r3, [r7, #40]	; 0x28
 80056a0:	e008      	b.n	80056b4 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80056a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80056a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d007      	beq.n	80056be <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80056ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b0:	3301      	adds	r3, #1
 80056b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80056b4:	79fb      	ldrb	r3, [r7, #7]
 80056b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d3f2      	bcc.n	80056a2 <SEGGER_SYSVIEW_SendModule+0x1e>
 80056bc:	e000      	b.n	80056c0 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80056be:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80056c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d055      	beq.n	8005772 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80056c6:	f3ef 8311 	mrs	r3, BASEPRI
 80056ca:	f04f 0120 	mov.w	r1, #32
 80056ce:	f381 8811 	msr	BASEPRI, r1
 80056d2:	617b      	str	r3, [r7, #20]
 80056d4:	482f      	ldr	r0, [pc, #188]	; (8005794 <SEGGER_SYSVIEW_SendModule+0x110>)
 80056d6:	f7fe fecf 	bl	8004478 <_PreparePacket>
 80056da:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	627b      	str	r3, [r7, #36]	; 0x24
 80056e4:	79fb      	ldrb	r3, [r7, #7]
 80056e6:	623b      	str	r3, [r7, #32]
 80056e8:	e00b      	b.n	8005702 <SEGGER_SYSVIEW_SendModule+0x7e>
 80056ea:	6a3b      	ldr	r3, [r7, #32]
 80056ec:	b2da      	uxtb	r2, r3
 80056ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f0:	1c59      	adds	r1, r3, #1
 80056f2:	6279      	str	r1, [r7, #36]	; 0x24
 80056f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056f8:	b2d2      	uxtb	r2, r2
 80056fa:	701a      	strb	r2, [r3, #0]
 80056fc:	6a3b      	ldr	r3, [r7, #32]
 80056fe:	09db      	lsrs	r3, r3, #7
 8005700:	623b      	str	r3, [r7, #32]
 8005702:	6a3b      	ldr	r3, [r7, #32]
 8005704:	2b7f      	cmp	r3, #127	; 0x7f
 8005706:	d8f0      	bhi.n	80056ea <SEGGER_SYSVIEW_SendModule+0x66>
 8005708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570a:	1c5a      	adds	r2, r3, #1
 800570c:	627a      	str	r2, [r7, #36]	; 0x24
 800570e:	6a3a      	ldr	r2, [r7, #32]
 8005710:	b2d2      	uxtb	r2, r2
 8005712:	701a      	strb	r2, [r3, #0]
 8005714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005716:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	61fb      	str	r3, [r7, #28]
 800571c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	61bb      	str	r3, [r7, #24]
 8005722:	e00b      	b.n	800573c <SEGGER_SYSVIEW_SendModule+0xb8>
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	b2da      	uxtb	r2, r3
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	1c59      	adds	r1, r3, #1
 800572c:	61f9      	str	r1, [r7, #28]
 800572e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005732:	b2d2      	uxtb	r2, r2
 8005734:	701a      	strb	r2, [r3, #0]
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	09db      	lsrs	r3, r3, #7
 800573a:	61bb      	str	r3, [r7, #24]
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	2b7f      	cmp	r3, #127	; 0x7f
 8005740:	d8f0      	bhi.n	8005724 <SEGGER_SYSVIEW_SendModule+0xa0>
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	1c5a      	adds	r2, r3, #1
 8005746:	61fa      	str	r2, [r7, #28]
 8005748:	69ba      	ldr	r2, [r7, #24]
 800574a:	b2d2      	uxtb	r2, r2
 800574c:	701a      	strb	r2, [r3, #0]
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	2280      	movs	r2, #128	; 0x80
 8005758:	4619      	mov	r1, r3
 800575a:	68f8      	ldr	r0, [r7, #12]
 800575c:	f7fe fe5c 	bl	8004418 <_EncodeStr>
 8005760:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005762:	2216      	movs	r2, #22
 8005764:	68f9      	ldr	r1, [r7, #12]
 8005766:	6938      	ldr	r0, [r7, #16]
 8005768:	f7fe ff76 	bl	8004658 <_SendPacket>
      RECORD_END();
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8005772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005774:	2b00      	cmp	r3, #0
 8005776:	d006      	beq.n	8005786 <SEGGER_SYSVIEW_SendModule+0x102>
 8005778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d002      	beq.n	8005786 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8005780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	4798      	blx	r3
    }
  }
}
 8005786:	bf00      	nop
 8005788:	3730      	adds	r7, #48	; 0x30
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	200137f4 	.word	0x200137f4
 8005794:	200137fc 	.word	0x200137fc

08005798 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800579e:	4b0c      	ldr	r3, [pc, #48]	; (80057d0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00f      	beq.n	80057c6 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80057a6:	4b0a      	ldr	r3, [pc, #40]	; (80057d0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d002      	beq.n	80057ba <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d1f2      	bne.n	80057ac <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80057c6:	bf00      	nop
 80057c8:	3708      	adds	r7, #8
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	200137f4 	.word	0x200137f4

080057d4 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b086      	sub	sp, #24
 80057d8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80057da:	f3ef 8311 	mrs	r3, BASEPRI
 80057de:	f04f 0120 	mov.w	r1, #32
 80057e2:	f381 8811 	msr	BASEPRI, r1
 80057e6:	60fb      	str	r3, [r7, #12]
 80057e8:	4817      	ldr	r0, [pc, #92]	; (8005848 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80057ea:	f7fe fe45 	bl	8004478 <_PreparePacket>
 80057ee:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	617b      	str	r3, [r7, #20]
 80057f8:	4b14      	ldr	r3, [pc, #80]	; (800584c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	613b      	str	r3, [r7, #16]
 80057fe:	e00b      	b.n	8005818 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	b2da      	uxtb	r2, r3
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	1c59      	adds	r1, r3, #1
 8005808:	6179      	str	r1, [r7, #20]
 800580a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800580e:	b2d2      	uxtb	r2, r2
 8005810:	701a      	strb	r2, [r3, #0]
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	09db      	lsrs	r3, r3, #7
 8005816:	613b      	str	r3, [r7, #16]
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	2b7f      	cmp	r3, #127	; 0x7f
 800581c:	d8f0      	bhi.n	8005800 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	1c5a      	adds	r2, r3, #1
 8005822:	617a      	str	r2, [r7, #20]
 8005824:	693a      	ldr	r2, [r7, #16]
 8005826:	b2d2      	uxtb	r2, r2
 8005828:	701a      	strb	r2, [r3, #0]
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800582e:	221b      	movs	r2, #27
 8005830:	6879      	ldr	r1, [r7, #4]
 8005832:	68b8      	ldr	r0, [r7, #8]
 8005834:	f7fe ff10 	bl	8004658 <_SendPacket>
  RECORD_END();
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f383 8811 	msr	BASEPRI, r3
}
 800583e:	bf00      	nop
 8005840:	3718      	adds	r7, #24
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	200137fc 	.word	0x200137fc
 800584c:	200137f8 	.word	0x200137f8

08005850 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005850:	b580      	push	{r7, lr}
 8005852:	b08a      	sub	sp, #40	; 0x28
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005858:	f3ef 8311 	mrs	r3, BASEPRI
 800585c:	f04f 0120 	mov.w	r1, #32
 8005860:	f381 8811 	msr	BASEPRI, r1
 8005864:	617b      	str	r3, [r7, #20]
 8005866:	4827      	ldr	r0, [pc, #156]	; (8005904 <SEGGER_SYSVIEW_Warn+0xb4>)
 8005868:	f7fe fe06 	bl	8004478 <_PreparePacket>
 800586c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800586e:	2280      	movs	r2, #128	; 0x80
 8005870:	6879      	ldr	r1, [r7, #4]
 8005872:	6938      	ldr	r0, [r7, #16]
 8005874:	f7fe fdd0 	bl	8004418 <_EncodeStr>
 8005878:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	627b      	str	r3, [r7, #36]	; 0x24
 800587e:	2301      	movs	r3, #1
 8005880:	623b      	str	r3, [r7, #32]
 8005882:	e00b      	b.n	800589c <SEGGER_SYSVIEW_Warn+0x4c>
 8005884:	6a3b      	ldr	r3, [r7, #32]
 8005886:	b2da      	uxtb	r2, r3
 8005888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588a:	1c59      	adds	r1, r3, #1
 800588c:	6279      	str	r1, [r7, #36]	; 0x24
 800588e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005892:	b2d2      	uxtb	r2, r2
 8005894:	701a      	strb	r2, [r3, #0]
 8005896:	6a3b      	ldr	r3, [r7, #32]
 8005898:	09db      	lsrs	r3, r3, #7
 800589a:	623b      	str	r3, [r7, #32]
 800589c:	6a3b      	ldr	r3, [r7, #32]
 800589e:	2b7f      	cmp	r3, #127	; 0x7f
 80058a0:	d8f0      	bhi.n	8005884 <SEGGER_SYSVIEW_Warn+0x34>
 80058a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a4:	1c5a      	adds	r2, r3, #1
 80058a6:	627a      	str	r2, [r7, #36]	; 0x24
 80058a8:	6a3a      	ldr	r2, [r7, #32]
 80058aa:	b2d2      	uxtb	r2, r2
 80058ac:	701a      	strb	r2, [r3, #0]
 80058ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	61fb      	str	r3, [r7, #28]
 80058b6:	2300      	movs	r3, #0
 80058b8:	61bb      	str	r3, [r7, #24]
 80058ba:	e00b      	b.n	80058d4 <SEGGER_SYSVIEW_Warn+0x84>
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	b2da      	uxtb	r2, r3
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	1c59      	adds	r1, r3, #1
 80058c4:	61f9      	str	r1, [r7, #28]
 80058c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058ca:	b2d2      	uxtb	r2, r2
 80058cc:	701a      	strb	r2, [r3, #0]
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	09db      	lsrs	r3, r3, #7
 80058d2:	61bb      	str	r3, [r7, #24]
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	2b7f      	cmp	r3, #127	; 0x7f
 80058d8:	d8f0      	bhi.n	80058bc <SEGGER_SYSVIEW_Warn+0x6c>
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	1c5a      	adds	r2, r3, #1
 80058de:	61fa      	str	r2, [r7, #28]
 80058e0:	69ba      	ldr	r2, [r7, #24]
 80058e2:	b2d2      	uxtb	r2, r2
 80058e4:	701a      	strb	r2, [r3, #0]
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80058ea:	221a      	movs	r2, #26
 80058ec:	68f9      	ldr	r1, [r7, #12]
 80058ee:	6938      	ldr	r0, [r7, #16]
 80058f0:	f7fe feb2 	bl	8004658 <_SendPacket>
  RECORD_END();
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	f383 8811 	msr	BASEPRI, r3
}
 80058fa:	bf00      	nop
 80058fc:	3728      	adds	r7, #40	; 0x28
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	200137fc 	.word	0x200137fc

08005908 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8005908:	b580      	push	{r7, lr}
 800590a:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800590c:	4b13      	ldr	r3, [pc, #76]	; (800595c <SEGGER_SYSVIEW_IsStarted+0x54>)
 800590e:	7e1b      	ldrb	r3, [r3, #24]
 8005910:	4619      	mov	r1, r3
 8005912:	4a13      	ldr	r2, [pc, #76]	; (8005960 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005914:	460b      	mov	r3, r1
 8005916:	005b      	lsls	r3, r3, #1
 8005918:	440b      	add	r3, r1
 800591a:	00db      	lsls	r3, r3, #3
 800591c:	4413      	add	r3, r2
 800591e:	336c      	adds	r3, #108	; 0x6c
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	4b0e      	ldr	r3, [pc, #56]	; (800595c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005924:	7e1b      	ldrb	r3, [r3, #24]
 8005926:	4618      	mov	r0, r3
 8005928:	490d      	ldr	r1, [pc, #52]	; (8005960 <SEGGER_SYSVIEW_IsStarted+0x58>)
 800592a:	4603      	mov	r3, r0
 800592c:	005b      	lsls	r3, r3, #1
 800592e:	4403      	add	r3, r0
 8005930:	00db      	lsls	r3, r3, #3
 8005932:	440b      	add	r3, r1
 8005934:	3370      	adds	r3, #112	; 0x70
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	429a      	cmp	r2, r3
 800593a:	d00b      	beq.n	8005954 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800593c:	4b07      	ldr	r3, [pc, #28]	; (800595c <SEGGER_SYSVIEW_IsStarted+0x54>)
 800593e:	789b      	ldrb	r3, [r3, #2]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d107      	bne.n	8005954 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005944:	4b05      	ldr	r3, [pc, #20]	; (800595c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005946:	2201      	movs	r2, #1
 8005948:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800594a:	f7fe fda1 	bl	8004490 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800594e:	4b03      	ldr	r3, [pc, #12]	; (800595c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005950:	2200      	movs	r2, #0
 8005952:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8005954:	4b01      	ldr	r3, [pc, #4]	; (800595c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005956:	781b      	ldrb	r3, [r3, #0]
}
 8005958:	4618      	mov	r0, r3
 800595a:	bd80      	pop	{r7, pc}
 800595c:	200137cc 	.word	0x200137cc
 8005960:	20012f0c 	.word	0x20012f0c

08005964 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	607a      	str	r2, [r7, #4]
 8005970:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8005972:	683a      	ldr	r2, [r7, #0]
 8005974:	6879      	ldr	r1, [r7, #4]
 8005976:	2000      	movs	r0, #0
 8005978:	f7fe fc58 	bl	800422c <SEGGER_RTT_Write>
  return len;
 800597c:	683b      	ldr	r3, [r7, #0]
}
 800597e:	4618      	mov	r0, r3
 8005980:	3710      	adds	r7, #16
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
	...

08005988 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	4603      	mov	r3, r0
 8005990:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005996:	2b00      	cmp	r3, #0
 8005998:	db0b      	blt.n	80059b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800599a:	79fb      	ldrb	r3, [r7, #7]
 800599c:	f003 021f 	and.w	r2, r3, #31
 80059a0:	4907      	ldr	r1, [pc, #28]	; (80059c0 <__NVIC_EnableIRQ+0x38>)
 80059a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059a6:	095b      	lsrs	r3, r3, #5
 80059a8:	2001      	movs	r0, #1
 80059aa:	fa00 f202 	lsl.w	r2, r0, r2
 80059ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80059b2:	bf00      	nop
 80059b4:	370c      	adds	r7, #12
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop
 80059c0:	e000e100 	.word	0xe000e100

080059c4 <extInt_Config>:

#include "ExtiDriver.h"
#include "GPIOxDriver.h"

// Haciendo prueba con PC15
void extInt_Config(EXTI_Config_t *extiConfig) {
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b082      	sub	sp, #8
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]

	/* 1.0 Se carga la configuración, que debe ser el PINx como entrada "simple" */
	GPIO_Config(extiConfig->pGPIOHandler); //Pin objteivo
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4618      	mov	r0, r3
 80059d2:	f001 f82b 	bl	8006a2c <GPIO_Config>

	/* 2.0 Activamos el acceso al SYSCFG */
	/*Agregue su código acá*/
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80059d6:	4b91      	ldr	r3, [pc, #580]	; (8005c1c <extInt_Config+0x258>)
 80059d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059da:	4a90      	ldr	r2, [pc, #576]	; (8005c1c <extInt_Config+0x258>)
 80059dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80059e0:	6453      	str	r3, [r2, #68]	; 0x44

	/* 3.0  Asignamos el canal EXTI que corresponde al PIN_y del puerto GPIO_X
	 * Debemos activar la línea PIN_Xy (Y = A, B, C... y x = 0, 1, 2, 3...)
	 * en el módulo EXTI */
	switch (extiConfig->pGPIOHandler->GPIO_PinConfig_t.GPIO_PinNumber) {
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	791b      	ldrb	r3, [r3, #4]
 80059e8:	2b0f      	cmp	r3, #15
 80059ea:	f200 85ab 	bhi.w	8006544 <extInt_Config+0xb80>
 80059ee:	a201      	add	r2, pc, #4	; (adr r2, 80059f4 <extInt_Config+0x30>)
 80059f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f4:	08005a35 	.word	0x08005a35
 80059f8:	08005aeb 	.word	0x08005aeb
 80059fc:	08005b91 	.word	0x08005b91
 8005a00:	08005c59 	.word	0x08005c59
 8005a04:	08005cff 	.word	0x08005cff
 8005a08:	08005da5 	.word	0x08005da5
 8005a0c:	08005e67 	.word	0x08005e67
 8005a10:	08005f0d 	.word	0x08005f0d
 8005a14:	08005fb3 	.word	0x08005fb3
 8005a18:	08006059 	.word	0x08006059
 8005a1c:	0800611d 	.word	0x0800611d
 8005a20:	080061c3 	.word	0x080061c3
 8005a24:	08006269 	.word	0x08006269
 8005a28:	0800632f 	.word	0x0800632f
 8005a2c:	080063d7 	.word	0x080063d7
 8005a30:	0800647f 	.word	0x0800647f
	/* Configurando para el todos los pines GPIOX_0*/
	case 0: {
		/* SYSCFG_EXTICR1 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI0_Pos);
 8005a34:	4b7a      	ldr	r3, [pc, #488]	; (8005c20 <extInt_Config+0x25c>)
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	4a79      	ldr	r2, [pc, #484]	; (8005c20 <extInt_Config+0x25c>)
 8005a3a:	f023 030f 	bic.w	r3, r3, #15
 8005a3e:	6093      	str	r3, [r2, #8]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a77      	ldr	r2, [pc, #476]	; (8005c24 <extInt_Config+0x260>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d105      	bne.n	8005a58 <extInt_Config+0x94>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PA);
 8005a4c:	4b74      	ldr	r3, [pc, #464]	; (8005c20 <extInt_Config+0x25c>)
 8005a4e:	4a74      	ldr	r2, [pc, #464]	; (8005c20 <extInt_Config+0x25c>)
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	6093      	str	r3, [r2, #8]

		} else {
			__NOP();
		}

		break;
 8005a54:	f000 bd78 	b.w	8006548 <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a72      	ldr	r2, [pc, #456]	; (8005c28 <extInt_Config+0x264>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d107      	bne.n	8005a74 <extInt_Config+0xb0>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PB);
 8005a64:	4b6e      	ldr	r3, [pc, #440]	; (8005c20 <extInt_Config+0x25c>)
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	4a6d      	ldr	r2, [pc, #436]	; (8005c20 <extInt_Config+0x25c>)
 8005a6a:	f043 0301 	orr.w	r3, r3, #1
 8005a6e:	6093      	str	r3, [r2, #8]
		break;
 8005a70:	f000 bd6a 	b.w	8006548 <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a6c      	ldr	r2, [pc, #432]	; (8005c2c <extInt_Config+0x268>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d107      	bne.n	8005a90 <extInt_Config+0xcc>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PC);
 8005a80:	4b67      	ldr	r3, [pc, #412]	; (8005c20 <extInt_Config+0x25c>)
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	4a66      	ldr	r2, [pc, #408]	; (8005c20 <extInt_Config+0x25c>)
 8005a86:	f043 0302 	orr.w	r3, r3, #2
 8005a8a:	6093      	str	r3, [r2, #8]
		break;
 8005a8c:	f000 bd5c 	b.w	8006548 <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a66      	ldr	r2, [pc, #408]	; (8005c30 <extInt_Config+0x26c>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d107      	bne.n	8005aac <extInt_Config+0xe8>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PD);
 8005a9c:	4b60      	ldr	r3, [pc, #384]	; (8005c20 <extInt_Config+0x25c>)
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	4a5f      	ldr	r2, [pc, #380]	; (8005c20 <extInt_Config+0x25c>)
 8005aa2:	f043 0303 	orr.w	r3, r3, #3
 8005aa6:	6093      	str	r3, [r2, #8]
		break;
 8005aa8:	f000 bd4e 	b.w	8006548 <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a60      	ldr	r2, [pc, #384]	; (8005c34 <extInt_Config+0x270>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d107      	bne.n	8005ac8 <extInt_Config+0x104>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PE);
 8005ab8:	4b59      	ldr	r3, [pc, #356]	; (8005c20 <extInt_Config+0x25c>)
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	4a58      	ldr	r2, [pc, #352]	; (8005c20 <extInt_Config+0x25c>)
 8005abe:	f043 0304 	orr.w	r3, r3, #4
 8005ac2:	6093      	str	r3, [r2, #8]
		break;
 8005ac4:	f000 bd40 	b.w	8006548 <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a5a      	ldr	r2, [pc, #360]	; (8005c38 <extInt_Config+0x274>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d107      	bne.n	8005ae4 <extInt_Config+0x120>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PH);
 8005ad4:	4b52      	ldr	r3, [pc, #328]	; (8005c20 <extInt_Config+0x25c>)
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	4a51      	ldr	r2, [pc, #324]	; (8005c20 <extInt_Config+0x25c>)
 8005ada:	f043 0307 	orr.w	r3, r3, #7
 8005ade:	6093      	str	r3, [r2, #8]
		break;
 8005ae0:	f000 bd32 	b.w	8006548 <extInt_Config+0xb84>
			__NOP();
 8005ae4:	bf00      	nop
		break;
 8005ae6:	f000 bd2f 	b.w	8006548 <extInt_Config+0xb84>

		/* Configurando para el todos los pines GPIOX_1*/
	case 1: {
		/* SYSCFG_EXTICR1 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI1_Pos);
 8005aea:	4b4d      	ldr	r3, [pc, #308]	; (8005c20 <extInt_Config+0x25c>)
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	4a4c      	ldr	r2, [pc, #304]	; (8005c20 <extInt_Config+0x25c>)
 8005af0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005af4:	6093      	str	r3, [r2, #8]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a49      	ldr	r2, [pc, #292]	; (8005c24 <extInt_Config+0x260>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d104      	bne.n	8005b0c <extInt_Config+0x148>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PA);
 8005b02:	4b47      	ldr	r3, [pc, #284]	; (8005c20 <extInt_Config+0x25c>)
 8005b04:	4a46      	ldr	r2, [pc, #280]	; (8005c20 <extInt_Config+0x25c>)
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	6093      	str	r3, [r2, #8]
 8005b0a:	e041      	b.n	8005b90 <extInt_Config+0x1cc>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a45      	ldr	r2, [pc, #276]	; (8005c28 <extInt_Config+0x264>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d106      	bne.n	8005b26 <extInt_Config+0x162>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PB);
 8005b18:	4b41      	ldr	r3, [pc, #260]	; (8005c20 <extInt_Config+0x25c>)
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	4a40      	ldr	r2, [pc, #256]	; (8005c20 <extInt_Config+0x25c>)
 8005b1e:	f043 0310 	orr.w	r3, r3, #16
 8005b22:	6093      	str	r3, [r2, #8]
 8005b24:	e034      	b.n	8005b90 <extInt_Config+0x1cc>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a3f      	ldr	r2, [pc, #252]	; (8005c2c <extInt_Config+0x268>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d106      	bne.n	8005b40 <extInt_Config+0x17c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PC);
 8005b32:	4b3b      	ldr	r3, [pc, #236]	; (8005c20 <extInt_Config+0x25c>)
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	4a3a      	ldr	r2, [pc, #232]	; (8005c20 <extInt_Config+0x25c>)
 8005b38:	f043 0320 	orr.w	r3, r3, #32
 8005b3c:	6093      	str	r3, [r2, #8]
 8005b3e:	e027      	b.n	8005b90 <extInt_Config+0x1cc>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a3a      	ldr	r2, [pc, #232]	; (8005c30 <extInt_Config+0x26c>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d106      	bne.n	8005b5a <extInt_Config+0x196>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PD);
 8005b4c:	4b34      	ldr	r3, [pc, #208]	; (8005c20 <extInt_Config+0x25c>)
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	4a33      	ldr	r2, [pc, #204]	; (8005c20 <extInt_Config+0x25c>)
 8005b52:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8005b56:	6093      	str	r3, [r2, #8]
 8005b58:	e01a      	b.n	8005b90 <extInt_Config+0x1cc>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a34      	ldr	r2, [pc, #208]	; (8005c34 <extInt_Config+0x270>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d106      	bne.n	8005b74 <extInt_Config+0x1b0>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PE);
 8005b66:	4b2e      	ldr	r3, [pc, #184]	; (8005c20 <extInt_Config+0x25c>)
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	4a2d      	ldr	r2, [pc, #180]	; (8005c20 <extInt_Config+0x25c>)
 8005b6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b70:	6093      	str	r3, [r2, #8]
 8005b72:	e00d      	b.n	8005b90 <extInt_Config+0x1cc>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a2f      	ldr	r2, [pc, #188]	; (8005c38 <extInt_Config+0x274>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d106      	bne.n	8005b8e <extInt_Config+0x1ca>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PH);
 8005b80:	4b27      	ldr	r3, [pc, #156]	; (8005c20 <extInt_Config+0x25c>)
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	4a26      	ldr	r2, [pc, #152]	; (8005c20 <extInt_Config+0x25c>)
 8005b86:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8005b8a:	6093      	str	r3, [r2, #8]
 8005b8c:	e000      	b.n	8005b90 <extInt_Config+0x1cc>

		} else {
			__NOP();
 8005b8e:	bf00      	nop

		/* Configurando para el todos los pines GPIOX_2*/
	case 2: {
		/* SYSCFG_EXTICR1 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI2_Pos);
 8005b90:	4b23      	ldr	r3, [pc, #140]	; (8005c20 <extInt_Config+0x25c>)
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	4a22      	ldr	r2, [pc, #136]	; (8005c20 <extInt_Config+0x25c>)
 8005b96:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005b9a:	6093      	str	r3, [r2, #8]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a20      	ldr	r2, [pc, #128]	; (8005c24 <extInt_Config+0x260>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d104      	bne.n	8005bb2 <extInt_Config+0x1ee>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PA);
 8005ba8:	4b1d      	ldr	r3, [pc, #116]	; (8005c20 <extInt_Config+0x25c>)
 8005baa:	4a1d      	ldr	r2, [pc, #116]	; (8005c20 <extInt_Config+0x25c>)
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	6093      	str	r3, [r2, #8]
 8005bb0:	e052      	b.n	8005c58 <extInt_Config+0x294>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a1b      	ldr	r2, [pc, #108]	; (8005c28 <extInt_Config+0x264>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d106      	bne.n	8005bcc <extInt_Config+0x208>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PB);
 8005bbe:	4b18      	ldr	r3, [pc, #96]	; (8005c20 <extInt_Config+0x25c>)
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	4a17      	ldr	r2, [pc, #92]	; (8005c20 <extInt_Config+0x25c>)
 8005bc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bc8:	6093      	str	r3, [r2, #8]
 8005bca:	e045      	b.n	8005c58 <extInt_Config+0x294>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a16      	ldr	r2, [pc, #88]	; (8005c2c <extInt_Config+0x268>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d106      	bne.n	8005be6 <extInt_Config+0x222>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PC);
 8005bd8:	4b11      	ldr	r3, [pc, #68]	; (8005c20 <extInt_Config+0x25c>)
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	4a10      	ldr	r2, [pc, #64]	; (8005c20 <extInt_Config+0x25c>)
 8005bde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005be2:	6093      	str	r3, [r2, #8]
 8005be4:	e038      	b.n	8005c58 <extInt_Config+0x294>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a10      	ldr	r2, [pc, #64]	; (8005c30 <extInt_Config+0x26c>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d106      	bne.n	8005c00 <extInt_Config+0x23c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PD);
 8005bf2:	4b0b      	ldr	r3, [pc, #44]	; (8005c20 <extInt_Config+0x25c>)
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	4a0a      	ldr	r2, [pc, #40]	; (8005c20 <extInt_Config+0x25c>)
 8005bf8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005bfc:	6093      	str	r3, [r2, #8]
 8005bfe:	e02b      	b.n	8005c58 <extInt_Config+0x294>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a0b      	ldr	r2, [pc, #44]	; (8005c34 <extInt_Config+0x270>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d117      	bne.n	8005c3c <extInt_Config+0x278>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PE);
 8005c0c:	4b04      	ldr	r3, [pc, #16]	; (8005c20 <extInt_Config+0x25c>)
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	4a03      	ldr	r2, [pc, #12]	; (8005c20 <extInt_Config+0x25c>)
 8005c12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005c16:	6093      	str	r3, [r2, #8]
 8005c18:	e01e      	b.n	8005c58 <extInt_Config+0x294>
 8005c1a:	bf00      	nop
 8005c1c:	40023800 	.word	0x40023800
 8005c20:	40013800 	.word	0x40013800
 8005c24:	40020000 	.word	0x40020000
 8005c28:	40020400 	.word	0x40020400
 8005c2c:	40020800 	.word	0x40020800
 8005c30:	40020c00 	.word	0x40020c00
 8005c34:	40021000 	.word	0x40021000
 8005c38:	40021c00 	.word	0x40021c00

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a81      	ldr	r2, [pc, #516]	; (8005e48 <extInt_Config+0x484>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d106      	bne.n	8005c56 <extInt_Config+0x292>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PH);
 8005c48:	4b80      	ldr	r3, [pc, #512]	; (8005e4c <extInt_Config+0x488>)
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	4a7f      	ldr	r2, [pc, #508]	; (8005e4c <extInt_Config+0x488>)
 8005c4e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005c52:	6093      	str	r3, [r2, #8]
 8005c54:	e000      	b.n	8005c58 <extInt_Config+0x294>

		} else {
			__NOP();
 8005c56:	bf00      	nop
	}

	case 3: {
		/* SYSCFG_EXTICR1 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI3_Pos);
 8005c58:	4b7c      	ldr	r3, [pc, #496]	; (8005e4c <extInt_Config+0x488>)
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	4a7b      	ldr	r2, [pc, #492]	; (8005e4c <extInt_Config+0x488>)
 8005c5e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c62:	6093      	str	r3, [r2, #8]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a79      	ldr	r2, [pc, #484]	; (8005e50 <extInt_Config+0x48c>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d104      	bne.n	8005c7a <extInt_Config+0x2b6>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PA);
 8005c70:	4b76      	ldr	r3, [pc, #472]	; (8005e4c <extInt_Config+0x488>)
 8005c72:	4a76      	ldr	r2, [pc, #472]	; (8005e4c <extInt_Config+0x488>)
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	6093      	str	r3, [r2, #8]
 8005c78:	e041      	b.n	8005cfe <extInt_Config+0x33a>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a74      	ldr	r2, [pc, #464]	; (8005e54 <extInt_Config+0x490>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d106      	bne.n	8005c94 <extInt_Config+0x2d0>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PB);
 8005c86:	4b71      	ldr	r3, [pc, #452]	; (8005e4c <extInt_Config+0x488>)
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	4a70      	ldr	r2, [pc, #448]	; (8005e4c <extInt_Config+0x488>)
 8005c8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005c90:	6093      	str	r3, [r2, #8]
 8005c92:	e034      	b.n	8005cfe <extInt_Config+0x33a>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a6f      	ldr	r2, [pc, #444]	; (8005e58 <extInt_Config+0x494>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d106      	bne.n	8005cae <extInt_Config+0x2ea>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PC);
 8005ca0:	4b6a      	ldr	r3, [pc, #424]	; (8005e4c <extInt_Config+0x488>)
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	4a69      	ldr	r2, [pc, #420]	; (8005e4c <extInt_Config+0x488>)
 8005ca6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005caa:	6093      	str	r3, [r2, #8]
 8005cac:	e027      	b.n	8005cfe <extInt_Config+0x33a>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a69      	ldr	r2, [pc, #420]	; (8005e5c <extInt_Config+0x498>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d106      	bne.n	8005cc8 <extInt_Config+0x304>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PD);
 8005cba:	4b64      	ldr	r3, [pc, #400]	; (8005e4c <extInt_Config+0x488>)
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	4a63      	ldr	r2, [pc, #396]	; (8005e4c <extInt_Config+0x488>)
 8005cc0:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8005cc4:	6093      	str	r3, [r2, #8]
 8005cc6:	e01a      	b.n	8005cfe <extInt_Config+0x33a>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a64      	ldr	r2, [pc, #400]	; (8005e60 <extInt_Config+0x49c>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d106      	bne.n	8005ce2 <extInt_Config+0x31e>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PE);
 8005cd4:	4b5d      	ldr	r3, [pc, #372]	; (8005e4c <extInt_Config+0x488>)
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	4a5c      	ldr	r2, [pc, #368]	; (8005e4c <extInt_Config+0x488>)
 8005cda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005cde:	6093      	str	r3, [r2, #8]
 8005ce0:	e00d      	b.n	8005cfe <extInt_Config+0x33a>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a57      	ldr	r2, [pc, #348]	; (8005e48 <extInt_Config+0x484>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d106      	bne.n	8005cfc <extInt_Config+0x338>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PH);
 8005cee:	4b57      	ldr	r3, [pc, #348]	; (8005e4c <extInt_Config+0x488>)
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	4a56      	ldr	r2, [pc, #344]	; (8005e4c <extInt_Config+0x488>)
 8005cf4:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8005cf8:	6093      	str	r3, [r2, #8]
 8005cfa:	e000      	b.n	8005cfe <extInt_Config+0x33a>

		} else {
			__NOP();
 8005cfc:	bf00      	nop
	}

	case 4: {
		/* SYSCFG_EXTICR2 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI4_Pos);
 8005cfe:	4b53      	ldr	r3, [pc, #332]	; (8005e4c <extInt_Config+0x488>)
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	4a52      	ldr	r2, [pc, #328]	; (8005e4c <extInt_Config+0x488>)
 8005d04:	f023 030f 	bic.w	r3, r3, #15
 8005d08:	60d3      	str	r3, [r2, #12]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a4f      	ldr	r2, [pc, #316]	; (8005e50 <extInt_Config+0x48c>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d104      	bne.n	8005d20 <extInt_Config+0x35c>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PA);
 8005d16:	4b4d      	ldr	r3, [pc, #308]	; (8005e4c <extInt_Config+0x488>)
 8005d18:	4a4c      	ldr	r2, [pc, #304]	; (8005e4c <extInt_Config+0x488>)
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	60d3      	str	r3, [r2, #12]
 8005d1e:	e041      	b.n	8005da4 <extInt_Config+0x3e0>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a4b      	ldr	r2, [pc, #300]	; (8005e54 <extInt_Config+0x490>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d106      	bne.n	8005d3a <extInt_Config+0x376>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PB);
 8005d2c:	4b47      	ldr	r3, [pc, #284]	; (8005e4c <extInt_Config+0x488>)
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	4a46      	ldr	r2, [pc, #280]	; (8005e4c <extInt_Config+0x488>)
 8005d32:	f043 0301 	orr.w	r3, r3, #1
 8005d36:	60d3      	str	r3, [r2, #12]
 8005d38:	e034      	b.n	8005da4 <extInt_Config+0x3e0>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a45      	ldr	r2, [pc, #276]	; (8005e58 <extInt_Config+0x494>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d106      	bne.n	8005d54 <extInt_Config+0x390>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PC);
 8005d46:	4b41      	ldr	r3, [pc, #260]	; (8005e4c <extInt_Config+0x488>)
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	4a40      	ldr	r2, [pc, #256]	; (8005e4c <extInt_Config+0x488>)
 8005d4c:	f043 0302 	orr.w	r3, r3, #2
 8005d50:	60d3      	str	r3, [r2, #12]
 8005d52:	e027      	b.n	8005da4 <extInt_Config+0x3e0>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a40      	ldr	r2, [pc, #256]	; (8005e5c <extInt_Config+0x498>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d106      	bne.n	8005d6e <extInt_Config+0x3aa>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PD);
 8005d60:	4b3a      	ldr	r3, [pc, #232]	; (8005e4c <extInt_Config+0x488>)
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	4a39      	ldr	r2, [pc, #228]	; (8005e4c <extInt_Config+0x488>)
 8005d66:	f043 0303 	orr.w	r3, r3, #3
 8005d6a:	60d3      	str	r3, [r2, #12]
 8005d6c:	e01a      	b.n	8005da4 <extInt_Config+0x3e0>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a3a      	ldr	r2, [pc, #232]	; (8005e60 <extInt_Config+0x49c>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d106      	bne.n	8005d88 <extInt_Config+0x3c4>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PE);
 8005d7a:	4b34      	ldr	r3, [pc, #208]	; (8005e4c <extInt_Config+0x488>)
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	4a33      	ldr	r2, [pc, #204]	; (8005e4c <extInt_Config+0x488>)
 8005d80:	f043 0304 	orr.w	r3, r3, #4
 8005d84:	60d3      	str	r3, [r2, #12]
 8005d86:	e00d      	b.n	8005da4 <extInt_Config+0x3e0>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a2e      	ldr	r2, [pc, #184]	; (8005e48 <extInt_Config+0x484>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d106      	bne.n	8005da2 <extInt_Config+0x3de>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PH);
 8005d94:	4b2d      	ldr	r3, [pc, #180]	; (8005e4c <extInt_Config+0x488>)
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	4a2c      	ldr	r2, [pc, #176]	; (8005e4c <extInt_Config+0x488>)
 8005d9a:	f043 0307 	orr.w	r3, r3, #7
 8005d9e:	60d3      	str	r3, [r2, #12]
 8005da0:	e000      	b.n	8005da4 <extInt_Config+0x3e0>

		} else {
			__NOP();
 8005da2:	bf00      	nop
	}

	case 5: {
		/* SYSCFG_EXTICR2 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI5_Pos);
 8005da4:	4b29      	ldr	r3, [pc, #164]	; (8005e4c <extInt_Config+0x488>)
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	4a28      	ldr	r2, [pc, #160]	; (8005e4c <extInt_Config+0x488>)
 8005daa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005dae:	60d3      	str	r3, [r2, #12]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a26      	ldr	r2, [pc, #152]	; (8005e50 <extInt_Config+0x48c>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d104      	bne.n	8005dc6 <extInt_Config+0x402>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PA);
 8005dbc:	4b23      	ldr	r3, [pc, #140]	; (8005e4c <extInt_Config+0x488>)
 8005dbe:	4a23      	ldr	r2, [pc, #140]	; (8005e4c <extInt_Config+0x488>)
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	60d3      	str	r3, [r2, #12]
 8005dc4:	e04f      	b.n	8005e66 <extInt_Config+0x4a2>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a21      	ldr	r2, [pc, #132]	; (8005e54 <extInt_Config+0x490>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d106      	bne.n	8005de0 <extInt_Config+0x41c>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PB);
 8005dd2:	4b1e      	ldr	r3, [pc, #120]	; (8005e4c <extInt_Config+0x488>)
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	4a1d      	ldr	r2, [pc, #116]	; (8005e4c <extInt_Config+0x488>)
 8005dd8:	f043 0310 	orr.w	r3, r3, #16
 8005ddc:	60d3      	str	r3, [r2, #12]
 8005dde:	e042      	b.n	8005e66 <extInt_Config+0x4a2>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a1c      	ldr	r2, [pc, #112]	; (8005e58 <extInt_Config+0x494>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d106      	bne.n	8005dfa <extInt_Config+0x436>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PC);
 8005dec:	4b17      	ldr	r3, [pc, #92]	; (8005e4c <extInt_Config+0x488>)
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	4a16      	ldr	r2, [pc, #88]	; (8005e4c <extInt_Config+0x488>)
 8005df2:	f043 0320 	orr.w	r3, r3, #32
 8005df6:	60d3      	str	r3, [r2, #12]
 8005df8:	e035      	b.n	8005e66 <extInt_Config+0x4a2>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a16      	ldr	r2, [pc, #88]	; (8005e5c <extInt_Config+0x498>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d106      	bne.n	8005e14 <extInt_Config+0x450>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PD);
 8005e06:	4b11      	ldr	r3, [pc, #68]	; (8005e4c <extInt_Config+0x488>)
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	4a10      	ldr	r2, [pc, #64]	; (8005e4c <extInt_Config+0x488>)
 8005e0c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8005e10:	60d3      	str	r3, [r2, #12]
 8005e12:	e028      	b.n	8005e66 <extInt_Config+0x4a2>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a11      	ldr	r2, [pc, #68]	; (8005e60 <extInt_Config+0x49c>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d106      	bne.n	8005e2e <extInt_Config+0x46a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PE);
 8005e20:	4b0a      	ldr	r3, [pc, #40]	; (8005e4c <extInt_Config+0x488>)
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	4a09      	ldr	r2, [pc, #36]	; (8005e4c <extInt_Config+0x488>)
 8005e26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e2a:	60d3      	str	r3, [r2, #12]
 8005e2c:	e01b      	b.n	8005e66 <extInt_Config+0x4a2>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a04      	ldr	r2, [pc, #16]	; (8005e48 <extInt_Config+0x484>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d114      	bne.n	8005e64 <extInt_Config+0x4a0>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PH);
 8005e3a:	4b04      	ldr	r3, [pc, #16]	; (8005e4c <extInt_Config+0x488>)
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	4a03      	ldr	r2, [pc, #12]	; (8005e4c <extInt_Config+0x488>)
 8005e40:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8005e44:	60d3      	str	r3, [r2, #12]
 8005e46:	e00e      	b.n	8005e66 <extInt_Config+0x4a2>
 8005e48:	40021c00 	.word	0x40021c00
 8005e4c:	40013800 	.word	0x40013800
 8005e50:	40020000 	.word	0x40020000
 8005e54:	40020400 	.word	0x40020400
 8005e58:	40020800 	.word	0x40020800
 8005e5c:	40020c00 	.word	0x40020c00
 8005e60:	40021000 	.word	0x40021000

		} else {
			__NOP();
 8005e64:	bf00      	nop
	}

	case 6: {
		/* SYSCFG_EXTICR2 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI6_Pos);
 8005e66:	4b85      	ldr	r3, [pc, #532]	; (800607c <extInt_Config+0x6b8>)
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	4a84      	ldr	r2, [pc, #528]	; (800607c <extInt_Config+0x6b8>)
 8005e6c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005e70:	60d3      	str	r3, [r2, #12]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a81      	ldr	r2, [pc, #516]	; (8006080 <extInt_Config+0x6bc>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d104      	bne.n	8005e88 <extInt_Config+0x4c4>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PA);
 8005e7e:	4b7f      	ldr	r3, [pc, #508]	; (800607c <extInt_Config+0x6b8>)
 8005e80:	4a7e      	ldr	r2, [pc, #504]	; (800607c <extInt_Config+0x6b8>)
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	60d3      	str	r3, [r2, #12]
 8005e86:	e041      	b.n	8005f0c <extInt_Config+0x548>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a7d      	ldr	r2, [pc, #500]	; (8006084 <extInt_Config+0x6c0>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d106      	bne.n	8005ea2 <extInt_Config+0x4de>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PB);
 8005e94:	4b79      	ldr	r3, [pc, #484]	; (800607c <extInt_Config+0x6b8>)
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	4a78      	ldr	r2, [pc, #480]	; (800607c <extInt_Config+0x6b8>)
 8005e9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e9e:	60d3      	str	r3, [r2, #12]
 8005ea0:	e034      	b.n	8005f0c <extInt_Config+0x548>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a77      	ldr	r2, [pc, #476]	; (8006088 <extInt_Config+0x6c4>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d106      	bne.n	8005ebc <extInt_Config+0x4f8>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PC);
 8005eae:	4b73      	ldr	r3, [pc, #460]	; (800607c <extInt_Config+0x6b8>)
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	4a72      	ldr	r2, [pc, #456]	; (800607c <extInt_Config+0x6b8>)
 8005eb4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005eb8:	60d3      	str	r3, [r2, #12]
 8005eba:	e027      	b.n	8005f0c <extInt_Config+0x548>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a72      	ldr	r2, [pc, #456]	; (800608c <extInt_Config+0x6c8>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d106      	bne.n	8005ed6 <extInt_Config+0x512>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PD);
 8005ec8:	4b6c      	ldr	r3, [pc, #432]	; (800607c <extInt_Config+0x6b8>)
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	4a6b      	ldr	r2, [pc, #428]	; (800607c <extInt_Config+0x6b8>)
 8005ece:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005ed2:	60d3      	str	r3, [r2, #12]
 8005ed4:	e01a      	b.n	8005f0c <extInt_Config+0x548>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a6c      	ldr	r2, [pc, #432]	; (8006090 <extInt_Config+0x6cc>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d106      	bne.n	8005ef0 <extInt_Config+0x52c>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PE);
 8005ee2:	4b66      	ldr	r3, [pc, #408]	; (800607c <extInt_Config+0x6b8>)
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	4a65      	ldr	r2, [pc, #404]	; (800607c <extInt_Config+0x6b8>)
 8005ee8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005eec:	60d3      	str	r3, [r2, #12]
 8005eee:	e00d      	b.n	8005f0c <extInt_Config+0x548>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a67      	ldr	r2, [pc, #412]	; (8006094 <extInt_Config+0x6d0>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d106      	bne.n	8005f0a <extInt_Config+0x546>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PH);
 8005efc:	4b5f      	ldr	r3, [pc, #380]	; (800607c <extInt_Config+0x6b8>)
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	4a5e      	ldr	r2, [pc, #376]	; (800607c <extInt_Config+0x6b8>)
 8005f02:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005f06:	60d3      	str	r3, [r2, #12]
 8005f08:	e000      	b.n	8005f0c <extInt_Config+0x548>

		} else {
			__NOP();
 8005f0a:	bf00      	nop
	}

	case 7: {
		/* SYSCFG_EXTICR2 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI7_Pos);
 8005f0c:	4b5b      	ldr	r3, [pc, #364]	; (800607c <extInt_Config+0x6b8>)
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	4a5a      	ldr	r2, [pc, #360]	; (800607c <extInt_Config+0x6b8>)
 8005f12:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f16:	60d3      	str	r3, [r2, #12]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a58      	ldr	r2, [pc, #352]	; (8006080 <extInt_Config+0x6bc>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d104      	bne.n	8005f2e <extInt_Config+0x56a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PA);
 8005f24:	4b55      	ldr	r3, [pc, #340]	; (800607c <extInt_Config+0x6b8>)
 8005f26:	4a55      	ldr	r2, [pc, #340]	; (800607c <extInt_Config+0x6b8>)
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	60d3      	str	r3, [r2, #12]
 8005f2c:	e041      	b.n	8005fb2 <extInt_Config+0x5ee>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a53      	ldr	r2, [pc, #332]	; (8006084 <extInt_Config+0x6c0>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d106      	bne.n	8005f48 <extInt_Config+0x584>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PB);
 8005f3a:	4b50      	ldr	r3, [pc, #320]	; (800607c <extInt_Config+0x6b8>)
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	4a4f      	ldr	r2, [pc, #316]	; (800607c <extInt_Config+0x6b8>)
 8005f40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005f44:	60d3      	str	r3, [r2, #12]
 8005f46:	e034      	b.n	8005fb2 <extInt_Config+0x5ee>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a4e      	ldr	r2, [pc, #312]	; (8006088 <extInt_Config+0x6c4>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d106      	bne.n	8005f62 <extInt_Config+0x59e>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PC);
 8005f54:	4b49      	ldr	r3, [pc, #292]	; (800607c <extInt_Config+0x6b8>)
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	4a48      	ldr	r2, [pc, #288]	; (800607c <extInt_Config+0x6b8>)
 8005f5a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005f5e:	60d3      	str	r3, [r2, #12]
 8005f60:	e027      	b.n	8005fb2 <extInt_Config+0x5ee>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a48      	ldr	r2, [pc, #288]	; (800608c <extInt_Config+0x6c8>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d106      	bne.n	8005f7c <extInt_Config+0x5b8>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PD);
 8005f6e:	4b43      	ldr	r3, [pc, #268]	; (800607c <extInt_Config+0x6b8>)
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	4a42      	ldr	r2, [pc, #264]	; (800607c <extInt_Config+0x6b8>)
 8005f74:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8005f78:	60d3      	str	r3, [r2, #12]
 8005f7a:	e01a      	b.n	8005fb2 <extInt_Config+0x5ee>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a43      	ldr	r2, [pc, #268]	; (8006090 <extInt_Config+0x6cc>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d106      	bne.n	8005f96 <extInt_Config+0x5d2>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PE);
 8005f88:	4b3c      	ldr	r3, [pc, #240]	; (800607c <extInt_Config+0x6b8>)
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	4a3b      	ldr	r2, [pc, #236]	; (800607c <extInt_Config+0x6b8>)
 8005f8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f92:	60d3      	str	r3, [r2, #12]
 8005f94:	e00d      	b.n	8005fb2 <extInt_Config+0x5ee>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a3d      	ldr	r2, [pc, #244]	; (8006094 <extInt_Config+0x6d0>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d106      	bne.n	8005fb0 <extInt_Config+0x5ec>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PH);
 8005fa2:	4b36      	ldr	r3, [pc, #216]	; (800607c <extInt_Config+0x6b8>)
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	4a35      	ldr	r2, [pc, #212]	; (800607c <extInt_Config+0x6b8>)
 8005fa8:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8005fac:	60d3      	str	r3, [r2, #12]
 8005fae:	e000      	b.n	8005fb2 <extInt_Config+0x5ee>

		} else {
			__NOP();
 8005fb0:	bf00      	nop
	}

	case 8: {
		/* SYSCFG_EXTICR3 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI8_Pos);
 8005fb2:	4b32      	ldr	r3, [pc, #200]	; (800607c <extInt_Config+0x6b8>)
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	4a31      	ldr	r2, [pc, #196]	; (800607c <extInt_Config+0x6b8>)
 8005fb8:	f023 030f 	bic.w	r3, r3, #15
 8005fbc:	6113      	str	r3, [r2, #16]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a2e      	ldr	r2, [pc, #184]	; (8006080 <extInt_Config+0x6bc>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d104      	bne.n	8005fd4 <extInt_Config+0x610>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PA);
 8005fca:	4b2c      	ldr	r3, [pc, #176]	; (800607c <extInt_Config+0x6b8>)
 8005fcc:	4a2b      	ldr	r2, [pc, #172]	; (800607c <extInt_Config+0x6b8>)
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	6113      	str	r3, [r2, #16]
 8005fd2:	e041      	b.n	8006058 <extInt_Config+0x694>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a2a      	ldr	r2, [pc, #168]	; (8006084 <extInt_Config+0x6c0>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d106      	bne.n	8005fee <extInt_Config+0x62a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PB);
 8005fe0:	4b26      	ldr	r3, [pc, #152]	; (800607c <extInt_Config+0x6b8>)
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	4a25      	ldr	r2, [pc, #148]	; (800607c <extInt_Config+0x6b8>)
 8005fe6:	f043 0301 	orr.w	r3, r3, #1
 8005fea:	6113      	str	r3, [r2, #16]
 8005fec:	e034      	b.n	8006058 <extInt_Config+0x694>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a24      	ldr	r2, [pc, #144]	; (8006088 <extInt_Config+0x6c4>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d106      	bne.n	8006008 <extInt_Config+0x644>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PC);
 8005ffa:	4b20      	ldr	r3, [pc, #128]	; (800607c <extInt_Config+0x6b8>)
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	4a1f      	ldr	r2, [pc, #124]	; (800607c <extInt_Config+0x6b8>)
 8006000:	f043 0302 	orr.w	r3, r3, #2
 8006004:	6113      	str	r3, [r2, #16]
 8006006:	e027      	b.n	8006058 <extInt_Config+0x694>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a1f      	ldr	r2, [pc, #124]	; (800608c <extInt_Config+0x6c8>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d106      	bne.n	8006022 <extInt_Config+0x65e>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PD);
 8006014:	4b19      	ldr	r3, [pc, #100]	; (800607c <extInt_Config+0x6b8>)
 8006016:	691b      	ldr	r3, [r3, #16]
 8006018:	4a18      	ldr	r2, [pc, #96]	; (800607c <extInt_Config+0x6b8>)
 800601a:	f043 0303 	orr.w	r3, r3, #3
 800601e:	6113      	str	r3, [r2, #16]
 8006020:	e01a      	b.n	8006058 <extInt_Config+0x694>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a19      	ldr	r2, [pc, #100]	; (8006090 <extInt_Config+0x6cc>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d106      	bne.n	800603c <extInt_Config+0x678>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PE);
 800602e:	4b13      	ldr	r3, [pc, #76]	; (800607c <extInt_Config+0x6b8>)
 8006030:	691b      	ldr	r3, [r3, #16]
 8006032:	4a12      	ldr	r2, [pc, #72]	; (800607c <extInt_Config+0x6b8>)
 8006034:	f043 0304 	orr.w	r3, r3, #4
 8006038:	6113      	str	r3, [r2, #16]
 800603a:	e00d      	b.n	8006058 <extInt_Config+0x694>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a14      	ldr	r2, [pc, #80]	; (8006094 <extInt_Config+0x6d0>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d106      	bne.n	8006056 <extInt_Config+0x692>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PH);
 8006048:	4b0c      	ldr	r3, [pc, #48]	; (800607c <extInt_Config+0x6b8>)
 800604a:	691b      	ldr	r3, [r3, #16]
 800604c:	4a0b      	ldr	r2, [pc, #44]	; (800607c <extInt_Config+0x6b8>)
 800604e:	f043 0307 	orr.w	r3, r3, #7
 8006052:	6113      	str	r3, [r2, #16]
 8006054:	e000      	b.n	8006058 <extInt_Config+0x694>

		} else {
			__NOP();
 8006056:	bf00      	nop
	}

	case 9: {
		/* SYSCFG_EXTIC3 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI9_Pos);
 8006058:	4b08      	ldr	r3, [pc, #32]	; (800607c <extInt_Config+0x6b8>)
 800605a:	691b      	ldr	r3, [r3, #16]
 800605c:	4a07      	ldr	r2, [pc, #28]	; (800607c <extInt_Config+0x6b8>)
 800605e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006062:	6113      	str	r3, [r2, #16]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a05      	ldr	r2, [pc, #20]	; (8006080 <extInt_Config+0x6bc>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d113      	bne.n	8006098 <extInt_Config+0x6d4>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PA);
 8006070:	4b02      	ldr	r3, [pc, #8]	; (800607c <extInt_Config+0x6b8>)
 8006072:	4a02      	ldr	r2, [pc, #8]	; (800607c <extInt_Config+0x6b8>)
 8006074:	691b      	ldr	r3, [r3, #16]
 8006076:	6113      	str	r3, [r2, #16]
 8006078:	e050      	b.n	800611c <extInt_Config+0x758>
 800607a:	bf00      	nop
 800607c:	40013800 	.word	0x40013800
 8006080:	40020000 	.word	0x40020000
 8006084:	40020400 	.word	0x40020400
 8006088:	40020800 	.word	0x40020800
 800608c:	40020c00 	.word	0x40020c00
 8006090:	40021000 	.word	0x40021000
 8006094:	40021c00 	.word	0x40021c00

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a88      	ldr	r2, [pc, #544]	; (80062c0 <extInt_Config+0x8fc>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d106      	bne.n	80060b2 <extInt_Config+0x6ee>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PB);
 80060a4:	4b87      	ldr	r3, [pc, #540]	; (80062c4 <extInt_Config+0x900>)
 80060a6:	691b      	ldr	r3, [r3, #16]
 80060a8:	4a86      	ldr	r2, [pc, #536]	; (80062c4 <extInt_Config+0x900>)
 80060aa:	f043 0310 	orr.w	r3, r3, #16
 80060ae:	6113      	str	r3, [r2, #16]
 80060b0:	e034      	b.n	800611c <extInt_Config+0x758>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a83      	ldr	r2, [pc, #524]	; (80062c8 <extInt_Config+0x904>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d106      	bne.n	80060cc <extInt_Config+0x708>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PC);
 80060be:	4b81      	ldr	r3, [pc, #516]	; (80062c4 <extInt_Config+0x900>)
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	4a80      	ldr	r2, [pc, #512]	; (80062c4 <extInt_Config+0x900>)
 80060c4:	f043 0320 	orr.w	r3, r3, #32
 80060c8:	6113      	str	r3, [r2, #16]
 80060ca:	e027      	b.n	800611c <extInt_Config+0x758>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a7e      	ldr	r2, [pc, #504]	; (80062cc <extInt_Config+0x908>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d106      	bne.n	80060e6 <extInt_Config+0x722>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PD);
 80060d8:	4b7a      	ldr	r3, [pc, #488]	; (80062c4 <extInt_Config+0x900>)
 80060da:	691b      	ldr	r3, [r3, #16]
 80060dc:	4a79      	ldr	r2, [pc, #484]	; (80062c4 <extInt_Config+0x900>)
 80060de:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80060e2:	6113      	str	r3, [r2, #16]
 80060e4:	e01a      	b.n	800611c <extInt_Config+0x758>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a78      	ldr	r2, [pc, #480]	; (80062d0 <extInt_Config+0x90c>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d106      	bne.n	8006100 <extInt_Config+0x73c>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PE);
 80060f2:	4b74      	ldr	r3, [pc, #464]	; (80062c4 <extInt_Config+0x900>)
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	4a73      	ldr	r2, [pc, #460]	; (80062c4 <extInt_Config+0x900>)
 80060f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060fc:	6113      	str	r3, [r2, #16]
 80060fe:	e00d      	b.n	800611c <extInt_Config+0x758>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a73      	ldr	r2, [pc, #460]	; (80062d4 <extInt_Config+0x910>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d106      	bne.n	800611a <extInt_Config+0x756>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PH);
 800610c:	4b6d      	ldr	r3, [pc, #436]	; (80062c4 <extInt_Config+0x900>)
 800610e:	691b      	ldr	r3, [r3, #16]
 8006110:	4a6c      	ldr	r2, [pc, #432]	; (80062c4 <extInt_Config+0x900>)
 8006112:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8006116:	6113      	str	r3, [r2, #16]
 8006118:	e000      	b.n	800611c <extInt_Config+0x758>

		} else {
			__NOP();
 800611a:	bf00      	nop
	}

	case 10: {
		/* SYSCFG_EXTICR3 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI10_Pos);
 800611c:	4b69      	ldr	r3, [pc, #420]	; (80062c4 <extInt_Config+0x900>)
 800611e:	691b      	ldr	r3, [r3, #16]
 8006120:	4a68      	ldr	r2, [pc, #416]	; (80062c4 <extInt_Config+0x900>)
 8006122:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006126:	6113      	str	r3, [r2, #16]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a6a      	ldr	r2, [pc, #424]	; (80062d8 <extInt_Config+0x914>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d104      	bne.n	800613e <extInt_Config+0x77a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PA);
 8006134:	4b63      	ldr	r3, [pc, #396]	; (80062c4 <extInt_Config+0x900>)
 8006136:	4a63      	ldr	r2, [pc, #396]	; (80062c4 <extInt_Config+0x900>)
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	6113      	str	r3, [r2, #16]
 800613c:	e041      	b.n	80061c2 <extInt_Config+0x7fe>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a5e      	ldr	r2, [pc, #376]	; (80062c0 <extInt_Config+0x8fc>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d106      	bne.n	8006158 <extInt_Config+0x794>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PB);
 800614a:	4b5e      	ldr	r3, [pc, #376]	; (80062c4 <extInt_Config+0x900>)
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	4a5d      	ldr	r2, [pc, #372]	; (80062c4 <extInt_Config+0x900>)
 8006150:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006154:	6113      	str	r3, [r2, #16]
 8006156:	e034      	b.n	80061c2 <extInt_Config+0x7fe>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a5a      	ldr	r2, [pc, #360]	; (80062c8 <extInt_Config+0x904>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d106      	bne.n	8006172 <extInt_Config+0x7ae>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PC);
 8006164:	4b57      	ldr	r3, [pc, #348]	; (80062c4 <extInt_Config+0x900>)
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	4a56      	ldr	r2, [pc, #344]	; (80062c4 <extInt_Config+0x900>)
 800616a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800616e:	6113      	str	r3, [r2, #16]
 8006170:	e027      	b.n	80061c2 <extInt_Config+0x7fe>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a54      	ldr	r2, [pc, #336]	; (80062cc <extInt_Config+0x908>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d106      	bne.n	800618c <extInt_Config+0x7c8>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PD);
 800617e:	4b51      	ldr	r3, [pc, #324]	; (80062c4 <extInt_Config+0x900>)
 8006180:	691b      	ldr	r3, [r3, #16]
 8006182:	4a50      	ldr	r2, [pc, #320]	; (80062c4 <extInt_Config+0x900>)
 8006184:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006188:	6113      	str	r3, [r2, #16]
 800618a:	e01a      	b.n	80061c2 <extInt_Config+0x7fe>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a4f      	ldr	r2, [pc, #316]	; (80062d0 <extInt_Config+0x90c>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d106      	bne.n	80061a6 <extInt_Config+0x7e2>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PE);
 8006198:	4b4a      	ldr	r3, [pc, #296]	; (80062c4 <extInt_Config+0x900>)
 800619a:	691b      	ldr	r3, [r3, #16]
 800619c:	4a49      	ldr	r2, [pc, #292]	; (80062c4 <extInt_Config+0x900>)
 800619e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80061a2:	6113      	str	r3, [r2, #16]
 80061a4:	e00d      	b.n	80061c2 <extInt_Config+0x7fe>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a49      	ldr	r2, [pc, #292]	; (80062d4 <extInt_Config+0x910>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d106      	bne.n	80061c0 <extInt_Config+0x7fc>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PH);
 80061b2:	4b44      	ldr	r3, [pc, #272]	; (80062c4 <extInt_Config+0x900>)
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	4a43      	ldr	r2, [pc, #268]	; (80062c4 <extInt_Config+0x900>)
 80061b8:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80061bc:	6113      	str	r3, [r2, #16]
 80061be:	e000      	b.n	80061c2 <extInt_Config+0x7fe>

		} else {
			__NOP();
 80061c0:	bf00      	nop
	}

	case 11: {
		/* SYSCFG_EXTICR3 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI11_Pos);
 80061c2:	4b40      	ldr	r3, [pc, #256]	; (80062c4 <extInt_Config+0x900>)
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	4a3f      	ldr	r2, [pc, #252]	; (80062c4 <extInt_Config+0x900>)
 80061c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061cc:	6113      	str	r3, [r2, #16]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a40      	ldr	r2, [pc, #256]	; (80062d8 <extInt_Config+0x914>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d104      	bne.n	80061e4 <extInt_Config+0x820>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PA);
 80061da:	4b3a      	ldr	r3, [pc, #232]	; (80062c4 <extInt_Config+0x900>)
 80061dc:	4a39      	ldr	r2, [pc, #228]	; (80062c4 <extInt_Config+0x900>)
 80061de:	691b      	ldr	r3, [r3, #16]
 80061e0:	6113      	str	r3, [r2, #16]
 80061e2:	e041      	b.n	8006268 <extInt_Config+0x8a4>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a35      	ldr	r2, [pc, #212]	; (80062c0 <extInt_Config+0x8fc>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d106      	bne.n	80061fe <extInt_Config+0x83a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PB);
 80061f0:	4b34      	ldr	r3, [pc, #208]	; (80062c4 <extInt_Config+0x900>)
 80061f2:	691b      	ldr	r3, [r3, #16]
 80061f4:	4a33      	ldr	r2, [pc, #204]	; (80062c4 <extInt_Config+0x900>)
 80061f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80061fa:	6113      	str	r3, [r2, #16]
 80061fc:	e034      	b.n	8006268 <extInt_Config+0x8a4>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a30      	ldr	r2, [pc, #192]	; (80062c8 <extInt_Config+0x904>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d106      	bne.n	8006218 <extInt_Config+0x854>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PC);
 800620a:	4b2e      	ldr	r3, [pc, #184]	; (80062c4 <extInt_Config+0x900>)
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	4a2d      	ldr	r2, [pc, #180]	; (80062c4 <extInt_Config+0x900>)
 8006210:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006214:	6113      	str	r3, [r2, #16]
 8006216:	e027      	b.n	8006268 <extInt_Config+0x8a4>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a2b      	ldr	r2, [pc, #172]	; (80062cc <extInt_Config+0x908>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d106      	bne.n	8006232 <extInt_Config+0x86e>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PD);
 8006224:	4b27      	ldr	r3, [pc, #156]	; (80062c4 <extInt_Config+0x900>)
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	4a26      	ldr	r2, [pc, #152]	; (80062c4 <extInt_Config+0x900>)
 800622a:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800622e:	6113      	str	r3, [r2, #16]
 8006230:	e01a      	b.n	8006268 <extInt_Config+0x8a4>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a25      	ldr	r2, [pc, #148]	; (80062d0 <extInt_Config+0x90c>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d106      	bne.n	800624c <extInt_Config+0x888>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PE);
 800623e:	4b21      	ldr	r3, [pc, #132]	; (80062c4 <extInt_Config+0x900>)
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	4a20      	ldr	r2, [pc, #128]	; (80062c4 <extInt_Config+0x900>)
 8006244:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006248:	6113      	str	r3, [r2, #16]
 800624a:	e00d      	b.n	8006268 <extInt_Config+0x8a4>

		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a20      	ldr	r2, [pc, #128]	; (80062d4 <extInt_Config+0x910>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d106      	bne.n	8006266 <extInt_Config+0x8a2>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PH);
 8006258:	4b1a      	ldr	r3, [pc, #104]	; (80062c4 <extInt_Config+0x900>)
 800625a:	691b      	ldr	r3, [r3, #16]
 800625c:	4a19      	ldr	r2, [pc, #100]	; (80062c4 <extInt_Config+0x900>)
 800625e:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8006262:	6113      	str	r3, [r2, #16]
 8006264:	e000      	b.n	8006268 <extInt_Config+0x8a4>

		} else {
			__NOP();
 8006266:	bf00      	nop
		}
	}
	case 12: {
		/* SYSCFG_EXTICR4 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI12_Pos);
 8006268:	4b16      	ldr	r3, [pc, #88]	; (80062c4 <extInt_Config+0x900>)
 800626a:	695b      	ldr	r3, [r3, #20]
 800626c:	4a15      	ldr	r2, [pc, #84]	; (80062c4 <extInt_Config+0x900>)
 800626e:	f023 030f 	bic.w	r3, r3, #15
 8006272:	6153      	str	r3, [r2, #20]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a17      	ldr	r2, [pc, #92]	; (80062d8 <extInt_Config+0x914>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d104      	bne.n	800628a <extInt_Config+0x8c6>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PA);
 8006280:	4b10      	ldr	r3, [pc, #64]	; (80062c4 <extInt_Config+0x900>)
 8006282:	4a10      	ldr	r2, [pc, #64]	; (80062c4 <extInt_Config+0x900>)
 8006284:	695b      	ldr	r3, [r3, #20]
 8006286:	6153      	str	r3, [r2, #20]
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PH);

		} else {
			__NOP();
		}
		break;
 8006288:	e15e      	b.n	8006548 <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a0b      	ldr	r2, [pc, #44]	; (80062c0 <extInt_Config+0x8fc>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d106      	bne.n	80062a4 <extInt_Config+0x8e0>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PB);
 8006296:	4b0b      	ldr	r3, [pc, #44]	; (80062c4 <extInt_Config+0x900>)
 8006298:	695b      	ldr	r3, [r3, #20]
 800629a:	4a0a      	ldr	r2, [pc, #40]	; (80062c4 <extInt_Config+0x900>)
 800629c:	f043 0301 	orr.w	r3, r3, #1
 80062a0:	6153      	str	r3, [r2, #20]
		break;
 80062a2:	e151      	b.n	8006548 <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a07      	ldr	r2, [pc, #28]	; (80062c8 <extInt_Config+0x904>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d115      	bne.n	80062dc <extInt_Config+0x918>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PC);
 80062b0:	4b04      	ldr	r3, [pc, #16]	; (80062c4 <extInt_Config+0x900>)
 80062b2:	695b      	ldr	r3, [r3, #20]
 80062b4:	4a03      	ldr	r2, [pc, #12]	; (80062c4 <extInt_Config+0x900>)
 80062b6:	f043 0302 	orr.w	r3, r3, #2
 80062ba:	6153      	str	r3, [r2, #20]
		break;
 80062bc:	e144      	b.n	8006548 <extInt_Config+0xb84>
 80062be:	bf00      	nop
 80062c0:	40020400 	.word	0x40020400
 80062c4:	40013800 	.word	0x40013800
 80062c8:	40020800 	.word	0x40020800
 80062cc:	40020c00 	.word	0x40020c00
 80062d0:	40021000 	.word	0x40021000
 80062d4:	40021c00 	.word	0x40021c00
 80062d8:	40020000 	.word	0x40020000
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a83      	ldr	r2, [pc, #524]	; (80064f0 <extInt_Config+0xb2c>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d106      	bne.n	80062f6 <extInt_Config+0x932>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PD);
 80062e8:	4b82      	ldr	r3, [pc, #520]	; (80064f4 <extInt_Config+0xb30>)
 80062ea:	695b      	ldr	r3, [r3, #20]
 80062ec:	4a81      	ldr	r2, [pc, #516]	; (80064f4 <extInt_Config+0xb30>)
 80062ee:	f043 0303 	orr.w	r3, r3, #3
 80062f2:	6153      	str	r3, [r2, #20]
		break;
 80062f4:	e128      	b.n	8006548 <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a7e      	ldr	r2, [pc, #504]	; (80064f8 <extInt_Config+0xb34>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d106      	bne.n	8006310 <extInt_Config+0x94c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PE);
 8006302:	4b7c      	ldr	r3, [pc, #496]	; (80064f4 <extInt_Config+0xb30>)
 8006304:	695b      	ldr	r3, [r3, #20]
 8006306:	4a7b      	ldr	r2, [pc, #492]	; (80064f4 <extInt_Config+0xb30>)
 8006308:	f043 0304 	orr.w	r3, r3, #4
 800630c:	6153      	str	r3, [r2, #20]
		break;
 800630e:	e11b      	b.n	8006548 <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a79      	ldr	r2, [pc, #484]	; (80064fc <extInt_Config+0xb38>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d106      	bne.n	800632a <extInt_Config+0x966>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PH);
 800631c:	4b75      	ldr	r3, [pc, #468]	; (80064f4 <extInt_Config+0xb30>)
 800631e:	695b      	ldr	r3, [r3, #20]
 8006320:	4a74      	ldr	r2, [pc, #464]	; (80064f4 <extInt_Config+0xb30>)
 8006322:	f043 0307 	orr.w	r3, r3, #7
 8006326:	6153      	str	r3, [r2, #20]
		break;
 8006328:	e10e      	b.n	8006548 <extInt_Config+0xb84>
			__NOP();
 800632a:	bf00      	nop
		break;
 800632c:	e10c      	b.n	8006548 <extInt_Config+0xb84>
	}
	case 13: {
		/* SYSCFG_EXTICR4 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI13_Pos);
 800632e:	4b71      	ldr	r3, [pc, #452]	; (80064f4 <extInt_Config+0xb30>)
 8006330:	695b      	ldr	r3, [r3, #20]
 8006332:	4a70      	ldr	r2, [pc, #448]	; (80064f4 <extInt_Config+0xb30>)
 8006334:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006338:	6153      	str	r3, [r2, #20]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a6f      	ldr	r2, [pc, #444]	; (8006500 <extInt_Config+0xb3c>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d104      	bne.n	8006350 <extInt_Config+0x98c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PA);
 8006346:	4b6b      	ldr	r3, [pc, #428]	; (80064f4 <extInt_Config+0xb30>)
 8006348:	4a6a      	ldr	r2, [pc, #424]	; (80064f4 <extInt_Config+0xb30>)
 800634a:	695b      	ldr	r3, [r3, #20]
 800634c:	6153      	str	r3, [r2, #20]
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PH);

		} else {
			__NOP();
		}
		break;
 800634e:	e0fb      	b.n	8006548 <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a6b      	ldr	r2, [pc, #428]	; (8006504 <extInt_Config+0xb40>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d106      	bne.n	800636a <extInt_Config+0x9a6>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PB);
 800635c:	4b65      	ldr	r3, [pc, #404]	; (80064f4 <extInt_Config+0xb30>)
 800635e:	695b      	ldr	r3, [r3, #20]
 8006360:	4a64      	ldr	r2, [pc, #400]	; (80064f4 <extInt_Config+0xb30>)
 8006362:	f043 0310 	orr.w	r3, r3, #16
 8006366:	6153      	str	r3, [r2, #20]
		break;
 8006368:	e0ee      	b.n	8006548 <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a65      	ldr	r2, [pc, #404]	; (8006508 <extInt_Config+0xb44>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d106      	bne.n	8006384 <extInt_Config+0x9c0>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PC);
 8006376:	4b5f      	ldr	r3, [pc, #380]	; (80064f4 <extInt_Config+0xb30>)
 8006378:	695b      	ldr	r3, [r3, #20]
 800637a:	4a5e      	ldr	r2, [pc, #376]	; (80064f4 <extInt_Config+0xb30>)
 800637c:	f043 0320 	orr.w	r3, r3, #32
 8006380:	6153      	str	r3, [r2, #20]
		break;
 8006382:	e0e1      	b.n	8006548 <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a59      	ldr	r2, [pc, #356]	; (80064f0 <extInt_Config+0xb2c>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d106      	bne.n	800639e <extInt_Config+0x9da>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PD);
 8006390:	4b58      	ldr	r3, [pc, #352]	; (80064f4 <extInt_Config+0xb30>)
 8006392:	695b      	ldr	r3, [r3, #20]
 8006394:	4a57      	ldr	r2, [pc, #348]	; (80064f4 <extInt_Config+0xb30>)
 8006396:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800639a:	6153      	str	r3, [r2, #20]
		break;
 800639c:	e0d4      	b.n	8006548 <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a54      	ldr	r2, [pc, #336]	; (80064f8 <extInt_Config+0xb34>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d106      	bne.n	80063b8 <extInt_Config+0x9f4>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PE);
 80063aa:	4b52      	ldr	r3, [pc, #328]	; (80064f4 <extInt_Config+0xb30>)
 80063ac:	695b      	ldr	r3, [r3, #20]
 80063ae:	4a51      	ldr	r2, [pc, #324]	; (80064f4 <extInt_Config+0xb30>)
 80063b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063b4:	6153      	str	r3, [r2, #20]
		break;
 80063b6:	e0c7      	b.n	8006548 <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a4f      	ldr	r2, [pc, #316]	; (80064fc <extInt_Config+0xb38>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d106      	bne.n	80063d2 <extInt_Config+0xa0e>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PH);
 80063c4:	4b4b      	ldr	r3, [pc, #300]	; (80064f4 <extInt_Config+0xb30>)
 80063c6:	695b      	ldr	r3, [r3, #20]
 80063c8:	4a4a      	ldr	r2, [pc, #296]	; (80064f4 <extInt_Config+0xb30>)
 80063ca:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80063ce:	6153      	str	r3, [r2, #20]
		break;
 80063d0:	e0ba      	b.n	8006548 <extInt_Config+0xb84>
			__NOP();
 80063d2:	bf00      	nop
		break;
 80063d4:	e0b8      	b.n	8006548 <extInt_Config+0xb84>
	}

	case 14: {
		/* SYSCFG_EXTICR4 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI14_Pos);
 80063d6:	4b47      	ldr	r3, [pc, #284]	; (80064f4 <extInt_Config+0xb30>)
 80063d8:	695b      	ldr	r3, [r3, #20]
 80063da:	4a46      	ldr	r2, [pc, #280]	; (80064f4 <extInt_Config+0xb30>)
 80063dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80063e0:	6153      	str	r3, [r2, #20]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a45      	ldr	r2, [pc, #276]	; (8006500 <extInt_Config+0xb3c>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d104      	bne.n	80063f8 <extInt_Config+0xa34>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PA);
 80063ee:	4b41      	ldr	r3, [pc, #260]	; (80064f4 <extInt_Config+0xb30>)
 80063f0:	4a40      	ldr	r2, [pc, #256]	; (80064f4 <extInt_Config+0xb30>)
 80063f2:	695b      	ldr	r3, [r3, #20]
 80063f4:	6153      	str	r3, [r2, #20]
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PH);

		} else {
			__NOP();
		}
		break;
 80063f6:	e0a7      	b.n	8006548 <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a41      	ldr	r2, [pc, #260]	; (8006504 <extInt_Config+0xb40>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d106      	bne.n	8006412 <extInt_Config+0xa4e>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PB);
 8006404:	4b3b      	ldr	r3, [pc, #236]	; (80064f4 <extInt_Config+0xb30>)
 8006406:	695b      	ldr	r3, [r3, #20]
 8006408:	4a3a      	ldr	r2, [pc, #232]	; (80064f4 <extInt_Config+0xb30>)
 800640a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800640e:	6153      	str	r3, [r2, #20]
		break;
 8006410:	e09a      	b.n	8006548 <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a3b      	ldr	r2, [pc, #236]	; (8006508 <extInt_Config+0xb44>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d106      	bne.n	800642c <extInt_Config+0xa68>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PC);
 800641e:	4b35      	ldr	r3, [pc, #212]	; (80064f4 <extInt_Config+0xb30>)
 8006420:	695b      	ldr	r3, [r3, #20]
 8006422:	4a34      	ldr	r2, [pc, #208]	; (80064f4 <extInt_Config+0xb30>)
 8006424:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006428:	6153      	str	r3, [r2, #20]
		break;
 800642a:	e08d      	b.n	8006548 <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a2f      	ldr	r2, [pc, #188]	; (80064f0 <extInt_Config+0xb2c>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d106      	bne.n	8006446 <extInt_Config+0xa82>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PD);
 8006438:	4b2e      	ldr	r3, [pc, #184]	; (80064f4 <extInt_Config+0xb30>)
 800643a:	695b      	ldr	r3, [r3, #20]
 800643c:	4a2d      	ldr	r2, [pc, #180]	; (80064f4 <extInt_Config+0xb30>)
 800643e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006442:	6153      	str	r3, [r2, #20]
		break;
 8006444:	e080      	b.n	8006548 <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a2a      	ldr	r2, [pc, #168]	; (80064f8 <extInt_Config+0xb34>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d106      	bne.n	8006460 <extInt_Config+0xa9c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PE);
 8006452:	4b28      	ldr	r3, [pc, #160]	; (80064f4 <extInt_Config+0xb30>)
 8006454:	695b      	ldr	r3, [r3, #20]
 8006456:	4a27      	ldr	r2, [pc, #156]	; (80064f4 <extInt_Config+0xb30>)
 8006458:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800645c:	6153      	str	r3, [r2, #20]
		break;
 800645e:	e073      	b.n	8006548 <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a25      	ldr	r2, [pc, #148]	; (80064fc <extInt_Config+0xb38>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d106      	bne.n	800647a <extInt_Config+0xab6>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PH);
 800646c:	4b21      	ldr	r3, [pc, #132]	; (80064f4 <extInt_Config+0xb30>)
 800646e:	695b      	ldr	r3, [r3, #20]
 8006470:	4a20      	ldr	r2, [pc, #128]	; (80064f4 <extInt_Config+0xb30>)
 8006472:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006476:	6153      	str	r3, [r2, #20]
		break;
 8006478:	e066      	b.n	8006548 <extInt_Config+0xb84>
			__NOP();
 800647a:	bf00      	nop
		break;
 800647c:	e064      	b.n	8006548 <extInt_Config+0xb84>

		/* Configurando para el todos los pines GPIOX_15 */
	case 15: {
		/* SYSCFG_EXTICR4 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI15_Pos);
 800647e:	4b1d      	ldr	r3, [pc, #116]	; (80064f4 <extInt_Config+0xb30>)
 8006480:	695b      	ldr	r3, [r3, #20]
 8006482:	4a1c      	ldr	r2, [pc, #112]	; (80064f4 <extInt_Config+0xb30>)
 8006484:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006488:	6153      	str	r3, [r2, #20]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a1b      	ldr	r2, [pc, #108]	; (8006500 <extInt_Config+0xb3c>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d104      	bne.n	80064a0 <extInt_Config+0xadc>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PA);
 8006496:	4b17      	ldr	r3, [pc, #92]	; (80064f4 <extInt_Config+0xb30>)
 8006498:	4a16      	ldr	r2, [pc, #88]	; (80064f4 <extInt_Config+0xb30>)
 800649a:	695b      	ldr	r3, [r3, #20]
 800649c:	6153      	str	r3, [r2, #20]
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);

		} else {
			__NOP();
		}
		break;
 800649e:	e053      	b.n	8006548 <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a17      	ldr	r2, [pc, #92]	; (8006504 <extInt_Config+0xb40>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d106      	bne.n	80064ba <extInt_Config+0xaf6>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PB);
 80064ac:	4b11      	ldr	r3, [pc, #68]	; (80064f4 <extInt_Config+0xb30>)
 80064ae:	695b      	ldr	r3, [r3, #20]
 80064b0:	4a10      	ldr	r2, [pc, #64]	; (80064f4 <extInt_Config+0xb30>)
 80064b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80064b6:	6153      	str	r3, [r2, #20]
		break;
 80064b8:	e046      	b.n	8006548 <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a11      	ldr	r2, [pc, #68]	; (8006508 <extInt_Config+0xb44>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d106      	bne.n	80064d4 <extInt_Config+0xb10>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PC);
 80064c6:	4b0b      	ldr	r3, [pc, #44]	; (80064f4 <extInt_Config+0xb30>)
 80064c8:	695b      	ldr	r3, [r3, #20]
 80064ca:	4a0a      	ldr	r2, [pc, #40]	; (80064f4 <extInt_Config+0xb30>)
 80064cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80064d0:	6153      	str	r3, [r2, #20]
		break;
 80064d2:	e039      	b.n	8006548 <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a05      	ldr	r2, [pc, #20]	; (80064f0 <extInt_Config+0xb2c>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d115      	bne.n	800650c <extInt_Config+0xb48>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PD);
 80064e0:	4b04      	ldr	r3, [pc, #16]	; (80064f4 <extInt_Config+0xb30>)
 80064e2:	695b      	ldr	r3, [r3, #20]
 80064e4:	4a03      	ldr	r2, [pc, #12]	; (80064f4 <extInt_Config+0xb30>)
 80064e6:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80064ea:	6153      	str	r3, [r2, #20]
		break;
 80064ec:	e02c      	b.n	8006548 <extInt_Config+0xb84>
 80064ee:	bf00      	nop
 80064f0:	40020c00 	.word	0x40020c00
 80064f4:	40013800 	.word	0x40013800
 80064f8:	40021000 	.word	0x40021000
 80064fc:	40021c00 	.word	0x40021c00
 8006500:	40020000 	.word	0x40020000
 8006504:	40020400 	.word	0x40020400
 8006508:	40020800 	.word	0x40020800
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a78      	ldr	r2, [pc, #480]	; (80066f4 <extInt_Config+0xd30>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d106      	bne.n	8006526 <extInt_Config+0xb62>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PE);
 8006518:	4b77      	ldr	r3, [pc, #476]	; (80066f8 <extInt_Config+0xd34>)
 800651a:	695b      	ldr	r3, [r3, #20]
 800651c:	4a76      	ldr	r2, [pc, #472]	; (80066f8 <extInt_Config+0xd34>)
 800651e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006522:	6153      	str	r3, [r2, #20]
		break;
 8006524:	e010      	b.n	8006548 <extInt_Config+0xb84>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a73      	ldr	r2, [pc, #460]	; (80066fc <extInt_Config+0xd38>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d106      	bne.n	8006540 <extInt_Config+0xb7c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);
 8006532:	4b71      	ldr	r3, [pc, #452]	; (80066f8 <extInt_Config+0xd34>)
 8006534:	695b      	ldr	r3, [r3, #20]
 8006536:	4a70      	ldr	r2, [pc, #448]	; (80066f8 <extInt_Config+0xd34>)
 8006538:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800653c:	6153      	str	r3, [r2, #20]
		break;
 800653e:	e003      	b.n	8006548 <extInt_Config+0xb84>
			__NOP();
 8006540:	bf00      	nop
		break;
 8006542:	e001      	b.n	8006548 <extInt_Config+0xb84>
	}

	default: {
		__NOP();
 8006544:	bf00      	nop
		break;
 8006546:	bf00      	nop
	}

	}		// Fin del switch-case

	/* 4.0 Seleccionamos el tipo de flanco */
	EXTI->FTSR &= ~(0b1
 8006548:	4b6d      	ldr	r3, [pc, #436]	; (8006700 <extInt_Config+0xd3c>)
 800654a:	68db      	ldr	r3, [r3, #12]
			<< extiConfig->pGPIOHandler->GPIO_PinConfig_t.GPIO_PinNumber);
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	6812      	ldr	r2, [r2, #0]
 8006550:	7912      	ldrb	r2, [r2, #4]
 8006552:	4611      	mov	r1, r2
 8006554:	2201      	movs	r2, #1
 8006556:	408a      	lsls	r2, r1
	EXTI->FTSR &= ~(0b1
 8006558:	43d2      	mvns	r2, r2
 800655a:	4611      	mov	r1, r2
 800655c:	4a68      	ldr	r2, [pc, #416]	; (8006700 <extInt_Config+0xd3c>)
 800655e:	400b      	ands	r3, r1
 8006560:	60d3      	str	r3, [r2, #12]
	EXTI->RTSR &= ~(0b1
 8006562:	4b67      	ldr	r3, [pc, #412]	; (8006700 <extInt_Config+0xd3c>)
 8006564:	689b      	ldr	r3, [r3, #8]
			<< extiConfig->pGPIOHandler->GPIO_PinConfig_t.GPIO_PinNumber);
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	6812      	ldr	r2, [r2, #0]
 800656a:	7912      	ldrb	r2, [r2, #4]
 800656c:	4611      	mov	r1, r2
 800656e:	2201      	movs	r2, #1
 8006570:	408a      	lsls	r2, r1
	EXTI->RTSR &= ~(0b1
 8006572:	43d2      	mvns	r2, r2
 8006574:	4611      	mov	r1, r2
 8006576:	4a62      	ldr	r2, [pc, #392]	; (8006700 <extInt_Config+0xd3c>)
 8006578:	400b      	ands	r3, r1
 800657a:	6093      	str	r3, [r2, #8]
	/* Falling Trigger selection register*/
	if (extiConfig->edgeType != EXTERNAL_INTERRUPT_BOTH_EDGE) {
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	791b      	ldrb	r3, [r3, #4]
 8006580:	2b02      	cmp	r3, #2
 8006582:	d021      	beq.n	80065c8 <extInt_Config+0xc04>
		EXTI->FTSR |= (!extiConfig->edgeType
 8006584:	4b5e      	ldr	r3, [pc, #376]	; (8006700 <extInt_Config+0xd3c>)
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	7912      	ldrb	r2, [r2, #4]
 800658c:	2a00      	cmp	r2, #0
 800658e:	bf0c      	ite	eq
 8006590:	2201      	moveq	r2, #1
 8006592:	2200      	movne	r2, #0
 8006594:	b2d2      	uxtb	r2, r2
 8006596:	4611      	mov	r1, r2
				<< extiConfig->pGPIOHandler->GPIO_PinConfig_t.GPIO_PinNumber);
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	6812      	ldr	r2, [r2, #0]
 800659c:	7912      	ldrb	r2, [r2, #4]
 800659e:	fa01 f202 	lsl.w	r2, r1, r2
 80065a2:	4611      	mov	r1, r2
		EXTI->FTSR |= (!extiConfig->edgeType
 80065a4:	4a56      	ldr	r2, [pc, #344]	; (8006700 <extInt_Config+0xd3c>)
 80065a6:	430b      	orrs	r3, r1
 80065a8:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (extiConfig->edgeType
 80065aa:	4b55      	ldr	r3, [pc, #340]	; (8006700 <extInt_Config+0xd3c>)
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	7912      	ldrb	r2, [r2, #4]
 80065b2:	4611      	mov	r1, r2
				<< extiConfig->pGPIOHandler->GPIO_PinConfig_t.GPIO_PinNumber);
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	6812      	ldr	r2, [r2, #0]
 80065b8:	7912      	ldrb	r2, [r2, #4]
 80065ba:	fa01 f202 	lsl.w	r2, r1, r2
 80065be:	4611      	mov	r1, r2
		EXTI->RTSR |= (extiConfig->edgeType
 80065c0:	4a4f      	ldr	r2, [pc, #316]	; (8006700 <extInt_Config+0xd3c>)
 80065c2:	430b      	orrs	r3, r1
 80065c4:	6093      	str	r3, [r2, #8]
 80065c6:	e017      	b.n	80065f8 <extInt_Config+0xc34>
	} else {
		EXTI->FTSR |= (0b1
 80065c8:	4b4d      	ldr	r3, [pc, #308]	; (8006700 <extInt_Config+0xd3c>)
 80065ca:	68db      	ldr	r3, [r3, #12]
				<< extiConfig->pGPIOHandler->GPIO_PinConfig_t.GPIO_PinNumber);
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	6812      	ldr	r2, [r2, #0]
 80065d0:	7912      	ldrb	r2, [r2, #4]
 80065d2:	4611      	mov	r1, r2
 80065d4:	2201      	movs	r2, #1
 80065d6:	408a      	lsls	r2, r1
 80065d8:	4611      	mov	r1, r2
		EXTI->FTSR |= (0b1
 80065da:	4a49      	ldr	r2, [pc, #292]	; (8006700 <extInt_Config+0xd3c>)
 80065dc:	430b      	orrs	r3, r1
 80065de:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (0b1
 80065e0:	4b47      	ldr	r3, [pc, #284]	; (8006700 <extInt_Config+0xd3c>)
 80065e2:	689b      	ldr	r3, [r3, #8]
				<< extiConfig->pGPIOHandler->GPIO_PinConfig_t.GPIO_PinNumber);
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	6812      	ldr	r2, [r2, #0]
 80065e8:	7912      	ldrb	r2, [r2, #4]
 80065ea:	4611      	mov	r1, r2
 80065ec:	2201      	movs	r2, #1
 80065ee:	408a      	lsls	r2, r1
 80065f0:	4611      	mov	r1, r2
		EXTI->RTSR |= (0b1
 80065f2:	4a43      	ldr	r2, [pc, #268]	; (8006700 <extInt_Config+0xd3c>)
 80065f4:	430b      	orrs	r3, r1
 80065f6:	6093      	str	r3, [r2, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80065f8:	b672      	cpsid	i
}
 80065fa:	bf00      	nop
	__disable_irq();

	/* 6.0 Activamos la interrupción del canal que estamos configurando */
	// Interrupt Mask register
	/*Agregue su código acá*/
	EXTI->IMR |= (0b1
 80065fc:	4b40      	ldr	r3, [pc, #256]	; (8006700 <extInt_Config+0xd3c>)
 80065fe:	681b      	ldr	r3, [r3, #0]
			<< extiConfig->pGPIOHandler->GPIO_PinConfig_t.GPIO_PinNumber); //Activamos la interrupcion EXTI_X
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	6812      	ldr	r2, [r2, #0]
 8006604:	7912      	ldrb	r2, [r2, #4]
 8006606:	4611      	mov	r1, r2
 8006608:	2201      	movs	r2, #1
 800660a:	408a      	lsls	r2, r1
 800660c:	4611      	mov	r1, r2
	EXTI->IMR |= (0b1
 800660e:	4a3c      	ldr	r2, [pc, #240]	; (8006700 <extInt_Config+0xd3c>)
 8006610:	430b      	orrs	r3, r1
 8006612:	6013      	str	r3, [r2, #0]
	/* 6.1 Matriculamos la interrupción en el NVIC para el canal correspondiente,
	 * donde el canal 0 corresponde al EXTI_0, canal 1 al EXTI_1, etc.
	 *
	 * NOTA: Observar que algunos canales EXTI comparten un mismo vector de interrupción
	 * */
	switch (extiConfig->pGPIOHandler->GPIO_PinConfig_t.GPIO_PinNumber) {
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	791b      	ldrb	r3, [r3, #4]
 800661a:	2b0f      	cmp	r3, #15
 800661c:	d862      	bhi.n	80066e4 <extInt_Config+0xd20>
 800661e:	a201      	add	r2, pc, #4	; (adr r2, 8006624 <extInt_Config+0xc60>)
 8006620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006624:	08006665 	.word	0x08006665
 8006628:	0800666d 	.word	0x0800666d
 800662c:	08006675 	.word	0x08006675
 8006630:	0800667d 	.word	0x0800667d
 8006634:	08006685 	.word	0x08006685
 8006638:	0800668d 	.word	0x0800668d
 800663c:	08006695 	.word	0x08006695
 8006640:	0800669d 	.word	0x0800669d
 8006644:	080066a5 	.word	0x080066a5
 8006648:	080066ad 	.word	0x080066ad
 800664c:	080066b5 	.word	0x080066b5
 8006650:	080066bd 	.word	0x080066bd
 8006654:	080066c5 	.word	0x080066c5
 8006658:	080066cd 	.word	0x080066cd
 800665c:	080066d5 	.word	0x080066d5
 8006660:	080066dd 	.word	0x080066dd
	case 0: {
		__NVIC_EnableIRQ(EXTI0_IRQn);
 8006664:	2006      	movs	r0, #6
 8006666:	f7ff f98f 	bl	8005988 <__NVIC_EnableIRQ>
		break;
 800666a:	e03c      	b.n	80066e6 <extInt_Config+0xd22>
	}

	case 1: {
		__NVIC_EnableIRQ(EXTI1_IRQn);
 800666c:	2007      	movs	r0, #7
 800666e:	f7ff f98b 	bl	8005988 <__NVIC_EnableIRQ>
		break;
 8006672:	e038      	b.n	80066e6 <extInt_Config+0xd22>
	}
	case 2: {
		__NVIC_EnableIRQ(EXTI2_IRQn);
 8006674:	2008      	movs	r0, #8
 8006676:	f7ff f987 	bl	8005988 <__NVIC_EnableIRQ>
		break;
 800667a:	e034      	b.n	80066e6 <extInt_Config+0xd22>
	}
	case 3: {
		__NVIC_EnableIRQ(EXTI3_IRQn);
 800667c:	2009      	movs	r0, #9
 800667e:	f7ff f983 	bl	8005988 <__NVIC_EnableIRQ>
		break;
 8006682:	e030      	b.n	80066e6 <extInt_Config+0xd22>
	}
	case 4: {
		__NVIC_EnableIRQ(EXTI4_IRQn);
 8006684:	200a      	movs	r0, #10
 8006686:	f7ff f97f 	bl	8005988 <__NVIC_EnableIRQ>
		break;
 800668a:	e02c      	b.n	80066e6 <extInt_Config+0xd22>
	}
	case 5: {
		__NVIC_EnableIRQ(EXTI9_5_IRQn);
 800668c:	2017      	movs	r0, #23
 800668e:	f7ff f97b 	bl	8005988 <__NVIC_EnableIRQ>
		break;
 8006692:	e028      	b.n	80066e6 <extInt_Config+0xd22>
	}
	case 6: {
		__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8006694:	2017      	movs	r0, #23
 8006696:	f7ff f977 	bl	8005988 <__NVIC_EnableIRQ>
		break;
 800669a:	e024      	b.n	80066e6 <extInt_Config+0xd22>
	}
	case 7: {
		__NVIC_EnableIRQ(EXTI9_5_IRQn);
 800669c:	2017      	movs	r0, #23
 800669e:	f7ff f973 	bl	8005988 <__NVIC_EnableIRQ>
		break;
 80066a2:	e020      	b.n	80066e6 <extInt_Config+0xd22>
	}
	case 8: {
		__NVIC_EnableIRQ(EXTI9_5_IRQn);
 80066a4:	2017      	movs	r0, #23
 80066a6:	f7ff f96f 	bl	8005988 <__NVIC_EnableIRQ>
		break;
 80066aa:	e01c      	b.n	80066e6 <extInt_Config+0xd22>
	}
	case 9: {
		__NVIC_EnableIRQ(EXTI9_5_IRQn);
 80066ac:	2017      	movs	r0, #23
 80066ae:	f7ff f96b 	bl	8005988 <__NVIC_EnableIRQ>
		break;
 80066b2:	e018      	b.n	80066e6 <extInt_Config+0xd22>
	}
	case 10: {
		__NVIC_EnableIRQ(EXTI15_10_IRQn);
 80066b4:	2028      	movs	r0, #40	; 0x28
 80066b6:	f7ff f967 	bl	8005988 <__NVIC_EnableIRQ>
		break;
 80066ba:	e014      	b.n	80066e6 <extInt_Config+0xd22>
	}
	case 11: {
		__NVIC_EnableIRQ(EXTI15_10_IRQn);
 80066bc:	2028      	movs	r0, #40	; 0x28
 80066be:	f7ff f963 	bl	8005988 <__NVIC_EnableIRQ>
		break;
 80066c2:	e010      	b.n	80066e6 <extInt_Config+0xd22>
	}
	case 12: {
		__NVIC_EnableIRQ(EXTI15_10_IRQn);
 80066c4:	2028      	movs	r0, #40	; 0x28
 80066c6:	f7ff f95f 	bl	8005988 <__NVIC_EnableIRQ>
		break;
 80066ca:	e00c      	b.n	80066e6 <extInt_Config+0xd22>
	}
	case 13: {
		__NVIC_EnableIRQ(EXTI15_10_IRQn);
 80066cc:	2028      	movs	r0, #40	; 0x28
 80066ce:	f7ff f95b 	bl	8005988 <__NVIC_EnableIRQ>
		break;
 80066d2:	e008      	b.n	80066e6 <extInt_Config+0xd22>
	}
	case 14: {
		__NVIC_EnableIRQ(EXTI15_10_IRQn);
 80066d4:	2028      	movs	r0, #40	; 0x28
 80066d6:	f7ff f957 	bl	8005988 <__NVIC_EnableIRQ>
		break;
 80066da:	e004      	b.n	80066e6 <extInt_Config+0xd22>
		 * .....
		 * y así hasta el ultimo caso */

	case 15: {
		/*Agregue su código acá*/
		__NVIC_EnableIRQ(EXTI15_10_IRQn);
 80066dc:	2028      	movs	r0, #40	; 0x28
 80066de:	f7ff f953 	bl	8005988 <__NVIC_EnableIRQ>
		break;
 80066e2:	e000      	b.n	80066e6 <extInt_Config+0xd22>
	}

	default: {
		break;
 80066e4:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 80066e6:	b662      	cpsie	i
}
 80066e8:	bf00      	nop

	}

	/* 7.0 Volvemos a activar las interrupciones globales */
	__enable_irq();
}
 80066ea:	bf00      	nop
 80066ec:	3708      	adds	r7, #8
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	bf00      	nop
 80066f4:	40021000 	.word	0x40021000
 80066f8:	40013800 	.word	0x40013800
 80066fc:	40021c00 	.word	0x40021c00
 8006700:	40013c00 	.word	0x40013c00

08006704 <callback_extInt0>:

/**/
__attribute__ ((weak)) void callback_extInt0(void) {
 8006704:	b480      	push	{r7}
 8006706:	af00      	add	r7, sp, #0
	__NOP();
 8006708:	bf00      	nop
}
 800670a:	bf00      	nop
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr

08006714 <callback_extInt1>:
__attribute__ ((weak)) void callback_extInt1(void) {
 8006714:	b480      	push	{r7}
 8006716:	af00      	add	r7, sp, #0
	__NOP();
 8006718:	bf00      	nop
}
 800671a:	bf00      	nop
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <callback_extInt2>:
__attribute__ ((weak)) void callback_extInt2(void) {
 8006724:	b480      	push	{r7}
 8006726:	af00      	add	r7, sp, #0
	__NOP();
 8006728:	bf00      	nop
}
 800672a:	bf00      	nop
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <callback_extInt3>:
__attribute__ ((weak)) void callback_extInt3(void) {
 8006734:	b480      	push	{r7}
 8006736:	af00      	add	r7, sp, #0
	__NOP();
 8006738:	bf00      	nop
}
 800673a:	bf00      	nop
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr

08006744 <callback_extInt4>:
__attribute__ ((weak)) void callback_extInt4(void) {
 8006744:	b480      	push	{r7}
 8006746:	af00      	add	r7, sp, #0
	__NOP();
 8006748:	bf00      	nop
}
 800674a:	bf00      	nop
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <callback_extInt5>:
__attribute__ ((weak)) void callback_extInt5(void) {
 8006754:	b480      	push	{r7}
 8006756:	af00      	add	r7, sp, #0
	__NOP();
 8006758:	bf00      	nop
}
 800675a:	bf00      	nop
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <callback_extInt6>:
__attribute__ ((weak)) void callback_extInt6(void) {
 8006764:	b480      	push	{r7}
 8006766:	af00      	add	r7, sp, #0
	__NOP();
 8006768:	bf00      	nop
}
 800676a:	bf00      	nop
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <callback_extInt7>:
__attribute__ ((weak)) void callback_extInt7(void) {
 8006774:	b480      	push	{r7}
 8006776:	af00      	add	r7, sp, #0
	__NOP();
 8006778:	bf00      	nop
}
 800677a:	bf00      	nop
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr

08006784 <callback_extInt8>:
__attribute__ ((weak)) void callback_extInt8(void) {
 8006784:	b480      	push	{r7}
 8006786:	af00      	add	r7, sp, #0
	__NOP();
 8006788:	bf00      	nop
}
 800678a:	bf00      	nop
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <callback_extInt9>:
__attribute__ ((weak)) void callback_extInt9(void) {
 8006794:	b480      	push	{r7}
 8006796:	af00      	add	r7, sp, #0
	__NOP();
 8006798:	bf00      	nop
}
 800679a:	bf00      	nop
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <callback_extInt10>:
__attribute__ ((weak)) void callback_extInt10(void) {
 80067a4:	b480      	push	{r7}
 80067a6:	af00      	add	r7, sp, #0
	__NOP();
 80067a8:	bf00      	nop
}
 80067aa:	bf00      	nop
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <callback_extInt11>:
__attribute__ ((weak)) void callback_extInt11(void) {
 80067b4:	b480      	push	{r7}
 80067b6:	af00      	add	r7, sp, #0
	__NOP();
 80067b8:	bf00      	nop
}
 80067ba:	bf00      	nop
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr

080067c4 <callback_extInt12>:
__attribute__ ((weak)) void callback_extInt12(void) {
 80067c4:	b480      	push	{r7}
 80067c6:	af00      	add	r7, sp, #0
	__NOP();
 80067c8:	bf00      	nop
}
 80067ca:	bf00      	nop
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <callback_extInt13>:
__attribute__ ((weak)) void callback_extInt13(void) {
 80067d4:	b480      	push	{r7}
 80067d6:	af00      	add	r7, sp, #0
	__NOP();
 80067d8:	bf00      	nop
}
 80067da:	bf00      	nop
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr

080067e4 <callback_extInt14>:
__attribute__ ((weak)) void callback_extInt14(void) {
 80067e4:	b480      	push	{r7}
 80067e6:	af00      	add	r7, sp, #0
	__NOP();
 80067e8:	bf00      	nop
}
 80067ea:	bf00      	nop
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <callback_extInt15>:
__attribute__ ((weak)) void callback_extInt15(void) {
 80067f4:	b480      	push	{r7}
 80067f6:	af00      	add	r7, sp, #0
	__NOP();
 80067f8:	bf00      	nop
}
 80067fa:	bf00      	nop
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <EXTI0_IRQHandler>:
 * Agregar TODOS los demas callbacks (del 1 al 15) para un total
 * de  16 posibles interrupciones 
 */

/* ISR de la interrupción canal 0*/
void EXTI0_IRQHandler(void) {
 8006804:	b580      	push	{r7, lr}
 8006806:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if (EXTI->PR & EXTI_PR_PR0) {
 8006808:	4b07      	ldr	r3, [pc, #28]	; (8006828 <EXTI0_IRQHandler+0x24>)
 800680a:	695b      	ldr	r3, [r3, #20]
 800680c:	f003 0301 	and.w	r3, r3, #1
 8006810:	2b00      	cmp	r3, #0
 8006812:	d007      	beq.n	8006824 <EXTI0_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR0;
 8006814:	4b04      	ldr	r3, [pc, #16]	; (8006828 <EXTI0_IRQHandler+0x24>)
 8006816:	695b      	ldr	r3, [r3, #20]
 8006818:	4a03      	ldr	r2, [pc, #12]	; (8006828 <EXTI0_IRQHandler+0x24>)
 800681a:	f043 0301 	orr.w	r3, r3, #1
 800681e:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt0();
 8006820:	f7ff ff70 	bl	8006704 <callback_extInt0>
	}
}
 8006824:	bf00      	nop
 8006826:	bd80      	pop	{r7, pc}
 8006828:	40013c00 	.word	0x40013c00

0800682c <EXTI1_IRQHandler>:

/* Agregue las demas IRQs de las interrupciones EXTI independientes ... 
 * Por favor recuerde que debe agregar el bloque if para verificar que 
 * en efecto esa es la interrupcion que se está atendiendo.
 */
void EXTI1_IRQHandler(void) {
 800682c:	b580      	push	{r7, lr}
 800682e:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if (EXTI->PR & EXTI_PR_PR1) {
 8006830:	4b07      	ldr	r3, [pc, #28]	; (8006850 <EXTI1_IRQHandler+0x24>)
 8006832:	695b      	ldr	r3, [r3, #20]
 8006834:	f003 0302 	and.w	r3, r3, #2
 8006838:	2b00      	cmp	r3, #0
 800683a:	d007      	beq.n	800684c <EXTI1_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR1;
 800683c:	4b04      	ldr	r3, [pc, #16]	; (8006850 <EXTI1_IRQHandler+0x24>)
 800683e:	695b      	ldr	r3, [r3, #20]
 8006840:	4a03      	ldr	r2, [pc, #12]	; (8006850 <EXTI1_IRQHandler+0x24>)
 8006842:	f043 0302 	orr.w	r3, r3, #2
 8006846:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt1();
 8006848:	f7ff ff64 	bl	8006714 <callback_extInt1>
	}
}
 800684c:	bf00      	nop
 800684e:	bd80      	pop	{r7, pc}
 8006850:	40013c00 	.word	0x40013c00

08006854 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void) {
 8006854:	b580      	push	{r7, lr}
 8006856:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if (EXTI->PR & EXTI_PR_PR2) {
 8006858:	4b07      	ldr	r3, [pc, #28]	; (8006878 <EXTI2_IRQHandler+0x24>)
 800685a:	695b      	ldr	r3, [r3, #20]
 800685c:	f003 0304 	and.w	r3, r3, #4
 8006860:	2b00      	cmp	r3, #0
 8006862:	d007      	beq.n	8006874 <EXTI2_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR2;
 8006864:	4b04      	ldr	r3, [pc, #16]	; (8006878 <EXTI2_IRQHandler+0x24>)
 8006866:	695b      	ldr	r3, [r3, #20]
 8006868:	4a03      	ldr	r2, [pc, #12]	; (8006878 <EXTI2_IRQHandler+0x24>)
 800686a:	f043 0304 	orr.w	r3, r3, #4
 800686e:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt2();
 8006870:	f7ff ff58 	bl	8006724 <callback_extInt2>
	}
}
 8006874:	bf00      	nop
 8006876:	bd80      	pop	{r7, pc}
 8006878:	40013c00 	.word	0x40013c00

0800687c <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void) {
 800687c:	b580      	push	{r7, lr}
 800687e:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if (EXTI->PR & EXTI_PR_PR3) {
 8006880:	4b07      	ldr	r3, [pc, #28]	; (80068a0 <EXTI3_IRQHandler+0x24>)
 8006882:	695b      	ldr	r3, [r3, #20]
 8006884:	f003 0308 	and.w	r3, r3, #8
 8006888:	2b00      	cmp	r3, #0
 800688a:	d007      	beq.n	800689c <EXTI3_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR3;
 800688c:	4b04      	ldr	r3, [pc, #16]	; (80068a0 <EXTI3_IRQHandler+0x24>)
 800688e:	695b      	ldr	r3, [r3, #20]
 8006890:	4a03      	ldr	r2, [pc, #12]	; (80068a0 <EXTI3_IRQHandler+0x24>)
 8006892:	f043 0308 	orr.w	r3, r3, #8
 8006896:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt3();
 8006898:	f7ff ff4c 	bl	8006734 <callback_extInt3>
	}
}
 800689c:	bf00      	nop
 800689e:	bd80      	pop	{r7, pc}
 80068a0:	40013c00 	.word	0x40013c00

080068a4 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void) {
 80068a4:	b580      	push	{r7, lr}
 80068a6:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if (EXTI->PR & EXTI_PR_PR4) {
 80068a8:	4b07      	ldr	r3, [pc, #28]	; (80068c8 <EXTI4_IRQHandler+0x24>)
 80068aa:	695b      	ldr	r3, [r3, #20]
 80068ac:	f003 0310 	and.w	r3, r3, #16
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d007      	beq.n	80068c4 <EXTI4_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR4;
 80068b4:	4b04      	ldr	r3, [pc, #16]	; (80068c8 <EXTI4_IRQHandler+0x24>)
 80068b6:	695b      	ldr	r3, [r3, #20]
 80068b8:	4a03      	ldr	r2, [pc, #12]	; (80068c8 <EXTI4_IRQHandler+0x24>)
 80068ba:	f043 0310 	orr.w	r3, r3, #16
 80068be:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt4();
 80068c0:	f7ff ff40 	bl	8006744 <callback_extInt4>
	}
}
 80068c4:	bf00      	nop
 80068c6:	bd80      	pop	{r7, pc}
 80068c8:	40013c00 	.word	0x40013c00

080068cc <EXTI9_5_IRQHandler>:
/* ISR de la interrupción canales 9_5
 * Observe que debe agregar totos los posibles casos, los cuales
 * son identificados por un bloque if() y el analisis de la bandera
 * (pending register -> EXTI_PR)
 */
void EXTI9_5_IRQHandler(void) {
 80068cc:	b580      	push	{r7, lr}
 80068ce:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR5) {
 80068d0:	4b25      	ldr	r3, [pc, #148]	; (8006968 <EXTI9_5_IRQHandler+0x9c>)
 80068d2:	695b      	ldr	r3, [r3, #20]
 80068d4:	f003 0320 	and.w	r3, r3, #32
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d008      	beq.n	80068ee <EXTI9_5_IRQHandler+0x22>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR5;
 80068dc:	4b22      	ldr	r3, [pc, #136]	; (8006968 <EXTI9_5_IRQHandler+0x9c>)
 80068de:	695b      	ldr	r3, [r3, #20]
 80068e0:	4a21      	ldr	r2, [pc, #132]	; (8006968 <EXTI9_5_IRQHandler+0x9c>)
 80068e2:	f043 0320 	orr.w	r3, r3, #32
 80068e6:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt5();
 80068e8:	f7ff ff34 	bl	8006754 <callback_extInt5>
		EXTI->PR |= EXTI_PR_PR9;

		// llamamos al callback
		callback_extInt9();
	}
}
 80068ec:	e03a      	b.n	8006964 <EXTI9_5_IRQHandler+0x98>
	} else if (EXTI->PR & EXTI_PR_PR6) {
 80068ee:	4b1e      	ldr	r3, [pc, #120]	; (8006968 <EXTI9_5_IRQHandler+0x9c>)
 80068f0:	695b      	ldr	r3, [r3, #20]
 80068f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d008      	beq.n	800690c <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR6;
 80068fa:	4b1b      	ldr	r3, [pc, #108]	; (8006968 <EXTI9_5_IRQHandler+0x9c>)
 80068fc:	695b      	ldr	r3, [r3, #20]
 80068fe:	4a1a      	ldr	r2, [pc, #104]	; (8006968 <EXTI9_5_IRQHandler+0x9c>)
 8006900:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006904:	6153      	str	r3, [r2, #20]
		callback_extInt6();
 8006906:	f7ff ff2d 	bl	8006764 <callback_extInt6>
}
 800690a:	e02b      	b.n	8006964 <EXTI9_5_IRQHandler+0x98>
	} else if (EXTI->PR & EXTI_PR_PR7) {
 800690c:	4b16      	ldr	r3, [pc, #88]	; (8006968 <EXTI9_5_IRQHandler+0x9c>)
 800690e:	695b      	ldr	r3, [r3, #20]
 8006910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006914:	2b00      	cmp	r3, #0
 8006916:	d008      	beq.n	800692a <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR7;
 8006918:	4b13      	ldr	r3, [pc, #76]	; (8006968 <EXTI9_5_IRQHandler+0x9c>)
 800691a:	695b      	ldr	r3, [r3, #20]
 800691c:	4a12      	ldr	r2, [pc, #72]	; (8006968 <EXTI9_5_IRQHandler+0x9c>)
 800691e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006922:	6153      	str	r3, [r2, #20]
		callback_extInt7();
 8006924:	f7ff ff26 	bl	8006774 <callback_extInt7>
}
 8006928:	e01c      	b.n	8006964 <EXTI9_5_IRQHandler+0x98>
	} else if (EXTI->PR & EXTI_PR_PR8) {
 800692a:	4b0f      	ldr	r3, [pc, #60]	; (8006968 <EXTI9_5_IRQHandler+0x9c>)
 800692c:	695b      	ldr	r3, [r3, #20]
 800692e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006932:	2b00      	cmp	r3, #0
 8006934:	d008      	beq.n	8006948 <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR8;
 8006936:	4b0c      	ldr	r3, [pc, #48]	; (8006968 <EXTI9_5_IRQHandler+0x9c>)
 8006938:	695b      	ldr	r3, [r3, #20]
 800693a:	4a0b      	ldr	r2, [pc, #44]	; (8006968 <EXTI9_5_IRQHandler+0x9c>)
 800693c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006940:	6153      	str	r3, [r2, #20]
		callback_extInt8();
 8006942:	f7ff ff1f 	bl	8006784 <callback_extInt8>
}
 8006946:	e00d      	b.n	8006964 <EXTI9_5_IRQHandler+0x98>
	} else if (EXTI->PR & EXTI_PR_PR9) {
 8006948:	4b07      	ldr	r3, [pc, #28]	; (8006968 <EXTI9_5_IRQHandler+0x9c>)
 800694a:	695b      	ldr	r3, [r3, #20]
 800694c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006950:	2b00      	cmp	r3, #0
 8006952:	d007      	beq.n	8006964 <EXTI9_5_IRQHandler+0x98>
		EXTI->PR |= EXTI_PR_PR9;
 8006954:	4b04      	ldr	r3, [pc, #16]	; (8006968 <EXTI9_5_IRQHandler+0x9c>)
 8006956:	695b      	ldr	r3, [r3, #20]
 8006958:	4a03      	ldr	r2, [pc, #12]	; (8006968 <EXTI9_5_IRQHandler+0x9c>)
 800695a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800695e:	6153      	str	r3, [r2, #20]
		callback_extInt9();
 8006960:	f7ff ff18 	bl	8006794 <callback_extInt9>
}
 8006964:	bf00      	nop
 8006966:	bd80      	pop	{r7, pc}
 8006968:	40013c00 	.word	0x40013c00

0800696c <EXTI15_10_IRQHandler>:
/* ISR de la interrupción canales 15_10
 * Observe que debe agregar totos los posibles casos, los cuales
 * son identificados por un bloque if() y el analisis de la bandera
 * (pending register -> EXTI_PR)
 */
void EXTI15_10_IRQHandler(void) {
 800696c:	b580      	push	{r7, lr}
 800696e:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_Y_15
	if (EXTI->PR & EXTI_PR_PR10) {
 8006970:	4b2d      	ldr	r3, [pc, #180]	; (8006a28 <EXTI15_10_IRQHandler+0xbc>)
 8006972:	695b      	ldr	r3, [r3, #20]
 8006974:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006978:	2b00      	cmp	r3, #0
 800697a:	d008      	beq.n	800698e <EXTI15_10_IRQHandler+0x22>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR10;
 800697c:	4b2a      	ldr	r3, [pc, #168]	; (8006a28 <EXTI15_10_IRQHandler+0xbc>)
 800697e:	695b      	ldr	r3, [r3, #20]
 8006980:	4a29      	ldr	r2, [pc, #164]	; (8006a28 <EXTI15_10_IRQHandler+0xbc>)
 8006982:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006986:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt10();
 8006988:	f7ff ff0c 	bl	80067a4 <callback_extInt10>
	/* .....
	 * .....
	 * .....
	 * y así hasta el ultimo caso */

}
 800698c:	e049      	b.n	8006a22 <EXTI15_10_IRQHandler+0xb6>
	else if (EXTI->PR & EXTI_PR_PR11) {
 800698e:	4b26      	ldr	r3, [pc, #152]	; (8006a28 <EXTI15_10_IRQHandler+0xbc>)
 8006990:	695b      	ldr	r3, [r3, #20]
 8006992:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006996:	2b00      	cmp	r3, #0
 8006998:	d008      	beq.n	80069ac <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR11;
 800699a:	4b23      	ldr	r3, [pc, #140]	; (8006a28 <EXTI15_10_IRQHandler+0xbc>)
 800699c:	695b      	ldr	r3, [r3, #20]
 800699e:	4a22      	ldr	r2, [pc, #136]	; (8006a28 <EXTI15_10_IRQHandler+0xbc>)
 80069a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80069a4:	6153      	str	r3, [r2, #20]
		callback_extInt11();
 80069a6:	f7ff ff05 	bl	80067b4 <callback_extInt11>
}
 80069aa:	e03a      	b.n	8006a22 <EXTI15_10_IRQHandler+0xb6>
	else if (EXTI->PR & EXTI_PR_PR12) {
 80069ac:	4b1e      	ldr	r3, [pc, #120]	; (8006a28 <EXTI15_10_IRQHandler+0xbc>)
 80069ae:	695b      	ldr	r3, [r3, #20]
 80069b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d008      	beq.n	80069ca <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR12;
 80069b8:	4b1b      	ldr	r3, [pc, #108]	; (8006a28 <EXTI15_10_IRQHandler+0xbc>)
 80069ba:	695b      	ldr	r3, [r3, #20]
 80069bc:	4a1a      	ldr	r2, [pc, #104]	; (8006a28 <EXTI15_10_IRQHandler+0xbc>)
 80069be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80069c2:	6153      	str	r3, [r2, #20]
		callback_extInt12();
 80069c4:	f7ff fefe 	bl	80067c4 <callback_extInt12>
}
 80069c8:	e02b      	b.n	8006a22 <EXTI15_10_IRQHandler+0xb6>
	else if (EXTI->PR & EXTI_PR_PR13) {
 80069ca:	4b17      	ldr	r3, [pc, #92]	; (8006a28 <EXTI15_10_IRQHandler+0xbc>)
 80069cc:	695b      	ldr	r3, [r3, #20]
 80069ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d008      	beq.n	80069e8 <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR13;
 80069d6:	4b14      	ldr	r3, [pc, #80]	; (8006a28 <EXTI15_10_IRQHandler+0xbc>)
 80069d8:	695b      	ldr	r3, [r3, #20]
 80069da:	4a13      	ldr	r2, [pc, #76]	; (8006a28 <EXTI15_10_IRQHandler+0xbc>)
 80069dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80069e0:	6153      	str	r3, [r2, #20]
		callback_extInt13();
 80069e2:	f7ff fef7 	bl	80067d4 <callback_extInt13>
}
 80069e6:	e01c      	b.n	8006a22 <EXTI15_10_IRQHandler+0xb6>
	else if (EXTI->PR & EXTI_PR_PR14) {
 80069e8:	4b0f      	ldr	r3, [pc, #60]	; (8006a28 <EXTI15_10_IRQHandler+0xbc>)
 80069ea:	695b      	ldr	r3, [r3, #20]
 80069ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d008      	beq.n	8006a06 <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= EXTI_PR_PR14;
 80069f4:	4b0c      	ldr	r3, [pc, #48]	; (8006a28 <EXTI15_10_IRQHandler+0xbc>)
 80069f6:	695b      	ldr	r3, [r3, #20]
 80069f8:	4a0b      	ldr	r2, [pc, #44]	; (8006a28 <EXTI15_10_IRQHandler+0xbc>)
 80069fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80069fe:	6153      	str	r3, [r2, #20]
		callback_extInt14();
 8006a00:	f7ff fef0 	bl	80067e4 <callback_extInt14>
}
 8006a04:	e00d      	b.n	8006a22 <EXTI15_10_IRQHandler+0xb6>
	else if (EXTI->PR & EXTI_PR_PR15) {
 8006a06:	4b08      	ldr	r3, [pc, #32]	; (8006a28 <EXTI15_10_IRQHandler+0xbc>)
 8006a08:	695b      	ldr	r3, [r3, #20]
 8006a0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d007      	beq.n	8006a22 <EXTI15_10_IRQHandler+0xb6>
		EXTI->PR |= EXTI_PR_PR15;
 8006a12:	4b05      	ldr	r3, [pc, #20]	; (8006a28 <EXTI15_10_IRQHandler+0xbc>)
 8006a14:	695b      	ldr	r3, [r3, #20]
 8006a16:	4a04      	ldr	r2, [pc, #16]	; (8006a28 <EXTI15_10_IRQHandler+0xbc>)
 8006a18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a1c:	6153      	str	r3, [r2, #20]
		callback_extInt15();
 8006a1e:	f7ff fee9 	bl	80067f4 <callback_extInt15>
}
 8006a22:	bf00      	nop
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	bf00      	nop
 8006a28:	40013c00 	.word	0x40013c00

08006a2c <GPIO_Config>:
 * Para cualquier prefierico hay unos pasos estrictos que siempre
 * se tienen que seguir en un orden. Lo primero sería activar la señal
 * de reloj
 */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 8006a2c:	b480      	push	{r7}
 8006a2e:	b085      	sub	sp, #20
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
	//Variable para hacer  paso a paso.
	uint32_t auxConfig = 	0;
 8006a34:	2300      	movs	r3, #0
 8006a36:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 	0;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	60bb      	str	r3, [r7, #8]
	// 1) activar el periferico.
	//Verificar que pin.
	if(pGPIOHandler -> pGPIOx == GPIOA){
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a88      	ldr	r2, [pc, #544]	; (8006c64 <GPIO_Config+0x238>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d106      	bne.n	8006a54 <GPIO_Config+0x28>
		RCC -> AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8006a46:	4b88      	ldr	r3, [pc, #544]	; (8006c68 <GPIO_Config+0x23c>)
 8006a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a4a:	4a87      	ldr	r2, [pc, #540]	; (8006c68 <GPIO_Config+0x23c>)
 8006a4c:	f043 0301 	orr.w	r3, r3, #1
 8006a50:	6313      	str	r3, [r2, #48]	; 0x30
 8006a52:	e03a      	b.n	8006aca <GPIO_Config+0x9e>
	}
	else if(pGPIOHandler -> pGPIOx == GPIOB){
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a84      	ldr	r2, [pc, #528]	; (8006c6c <GPIO_Config+0x240>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d106      	bne.n	8006a6c <GPIO_Config+0x40>
		RCC -> AHB1ENR |=  RCC_AHB1ENR_GPIOBEN;
 8006a5e:	4b82      	ldr	r3, [pc, #520]	; (8006c68 <GPIO_Config+0x23c>)
 8006a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a62:	4a81      	ldr	r2, [pc, #516]	; (8006c68 <GPIO_Config+0x23c>)
 8006a64:	f043 0302 	orr.w	r3, r3, #2
 8006a68:	6313      	str	r3, [r2, #48]	; 0x30
 8006a6a:	e02e      	b.n	8006aca <GPIO_Config+0x9e>
	}
	else if(pGPIOHandler -> pGPIOx == GPIOC){
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a7f      	ldr	r2, [pc, #508]	; (8006c70 <GPIO_Config+0x244>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d106      	bne.n	8006a84 <GPIO_Config+0x58>
		RCC -> AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8006a76:	4b7c      	ldr	r3, [pc, #496]	; (8006c68 <GPIO_Config+0x23c>)
 8006a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a7a:	4a7b      	ldr	r2, [pc, #492]	; (8006c68 <GPIO_Config+0x23c>)
 8006a7c:	f043 0304 	orr.w	r3, r3, #4
 8006a80:	6313      	str	r3, [r2, #48]	; 0x30
 8006a82:	e022      	b.n	8006aca <GPIO_Config+0x9e>
	}
	else if(pGPIOHandler -> pGPIOx == GPIOD){
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a7a      	ldr	r2, [pc, #488]	; (8006c74 <GPIO_Config+0x248>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d106      	bne.n	8006a9c <GPIO_Config+0x70>
		RCC -> AHB1ENR |=  RCC_AHB1ENR_GPIODEN;
 8006a8e:	4b76      	ldr	r3, [pc, #472]	; (8006c68 <GPIO_Config+0x23c>)
 8006a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a92:	4a75      	ldr	r2, [pc, #468]	; (8006c68 <GPIO_Config+0x23c>)
 8006a94:	f043 0308 	orr.w	r3, r3, #8
 8006a98:	6313      	str	r3, [r2, #48]	; 0x30
 8006a9a:	e016      	b.n	8006aca <GPIO_Config+0x9e>
	}
	else if(pGPIOHandler -> pGPIOx == GPIOE){
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a75      	ldr	r2, [pc, #468]	; (8006c78 <GPIO_Config+0x24c>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d106      	bne.n	8006ab4 <GPIO_Config+0x88>
		RCC -> AHB1ENR |=  RCC_AHB1ENR_GPIOEEN;
 8006aa6:	4b70      	ldr	r3, [pc, #448]	; (8006c68 <GPIO_Config+0x23c>)
 8006aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aaa:	4a6f      	ldr	r2, [pc, #444]	; (8006c68 <GPIO_Config+0x23c>)
 8006aac:	f043 0310 	orr.w	r3, r3, #16
 8006ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8006ab2:	e00a      	b.n	8006aca <GPIO_Config+0x9e>
	}
	else if(pGPIOHandler -> pGPIOx == GPIOH){
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a70      	ldr	r2, [pc, #448]	; (8006c7c <GPIO_Config+0x250>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d105      	bne.n	8006aca <GPIO_Config+0x9e>
		RCC -> AHB1ENR |= RCC_AHB1ENR_GPIOHEN;
 8006abe:	4b6a      	ldr	r3, [pc, #424]	; (8006c68 <GPIO_Config+0x23c>)
 8006ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ac2:	4a69      	ldr	r2, [pc, #420]	; (8006c68 <GPIO_Config+0x23c>)
 8006ac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ac8:	6313      	str	r3, [r2, #48]	; 0x30
	}

	//Despues de activado podemos comenzar a configurar.
	// 2) Configurar el registro GPIOx_MODER
	auxConfig = (pGPIOHandler -> GPIO_PinConfig_t.GPIO_PinMode << 2 * pGPIOHandler -> GPIO_PinConfig_t.GPIO_PinNumber);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	795b      	ldrb	r3, [r3, #5]
 8006ace:	461a      	mov	r2, r3
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	791b      	ldrb	r3, [r3, #4]
 8006ad4:	005b      	lsls	r3, r3, #1
 8006ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8006ada:	60fb      	str	r3, [r7, #12]
	//Antes de cargar el nuevo valor, limpiamos los bits especificos de ese registro
	//para lo cual aplicamos.
	pGPIOHandler -> pGPIOx -> MODER &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig_t.GPIO_PinNumber);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	791b      	ldrb	r3, [r3, #4]
 8006ae6:	005b      	lsls	r3, r3, #1
 8006ae8:	2103      	movs	r1, #3
 8006aea:	fa01 f303 	lsl.w	r3, r1, r3
 8006aee:	43db      	mvns	r3, r3
 8006af0:	4619      	mov	r1, r3
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	400a      	ands	r2, r1
 8006af8:	601a      	str	r2, [r3, #0]

	//Cargamos a auxConfig en el registro MODER
	pGPIOHandler -> pGPIOx -> MODER |= auxConfig;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	6819      	ldr	r1, [r3, #0]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	68fa      	ldr	r2, [r7, #12]
 8006b06:	430a      	orrs	r2, r1
 8006b08:	601a      	str	r2, [r3, #0]

	// 3)configurando el registro OTYPER
	auxConfig = (pGPIOHandler -> GPIO_PinConfig_t.GPIO_PinOPType << pGPIOHandler -> GPIO_PinConfig_t.GPIO_PinNumber);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	7a1b      	ldrb	r3, [r3, #8]
 8006b0e:	461a      	mov	r2, r3
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	791b      	ldrb	r3, [r3, #4]
 8006b14:	fa02 f303 	lsl.w	r3, r2, r3
 8006b18:	60fb      	str	r3, [r7, #12]
	//limpiamos
	pGPIOHandler -> pGPIOx -> OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig_t.GPIO_PinNumber);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	685a      	ldr	r2, [r3, #4]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	791b      	ldrb	r3, [r3, #4]
 8006b24:	4619      	mov	r1, r3
 8006b26:	2301      	movs	r3, #1
 8006b28:	408b      	lsls	r3, r1
 8006b2a:	43db      	mvns	r3, r3
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	400a      	ands	r2, r1
 8006b34:	605a      	str	r2, [r3, #4]
	// cargamos el resultado
	pGPIOHandler -> pGPIOx -> OTYPER |= auxConfig;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	6859      	ldr	r1, [r3, #4]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	430a      	orrs	r2, r1
 8006b44:	605a      	str	r2, [r3, #4]

	// 4) Configurando ahora la velocidad.
	//Realizando el mismo proceso
	auxConfig = (pGPIOHandler -> GPIO_PinConfig_t.GPIO_PinSpeed << 2 * pGPIOHandler -> GPIO_PinConfig_t.GPIO_PinNumber);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	799b      	ldrb	r3, [r3, #6]
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	791b      	ldrb	r3, [r3, #4]
 8006b50:	005b      	lsls	r3, r3, #1
 8006b52:	fa02 f303 	lsl.w	r3, r2, r3
 8006b56:	60fb      	str	r3, [r7, #12]
	pGPIOHandler -> pGPIOx -> OSPEEDR &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig_t.GPIO_PinNumber);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	689a      	ldr	r2, [r3, #8]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	791b      	ldrb	r3, [r3, #4]
 8006b62:	005b      	lsls	r3, r3, #1
 8006b64:	2103      	movs	r1, #3
 8006b66:	fa01 f303 	lsl.w	r3, r1, r3
 8006b6a:	43db      	mvns	r3, r3
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	400a      	ands	r2, r1
 8006b74:	609a      	str	r2, [r3, #8]
	pGPIOHandler -> pGPIOx -> OSPEEDR |= auxConfig;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	6899      	ldr	r1, [r3, #8]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	68fa      	ldr	r2, [r7, #12]
 8006b82:	430a      	orrs	r2, r1
 8006b84:	609a      	str	r2, [r3, #8]

	// 5) confiurando si se desea pull-up, pull-down o flotante.
	auxConfig = (pGPIOHandler -> GPIO_PinConfig_t.GPIO_PinPuPdControl << 2 * pGPIOHandler -> GPIO_PinConfig_t.GPIO_PinNumber);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	79db      	ldrb	r3, [r3, #7]
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	791b      	ldrb	r3, [r3, #4]
 8006b90:	005b      	lsls	r3, r3, #1
 8006b92:	fa02 f303 	lsl.w	r3, r2, r3
 8006b96:	60fb      	str	r3, [r7, #12]
	pGPIOHandler -> pGPIOx -> PUPDR &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig_t.GPIO_PinNumber);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	68da      	ldr	r2, [r3, #12]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	791b      	ldrb	r3, [r3, #4]
 8006ba2:	005b      	lsls	r3, r3, #1
 8006ba4:	2103      	movs	r1, #3
 8006ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8006baa:	43db      	mvns	r3, r3
 8006bac:	4619      	mov	r1, r3
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	400a      	ands	r2, r1
 8006bb4:	60da      	str	r2, [r3, #12]
	pGPIOHandler -> pGPIOx -> PUPDR |= auxConfig;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	68d9      	ldr	r1, [r3, #12]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	68fa      	ldr	r2, [r7, #12]
 8006bc2:	430a      	orrs	r2, r1
 8006bc4:	60da      	str	r2, [r3, #12]

	//Esta es la parte para la configuración de las funciones alternativs
	if(pGPIOHandler->GPIO_PinConfig_t.GPIO_PinMode == GPIO_MODE_ALTFN){
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	795b      	ldrb	r3, [r3, #5]
 8006bca:	2b02      	cmp	r3, #2
 8006bcc:	d143      	bne.n	8006c56 <GPIO_Config+0x22a>

		//Seleccionamos primero si se debe utilizar el registro bajo (AFRL) o alto (AFRH)
		if(pGPIOHandler->GPIO_PinConfig_t.GPIO_PinNumber < 8){
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	791b      	ldrb	r3, [r3, #4]
 8006bd2:	2b07      	cmp	r3, #7
 8006bd4:	d81f      	bhi.n	8006c16 <GPIO_Config+0x1ea>
			//Estamos en el registro AFRL, que controla los pines del 0 al 7
			auxPosition = 4 * pGPIOHandler->GPIO_PinConfig_t.GPIO_PinNumber;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	791b      	ldrb	r3, [r3, #4]
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	60bb      	str	r3, [r7, #8]

			//limpiamos
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b111<<auxPosition);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	6a1a      	ldr	r2, [r3, #32]
 8006be4:	2107      	movs	r1, #7
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	fa01 f303 	lsl.w	r3, r1, r3
 8006bec:	43db      	mvns	r3, r3
 8006bee:	4619      	mov	r1, r3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	400a      	ands	r2, r1
 8006bf6:	621a      	str	r2, [r3, #32]

			// Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig_t.GPIO_PinAltFunMode << auxPosition);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	6a1a      	ldr	r2, [r3, #32]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	7a5b      	ldrb	r3, [r3, #9]
 8006c02:	4619      	mov	r1, r3
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	fa01 f303 	lsl.w	r3, r1, r3
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	430a      	orrs	r2, r1
 8006c12:	621a      	str	r2, [r3, #32]

			// Y escribimos el valor configurado en la posicion seleccionada
						pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig_t.GPIO_PinAltFunMode << auxPosition);
		}
	}
} //Fin del GPIO_config
 8006c14:	e01f      	b.n	8006c56 <GPIO_Config+0x22a>
			auxPosition = 4 * (pGPIOHandler->GPIO_PinConfig_t.GPIO_PinNumber - 8);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	791b      	ldrb	r3, [r3, #4]
 8006c1a:	3b08      	subs	r3, #8
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b111<<auxPosition);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c26:	2107      	movs	r1, #7
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8006c2e:	43db      	mvns	r3, r3
 8006c30:	4619      	mov	r1, r3
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	400a      	ands	r2, r1
 8006c38:	625a      	str	r2, [r3, #36]	; 0x24
						pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig_t.GPIO_PinAltFunMode << auxPosition);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	7a5b      	ldrb	r3, [r3, #9]
 8006c44:	4619      	mov	r1, r3
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	fa01 f303 	lsl.w	r3, r1, r3
 8006c4c:	4619      	mov	r1, r3
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	430a      	orrs	r2, r1
 8006c54:	625a      	str	r2, [r3, #36]	; 0x24
} //Fin del GPIO_config
 8006c56:	bf00      	nop
 8006c58:	3714      	adds	r7, #20
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr
 8006c62:	bf00      	nop
 8006c64:	40020000 	.word	0x40020000
 8006c68:	40023800 	.word	0x40023800
 8006c6c:	40020400 	.word	0x40020400
 8006c70:	40020800 	.word	0x40020800
 8006c74:	40020c00 	.word	0x40020c00
 8006c78:	40021000 	.word	0x40021000
 8006c7c:	40021c00 	.word	0x40021c00

08006c80 <GPIO_WritePin>:
/**
 * Funcion utilizada para cambiar el estado el pin enregado en el hander, asignando
 * el valor entregado en el variable newState
 */

void GPIO_WritePin(GPIO_Handler_t *pPinHandler, uint8_t newState){
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	460b      	mov	r3, r1
 8006c8a:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
//	pPinHandler -> pGPIOx -> ODR &= ~(SET << pPinHandler->GPIO_PinConfig_t.GPIO_PinNumber);
	if(newState == SET){
 8006c8c:	78fb      	ldrb	r3, [r7, #3]
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d10d      	bne.n	8006cae <GPIO_WritePin+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << pPinHandler->GPIO_PinConfig_t.GPIO_PinNumber);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	699a      	ldr	r2, [r3, #24]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	791b      	ldrb	r3, [r3, #4]
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	408b      	lsls	r3, r1
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	430a      	orrs	r2, r1
 8006caa:	619a      	str	r2, [r3, #24]
	} else{
		//trabajando con la parte alta del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler->GPIO_PinConfig_t.GPIO_PinNumber + 16));
	}
}
 8006cac:	e00d      	b.n	8006cca <GPIO_WritePin+0x4a>
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler->GPIO_PinConfig_t.GPIO_PinNumber + 16));
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	699a      	ldr	r2, [r3, #24]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	791b      	ldrb	r3, [r3, #4]
 8006cb8:	3310      	adds	r3, #16
 8006cba:	2101      	movs	r1, #1
 8006cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	430a      	orrs	r2, r1
 8006cc8:	619a      	str	r2, [r3, #24]
}
 8006cca:	bf00      	nop
 8006ccc:	370c      	adds	r7, #12
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr

08006cd6 <GPIO_ReadPin>:
//Funcion para leer el estado de un pin.
uint32_t GPIO_ReadPin(GPIO_Handler_t *pPinHandler){
 8006cd6:	b480      	push	{r7}
 8006cd8:	b085      	sub	sp, #20
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
	// creamos variable auxiliar para retornarla
	uint32_t pinValue = pPinHandler->pGPIOx->IDR;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	691b      	ldr	r3, [r3, #16]
 8006ce4:	60fb      	str	r3, [r7, #12]
	//Cargamos el valor del registro IDR, desplzadado a derecha tantas veces como la ubicacion del pin
	//especifico
	//limpiar los demas valores
	//Antes:
	// pinValue = (pPinHandler->pGPIOx->IDR>>pPinHandler->GPIO_PinConfig_t.GPIO_PinNumber);
	pinValue &= (SET<<pPinHandler->GPIO_PinConfig_t.GPIO_PinNumber);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	791b      	ldrb	r3, [r3, #4]
 8006cea:	461a      	mov	r2, r3
 8006cec:	2301      	movs	r3, #1
 8006cee:	4093      	lsls	r3, r2
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	4013      	ands	r3, r2
 8006cf6:	60fb      	str	r3, [r7, #12]
	pinValue >>= pPinHandler->GPIO_PinConfig_t.GPIO_PinNumber;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	791b      	ldrb	r3, [r3, #4]
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	40d3      	lsrs	r3, r2
 8006d02:	60fb      	str	r3, [r7, #12]
	return pinValue;
 8006d04:	68fb      	ldr	r3, [r7, #12]
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3714      	adds	r7, #20
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr

08006d12 <GPIOxTooglePin>:
 * 		1	  |  1	|		 0
 * 		0	  |  1	| 	 	 1
 */


void GPIOxTooglePin(GPIO_Handler_t *pPinHandler){
 8006d12:	b580      	push	{r7, lr}
 8006d14:	b082      	sub	sp, #8
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
	GPIO_WritePin(pPinHandler,SET^GPIO_ReadPin(pPinHandler));
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f7ff ffdb 	bl	8006cd6 <GPIO_ReadPin>
 8006d20:	4603      	mov	r3, r0
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	f083 0301 	eor.w	r3, r3, #1
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f7ff ffa7 	bl	8006c80 <GPIO_WritePin>
}
 8006d32:	bf00      	nop
 8006d34:	3708      	adds	r7, #8
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
	...

08006d3c <configPLL>:
 */

#include <stm32f4xx.h>
#include "PLLDriver.h"

int configPLL(uint16_t freqPLL){
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	4603      	mov	r3, r0
 8006d44:	80fb      	strh	r3, [r7, #6]
	if (freqPLL == 16){
 8006d46:	88fb      	ldrh	r3, [r7, #6]
 8006d48:	2b10      	cmp	r3, #16
 8006d4a:	d101      	bne.n	8006d50 <configPLL+0x14>
		return 0;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	e0c2      	b.n	8006ed6 <configPLL+0x19a>
	}
	//Selecionamos HSI como la fuente para el PLL
	RCC -> PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC);
 8006d50:	4b64      	ldr	r3, [pc, #400]	; (8006ee4 <configPLL+0x1a8>)
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	4a63      	ldr	r2, [pc, #396]	; (8006ee4 <configPLL+0x1a8>)
 8006d56:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8006d5a:	6053      	str	r3, [r2, #4]

	//Asignamos el divisor para la señal de entrada que sea facil de manipular
	//Por lo que la pondremos en 2MHz colocando en el registro 8.
	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLM); // Limpiamos
 8006d5c:	4b61      	ldr	r3, [pc, #388]	; (8006ee4 <configPLL+0x1a8>)
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	4a60      	ldr	r2, [pc, #384]	; (8006ee4 <configPLL+0x1a8>)
 8006d62:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006d66:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (RCC_PLLCFGR_PLLM_3); // Ponemos un 8 en el PLLM
 8006d68:	4b5e      	ldr	r3, [pc, #376]	; (8006ee4 <configPLL+0x1a8>)
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	4a5d      	ldr	r2, [pc, #372]	; (8006ee4 <configPLL+0x1a8>)
 8006d6e:	f043 0308 	orr.w	r3, r3, #8
 8006d72:	6053      	str	r3, [r2, #4]

	//Ahora conifugraremos la multiplicación
	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLN); // Limpiamos
 8006d74:	4b5b      	ldr	r3, [pc, #364]	; (8006ee4 <configPLL+0x1a8>)
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	4a5a      	ldr	r2, [pc, #360]	; (8006ee4 <configPLL+0x1a8>)
 8006d7a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006d7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d82:	6053      	str	r3, [r2, #4]

	//ponemos el PLLN en 80 para conseguir 160MHz
	RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_2);
 8006d84:	4b57      	ldr	r3, [pc, #348]	; (8006ee4 <configPLL+0x1a8>)
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	4a56      	ldr	r2, [pc, #344]	; (8006ee4 <configPLL+0x1a8>)
 8006d8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d8e:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_5);
 8006d90:	4b54      	ldr	r3, [pc, #336]	; (8006ee4 <configPLL+0x1a8>)
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	4a53      	ldr	r2, [pc, #332]	; (8006ee4 <configPLL+0x1a8>)
 8006d96:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006d9a:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_6);
 8006d9c:	4b51      	ldr	r3, [pc, #324]	; (8006ee4 <configPLL+0x1a8>)
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	4a50      	ldr	r2, [pc, #320]	; (8006ee4 <configPLL+0x1a8>)
 8006da2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006da6:	6053      	str	r3, [r2, #4]

	//  Borro el posible valor configurado
	RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLN_Pos);
 8006da8:	4b4e      	ldr	r3, [pc, #312]	; (8006ee4 <configPLL+0x1a8>)
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	4a4d      	ldr	r2, [pc, #308]	; (8006ee4 <configPLL+0x1a8>)
 8006dae:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006db2:	6053      	str	r3, [r2, #4]

	// Cargamos el valor del multiplicador el cual al final terminaria siendo la frecuencia
	//Esto teniendo en cuenta que se utilizamos el PLLp para dividir entre 2
	if(freqPLL <= 100 && 50 < freqPLL)
 8006db4:	88fb      	ldrh	r3, [r7, #6]
 8006db6:	2b64      	cmp	r3, #100	; 0x64
 8006db8:	d80b      	bhi.n	8006dd2 <configPLL+0x96>
 8006dba:	88fb      	ldrh	r3, [r7, #6]
 8006dbc:	2b32      	cmp	r3, #50	; 0x32
 8006dbe:	d908      	bls.n	8006dd2 <configPLL+0x96>
		RCC->PLLCFGR |= (freqPLL << RCC_PLLCFGR_PLLN_Pos);
 8006dc0:	4b48      	ldr	r3, [pc, #288]	; (8006ee4 <configPLL+0x1a8>)
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	88fa      	ldrh	r2, [r7, #6]
 8006dc6:	0192      	lsls	r2, r2, #6
 8006dc8:	4611      	mov	r1, r2
 8006dca:	4a46      	ldr	r2, [pc, #280]	; (8006ee4 <configPLL+0x1a8>)
 8006dcc:	430b      	orrs	r3, r1
 8006dce:	6053      	str	r3, [r2, #4]
 8006dd0:	e005      	b.n	8006dde <configPLL+0xa2>
	else
		RCC->PLLCFGR |= (PLL_STANDARD_FREQ << RCC_PLLCFGR_PLLN_Pos);
 8006dd2:	4b44      	ldr	r3, [pc, #272]	; (8006ee4 <configPLL+0x1a8>)
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	4a43      	ldr	r2, [pc, #268]	; (8006ee4 <configPLL+0x1a8>)
 8006dd8:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8006ddc:	6053      	str	r3, [r2, #4]

	// La salida del PLL depende del valor VCO y del preescaler PLLP, el cual
	// su minimo valor es de 2 con esto configuramos siempre la frecuencia que le entreguemos
	// entre 50 a 100
	RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos); // Salida DIV2
 8006dde:	4b41      	ldr	r3, [pc, #260]	; (8006ee4 <configPLL+0x1a8>)
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	4a40      	ldr	r2, [pc, #256]	; (8006ee4 <configPLL+0x1a8>)
 8006de4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8006de8:	6053      	str	r3, [r2, #4]

	// Cambio el valor VOS (regulador de voltaje) para que se tenga el
	// rendimiento adecuado Esto se debe hacer antes de encender el PLL

	if(freqPLL <= 64)
 8006dea:	88fb      	ldrh	r3, [r7, #6]
 8006dec:	2b40      	cmp	r3, #64	; 0x40
 8006dee:	d806      	bhi.n	8006dfe <configPLL+0xc2>
		PWR->CR |= (0x1 << PWR_CR_VOS_Pos);
 8006df0:	4b3d      	ldr	r3, [pc, #244]	; (8006ee8 <configPLL+0x1ac>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a3c      	ldr	r2, [pc, #240]	; (8006ee8 <configPLL+0x1ac>)
 8006df6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006dfa:	6013      	str	r3, [r2, #0]
 8006dfc:	e012      	b.n	8006e24 <configPLL+0xe8>
	else if(freqPLL <= 84)
 8006dfe:	88fb      	ldrh	r3, [r7, #6]
 8006e00:	2b54      	cmp	r3, #84	; 0x54
 8006e02:	d806      	bhi.n	8006e12 <configPLL+0xd6>
		PWR->CR |= (0x2 << PWR_CR_VOS_Pos);
 8006e04:	4b38      	ldr	r3, [pc, #224]	; (8006ee8 <configPLL+0x1ac>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a37      	ldr	r2, [pc, #220]	; (8006ee8 <configPLL+0x1ac>)
 8006e0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e0e:	6013      	str	r3, [r2, #0]
 8006e10:	e008      	b.n	8006e24 <configPLL+0xe8>
	else if(freqPLL <= 100)
 8006e12:	88fb      	ldrh	r3, [r7, #6]
 8006e14:	2b64      	cmp	r3, #100	; 0x64
 8006e16:	d805      	bhi.n	8006e24 <configPLL+0xe8>
		PWR->CR |= (0x3 << PWR_CR_VOS_Pos);
 8006e18:	4b33      	ldr	r3, [pc, #204]	; (8006ee8 <configPLL+0x1ac>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a32      	ldr	r2, [pc, #200]	; (8006ee8 <configPLL+0x1ac>)
 8006e1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e22:	6013      	str	r3, [r2, #0]

	// Activamos el PLL en el control register del RCC
	RCC->CR |= RCC_CR_PLLON;
 8006e24:	4b2f      	ldr	r3, [pc, #188]	; (8006ee4 <configPLL+0x1a8>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a2e      	ldr	r2, [pc, #184]	; (8006ee4 <configPLL+0x1a8>)
 8006e2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e2e:	6013      	str	r3, [r2, #0]

	// Esperamos a que el PLL se cierre (se estabilice)
	while (!(RCC->CR & RCC_CR_PLLRDY)){
 8006e30:	e000      	b.n	8006e34 <configPLL+0xf8>
		__NOP();
 8006e32:	bf00      	nop
	while (!(RCC->CR & RCC_CR_PLLRDY)){
 8006e34:	4b2b      	ldr	r3, [pc, #172]	; (8006ee4 <configPLL+0x1a8>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d0f8      	beq.n	8006e32 <configPLL+0xf6>
	/* ---- Configuración de Preescalers para velocidad de los Buses ---- */
	//  Organizamos los preescalers del hardware, de forma que funcionen
	// a la velocidad maxima permitida
	// Preescaler del hardware del procesador, el valor en 0 significa
	// 	 sin preescaler
	RCC->CFGR &= ~(0xF << RCC_CFGR_HPRE_Pos);
 8006e40:	4b28      	ldr	r3, [pc, #160]	; (8006ee4 <configPLL+0x1a8>)
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	4a27      	ldr	r2, [pc, #156]	; (8006ee4 <configPLL+0x1a8>)
 8006e46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e4a:	6093      	str	r3, [r2, #8]

	// Preescaler para el APB2 (high speed), el valor en 0 significa
	// sin preescaler
	RCC->CFGR &= ~(0x7 << RCC_CFGR_PPRE2_Pos);
 8006e4c:	4b25      	ldr	r3, [pc, #148]	; (8006ee4 <configPLL+0x1a8>)
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	4a24      	ldr	r2, [pc, #144]	; (8006ee4 <configPLL+0x1a8>)
 8006e52:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8006e56:	6093      	str	r3, [r2, #8]

	// Preescaler para el APB1 (low speed). Se debe poner un preescaler
	// de 2:1, para que la velocidad
	// sea la máxima permitida. Primero lo limpio, luego lo configuro
	RCC->CFGR &= ~(0x7 << RCC_CFGR_PPRE1_Pos); // Limpiar
 8006e58:	4b22      	ldr	r3, [pc, #136]	; (8006ee4 <configPLL+0x1a8>)
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	4a21      	ldr	r2, [pc, #132]	; (8006ee4 <configPLL+0x1a8>)
 8006e5e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8006e62:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (0x4 << RCC_CFGR_PPRE1_Pos);  // Preescaler 2:1
 8006e64:	4b1f      	ldr	r3, [pc, #124]	; (8006ee4 <configPLL+0x1a8>)
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	4a1e      	ldr	r2, [pc, #120]	; (8006ee4 <configPLL+0x1a8>)
 8006e6a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006e6e:	6093      	str	r3, [r2, #8]

	// Ahora debemos configurar el periodo de espera para leer la
	// memoria flash (Lantency), tal cual como esta descrito en la seccion
	// 3.4.1, tabla 5, pag 45.

	FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos); // Limpiamos la posicion
 8006e70:	4b1e      	ldr	r3, [pc, #120]	; (8006eec <configPLL+0x1b0>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a1d      	ldr	r2, [pc, #116]	; (8006eec <configPLL+0x1b0>)
 8006e76:	f023 030f 	bic.w	r3, r3, #15
 8006e7a:	6013      	str	r3, [r2, #0]

	if(50 <= freqPLL && freqPLL <= 64)
 8006e7c:	88fb      	ldrh	r3, [r7, #6]
 8006e7e:	2b31      	cmp	r3, #49	; 0x31
 8006e80:	d909      	bls.n	8006e96 <configPLL+0x15a>
 8006e82:	88fb      	ldrh	r3, [r7, #6]
 8006e84:	2b40      	cmp	r3, #64	; 0x40
 8006e86:	d806      	bhi.n	8006e96 <configPLL+0x15a>
		FLASH -> ACR |= (0x1 << FLASH_ACR_LATENCY_Pos); // Configurando 1 WS
 8006e88:	4b18      	ldr	r3, [pc, #96]	; (8006eec <configPLL+0x1b0>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a17      	ldr	r2, [pc, #92]	; (8006eec <configPLL+0x1b0>)
 8006e8e:	f043 0301 	orr.w	r3, r3, #1
 8006e92:	6013      	str	r3, [r2, #0]
 8006e94:	e012      	b.n	8006ebc <configPLL+0x180>
	else if(90 <= freqPLL && freqPLL <= 100)
 8006e96:	88fb      	ldrh	r3, [r7, #6]
 8006e98:	2b59      	cmp	r3, #89	; 0x59
 8006e9a:	d909      	bls.n	8006eb0 <configPLL+0x174>
 8006e9c:	88fb      	ldrh	r3, [r7, #6]
 8006e9e:	2b64      	cmp	r3, #100	; 0x64
 8006ea0:	d806      	bhi.n	8006eb0 <configPLL+0x174>
		FLASH -> ACR |= (0x3 << FLASH_ACR_LATENCY_Pos); // Configurando 3 WS
 8006ea2:	4b12      	ldr	r3, [pc, #72]	; (8006eec <configPLL+0x1b0>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a11      	ldr	r2, [pc, #68]	; (8006eec <configPLL+0x1b0>)
 8006ea8:	f043 0303 	orr.w	r3, r3, #3
 8006eac:	6013      	str	r3, [r2, #0]
 8006eae:	e005      	b.n	8006ebc <configPLL+0x180>
	else // Default State: (64 <= freqPLL && freqPLL <= 90)
		FLASH -> ACR |= (0x2 << FLASH_ACR_LATENCY_Pos); // Configurando 2 WS
 8006eb0:	4b0e      	ldr	r3, [pc, #56]	; (8006eec <configPLL+0x1b0>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a0d      	ldr	r2, [pc, #52]	; (8006eec <configPLL+0x1b0>)
 8006eb6:	f043 0302 	orr.w	r3, r3, #2
 8006eba:	6013      	str	r3, [r2, #0]

	//  Ahora falta hacer el cambio del sistema a que funcione en la nueva frecuencia
	RCC->CFGR &= ~RCC_CFGR_SW_1;  // Borramos la posicion
 8006ebc:	4b09      	ldr	r3, [pc, #36]	; (8006ee4 <configPLL+0x1a8>)
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	4a08      	ldr	r2, [pc, #32]	; (8006ee4 <configPLL+0x1a8>)
 8006ec2:	f023 0302 	bic.w	r3, r3, #2
 8006ec6:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_1;   // PLL como reloj principal
 8006ec8:	4b06      	ldr	r3, [pc, #24]	; (8006ee4 <configPLL+0x1a8>)
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	4a05      	ldr	r2, [pc, #20]	; (8006ee4 <configPLL+0x1a8>)
 8006ece:	f043 0302 	orr.w	r3, r3, #2
 8006ed2:	6093      	str	r3, [r2, #8]

	return 1;
 8006ed4:	2301      	movs	r3, #1
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	370c      	adds	r7, #12
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr
 8006ee2:	bf00      	nop
 8006ee4:	40023800 	.word	0x40023800
 8006ee8:	40007000 	.word	0x40007000
 8006eec:	40023c00 	.word	0x40023c00

08006ef0 <USART1Rx_Callback>:

	/* 5. Volvemos a activar las interrupciones del sistema */
	__enable_irq();
}

__attribute__((weak)) void USART1Rx_Callback(void) {
 8006ef0:	b480      	push	{r7}
 8006ef2:	af00      	add	r7, sp, #0
	/* NOTE : This function should not be modified, when the callback is needed,
	 the USART1_Callback could be implemented in the main file
	 */
	__NOP();
 8006ef4:	bf00      	nop
}
 8006ef6:	bf00      	nop
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <USART1Tx_Char>:

/*
 * Se crean este par de funciones en cada usart para el envio de datos
 * donde se utilizan las interrupciones.
 */
void USART1Tx_Char(void) {
 8006f00:	b480      	push	{r7}
 8006f02:	af00      	add	r7, sp, #0
	USART1->DR = dataToSend1;
 8006f04:	4b07      	ldr	r3, [pc, #28]	; (8006f24 <USART1Tx_Char+0x24>)
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	4b07      	ldr	r3, [pc, #28]	; (8006f28 <USART1Tx_Char+0x28>)
 8006f0a:	605a      	str	r2, [r3, #4]
	USART1->CR1 &= ~(USART_CR1_TXEIE);
 8006f0c:	4b06      	ldr	r3, [pc, #24]	; (8006f28 <USART1Tx_Char+0x28>)
 8006f0e:	68db      	ldr	r3, [r3, #12]
 8006f10:	4a05      	ldr	r2, [pc, #20]	; (8006f28 <USART1Tx_Char+0x28>)
 8006f12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f16:	60d3      	str	r3, [r2, #12]

}
 8006f18:	bf00      	nop
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr
 8006f22:	bf00      	nop
 8006f24:	200138e4 	.word	0x200138e4
 8006f28:	40011000 	.word	0x40011000

08006f2c <USART1Tx_String>:

void USART1Tx_String(void) {
 8006f2c:	b480      	push	{r7}
 8006f2e:	b083      	sub	sp, #12
 8006f30:	af00      	add	r7, sp, #0
	char auxData = stringToSend1[posicionActual1];
 8006f32:	4b12      	ldr	r3, [pc, #72]	; (8006f7c <USART1Tx_String+0x50>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a12      	ldr	r2, [pc, #72]	; (8006f80 <USART1Tx_String+0x54>)
 8006f38:	6812      	ldr	r2, [r2, #0]
 8006f3a:	4413      	add	r3, r2
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	71fb      	strb	r3, [r7, #7]
	if (auxData != 0) {
 8006f40:	79fb      	ldrb	r3, [r7, #7]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d008      	beq.n	8006f58 <USART1Tx_String+0x2c>
		USART1->DR = auxData;
 8006f46:	4a0f      	ldr	r2, [pc, #60]	; (8006f84 <USART1Tx_String+0x58>)
 8006f48:	79fb      	ldrb	r3, [r7, #7]
 8006f4a:	6053      	str	r3, [r2, #4]
		posicionActual1++;
 8006f4c:	4b0c      	ldr	r3, [pc, #48]	; (8006f80 <USART1Tx_String+0x54>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	3301      	adds	r3, #1
 8006f52:	4a0b      	ldr	r2, [pc, #44]	; (8006f80 <USART1Tx_String+0x54>)
 8006f54:	6013      	str	r3, [r2, #0]
		USART1->CR1 &= ~(USART_CR1_TXEIE);
		posicionActual6 = 0;
		flagNewData = 0;
	}

}
 8006f56:	e00b      	b.n	8006f70 <USART1Tx_String+0x44>
		USART1->CR1 &= ~(USART_CR1_TXEIE);
 8006f58:	4b0a      	ldr	r3, [pc, #40]	; (8006f84 <USART1Tx_String+0x58>)
 8006f5a:	68db      	ldr	r3, [r3, #12]
 8006f5c:	4a09      	ldr	r2, [pc, #36]	; (8006f84 <USART1Tx_String+0x58>)
 8006f5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f62:	60d3      	str	r3, [r2, #12]
		posicionActual6 = 0;
 8006f64:	4b08      	ldr	r3, [pc, #32]	; (8006f88 <USART1Tx_String+0x5c>)
 8006f66:	2200      	movs	r2, #0
 8006f68:	601a      	str	r2, [r3, #0]
		flagNewData = 0;
 8006f6a:	4b08      	ldr	r3, [pc, #32]	; (8006f8c <USART1Tx_String+0x60>)
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	701a      	strb	r2, [r3, #0]
}
 8006f70:	bf00      	nop
 8006f72:	370c      	adds	r7, #12
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr
 8006f7c:	200138e8 	.word	0x200138e8
 8006f80:	200138f0 	.word	0x200138f0
 8006f84:	40011000 	.word	0x40011000
 8006f88:	20013900 	.word	0x20013900
 8006f8c:	200138e0 	.word	0x200138e0

08006f90 <USART6Rx_Callback>:
		posicionActual2 = 0;
		flagNewData = 0;
	}

}
__attribute__((weak)) void USART6Rx_Callback(void) {
 8006f90:	b480      	push	{r7}
 8006f92:	af00      	add	r7, sp, #0
	/* NOTE : This function should not be modified, when the callback is needed,
	 the USART1_Callback could be implemented in the main file
	 */
	__NOP();
 8006f94:	bf00      	nop
}
 8006f96:	bf00      	nop
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr

08006fa0 <USART6Tx_Char>:
/*
 * Se crean este par de funciones en cada usart para el envio de datos
 * donde se utilizan las interrupciones.
 */
void USART6Tx_Char(void) {
 8006fa0:	b480      	push	{r7}
 8006fa2:	af00      	add	r7, sp, #0
	USART6->DR = dataToSend6;
 8006fa4:	4b07      	ldr	r3, [pc, #28]	; (8006fc4 <USART6Tx_Char+0x24>)
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	4b07      	ldr	r3, [pc, #28]	; (8006fc8 <USART6Tx_Char+0x28>)
 8006faa:	605a      	str	r2, [r3, #4]
	USART6->CR1 &= ~(USART_CR1_TXEIE);
 8006fac:	4b06      	ldr	r3, [pc, #24]	; (8006fc8 <USART6Tx_Char+0x28>)
 8006fae:	68db      	ldr	r3, [r3, #12]
 8006fb0:	4a05      	ldr	r2, [pc, #20]	; (8006fc8 <USART6Tx_Char+0x28>)
 8006fb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fb6:	60d3      	str	r3, [r2, #12]

}
 8006fb8:	bf00      	nop
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr
 8006fc2:	bf00      	nop
 8006fc4:	200138f4 	.word	0x200138f4
 8006fc8:	40011400 	.word	0x40011400

08006fcc <USART6Tx_String>:

void USART6Tx_String(void) {
 8006fcc:	b480      	push	{r7}
 8006fce:	b083      	sub	sp, #12
 8006fd0:	af00      	add	r7, sp, #0
	char auxData = stringToSend6[posicionActual6];//se apagan las interrupciones por transmision
 8006fd2:	4b12      	ldr	r3, [pc, #72]	; (800701c <USART6Tx_String+0x50>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a12      	ldr	r2, [pc, #72]	; (8007020 <USART6Tx_String+0x54>)
 8006fd8:	6812      	ldr	r2, [r2, #0]
 8006fda:	4413      	add	r3, r2
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	71fb      	strb	r3, [r7, #7]
	if (auxData != 0) {
 8006fe0:	79fb      	ldrb	r3, [r7, #7]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d008      	beq.n	8006ff8 <USART6Tx_String+0x2c>
		USART6->DR = auxData;
 8006fe6:	4a0f      	ldr	r2, [pc, #60]	; (8007024 <USART6Tx_String+0x58>)
 8006fe8:	79fb      	ldrb	r3, [r7, #7]
 8006fea:	6053      	str	r3, [r2, #4]
		posicionActual6++;
 8006fec:	4b0c      	ldr	r3, [pc, #48]	; (8007020 <USART6Tx_String+0x54>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	3301      	adds	r3, #1
 8006ff2:	4a0b      	ldr	r2, [pc, #44]	; (8007020 <USART6Tx_String+0x54>)
 8006ff4:	6013      	str	r3, [r2, #0]
		USART6->CR1 &= ~(USART_CR1_TXEIE); //se apagan las interrupciones por transmision
		posicionActual6 = 0; //Se reinicia el contador global
		flagNewData = 0;	//Se permite el ingreso de nueva data.
	}

}
 8006ff6:	e00b      	b.n	8007010 <USART6Tx_String+0x44>
		USART6->CR1 &= ~(USART_CR1_TXEIE); //se apagan las interrupciones por transmision
 8006ff8:	4b0a      	ldr	r3, [pc, #40]	; (8007024 <USART6Tx_String+0x58>)
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	4a09      	ldr	r2, [pc, #36]	; (8007024 <USART6Tx_String+0x58>)
 8006ffe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007002:	60d3      	str	r3, [r2, #12]
		posicionActual6 = 0; //Se reinicia el contador global
 8007004:	4b06      	ldr	r3, [pc, #24]	; (8007020 <USART6Tx_String+0x54>)
 8007006:	2200      	movs	r2, #0
 8007008:	601a      	str	r2, [r3, #0]
		flagNewData = 0;	//Se permite el ingreso de nueva data.
 800700a:	4b07      	ldr	r3, [pc, #28]	; (8007028 <USART6Tx_String+0x5c>)
 800700c:	2200      	movs	r2, #0
 800700e:	701a      	strb	r2, [r3, #0]
}
 8007010:	bf00      	nop
 8007012:	370c      	adds	r7, #12
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr
 800701c:	200138f8 	.word	0x200138f8
 8007020:	20013900 	.word	0x20013900
 8007024:	40011400 	.word	0x40011400
 8007028:	200138e0 	.word	0x200138e0

0800702c <USART1_IRQHandler>:
 * el sistema inmediatamente salta a este lugar en la memoria
 *
 * Además de esto ahora se agrega una parte donde se verifica si la interrupcion es de transmisión
 * donde se envia a la función correspondiente para que se haga el envio
 */
void USART1_IRQHandler(void) {
 800702c:	b580      	push	{r7, lr}
 800702e:	af00      	add	r7, sp, #0
	if (USART1->SR & USART_SR_RXNE) {
 8007030:	4b16      	ldr	r3, [pc, #88]	; (800708c <USART1_IRQHandler+0x60>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f003 0320 	and.w	r3, r3, #32
 8007038:	2b00      	cmp	r3, #0
 800703a:	d00d      	beq.n	8007058 <USART1_IRQHandler+0x2c>
		/* Limpiamos la bandera que indica que la interrupción se ha generado */
		USART1->SR &= ~USART_SR_RXNE;
 800703c:	4b13      	ldr	r3, [pc, #76]	; (800708c <USART1_IRQHandler+0x60>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a12      	ldr	r2, [pc, #72]	; (800708c <USART1_IRQHandler+0x60>)
 8007042:	f023 0320 	bic.w	r3, r3, #32
 8007046:	6013      	str	r3, [r2, #0]
		//Auxiliar
		auxRxData = (uint8_t) USART1->DR;
 8007048:	4b10      	ldr	r3, [pc, #64]	; (800708c <USART1_IRQHandler+0x60>)
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	b2da      	uxtb	r2, r3
 800704e:	4b10      	ldr	r3, [pc, #64]	; (8007090 <USART1_IRQHandler+0x64>)
 8007050:	701a      	strb	r2, [r3, #0]

		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		USART1Rx_Callback();
 8007052:	f7ff ff4d 	bl	8006ef0 <USART1Rx_Callback>
			USART1Tx_String();
		}

	}

}
 8007056:	e017      	b.n	8007088 <USART1_IRQHandler+0x5c>
	else if (USART1->SR & USART_SR_TXE) {
 8007058:	4b0c      	ldr	r3, [pc, #48]	; (800708c <USART1_IRQHandler+0x60>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007060:	2b00      	cmp	r3, #0
 8007062:	d011      	beq.n	8007088 <USART1_IRQHandler+0x5c>
		USART1->SR &= ~USART_SR_TXE;
 8007064:	4b09      	ldr	r3, [pc, #36]	; (800708c <USART1_IRQHandler+0x60>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a08      	ldr	r2, [pc, #32]	; (800708c <USART1_IRQHandler+0x60>)
 800706a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800706e:	6013      	str	r3, [r2, #0]
		if (tipo1 == 0) {
 8007070:	4b08      	ldr	r3, [pc, #32]	; (8007094 <USART1_IRQHandler+0x68>)
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	f083 0301 	eor.w	r3, r3, #1
 8007078:	b2db      	uxtb	r3, r3
 800707a:	2b00      	cmp	r3, #0
 800707c:	d002      	beq.n	8007084 <USART1_IRQHandler+0x58>
			USART1Tx_Char();
 800707e:	f7ff ff3f 	bl	8006f00 <USART1Tx_Char>
}
 8007082:	e001      	b.n	8007088 <USART1_IRQHandler+0x5c>
			USART1Tx_String();
 8007084:	f7ff ff52 	bl	8006f2c <USART1Tx_String>
}
 8007088:	bf00      	nop
 800708a:	bd80      	pop	{r7, pc}
 800708c:	40011000 	.word	0x40011000
 8007090:	200138df 	.word	0x200138df
 8007094:	200138ec 	.word	0x200138ec

08007098 <USART6_IRQHandler>:

	}

}

void USART6_IRQHandler(void) {
 8007098:	b580      	push	{r7, lr}
 800709a:	af00      	add	r7, sp, #0
	if (USART6->SR & USART_SR_RXNE) {
 800709c:	4b16      	ldr	r3, [pc, #88]	; (80070f8 <USART6_IRQHandler+0x60>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f003 0320 	and.w	r3, r3, #32
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d00d      	beq.n	80070c4 <USART6_IRQHandler+0x2c>
		/* Limpiamos la bandera que indica que la interrupción se ha generado */
		USART6->SR &= ~USART_SR_RXNE;
 80070a8:	4b13      	ldr	r3, [pc, #76]	; (80070f8 <USART6_IRQHandler+0x60>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a12      	ldr	r2, [pc, #72]	; (80070f8 <USART6_IRQHandler+0x60>)
 80070ae:	f023 0320 	bic.w	r3, r3, #32
 80070b2:	6013      	str	r3, [r2, #0]
		//Auxiliar
		auxRxData = (uint8_t) USART6->DR;
 80070b4:	4b10      	ldr	r3, [pc, #64]	; (80070f8 <USART6_IRQHandler+0x60>)
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	b2da      	uxtb	r2, r3
 80070ba:	4b10      	ldr	r3, [pc, #64]	; (80070fc <USART6_IRQHandler+0x64>)
 80070bc:	701a      	strb	r2, [r3, #0]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		USART6Rx_Callback();
 80070be:	f7ff ff67 	bl	8006f90 <USART6Rx_Callback>
			USART6Tx_String();
		}

	}

}
 80070c2:	e017      	b.n	80070f4 <USART6_IRQHandler+0x5c>
	else if (USART6->SR & USART_SR_TXE) {
 80070c4:	4b0c      	ldr	r3, [pc, #48]	; (80070f8 <USART6_IRQHandler+0x60>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d011      	beq.n	80070f4 <USART6_IRQHandler+0x5c>
		USART6->SR &= ~USART_SR_TXE;
 80070d0:	4b09      	ldr	r3, [pc, #36]	; (80070f8 <USART6_IRQHandler+0x60>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a08      	ldr	r2, [pc, #32]	; (80070f8 <USART6_IRQHandler+0x60>)
 80070d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070da:	6013      	str	r3, [r2, #0]
		if (tipo6 == 0) {
 80070dc:	4b08      	ldr	r3, [pc, #32]	; (8007100 <USART6_IRQHandler+0x68>)
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	f083 0301 	eor.w	r3, r3, #1
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d002      	beq.n	80070f0 <USART6_IRQHandler+0x58>
			USART6Tx_Char();
 80070ea:	f7ff ff59 	bl	8006fa0 <USART6Tx_Char>
}
 80070ee:	e001      	b.n	80070f4 <USART6_IRQHandler+0x5c>
			USART6Tx_String();
 80070f0:	f7ff ff6c 	bl	8006fcc <USART6Tx_String>
}
 80070f4:	bf00      	nop
 80070f6:	bd80      	pop	{r7, pc}
 80070f8:	40011400 	.word	0x40011400
 80070fc:	200138df 	.word	0x200138df
 8007100:	200138fc 	.word	0x200138fc

08007104 <__libc_init_array>:
 8007104:	b570      	push	{r4, r5, r6, lr}
 8007106:	4d0d      	ldr	r5, [pc, #52]	; (800713c <__libc_init_array+0x38>)
 8007108:	4c0d      	ldr	r4, [pc, #52]	; (8007140 <__libc_init_array+0x3c>)
 800710a:	1b64      	subs	r4, r4, r5
 800710c:	10a4      	asrs	r4, r4, #2
 800710e:	2600      	movs	r6, #0
 8007110:	42a6      	cmp	r6, r4
 8007112:	d109      	bne.n	8007128 <__libc_init_array+0x24>
 8007114:	4d0b      	ldr	r5, [pc, #44]	; (8007144 <__libc_init_array+0x40>)
 8007116:	4c0c      	ldr	r4, [pc, #48]	; (8007148 <__libc_init_array+0x44>)
 8007118:	f000 fd38 	bl	8007b8c <_init>
 800711c:	1b64      	subs	r4, r4, r5
 800711e:	10a4      	asrs	r4, r4, #2
 8007120:	2600      	movs	r6, #0
 8007122:	42a6      	cmp	r6, r4
 8007124:	d105      	bne.n	8007132 <__libc_init_array+0x2e>
 8007126:	bd70      	pop	{r4, r5, r6, pc}
 8007128:	f855 3b04 	ldr.w	r3, [r5], #4
 800712c:	4798      	blx	r3
 800712e:	3601      	adds	r6, #1
 8007130:	e7ee      	b.n	8007110 <__libc_init_array+0xc>
 8007132:	f855 3b04 	ldr.w	r3, [r5], #4
 8007136:	4798      	blx	r3
 8007138:	3601      	adds	r6, #1
 800713a:	e7f2      	b.n	8007122 <__libc_init_array+0x1e>
 800713c:	08007d1c 	.word	0x08007d1c
 8007140:	08007d1c 	.word	0x08007d1c
 8007144:	08007d1c 	.word	0x08007d1c
 8007148:	08007d20 	.word	0x08007d20

0800714c <memcmp>:
 800714c:	b510      	push	{r4, lr}
 800714e:	3901      	subs	r1, #1
 8007150:	4402      	add	r2, r0
 8007152:	4290      	cmp	r0, r2
 8007154:	d101      	bne.n	800715a <memcmp+0xe>
 8007156:	2000      	movs	r0, #0
 8007158:	e005      	b.n	8007166 <memcmp+0x1a>
 800715a:	7803      	ldrb	r3, [r0, #0]
 800715c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007160:	42a3      	cmp	r3, r4
 8007162:	d001      	beq.n	8007168 <memcmp+0x1c>
 8007164:	1b18      	subs	r0, r3, r4
 8007166:	bd10      	pop	{r4, pc}
 8007168:	3001      	adds	r0, #1
 800716a:	e7f2      	b.n	8007152 <memcmp+0x6>

0800716c <memcpy>:
 800716c:	440a      	add	r2, r1
 800716e:	4291      	cmp	r1, r2
 8007170:	f100 33ff 	add.w	r3, r0, #4294967295
 8007174:	d100      	bne.n	8007178 <memcpy+0xc>
 8007176:	4770      	bx	lr
 8007178:	b510      	push	{r4, lr}
 800717a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800717e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007182:	4291      	cmp	r1, r2
 8007184:	d1f9      	bne.n	800717a <memcpy+0xe>
 8007186:	bd10      	pop	{r4, pc}

08007188 <memset>:
 8007188:	4402      	add	r2, r0
 800718a:	4603      	mov	r3, r0
 800718c:	4293      	cmp	r3, r2
 800718e:	d100      	bne.n	8007192 <memset+0xa>
 8007190:	4770      	bx	lr
 8007192:	f803 1b01 	strb.w	r1, [r3], #1
 8007196:	e7f9      	b.n	800718c <memset+0x4>

08007198 <_puts_r>:
 8007198:	b570      	push	{r4, r5, r6, lr}
 800719a:	460e      	mov	r6, r1
 800719c:	4605      	mov	r5, r0
 800719e:	b118      	cbz	r0, 80071a8 <_puts_r+0x10>
 80071a0:	6983      	ldr	r3, [r0, #24]
 80071a2:	b90b      	cbnz	r3, 80071a8 <_puts_r+0x10>
 80071a4:	f000 fa48 	bl	8007638 <__sinit>
 80071a8:	69ab      	ldr	r3, [r5, #24]
 80071aa:	68ac      	ldr	r4, [r5, #8]
 80071ac:	b913      	cbnz	r3, 80071b4 <_puts_r+0x1c>
 80071ae:	4628      	mov	r0, r5
 80071b0:	f000 fa42 	bl	8007638 <__sinit>
 80071b4:	4b2c      	ldr	r3, [pc, #176]	; (8007268 <_puts_r+0xd0>)
 80071b6:	429c      	cmp	r4, r3
 80071b8:	d120      	bne.n	80071fc <_puts_r+0x64>
 80071ba:	686c      	ldr	r4, [r5, #4]
 80071bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80071be:	07db      	lsls	r3, r3, #31
 80071c0:	d405      	bmi.n	80071ce <_puts_r+0x36>
 80071c2:	89a3      	ldrh	r3, [r4, #12]
 80071c4:	0598      	lsls	r0, r3, #22
 80071c6:	d402      	bmi.n	80071ce <_puts_r+0x36>
 80071c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071ca:	f000 fad3 	bl	8007774 <__retarget_lock_acquire_recursive>
 80071ce:	89a3      	ldrh	r3, [r4, #12]
 80071d0:	0719      	lsls	r1, r3, #28
 80071d2:	d51d      	bpl.n	8007210 <_puts_r+0x78>
 80071d4:	6923      	ldr	r3, [r4, #16]
 80071d6:	b1db      	cbz	r3, 8007210 <_puts_r+0x78>
 80071d8:	3e01      	subs	r6, #1
 80071da:	68a3      	ldr	r3, [r4, #8]
 80071dc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80071e0:	3b01      	subs	r3, #1
 80071e2:	60a3      	str	r3, [r4, #8]
 80071e4:	bb39      	cbnz	r1, 8007236 <_puts_r+0x9e>
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	da38      	bge.n	800725c <_puts_r+0xc4>
 80071ea:	4622      	mov	r2, r4
 80071ec:	210a      	movs	r1, #10
 80071ee:	4628      	mov	r0, r5
 80071f0:	f000 f848 	bl	8007284 <__swbuf_r>
 80071f4:	3001      	adds	r0, #1
 80071f6:	d011      	beq.n	800721c <_puts_r+0x84>
 80071f8:	250a      	movs	r5, #10
 80071fa:	e011      	b.n	8007220 <_puts_r+0x88>
 80071fc:	4b1b      	ldr	r3, [pc, #108]	; (800726c <_puts_r+0xd4>)
 80071fe:	429c      	cmp	r4, r3
 8007200:	d101      	bne.n	8007206 <_puts_r+0x6e>
 8007202:	68ac      	ldr	r4, [r5, #8]
 8007204:	e7da      	b.n	80071bc <_puts_r+0x24>
 8007206:	4b1a      	ldr	r3, [pc, #104]	; (8007270 <_puts_r+0xd8>)
 8007208:	429c      	cmp	r4, r3
 800720a:	bf08      	it	eq
 800720c:	68ec      	ldreq	r4, [r5, #12]
 800720e:	e7d5      	b.n	80071bc <_puts_r+0x24>
 8007210:	4621      	mov	r1, r4
 8007212:	4628      	mov	r0, r5
 8007214:	f000 f888 	bl	8007328 <__swsetup_r>
 8007218:	2800      	cmp	r0, #0
 800721a:	d0dd      	beq.n	80071d8 <_puts_r+0x40>
 800721c:	f04f 35ff 	mov.w	r5, #4294967295
 8007220:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007222:	07da      	lsls	r2, r3, #31
 8007224:	d405      	bmi.n	8007232 <_puts_r+0x9a>
 8007226:	89a3      	ldrh	r3, [r4, #12]
 8007228:	059b      	lsls	r3, r3, #22
 800722a:	d402      	bmi.n	8007232 <_puts_r+0x9a>
 800722c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800722e:	f000 faa2 	bl	8007776 <__retarget_lock_release_recursive>
 8007232:	4628      	mov	r0, r5
 8007234:	bd70      	pop	{r4, r5, r6, pc}
 8007236:	2b00      	cmp	r3, #0
 8007238:	da04      	bge.n	8007244 <_puts_r+0xac>
 800723a:	69a2      	ldr	r2, [r4, #24]
 800723c:	429a      	cmp	r2, r3
 800723e:	dc06      	bgt.n	800724e <_puts_r+0xb6>
 8007240:	290a      	cmp	r1, #10
 8007242:	d004      	beq.n	800724e <_puts_r+0xb6>
 8007244:	6823      	ldr	r3, [r4, #0]
 8007246:	1c5a      	adds	r2, r3, #1
 8007248:	6022      	str	r2, [r4, #0]
 800724a:	7019      	strb	r1, [r3, #0]
 800724c:	e7c5      	b.n	80071da <_puts_r+0x42>
 800724e:	4622      	mov	r2, r4
 8007250:	4628      	mov	r0, r5
 8007252:	f000 f817 	bl	8007284 <__swbuf_r>
 8007256:	3001      	adds	r0, #1
 8007258:	d1bf      	bne.n	80071da <_puts_r+0x42>
 800725a:	e7df      	b.n	800721c <_puts_r+0x84>
 800725c:	6823      	ldr	r3, [r4, #0]
 800725e:	250a      	movs	r5, #10
 8007260:	1c5a      	adds	r2, r3, #1
 8007262:	6022      	str	r2, [r4, #0]
 8007264:	701d      	strb	r5, [r3, #0]
 8007266:	e7db      	b.n	8007220 <_puts_r+0x88>
 8007268:	08007cdc 	.word	0x08007cdc
 800726c:	08007cfc 	.word	0x08007cfc
 8007270:	08007cbc 	.word	0x08007cbc

08007274 <puts>:
 8007274:	4b02      	ldr	r3, [pc, #8]	; (8007280 <puts+0xc>)
 8007276:	4601      	mov	r1, r0
 8007278:	6818      	ldr	r0, [r3, #0]
 800727a:	f7ff bf8d 	b.w	8007198 <_puts_r>
 800727e:	bf00      	nop
 8007280:	20000014 	.word	0x20000014

08007284 <__swbuf_r>:
 8007284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007286:	460e      	mov	r6, r1
 8007288:	4614      	mov	r4, r2
 800728a:	4605      	mov	r5, r0
 800728c:	b118      	cbz	r0, 8007296 <__swbuf_r+0x12>
 800728e:	6983      	ldr	r3, [r0, #24]
 8007290:	b90b      	cbnz	r3, 8007296 <__swbuf_r+0x12>
 8007292:	f000 f9d1 	bl	8007638 <__sinit>
 8007296:	4b21      	ldr	r3, [pc, #132]	; (800731c <__swbuf_r+0x98>)
 8007298:	429c      	cmp	r4, r3
 800729a:	d12b      	bne.n	80072f4 <__swbuf_r+0x70>
 800729c:	686c      	ldr	r4, [r5, #4]
 800729e:	69a3      	ldr	r3, [r4, #24]
 80072a0:	60a3      	str	r3, [r4, #8]
 80072a2:	89a3      	ldrh	r3, [r4, #12]
 80072a4:	071a      	lsls	r2, r3, #28
 80072a6:	d52f      	bpl.n	8007308 <__swbuf_r+0x84>
 80072a8:	6923      	ldr	r3, [r4, #16]
 80072aa:	b36b      	cbz	r3, 8007308 <__swbuf_r+0x84>
 80072ac:	6923      	ldr	r3, [r4, #16]
 80072ae:	6820      	ldr	r0, [r4, #0]
 80072b0:	1ac0      	subs	r0, r0, r3
 80072b2:	6963      	ldr	r3, [r4, #20]
 80072b4:	b2f6      	uxtb	r6, r6
 80072b6:	4283      	cmp	r3, r0
 80072b8:	4637      	mov	r7, r6
 80072ba:	dc04      	bgt.n	80072c6 <__swbuf_r+0x42>
 80072bc:	4621      	mov	r1, r4
 80072be:	4628      	mov	r0, r5
 80072c0:	f000 f926 	bl	8007510 <_fflush_r>
 80072c4:	bb30      	cbnz	r0, 8007314 <__swbuf_r+0x90>
 80072c6:	68a3      	ldr	r3, [r4, #8]
 80072c8:	3b01      	subs	r3, #1
 80072ca:	60a3      	str	r3, [r4, #8]
 80072cc:	6823      	ldr	r3, [r4, #0]
 80072ce:	1c5a      	adds	r2, r3, #1
 80072d0:	6022      	str	r2, [r4, #0]
 80072d2:	701e      	strb	r6, [r3, #0]
 80072d4:	6963      	ldr	r3, [r4, #20]
 80072d6:	3001      	adds	r0, #1
 80072d8:	4283      	cmp	r3, r0
 80072da:	d004      	beq.n	80072e6 <__swbuf_r+0x62>
 80072dc:	89a3      	ldrh	r3, [r4, #12]
 80072de:	07db      	lsls	r3, r3, #31
 80072e0:	d506      	bpl.n	80072f0 <__swbuf_r+0x6c>
 80072e2:	2e0a      	cmp	r6, #10
 80072e4:	d104      	bne.n	80072f0 <__swbuf_r+0x6c>
 80072e6:	4621      	mov	r1, r4
 80072e8:	4628      	mov	r0, r5
 80072ea:	f000 f911 	bl	8007510 <_fflush_r>
 80072ee:	b988      	cbnz	r0, 8007314 <__swbuf_r+0x90>
 80072f0:	4638      	mov	r0, r7
 80072f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072f4:	4b0a      	ldr	r3, [pc, #40]	; (8007320 <__swbuf_r+0x9c>)
 80072f6:	429c      	cmp	r4, r3
 80072f8:	d101      	bne.n	80072fe <__swbuf_r+0x7a>
 80072fa:	68ac      	ldr	r4, [r5, #8]
 80072fc:	e7cf      	b.n	800729e <__swbuf_r+0x1a>
 80072fe:	4b09      	ldr	r3, [pc, #36]	; (8007324 <__swbuf_r+0xa0>)
 8007300:	429c      	cmp	r4, r3
 8007302:	bf08      	it	eq
 8007304:	68ec      	ldreq	r4, [r5, #12]
 8007306:	e7ca      	b.n	800729e <__swbuf_r+0x1a>
 8007308:	4621      	mov	r1, r4
 800730a:	4628      	mov	r0, r5
 800730c:	f000 f80c 	bl	8007328 <__swsetup_r>
 8007310:	2800      	cmp	r0, #0
 8007312:	d0cb      	beq.n	80072ac <__swbuf_r+0x28>
 8007314:	f04f 37ff 	mov.w	r7, #4294967295
 8007318:	e7ea      	b.n	80072f0 <__swbuf_r+0x6c>
 800731a:	bf00      	nop
 800731c:	08007cdc 	.word	0x08007cdc
 8007320:	08007cfc 	.word	0x08007cfc
 8007324:	08007cbc 	.word	0x08007cbc

08007328 <__swsetup_r>:
 8007328:	4b32      	ldr	r3, [pc, #200]	; (80073f4 <__swsetup_r+0xcc>)
 800732a:	b570      	push	{r4, r5, r6, lr}
 800732c:	681d      	ldr	r5, [r3, #0]
 800732e:	4606      	mov	r6, r0
 8007330:	460c      	mov	r4, r1
 8007332:	b125      	cbz	r5, 800733e <__swsetup_r+0x16>
 8007334:	69ab      	ldr	r3, [r5, #24]
 8007336:	b913      	cbnz	r3, 800733e <__swsetup_r+0x16>
 8007338:	4628      	mov	r0, r5
 800733a:	f000 f97d 	bl	8007638 <__sinit>
 800733e:	4b2e      	ldr	r3, [pc, #184]	; (80073f8 <__swsetup_r+0xd0>)
 8007340:	429c      	cmp	r4, r3
 8007342:	d10f      	bne.n	8007364 <__swsetup_r+0x3c>
 8007344:	686c      	ldr	r4, [r5, #4]
 8007346:	89a3      	ldrh	r3, [r4, #12]
 8007348:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800734c:	0719      	lsls	r1, r3, #28
 800734e:	d42c      	bmi.n	80073aa <__swsetup_r+0x82>
 8007350:	06dd      	lsls	r5, r3, #27
 8007352:	d411      	bmi.n	8007378 <__swsetup_r+0x50>
 8007354:	2309      	movs	r3, #9
 8007356:	6033      	str	r3, [r6, #0]
 8007358:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800735c:	81a3      	strh	r3, [r4, #12]
 800735e:	f04f 30ff 	mov.w	r0, #4294967295
 8007362:	e03e      	b.n	80073e2 <__swsetup_r+0xba>
 8007364:	4b25      	ldr	r3, [pc, #148]	; (80073fc <__swsetup_r+0xd4>)
 8007366:	429c      	cmp	r4, r3
 8007368:	d101      	bne.n	800736e <__swsetup_r+0x46>
 800736a:	68ac      	ldr	r4, [r5, #8]
 800736c:	e7eb      	b.n	8007346 <__swsetup_r+0x1e>
 800736e:	4b24      	ldr	r3, [pc, #144]	; (8007400 <__swsetup_r+0xd8>)
 8007370:	429c      	cmp	r4, r3
 8007372:	bf08      	it	eq
 8007374:	68ec      	ldreq	r4, [r5, #12]
 8007376:	e7e6      	b.n	8007346 <__swsetup_r+0x1e>
 8007378:	0758      	lsls	r0, r3, #29
 800737a:	d512      	bpl.n	80073a2 <__swsetup_r+0x7a>
 800737c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800737e:	b141      	cbz	r1, 8007392 <__swsetup_r+0x6a>
 8007380:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007384:	4299      	cmp	r1, r3
 8007386:	d002      	beq.n	800738e <__swsetup_r+0x66>
 8007388:	4630      	mov	r0, r6
 800738a:	f000 fa5b 	bl	8007844 <_free_r>
 800738e:	2300      	movs	r3, #0
 8007390:	6363      	str	r3, [r4, #52]	; 0x34
 8007392:	89a3      	ldrh	r3, [r4, #12]
 8007394:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007398:	81a3      	strh	r3, [r4, #12]
 800739a:	2300      	movs	r3, #0
 800739c:	6063      	str	r3, [r4, #4]
 800739e:	6923      	ldr	r3, [r4, #16]
 80073a0:	6023      	str	r3, [r4, #0]
 80073a2:	89a3      	ldrh	r3, [r4, #12]
 80073a4:	f043 0308 	orr.w	r3, r3, #8
 80073a8:	81a3      	strh	r3, [r4, #12]
 80073aa:	6923      	ldr	r3, [r4, #16]
 80073ac:	b94b      	cbnz	r3, 80073c2 <__swsetup_r+0x9a>
 80073ae:	89a3      	ldrh	r3, [r4, #12]
 80073b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80073b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073b8:	d003      	beq.n	80073c2 <__swsetup_r+0x9a>
 80073ba:	4621      	mov	r1, r4
 80073bc:	4630      	mov	r0, r6
 80073be:	f000 fa01 	bl	80077c4 <__smakebuf_r>
 80073c2:	89a0      	ldrh	r0, [r4, #12]
 80073c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073c8:	f010 0301 	ands.w	r3, r0, #1
 80073cc:	d00a      	beq.n	80073e4 <__swsetup_r+0xbc>
 80073ce:	2300      	movs	r3, #0
 80073d0:	60a3      	str	r3, [r4, #8]
 80073d2:	6963      	ldr	r3, [r4, #20]
 80073d4:	425b      	negs	r3, r3
 80073d6:	61a3      	str	r3, [r4, #24]
 80073d8:	6923      	ldr	r3, [r4, #16]
 80073da:	b943      	cbnz	r3, 80073ee <__swsetup_r+0xc6>
 80073dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80073e0:	d1ba      	bne.n	8007358 <__swsetup_r+0x30>
 80073e2:	bd70      	pop	{r4, r5, r6, pc}
 80073e4:	0781      	lsls	r1, r0, #30
 80073e6:	bf58      	it	pl
 80073e8:	6963      	ldrpl	r3, [r4, #20]
 80073ea:	60a3      	str	r3, [r4, #8]
 80073ec:	e7f4      	b.n	80073d8 <__swsetup_r+0xb0>
 80073ee:	2000      	movs	r0, #0
 80073f0:	e7f7      	b.n	80073e2 <__swsetup_r+0xba>
 80073f2:	bf00      	nop
 80073f4:	20000014 	.word	0x20000014
 80073f8:	08007cdc 	.word	0x08007cdc
 80073fc:	08007cfc 	.word	0x08007cfc
 8007400:	08007cbc 	.word	0x08007cbc

08007404 <__sflush_r>:
 8007404:	898a      	ldrh	r2, [r1, #12]
 8007406:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800740a:	4605      	mov	r5, r0
 800740c:	0710      	lsls	r0, r2, #28
 800740e:	460c      	mov	r4, r1
 8007410:	d458      	bmi.n	80074c4 <__sflush_r+0xc0>
 8007412:	684b      	ldr	r3, [r1, #4]
 8007414:	2b00      	cmp	r3, #0
 8007416:	dc05      	bgt.n	8007424 <__sflush_r+0x20>
 8007418:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800741a:	2b00      	cmp	r3, #0
 800741c:	dc02      	bgt.n	8007424 <__sflush_r+0x20>
 800741e:	2000      	movs	r0, #0
 8007420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007424:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007426:	2e00      	cmp	r6, #0
 8007428:	d0f9      	beq.n	800741e <__sflush_r+0x1a>
 800742a:	2300      	movs	r3, #0
 800742c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007430:	682f      	ldr	r7, [r5, #0]
 8007432:	602b      	str	r3, [r5, #0]
 8007434:	d032      	beq.n	800749c <__sflush_r+0x98>
 8007436:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007438:	89a3      	ldrh	r3, [r4, #12]
 800743a:	075a      	lsls	r2, r3, #29
 800743c:	d505      	bpl.n	800744a <__sflush_r+0x46>
 800743e:	6863      	ldr	r3, [r4, #4]
 8007440:	1ac0      	subs	r0, r0, r3
 8007442:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007444:	b10b      	cbz	r3, 800744a <__sflush_r+0x46>
 8007446:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007448:	1ac0      	subs	r0, r0, r3
 800744a:	2300      	movs	r3, #0
 800744c:	4602      	mov	r2, r0
 800744e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007450:	6a21      	ldr	r1, [r4, #32]
 8007452:	4628      	mov	r0, r5
 8007454:	47b0      	blx	r6
 8007456:	1c43      	adds	r3, r0, #1
 8007458:	89a3      	ldrh	r3, [r4, #12]
 800745a:	d106      	bne.n	800746a <__sflush_r+0x66>
 800745c:	6829      	ldr	r1, [r5, #0]
 800745e:	291d      	cmp	r1, #29
 8007460:	d82c      	bhi.n	80074bc <__sflush_r+0xb8>
 8007462:	4a2a      	ldr	r2, [pc, #168]	; (800750c <__sflush_r+0x108>)
 8007464:	40ca      	lsrs	r2, r1
 8007466:	07d6      	lsls	r6, r2, #31
 8007468:	d528      	bpl.n	80074bc <__sflush_r+0xb8>
 800746a:	2200      	movs	r2, #0
 800746c:	6062      	str	r2, [r4, #4]
 800746e:	04d9      	lsls	r1, r3, #19
 8007470:	6922      	ldr	r2, [r4, #16]
 8007472:	6022      	str	r2, [r4, #0]
 8007474:	d504      	bpl.n	8007480 <__sflush_r+0x7c>
 8007476:	1c42      	adds	r2, r0, #1
 8007478:	d101      	bne.n	800747e <__sflush_r+0x7a>
 800747a:	682b      	ldr	r3, [r5, #0]
 800747c:	b903      	cbnz	r3, 8007480 <__sflush_r+0x7c>
 800747e:	6560      	str	r0, [r4, #84]	; 0x54
 8007480:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007482:	602f      	str	r7, [r5, #0]
 8007484:	2900      	cmp	r1, #0
 8007486:	d0ca      	beq.n	800741e <__sflush_r+0x1a>
 8007488:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800748c:	4299      	cmp	r1, r3
 800748e:	d002      	beq.n	8007496 <__sflush_r+0x92>
 8007490:	4628      	mov	r0, r5
 8007492:	f000 f9d7 	bl	8007844 <_free_r>
 8007496:	2000      	movs	r0, #0
 8007498:	6360      	str	r0, [r4, #52]	; 0x34
 800749a:	e7c1      	b.n	8007420 <__sflush_r+0x1c>
 800749c:	6a21      	ldr	r1, [r4, #32]
 800749e:	2301      	movs	r3, #1
 80074a0:	4628      	mov	r0, r5
 80074a2:	47b0      	blx	r6
 80074a4:	1c41      	adds	r1, r0, #1
 80074a6:	d1c7      	bne.n	8007438 <__sflush_r+0x34>
 80074a8:	682b      	ldr	r3, [r5, #0]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d0c4      	beq.n	8007438 <__sflush_r+0x34>
 80074ae:	2b1d      	cmp	r3, #29
 80074b0:	d001      	beq.n	80074b6 <__sflush_r+0xb2>
 80074b2:	2b16      	cmp	r3, #22
 80074b4:	d101      	bne.n	80074ba <__sflush_r+0xb6>
 80074b6:	602f      	str	r7, [r5, #0]
 80074b8:	e7b1      	b.n	800741e <__sflush_r+0x1a>
 80074ba:	89a3      	ldrh	r3, [r4, #12]
 80074bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074c0:	81a3      	strh	r3, [r4, #12]
 80074c2:	e7ad      	b.n	8007420 <__sflush_r+0x1c>
 80074c4:	690f      	ldr	r7, [r1, #16]
 80074c6:	2f00      	cmp	r7, #0
 80074c8:	d0a9      	beq.n	800741e <__sflush_r+0x1a>
 80074ca:	0793      	lsls	r3, r2, #30
 80074cc:	680e      	ldr	r6, [r1, #0]
 80074ce:	bf08      	it	eq
 80074d0:	694b      	ldreq	r3, [r1, #20]
 80074d2:	600f      	str	r7, [r1, #0]
 80074d4:	bf18      	it	ne
 80074d6:	2300      	movne	r3, #0
 80074d8:	eba6 0807 	sub.w	r8, r6, r7
 80074dc:	608b      	str	r3, [r1, #8]
 80074de:	f1b8 0f00 	cmp.w	r8, #0
 80074e2:	dd9c      	ble.n	800741e <__sflush_r+0x1a>
 80074e4:	6a21      	ldr	r1, [r4, #32]
 80074e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80074e8:	4643      	mov	r3, r8
 80074ea:	463a      	mov	r2, r7
 80074ec:	4628      	mov	r0, r5
 80074ee:	47b0      	blx	r6
 80074f0:	2800      	cmp	r0, #0
 80074f2:	dc06      	bgt.n	8007502 <__sflush_r+0xfe>
 80074f4:	89a3      	ldrh	r3, [r4, #12]
 80074f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074fa:	81a3      	strh	r3, [r4, #12]
 80074fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007500:	e78e      	b.n	8007420 <__sflush_r+0x1c>
 8007502:	4407      	add	r7, r0
 8007504:	eba8 0800 	sub.w	r8, r8, r0
 8007508:	e7e9      	b.n	80074de <__sflush_r+0xda>
 800750a:	bf00      	nop
 800750c:	20400001 	.word	0x20400001

08007510 <_fflush_r>:
 8007510:	b538      	push	{r3, r4, r5, lr}
 8007512:	690b      	ldr	r3, [r1, #16]
 8007514:	4605      	mov	r5, r0
 8007516:	460c      	mov	r4, r1
 8007518:	b913      	cbnz	r3, 8007520 <_fflush_r+0x10>
 800751a:	2500      	movs	r5, #0
 800751c:	4628      	mov	r0, r5
 800751e:	bd38      	pop	{r3, r4, r5, pc}
 8007520:	b118      	cbz	r0, 800752a <_fflush_r+0x1a>
 8007522:	6983      	ldr	r3, [r0, #24]
 8007524:	b90b      	cbnz	r3, 800752a <_fflush_r+0x1a>
 8007526:	f000 f887 	bl	8007638 <__sinit>
 800752a:	4b14      	ldr	r3, [pc, #80]	; (800757c <_fflush_r+0x6c>)
 800752c:	429c      	cmp	r4, r3
 800752e:	d11b      	bne.n	8007568 <_fflush_r+0x58>
 8007530:	686c      	ldr	r4, [r5, #4]
 8007532:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d0ef      	beq.n	800751a <_fflush_r+0xa>
 800753a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800753c:	07d0      	lsls	r0, r2, #31
 800753e:	d404      	bmi.n	800754a <_fflush_r+0x3a>
 8007540:	0599      	lsls	r1, r3, #22
 8007542:	d402      	bmi.n	800754a <_fflush_r+0x3a>
 8007544:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007546:	f000 f915 	bl	8007774 <__retarget_lock_acquire_recursive>
 800754a:	4628      	mov	r0, r5
 800754c:	4621      	mov	r1, r4
 800754e:	f7ff ff59 	bl	8007404 <__sflush_r>
 8007552:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007554:	07da      	lsls	r2, r3, #31
 8007556:	4605      	mov	r5, r0
 8007558:	d4e0      	bmi.n	800751c <_fflush_r+0xc>
 800755a:	89a3      	ldrh	r3, [r4, #12]
 800755c:	059b      	lsls	r3, r3, #22
 800755e:	d4dd      	bmi.n	800751c <_fflush_r+0xc>
 8007560:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007562:	f000 f908 	bl	8007776 <__retarget_lock_release_recursive>
 8007566:	e7d9      	b.n	800751c <_fflush_r+0xc>
 8007568:	4b05      	ldr	r3, [pc, #20]	; (8007580 <_fflush_r+0x70>)
 800756a:	429c      	cmp	r4, r3
 800756c:	d101      	bne.n	8007572 <_fflush_r+0x62>
 800756e:	68ac      	ldr	r4, [r5, #8]
 8007570:	e7df      	b.n	8007532 <_fflush_r+0x22>
 8007572:	4b04      	ldr	r3, [pc, #16]	; (8007584 <_fflush_r+0x74>)
 8007574:	429c      	cmp	r4, r3
 8007576:	bf08      	it	eq
 8007578:	68ec      	ldreq	r4, [r5, #12]
 800757a:	e7da      	b.n	8007532 <_fflush_r+0x22>
 800757c:	08007cdc 	.word	0x08007cdc
 8007580:	08007cfc 	.word	0x08007cfc
 8007584:	08007cbc 	.word	0x08007cbc

08007588 <std>:
 8007588:	2300      	movs	r3, #0
 800758a:	b510      	push	{r4, lr}
 800758c:	4604      	mov	r4, r0
 800758e:	e9c0 3300 	strd	r3, r3, [r0]
 8007592:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007596:	6083      	str	r3, [r0, #8]
 8007598:	8181      	strh	r1, [r0, #12]
 800759a:	6643      	str	r3, [r0, #100]	; 0x64
 800759c:	81c2      	strh	r2, [r0, #14]
 800759e:	6183      	str	r3, [r0, #24]
 80075a0:	4619      	mov	r1, r3
 80075a2:	2208      	movs	r2, #8
 80075a4:	305c      	adds	r0, #92	; 0x5c
 80075a6:	f7ff fdef 	bl	8007188 <memset>
 80075aa:	4b05      	ldr	r3, [pc, #20]	; (80075c0 <std+0x38>)
 80075ac:	6263      	str	r3, [r4, #36]	; 0x24
 80075ae:	4b05      	ldr	r3, [pc, #20]	; (80075c4 <std+0x3c>)
 80075b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80075b2:	4b05      	ldr	r3, [pc, #20]	; (80075c8 <std+0x40>)
 80075b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80075b6:	4b05      	ldr	r3, [pc, #20]	; (80075cc <std+0x44>)
 80075b8:	6224      	str	r4, [r4, #32]
 80075ba:	6323      	str	r3, [r4, #48]	; 0x30
 80075bc:	bd10      	pop	{r4, pc}
 80075be:	bf00      	nop
 80075c0:	08007a25 	.word	0x08007a25
 80075c4:	08007a47 	.word	0x08007a47
 80075c8:	08007a7f 	.word	0x08007a7f
 80075cc:	08007aa3 	.word	0x08007aa3

080075d0 <_cleanup_r>:
 80075d0:	4901      	ldr	r1, [pc, #4]	; (80075d8 <_cleanup_r+0x8>)
 80075d2:	f000 b8af 	b.w	8007734 <_fwalk_reent>
 80075d6:	bf00      	nop
 80075d8:	08007511 	.word	0x08007511

080075dc <__sfmoreglue>:
 80075dc:	b570      	push	{r4, r5, r6, lr}
 80075de:	2268      	movs	r2, #104	; 0x68
 80075e0:	1e4d      	subs	r5, r1, #1
 80075e2:	4355      	muls	r5, r2
 80075e4:	460e      	mov	r6, r1
 80075e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80075ea:	f000 f997 	bl	800791c <_malloc_r>
 80075ee:	4604      	mov	r4, r0
 80075f0:	b140      	cbz	r0, 8007604 <__sfmoreglue+0x28>
 80075f2:	2100      	movs	r1, #0
 80075f4:	e9c0 1600 	strd	r1, r6, [r0]
 80075f8:	300c      	adds	r0, #12
 80075fa:	60a0      	str	r0, [r4, #8]
 80075fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007600:	f7ff fdc2 	bl	8007188 <memset>
 8007604:	4620      	mov	r0, r4
 8007606:	bd70      	pop	{r4, r5, r6, pc}

08007608 <__sfp_lock_acquire>:
 8007608:	4801      	ldr	r0, [pc, #4]	; (8007610 <__sfp_lock_acquire+0x8>)
 800760a:	f000 b8b3 	b.w	8007774 <__retarget_lock_acquire_recursive>
 800760e:	bf00      	nop
 8007610:	20013905 	.word	0x20013905

08007614 <__sfp_lock_release>:
 8007614:	4801      	ldr	r0, [pc, #4]	; (800761c <__sfp_lock_release+0x8>)
 8007616:	f000 b8ae 	b.w	8007776 <__retarget_lock_release_recursive>
 800761a:	bf00      	nop
 800761c:	20013905 	.word	0x20013905

08007620 <__sinit_lock_acquire>:
 8007620:	4801      	ldr	r0, [pc, #4]	; (8007628 <__sinit_lock_acquire+0x8>)
 8007622:	f000 b8a7 	b.w	8007774 <__retarget_lock_acquire_recursive>
 8007626:	bf00      	nop
 8007628:	20013906 	.word	0x20013906

0800762c <__sinit_lock_release>:
 800762c:	4801      	ldr	r0, [pc, #4]	; (8007634 <__sinit_lock_release+0x8>)
 800762e:	f000 b8a2 	b.w	8007776 <__retarget_lock_release_recursive>
 8007632:	bf00      	nop
 8007634:	20013906 	.word	0x20013906

08007638 <__sinit>:
 8007638:	b510      	push	{r4, lr}
 800763a:	4604      	mov	r4, r0
 800763c:	f7ff fff0 	bl	8007620 <__sinit_lock_acquire>
 8007640:	69a3      	ldr	r3, [r4, #24]
 8007642:	b11b      	cbz	r3, 800764c <__sinit+0x14>
 8007644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007648:	f7ff bff0 	b.w	800762c <__sinit_lock_release>
 800764c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007650:	6523      	str	r3, [r4, #80]	; 0x50
 8007652:	4b13      	ldr	r3, [pc, #76]	; (80076a0 <__sinit+0x68>)
 8007654:	4a13      	ldr	r2, [pc, #76]	; (80076a4 <__sinit+0x6c>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	62a2      	str	r2, [r4, #40]	; 0x28
 800765a:	42a3      	cmp	r3, r4
 800765c:	bf04      	itt	eq
 800765e:	2301      	moveq	r3, #1
 8007660:	61a3      	streq	r3, [r4, #24]
 8007662:	4620      	mov	r0, r4
 8007664:	f000 f820 	bl	80076a8 <__sfp>
 8007668:	6060      	str	r0, [r4, #4]
 800766a:	4620      	mov	r0, r4
 800766c:	f000 f81c 	bl	80076a8 <__sfp>
 8007670:	60a0      	str	r0, [r4, #8]
 8007672:	4620      	mov	r0, r4
 8007674:	f000 f818 	bl	80076a8 <__sfp>
 8007678:	2200      	movs	r2, #0
 800767a:	60e0      	str	r0, [r4, #12]
 800767c:	2104      	movs	r1, #4
 800767e:	6860      	ldr	r0, [r4, #4]
 8007680:	f7ff ff82 	bl	8007588 <std>
 8007684:	68a0      	ldr	r0, [r4, #8]
 8007686:	2201      	movs	r2, #1
 8007688:	2109      	movs	r1, #9
 800768a:	f7ff ff7d 	bl	8007588 <std>
 800768e:	68e0      	ldr	r0, [r4, #12]
 8007690:	2202      	movs	r2, #2
 8007692:	2112      	movs	r1, #18
 8007694:	f7ff ff78 	bl	8007588 <std>
 8007698:	2301      	movs	r3, #1
 800769a:	61a3      	str	r3, [r4, #24]
 800769c:	e7d2      	b.n	8007644 <__sinit+0xc>
 800769e:	bf00      	nop
 80076a0:	08007cb8 	.word	0x08007cb8
 80076a4:	080075d1 	.word	0x080075d1

080076a8 <__sfp>:
 80076a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076aa:	4607      	mov	r7, r0
 80076ac:	f7ff ffac 	bl	8007608 <__sfp_lock_acquire>
 80076b0:	4b1e      	ldr	r3, [pc, #120]	; (800772c <__sfp+0x84>)
 80076b2:	681e      	ldr	r6, [r3, #0]
 80076b4:	69b3      	ldr	r3, [r6, #24]
 80076b6:	b913      	cbnz	r3, 80076be <__sfp+0x16>
 80076b8:	4630      	mov	r0, r6
 80076ba:	f7ff ffbd 	bl	8007638 <__sinit>
 80076be:	3648      	adds	r6, #72	; 0x48
 80076c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80076c4:	3b01      	subs	r3, #1
 80076c6:	d503      	bpl.n	80076d0 <__sfp+0x28>
 80076c8:	6833      	ldr	r3, [r6, #0]
 80076ca:	b30b      	cbz	r3, 8007710 <__sfp+0x68>
 80076cc:	6836      	ldr	r6, [r6, #0]
 80076ce:	e7f7      	b.n	80076c0 <__sfp+0x18>
 80076d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80076d4:	b9d5      	cbnz	r5, 800770c <__sfp+0x64>
 80076d6:	4b16      	ldr	r3, [pc, #88]	; (8007730 <__sfp+0x88>)
 80076d8:	60e3      	str	r3, [r4, #12]
 80076da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80076de:	6665      	str	r5, [r4, #100]	; 0x64
 80076e0:	f000 f847 	bl	8007772 <__retarget_lock_init_recursive>
 80076e4:	f7ff ff96 	bl	8007614 <__sfp_lock_release>
 80076e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80076ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80076f0:	6025      	str	r5, [r4, #0]
 80076f2:	61a5      	str	r5, [r4, #24]
 80076f4:	2208      	movs	r2, #8
 80076f6:	4629      	mov	r1, r5
 80076f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80076fc:	f7ff fd44 	bl	8007188 <memset>
 8007700:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007704:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007708:	4620      	mov	r0, r4
 800770a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800770c:	3468      	adds	r4, #104	; 0x68
 800770e:	e7d9      	b.n	80076c4 <__sfp+0x1c>
 8007710:	2104      	movs	r1, #4
 8007712:	4638      	mov	r0, r7
 8007714:	f7ff ff62 	bl	80075dc <__sfmoreglue>
 8007718:	4604      	mov	r4, r0
 800771a:	6030      	str	r0, [r6, #0]
 800771c:	2800      	cmp	r0, #0
 800771e:	d1d5      	bne.n	80076cc <__sfp+0x24>
 8007720:	f7ff ff78 	bl	8007614 <__sfp_lock_release>
 8007724:	230c      	movs	r3, #12
 8007726:	603b      	str	r3, [r7, #0]
 8007728:	e7ee      	b.n	8007708 <__sfp+0x60>
 800772a:	bf00      	nop
 800772c:	08007cb8 	.word	0x08007cb8
 8007730:	ffff0001 	.word	0xffff0001

08007734 <_fwalk_reent>:
 8007734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007738:	4606      	mov	r6, r0
 800773a:	4688      	mov	r8, r1
 800773c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007740:	2700      	movs	r7, #0
 8007742:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007746:	f1b9 0901 	subs.w	r9, r9, #1
 800774a:	d505      	bpl.n	8007758 <_fwalk_reent+0x24>
 800774c:	6824      	ldr	r4, [r4, #0]
 800774e:	2c00      	cmp	r4, #0
 8007750:	d1f7      	bne.n	8007742 <_fwalk_reent+0xe>
 8007752:	4638      	mov	r0, r7
 8007754:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007758:	89ab      	ldrh	r3, [r5, #12]
 800775a:	2b01      	cmp	r3, #1
 800775c:	d907      	bls.n	800776e <_fwalk_reent+0x3a>
 800775e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007762:	3301      	adds	r3, #1
 8007764:	d003      	beq.n	800776e <_fwalk_reent+0x3a>
 8007766:	4629      	mov	r1, r5
 8007768:	4630      	mov	r0, r6
 800776a:	47c0      	blx	r8
 800776c:	4307      	orrs	r7, r0
 800776e:	3568      	adds	r5, #104	; 0x68
 8007770:	e7e9      	b.n	8007746 <_fwalk_reent+0x12>

08007772 <__retarget_lock_init_recursive>:
 8007772:	4770      	bx	lr

08007774 <__retarget_lock_acquire_recursive>:
 8007774:	4770      	bx	lr

08007776 <__retarget_lock_release_recursive>:
 8007776:	4770      	bx	lr

08007778 <__swhatbuf_r>:
 8007778:	b570      	push	{r4, r5, r6, lr}
 800777a:	460e      	mov	r6, r1
 800777c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007780:	2900      	cmp	r1, #0
 8007782:	b096      	sub	sp, #88	; 0x58
 8007784:	4614      	mov	r4, r2
 8007786:	461d      	mov	r5, r3
 8007788:	da08      	bge.n	800779c <__swhatbuf_r+0x24>
 800778a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800778e:	2200      	movs	r2, #0
 8007790:	602a      	str	r2, [r5, #0]
 8007792:	061a      	lsls	r2, r3, #24
 8007794:	d410      	bmi.n	80077b8 <__swhatbuf_r+0x40>
 8007796:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800779a:	e00e      	b.n	80077ba <__swhatbuf_r+0x42>
 800779c:	466a      	mov	r2, sp
 800779e:	f000 f995 	bl	8007acc <_fstat_r>
 80077a2:	2800      	cmp	r0, #0
 80077a4:	dbf1      	blt.n	800778a <__swhatbuf_r+0x12>
 80077a6:	9a01      	ldr	r2, [sp, #4]
 80077a8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80077ac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80077b0:	425a      	negs	r2, r3
 80077b2:	415a      	adcs	r2, r3
 80077b4:	602a      	str	r2, [r5, #0]
 80077b6:	e7ee      	b.n	8007796 <__swhatbuf_r+0x1e>
 80077b8:	2340      	movs	r3, #64	; 0x40
 80077ba:	2000      	movs	r0, #0
 80077bc:	6023      	str	r3, [r4, #0]
 80077be:	b016      	add	sp, #88	; 0x58
 80077c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080077c4 <__smakebuf_r>:
 80077c4:	898b      	ldrh	r3, [r1, #12]
 80077c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80077c8:	079d      	lsls	r5, r3, #30
 80077ca:	4606      	mov	r6, r0
 80077cc:	460c      	mov	r4, r1
 80077ce:	d507      	bpl.n	80077e0 <__smakebuf_r+0x1c>
 80077d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80077d4:	6023      	str	r3, [r4, #0]
 80077d6:	6123      	str	r3, [r4, #16]
 80077d8:	2301      	movs	r3, #1
 80077da:	6163      	str	r3, [r4, #20]
 80077dc:	b002      	add	sp, #8
 80077de:	bd70      	pop	{r4, r5, r6, pc}
 80077e0:	ab01      	add	r3, sp, #4
 80077e2:	466a      	mov	r2, sp
 80077e4:	f7ff ffc8 	bl	8007778 <__swhatbuf_r>
 80077e8:	9900      	ldr	r1, [sp, #0]
 80077ea:	4605      	mov	r5, r0
 80077ec:	4630      	mov	r0, r6
 80077ee:	f000 f895 	bl	800791c <_malloc_r>
 80077f2:	b948      	cbnz	r0, 8007808 <__smakebuf_r+0x44>
 80077f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077f8:	059a      	lsls	r2, r3, #22
 80077fa:	d4ef      	bmi.n	80077dc <__smakebuf_r+0x18>
 80077fc:	f023 0303 	bic.w	r3, r3, #3
 8007800:	f043 0302 	orr.w	r3, r3, #2
 8007804:	81a3      	strh	r3, [r4, #12]
 8007806:	e7e3      	b.n	80077d0 <__smakebuf_r+0xc>
 8007808:	4b0d      	ldr	r3, [pc, #52]	; (8007840 <__smakebuf_r+0x7c>)
 800780a:	62b3      	str	r3, [r6, #40]	; 0x28
 800780c:	89a3      	ldrh	r3, [r4, #12]
 800780e:	6020      	str	r0, [r4, #0]
 8007810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007814:	81a3      	strh	r3, [r4, #12]
 8007816:	9b00      	ldr	r3, [sp, #0]
 8007818:	6163      	str	r3, [r4, #20]
 800781a:	9b01      	ldr	r3, [sp, #4]
 800781c:	6120      	str	r0, [r4, #16]
 800781e:	b15b      	cbz	r3, 8007838 <__smakebuf_r+0x74>
 8007820:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007824:	4630      	mov	r0, r6
 8007826:	f000 f963 	bl	8007af0 <_isatty_r>
 800782a:	b128      	cbz	r0, 8007838 <__smakebuf_r+0x74>
 800782c:	89a3      	ldrh	r3, [r4, #12]
 800782e:	f023 0303 	bic.w	r3, r3, #3
 8007832:	f043 0301 	orr.w	r3, r3, #1
 8007836:	81a3      	strh	r3, [r4, #12]
 8007838:	89a0      	ldrh	r0, [r4, #12]
 800783a:	4305      	orrs	r5, r0
 800783c:	81a5      	strh	r5, [r4, #12]
 800783e:	e7cd      	b.n	80077dc <__smakebuf_r+0x18>
 8007840:	080075d1 	.word	0x080075d1

08007844 <_free_r>:
 8007844:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007846:	2900      	cmp	r1, #0
 8007848:	d044      	beq.n	80078d4 <_free_r+0x90>
 800784a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800784e:	9001      	str	r0, [sp, #4]
 8007850:	2b00      	cmp	r3, #0
 8007852:	f1a1 0404 	sub.w	r4, r1, #4
 8007856:	bfb8      	it	lt
 8007858:	18e4      	addlt	r4, r4, r3
 800785a:	f000 f96b 	bl	8007b34 <__malloc_lock>
 800785e:	4a1e      	ldr	r2, [pc, #120]	; (80078d8 <_free_r+0x94>)
 8007860:	9801      	ldr	r0, [sp, #4]
 8007862:	6813      	ldr	r3, [r2, #0]
 8007864:	b933      	cbnz	r3, 8007874 <_free_r+0x30>
 8007866:	6063      	str	r3, [r4, #4]
 8007868:	6014      	str	r4, [r2, #0]
 800786a:	b003      	add	sp, #12
 800786c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007870:	f000 b966 	b.w	8007b40 <__malloc_unlock>
 8007874:	42a3      	cmp	r3, r4
 8007876:	d908      	bls.n	800788a <_free_r+0x46>
 8007878:	6825      	ldr	r5, [r4, #0]
 800787a:	1961      	adds	r1, r4, r5
 800787c:	428b      	cmp	r3, r1
 800787e:	bf01      	itttt	eq
 8007880:	6819      	ldreq	r1, [r3, #0]
 8007882:	685b      	ldreq	r3, [r3, #4]
 8007884:	1949      	addeq	r1, r1, r5
 8007886:	6021      	streq	r1, [r4, #0]
 8007888:	e7ed      	b.n	8007866 <_free_r+0x22>
 800788a:	461a      	mov	r2, r3
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	b10b      	cbz	r3, 8007894 <_free_r+0x50>
 8007890:	42a3      	cmp	r3, r4
 8007892:	d9fa      	bls.n	800788a <_free_r+0x46>
 8007894:	6811      	ldr	r1, [r2, #0]
 8007896:	1855      	adds	r5, r2, r1
 8007898:	42a5      	cmp	r5, r4
 800789a:	d10b      	bne.n	80078b4 <_free_r+0x70>
 800789c:	6824      	ldr	r4, [r4, #0]
 800789e:	4421      	add	r1, r4
 80078a0:	1854      	adds	r4, r2, r1
 80078a2:	42a3      	cmp	r3, r4
 80078a4:	6011      	str	r1, [r2, #0]
 80078a6:	d1e0      	bne.n	800786a <_free_r+0x26>
 80078a8:	681c      	ldr	r4, [r3, #0]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	6053      	str	r3, [r2, #4]
 80078ae:	4421      	add	r1, r4
 80078b0:	6011      	str	r1, [r2, #0]
 80078b2:	e7da      	b.n	800786a <_free_r+0x26>
 80078b4:	d902      	bls.n	80078bc <_free_r+0x78>
 80078b6:	230c      	movs	r3, #12
 80078b8:	6003      	str	r3, [r0, #0]
 80078ba:	e7d6      	b.n	800786a <_free_r+0x26>
 80078bc:	6825      	ldr	r5, [r4, #0]
 80078be:	1961      	adds	r1, r4, r5
 80078c0:	428b      	cmp	r3, r1
 80078c2:	bf04      	itt	eq
 80078c4:	6819      	ldreq	r1, [r3, #0]
 80078c6:	685b      	ldreq	r3, [r3, #4]
 80078c8:	6063      	str	r3, [r4, #4]
 80078ca:	bf04      	itt	eq
 80078cc:	1949      	addeq	r1, r1, r5
 80078ce:	6021      	streq	r1, [r4, #0]
 80078d0:	6054      	str	r4, [r2, #4]
 80078d2:	e7ca      	b.n	800786a <_free_r+0x26>
 80078d4:	b003      	add	sp, #12
 80078d6:	bd30      	pop	{r4, r5, pc}
 80078d8:	20013908 	.word	0x20013908

080078dc <sbrk_aligned>:
 80078dc:	b570      	push	{r4, r5, r6, lr}
 80078de:	4e0e      	ldr	r6, [pc, #56]	; (8007918 <sbrk_aligned+0x3c>)
 80078e0:	460c      	mov	r4, r1
 80078e2:	6831      	ldr	r1, [r6, #0]
 80078e4:	4605      	mov	r5, r0
 80078e6:	b911      	cbnz	r1, 80078ee <sbrk_aligned+0x12>
 80078e8:	f000 f88c 	bl	8007a04 <_sbrk_r>
 80078ec:	6030      	str	r0, [r6, #0]
 80078ee:	4621      	mov	r1, r4
 80078f0:	4628      	mov	r0, r5
 80078f2:	f000 f887 	bl	8007a04 <_sbrk_r>
 80078f6:	1c43      	adds	r3, r0, #1
 80078f8:	d00a      	beq.n	8007910 <sbrk_aligned+0x34>
 80078fa:	1cc4      	adds	r4, r0, #3
 80078fc:	f024 0403 	bic.w	r4, r4, #3
 8007900:	42a0      	cmp	r0, r4
 8007902:	d007      	beq.n	8007914 <sbrk_aligned+0x38>
 8007904:	1a21      	subs	r1, r4, r0
 8007906:	4628      	mov	r0, r5
 8007908:	f000 f87c 	bl	8007a04 <_sbrk_r>
 800790c:	3001      	adds	r0, #1
 800790e:	d101      	bne.n	8007914 <sbrk_aligned+0x38>
 8007910:	f04f 34ff 	mov.w	r4, #4294967295
 8007914:	4620      	mov	r0, r4
 8007916:	bd70      	pop	{r4, r5, r6, pc}
 8007918:	2001390c 	.word	0x2001390c

0800791c <_malloc_r>:
 800791c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007920:	1ccd      	adds	r5, r1, #3
 8007922:	f025 0503 	bic.w	r5, r5, #3
 8007926:	3508      	adds	r5, #8
 8007928:	2d0c      	cmp	r5, #12
 800792a:	bf38      	it	cc
 800792c:	250c      	movcc	r5, #12
 800792e:	2d00      	cmp	r5, #0
 8007930:	4607      	mov	r7, r0
 8007932:	db01      	blt.n	8007938 <_malloc_r+0x1c>
 8007934:	42a9      	cmp	r1, r5
 8007936:	d905      	bls.n	8007944 <_malloc_r+0x28>
 8007938:	230c      	movs	r3, #12
 800793a:	603b      	str	r3, [r7, #0]
 800793c:	2600      	movs	r6, #0
 800793e:	4630      	mov	r0, r6
 8007940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007944:	4e2e      	ldr	r6, [pc, #184]	; (8007a00 <_malloc_r+0xe4>)
 8007946:	f000 f8f5 	bl	8007b34 <__malloc_lock>
 800794a:	6833      	ldr	r3, [r6, #0]
 800794c:	461c      	mov	r4, r3
 800794e:	bb34      	cbnz	r4, 800799e <_malloc_r+0x82>
 8007950:	4629      	mov	r1, r5
 8007952:	4638      	mov	r0, r7
 8007954:	f7ff ffc2 	bl	80078dc <sbrk_aligned>
 8007958:	1c43      	adds	r3, r0, #1
 800795a:	4604      	mov	r4, r0
 800795c:	d14d      	bne.n	80079fa <_malloc_r+0xde>
 800795e:	6834      	ldr	r4, [r6, #0]
 8007960:	4626      	mov	r6, r4
 8007962:	2e00      	cmp	r6, #0
 8007964:	d140      	bne.n	80079e8 <_malloc_r+0xcc>
 8007966:	6823      	ldr	r3, [r4, #0]
 8007968:	4631      	mov	r1, r6
 800796a:	4638      	mov	r0, r7
 800796c:	eb04 0803 	add.w	r8, r4, r3
 8007970:	f000 f848 	bl	8007a04 <_sbrk_r>
 8007974:	4580      	cmp	r8, r0
 8007976:	d13a      	bne.n	80079ee <_malloc_r+0xd2>
 8007978:	6821      	ldr	r1, [r4, #0]
 800797a:	3503      	adds	r5, #3
 800797c:	1a6d      	subs	r5, r5, r1
 800797e:	f025 0503 	bic.w	r5, r5, #3
 8007982:	3508      	adds	r5, #8
 8007984:	2d0c      	cmp	r5, #12
 8007986:	bf38      	it	cc
 8007988:	250c      	movcc	r5, #12
 800798a:	4629      	mov	r1, r5
 800798c:	4638      	mov	r0, r7
 800798e:	f7ff ffa5 	bl	80078dc <sbrk_aligned>
 8007992:	3001      	adds	r0, #1
 8007994:	d02b      	beq.n	80079ee <_malloc_r+0xd2>
 8007996:	6823      	ldr	r3, [r4, #0]
 8007998:	442b      	add	r3, r5
 800799a:	6023      	str	r3, [r4, #0]
 800799c:	e00e      	b.n	80079bc <_malloc_r+0xa0>
 800799e:	6822      	ldr	r2, [r4, #0]
 80079a0:	1b52      	subs	r2, r2, r5
 80079a2:	d41e      	bmi.n	80079e2 <_malloc_r+0xc6>
 80079a4:	2a0b      	cmp	r2, #11
 80079a6:	d916      	bls.n	80079d6 <_malloc_r+0xba>
 80079a8:	1961      	adds	r1, r4, r5
 80079aa:	42a3      	cmp	r3, r4
 80079ac:	6025      	str	r5, [r4, #0]
 80079ae:	bf18      	it	ne
 80079b0:	6059      	strne	r1, [r3, #4]
 80079b2:	6863      	ldr	r3, [r4, #4]
 80079b4:	bf08      	it	eq
 80079b6:	6031      	streq	r1, [r6, #0]
 80079b8:	5162      	str	r2, [r4, r5]
 80079ba:	604b      	str	r3, [r1, #4]
 80079bc:	4638      	mov	r0, r7
 80079be:	f104 060b 	add.w	r6, r4, #11
 80079c2:	f000 f8bd 	bl	8007b40 <__malloc_unlock>
 80079c6:	f026 0607 	bic.w	r6, r6, #7
 80079ca:	1d23      	adds	r3, r4, #4
 80079cc:	1af2      	subs	r2, r6, r3
 80079ce:	d0b6      	beq.n	800793e <_malloc_r+0x22>
 80079d0:	1b9b      	subs	r3, r3, r6
 80079d2:	50a3      	str	r3, [r4, r2]
 80079d4:	e7b3      	b.n	800793e <_malloc_r+0x22>
 80079d6:	6862      	ldr	r2, [r4, #4]
 80079d8:	42a3      	cmp	r3, r4
 80079da:	bf0c      	ite	eq
 80079dc:	6032      	streq	r2, [r6, #0]
 80079de:	605a      	strne	r2, [r3, #4]
 80079e0:	e7ec      	b.n	80079bc <_malloc_r+0xa0>
 80079e2:	4623      	mov	r3, r4
 80079e4:	6864      	ldr	r4, [r4, #4]
 80079e6:	e7b2      	b.n	800794e <_malloc_r+0x32>
 80079e8:	4634      	mov	r4, r6
 80079ea:	6876      	ldr	r6, [r6, #4]
 80079ec:	e7b9      	b.n	8007962 <_malloc_r+0x46>
 80079ee:	230c      	movs	r3, #12
 80079f0:	603b      	str	r3, [r7, #0]
 80079f2:	4638      	mov	r0, r7
 80079f4:	f000 f8a4 	bl	8007b40 <__malloc_unlock>
 80079f8:	e7a1      	b.n	800793e <_malloc_r+0x22>
 80079fa:	6025      	str	r5, [r4, #0]
 80079fc:	e7de      	b.n	80079bc <_malloc_r+0xa0>
 80079fe:	bf00      	nop
 8007a00:	20013908 	.word	0x20013908

08007a04 <_sbrk_r>:
 8007a04:	b538      	push	{r3, r4, r5, lr}
 8007a06:	4d06      	ldr	r5, [pc, #24]	; (8007a20 <_sbrk_r+0x1c>)
 8007a08:	2300      	movs	r3, #0
 8007a0a:	4604      	mov	r4, r0
 8007a0c:	4608      	mov	r0, r1
 8007a0e:	602b      	str	r3, [r5, #0]
 8007a10:	f000 f8ae 	bl	8007b70 <_sbrk>
 8007a14:	1c43      	adds	r3, r0, #1
 8007a16:	d102      	bne.n	8007a1e <_sbrk_r+0x1a>
 8007a18:	682b      	ldr	r3, [r5, #0]
 8007a1a:	b103      	cbz	r3, 8007a1e <_sbrk_r+0x1a>
 8007a1c:	6023      	str	r3, [r4, #0]
 8007a1e:	bd38      	pop	{r3, r4, r5, pc}
 8007a20:	20013910 	.word	0x20013910

08007a24 <__sread>:
 8007a24:	b510      	push	{r4, lr}
 8007a26:	460c      	mov	r4, r1
 8007a28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a2c:	f000 f88e 	bl	8007b4c <_read_r>
 8007a30:	2800      	cmp	r0, #0
 8007a32:	bfab      	itete	ge
 8007a34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007a36:	89a3      	ldrhlt	r3, [r4, #12]
 8007a38:	181b      	addge	r3, r3, r0
 8007a3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007a3e:	bfac      	ite	ge
 8007a40:	6563      	strge	r3, [r4, #84]	; 0x54
 8007a42:	81a3      	strhlt	r3, [r4, #12]
 8007a44:	bd10      	pop	{r4, pc}

08007a46 <__swrite>:
 8007a46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a4a:	461f      	mov	r7, r3
 8007a4c:	898b      	ldrh	r3, [r1, #12]
 8007a4e:	05db      	lsls	r3, r3, #23
 8007a50:	4605      	mov	r5, r0
 8007a52:	460c      	mov	r4, r1
 8007a54:	4616      	mov	r6, r2
 8007a56:	d505      	bpl.n	8007a64 <__swrite+0x1e>
 8007a58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a5c:	2302      	movs	r3, #2
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f000 f856 	bl	8007b10 <_lseek_r>
 8007a64:	89a3      	ldrh	r3, [r4, #12]
 8007a66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a6e:	81a3      	strh	r3, [r4, #12]
 8007a70:	4632      	mov	r2, r6
 8007a72:	463b      	mov	r3, r7
 8007a74:	4628      	mov	r0, r5
 8007a76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a7a:	f7fd bf73 	b.w	8005964 <_write_r>

08007a7e <__sseek>:
 8007a7e:	b510      	push	{r4, lr}
 8007a80:	460c      	mov	r4, r1
 8007a82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a86:	f000 f843 	bl	8007b10 <_lseek_r>
 8007a8a:	1c43      	adds	r3, r0, #1
 8007a8c:	89a3      	ldrh	r3, [r4, #12]
 8007a8e:	bf15      	itete	ne
 8007a90:	6560      	strne	r0, [r4, #84]	; 0x54
 8007a92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007a96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007a9a:	81a3      	strheq	r3, [r4, #12]
 8007a9c:	bf18      	it	ne
 8007a9e:	81a3      	strhne	r3, [r4, #12]
 8007aa0:	bd10      	pop	{r4, pc}

08007aa2 <__sclose>:
 8007aa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007aa6:	f000 b801 	b.w	8007aac <_close_r>
	...

08007aac <_close_r>:
 8007aac:	b538      	push	{r3, r4, r5, lr}
 8007aae:	4d06      	ldr	r5, [pc, #24]	; (8007ac8 <_close_r+0x1c>)
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	4604      	mov	r4, r0
 8007ab4:	4608      	mov	r0, r1
 8007ab6:	602b      	str	r3, [r5, #0]
 8007ab8:	f7f9 f8d5 	bl	8000c66 <_close>
 8007abc:	1c43      	adds	r3, r0, #1
 8007abe:	d102      	bne.n	8007ac6 <_close_r+0x1a>
 8007ac0:	682b      	ldr	r3, [r5, #0]
 8007ac2:	b103      	cbz	r3, 8007ac6 <_close_r+0x1a>
 8007ac4:	6023      	str	r3, [r4, #0]
 8007ac6:	bd38      	pop	{r3, r4, r5, pc}
 8007ac8:	20013910 	.word	0x20013910

08007acc <_fstat_r>:
 8007acc:	b538      	push	{r3, r4, r5, lr}
 8007ace:	4d07      	ldr	r5, [pc, #28]	; (8007aec <_fstat_r+0x20>)
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	4604      	mov	r4, r0
 8007ad4:	4608      	mov	r0, r1
 8007ad6:	4611      	mov	r1, r2
 8007ad8:	602b      	str	r3, [r5, #0]
 8007ada:	f7f9 f8d0 	bl	8000c7e <_fstat>
 8007ade:	1c43      	adds	r3, r0, #1
 8007ae0:	d102      	bne.n	8007ae8 <_fstat_r+0x1c>
 8007ae2:	682b      	ldr	r3, [r5, #0]
 8007ae4:	b103      	cbz	r3, 8007ae8 <_fstat_r+0x1c>
 8007ae6:	6023      	str	r3, [r4, #0]
 8007ae8:	bd38      	pop	{r3, r4, r5, pc}
 8007aea:	bf00      	nop
 8007aec:	20013910 	.word	0x20013910

08007af0 <_isatty_r>:
 8007af0:	b538      	push	{r3, r4, r5, lr}
 8007af2:	4d06      	ldr	r5, [pc, #24]	; (8007b0c <_isatty_r+0x1c>)
 8007af4:	2300      	movs	r3, #0
 8007af6:	4604      	mov	r4, r0
 8007af8:	4608      	mov	r0, r1
 8007afa:	602b      	str	r3, [r5, #0]
 8007afc:	f7f9 f8cf 	bl	8000c9e <_isatty>
 8007b00:	1c43      	adds	r3, r0, #1
 8007b02:	d102      	bne.n	8007b0a <_isatty_r+0x1a>
 8007b04:	682b      	ldr	r3, [r5, #0]
 8007b06:	b103      	cbz	r3, 8007b0a <_isatty_r+0x1a>
 8007b08:	6023      	str	r3, [r4, #0]
 8007b0a:	bd38      	pop	{r3, r4, r5, pc}
 8007b0c:	20013910 	.word	0x20013910

08007b10 <_lseek_r>:
 8007b10:	b538      	push	{r3, r4, r5, lr}
 8007b12:	4d07      	ldr	r5, [pc, #28]	; (8007b30 <_lseek_r+0x20>)
 8007b14:	4604      	mov	r4, r0
 8007b16:	4608      	mov	r0, r1
 8007b18:	4611      	mov	r1, r2
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	602a      	str	r2, [r5, #0]
 8007b1e:	461a      	mov	r2, r3
 8007b20:	f7f9 f8c8 	bl	8000cb4 <_lseek>
 8007b24:	1c43      	adds	r3, r0, #1
 8007b26:	d102      	bne.n	8007b2e <_lseek_r+0x1e>
 8007b28:	682b      	ldr	r3, [r5, #0]
 8007b2a:	b103      	cbz	r3, 8007b2e <_lseek_r+0x1e>
 8007b2c:	6023      	str	r3, [r4, #0]
 8007b2e:	bd38      	pop	{r3, r4, r5, pc}
 8007b30:	20013910 	.word	0x20013910

08007b34 <__malloc_lock>:
 8007b34:	4801      	ldr	r0, [pc, #4]	; (8007b3c <__malloc_lock+0x8>)
 8007b36:	f7ff be1d 	b.w	8007774 <__retarget_lock_acquire_recursive>
 8007b3a:	bf00      	nop
 8007b3c:	20013904 	.word	0x20013904

08007b40 <__malloc_unlock>:
 8007b40:	4801      	ldr	r0, [pc, #4]	; (8007b48 <__malloc_unlock+0x8>)
 8007b42:	f7ff be18 	b.w	8007776 <__retarget_lock_release_recursive>
 8007b46:	bf00      	nop
 8007b48:	20013904 	.word	0x20013904

08007b4c <_read_r>:
 8007b4c:	b538      	push	{r3, r4, r5, lr}
 8007b4e:	4d07      	ldr	r5, [pc, #28]	; (8007b6c <_read_r+0x20>)
 8007b50:	4604      	mov	r4, r0
 8007b52:	4608      	mov	r0, r1
 8007b54:	4611      	mov	r1, r2
 8007b56:	2200      	movs	r2, #0
 8007b58:	602a      	str	r2, [r5, #0]
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	f7f9 f866 	bl	8000c2c <_read>
 8007b60:	1c43      	adds	r3, r0, #1
 8007b62:	d102      	bne.n	8007b6a <_read_r+0x1e>
 8007b64:	682b      	ldr	r3, [r5, #0]
 8007b66:	b103      	cbz	r3, 8007b6a <_read_r+0x1e>
 8007b68:	6023      	str	r3, [r4, #0]
 8007b6a:	bd38      	pop	{r3, r4, r5, pc}
 8007b6c:	20013910 	.word	0x20013910

08007b70 <_sbrk>:
 8007b70:	4a04      	ldr	r2, [pc, #16]	; (8007b84 <_sbrk+0x14>)
 8007b72:	6811      	ldr	r1, [r2, #0]
 8007b74:	4603      	mov	r3, r0
 8007b76:	b909      	cbnz	r1, 8007b7c <_sbrk+0xc>
 8007b78:	4903      	ldr	r1, [pc, #12]	; (8007b88 <_sbrk+0x18>)
 8007b7a:	6011      	str	r1, [r2, #0]
 8007b7c:	6810      	ldr	r0, [r2, #0]
 8007b7e:	4403      	add	r3, r0
 8007b80:	6013      	str	r3, [r2, #0]
 8007b82:	4770      	bx	lr
 8007b84:	20013914 	.word	0x20013914
 8007b88:	20013918 	.word	0x20013918

08007b8c <_init>:
 8007b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b8e:	bf00      	nop
 8007b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b92:	bc08      	pop	{r3}
 8007b94:	469e      	mov	lr, r3
 8007b96:	4770      	bx	lr

08007b98 <_fini>:
 8007b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b9a:	bf00      	nop
 8007b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b9e:	bc08      	pop	{r3}
 8007ba0:	469e      	mov	lr, r3
 8007ba2:	4770      	bx	lr
