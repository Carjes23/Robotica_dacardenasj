
Base_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004764  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08004904  08004904  00014904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049a0  080049a0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080049a0  080049a0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080049a0  080049a0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049a0  080049a0  000149a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049a4  080049a4  000149a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080049a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012eb4  20000070  08004a18  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012f24  08004a18  00022f24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008006  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018d9  00000000  00000000  000280a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000790  00000000  00000000  00029980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006d8  00000000  00000000  0002a110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012310  00000000  00000000  0002a7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008439  00000000  00000000  0003caf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000601da  00000000  00000000  00044f31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a510b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000261c  00000000  00000000  000a515c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080048ec 	.word	0x080048ec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080048ec 	.word	0x080048ec

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__aeabi_d2iz>:
 800097c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000980:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000984:	d215      	bcs.n	80009b2 <__aeabi_d2iz+0x36>
 8000986:	d511      	bpl.n	80009ac <__aeabi_d2iz+0x30>
 8000988:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800098c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000990:	d912      	bls.n	80009b8 <__aeabi_d2iz+0x3c>
 8000992:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000996:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800099a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800099e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009a2:	fa23 f002 	lsr.w	r0, r3, r2
 80009a6:	bf18      	it	ne
 80009a8:	4240      	negne	r0, r0
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009b6:	d105      	bne.n	80009c4 <__aeabi_d2iz+0x48>
 80009b8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009bc:	bf08      	it	eq
 80009be:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009c2:	4770      	bx	lr
 80009c4:	f04f 0000 	mov.w	r0, #0
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_d2f>:
 80009cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009d0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009d4:	bf24      	itt	cs
 80009d6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009da:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009de:	d90d      	bls.n	80009fc <__aeabi_d2f+0x30>
 80009e0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009e4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009e8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009ec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009f0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009f4:	bf08      	it	eq
 80009f6:	f020 0001 	biceq.w	r0, r0, #1
 80009fa:	4770      	bx	lr
 80009fc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a00:	d121      	bne.n	8000a46 <__aeabi_d2f+0x7a>
 8000a02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a06:	bfbc      	itt	lt
 8000a08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a0c:	4770      	bxlt	lr
 8000a0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a16:	f1c2 0218 	rsb	r2, r2, #24
 8000a1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a22:	fa20 f002 	lsr.w	r0, r0, r2
 8000a26:	bf18      	it	ne
 8000a28:	f040 0001 	orrne.w	r0, r0, #1
 8000a2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a38:	ea40 000c 	orr.w	r0, r0, ip
 8000a3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a44:	e7cc      	b.n	80009e0 <__aeabi_d2f+0x14>
 8000a46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a4a:	d107      	bne.n	8000a5c <__aeabi_d2f+0x90>
 8000a4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a50:	bf1e      	ittt	ne
 8000a52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a5a:	4770      	bxne	lr
 8000a5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <main>:
uint8_t globalCounter = 0;
uint32_t SystemCoreClock = CLOCK_MHZ * 1E6;
uint8_t rxData = 0;
char msg[8] = { 0 };

int main(void) {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0

	configPeripherals();
 8000a70:	f000 f806 	bl	8000a80 <configPeripherals>
	taskCreation();
 8000a74:	f000 f874 	bl	8000b60 <taskCreation>
	//Start the created task running.
	vTaskStartScheduler();
 8000a78:	f000 feb6 	bl	80017e8 <vTaskStartScheduler>

	/* Loop forever */
	while (1) {
 8000a7c:	e7fe      	b.n	8000a7c <main+0x10>
	...

08000a80 <configPeripherals>:
		/* SI llegamos es que algo salio mal... */
	}
}

void configPeripherals(void) {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0

	//Activacion cooprocesador matematico(importante para esta tarea)
	SCB->CPACR |= (0xF << 20);
 8000a84:	4b2f      	ldr	r3, [pc, #188]	; (8000b44 <configPeripherals+0xc4>)
 8000a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a8a:	4a2e      	ldr	r2, [pc, #184]	; (8000b44 <configPeripherals+0xc4>)
 8000a8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	configPLL(CLOCK_MHZ);
 8000a94:	2064      	movs	r0, #100	; 0x64
 8000a96:	f002 fc85 	bl	80033a4 <configPLL>

	ledUsuario.pGPIOx = GPIOA;
 8000a9a:	4b2b      	ldr	r3, [pc, #172]	; (8000b48 <configPeripherals+0xc8>)
 8000a9c:	4a2b      	ldr	r2, [pc, #172]	; (8000b4c <configPeripherals+0xcc>)
 8000a9e:	601a      	str	r2, [r3, #0]
	ledUsuario.GPIO_PinConfig_t.GPIO_PinMode = GPIO_MODE_OUT;
 8000aa0:	4b29      	ldr	r3, [pc, #164]	; (8000b48 <configPeripherals+0xc8>)
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	715a      	strb	r2, [r3, #5]
	ledUsuario.GPIO_PinConfig_t.GPIO_PinNumber = PIN_5;
 8000aa6:	4b28      	ldr	r3, [pc, #160]	; (8000b48 <configPeripherals+0xc8>)
 8000aa8:	2205      	movs	r2, #5
 8000aaa:	711a      	strb	r2, [r3, #4]
	GPIO_Config(&ledUsuario);
 8000aac:	4826      	ldr	r0, [pc, #152]	; (8000b48 <configPeripherals+0xc8>)
 8000aae:	f002 faf1 	bl	8003094 <GPIO_Config>

	//Pines necesarios para el uso del USART2
	tx2pin.pGPIOx = GPIOA;
 8000ab2:	4b27      	ldr	r3, [pc, #156]	; (8000b50 <configPeripherals+0xd0>)
 8000ab4:	4a25      	ldr	r2, [pc, #148]	; (8000b4c <configPeripherals+0xcc>)
 8000ab6:	601a      	str	r2, [r3, #0]
	tx2pin.GPIO_PinConfig_t.GPIO_PinNumber = PIN_2;
 8000ab8:	4b25      	ldr	r3, [pc, #148]	; (8000b50 <configPeripherals+0xd0>)
 8000aba:	2202      	movs	r2, #2
 8000abc:	711a      	strb	r2, [r3, #4]
	tx2pin.GPIO_PinConfig_t.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000abe:	4b24      	ldr	r3, [pc, #144]	; (8000b50 <configPeripherals+0xd0>)
 8000ac0:	2202      	movs	r2, #2
 8000ac2:	715a      	strb	r2, [r3, #5]
	tx2pin.GPIO_PinConfig_t.GPIO_PinPuPdControl = GPIO_PUPDR_PULLUP;
 8000ac4:	4b22      	ldr	r3, [pc, #136]	; (8000b50 <configPeripherals+0xd0>)
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	71da      	strb	r2, [r3, #7]
	tx2pin.GPIO_PinConfig_t.GPIO_PinSpeed = GPIO_OSPEED_FAST; //Se usa en velocidad rapida
 8000aca:	4b21      	ldr	r3, [pc, #132]	; (8000b50 <configPeripherals+0xd0>)
 8000acc:	2202      	movs	r2, #2
 8000ace:	719a      	strb	r2, [r3, #6]
	tx2pin.GPIO_PinConfig_t.GPIO_PinAltFunMode = 7;
 8000ad0:	4b1f      	ldr	r3, [pc, #124]	; (8000b50 <configPeripherals+0xd0>)
 8000ad2:	2207      	movs	r2, #7
 8000ad4:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&tx2pin);
 8000ad6:	481e      	ldr	r0, [pc, #120]	; (8000b50 <configPeripherals+0xd0>)
 8000ad8:	f002 fadc 	bl	8003094 <GPIO_Config>

	rx2pin.pGPIOx = GPIOA;
 8000adc:	4b1d      	ldr	r3, [pc, #116]	; (8000b54 <configPeripherals+0xd4>)
 8000ade:	4a1b      	ldr	r2, [pc, #108]	; (8000b4c <configPeripherals+0xcc>)
 8000ae0:	601a      	str	r2, [r3, #0]
	rx2pin.GPIO_PinConfig_t.GPIO_PinNumber = PIN_3;
 8000ae2:	4b1c      	ldr	r3, [pc, #112]	; (8000b54 <configPeripherals+0xd4>)
 8000ae4:	2203      	movs	r2, #3
 8000ae6:	711a      	strb	r2, [r3, #4]
	rx2pin.GPIO_PinConfig_t.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000ae8:	4b1a      	ldr	r3, [pc, #104]	; (8000b54 <configPeripherals+0xd4>)
 8000aea:	2202      	movs	r2, #2
 8000aec:	715a      	strb	r2, [r3, #5]
	rx2pin.GPIO_PinConfig_t.GPIO_PinPuPdControl = GPIO_PUPDR_PULLUP;
 8000aee:	4b19      	ldr	r3, [pc, #100]	; (8000b54 <configPeripherals+0xd4>)
 8000af0:	2201      	movs	r2, #1
 8000af2:	71da      	strb	r2, [r3, #7]
	rx2pin.GPIO_PinConfig_t.GPIO_PinSpeed = GPIO_OSPEED_FAST;
 8000af4:	4b17      	ldr	r3, [pc, #92]	; (8000b54 <configPeripherals+0xd4>)
 8000af6:	2202      	movs	r2, #2
 8000af8:	719a      	strb	r2, [r3, #6]
	rx2pin.GPIO_PinConfig_t.GPIO_PinAltFunMode = 7;
 8000afa:	4b16      	ldr	r3, [pc, #88]	; (8000b54 <configPeripherals+0xd4>)
 8000afc:	2207      	movs	r2, #7
 8000afe:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&rx2pin);
 8000b00:	4814      	ldr	r0, [pc, #80]	; (8000b54 <configPeripherals+0xd4>)
 8000b02:	f002 fac7 	bl	8003094 <GPIO_Config>

	handlerTerminal.ptrUSARTx = USART2;
 8000b06:	4b14      	ldr	r3, [pc, #80]	; (8000b58 <configPeripherals+0xd8>)
 8000b08:	4a14      	ldr	r2, [pc, #80]	; (8000b5c <configPeripherals+0xdc>)
 8000b0a:	601a      	str	r2, [r3, #0]
	handlerTerminal.USART_Config.USART_baudrate = USART_BAUDRATE_115200;
 8000b0c:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <configPeripherals+0xd8>)
 8000b0e:	2202      	movs	r2, #2
 8000b10:	609a      	str	r2, [r3, #8]
	handlerTerminal.USART_Config.USART_datasize = USART_DATASIZE_8BIT;
 8000b12:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <configPeripherals+0xd8>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	731a      	strb	r2, [r3, #12]
	handlerTerminal.USART_Config.USART_mode = USART_MODE_RXTX;
 8000b18:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <configPeripherals+0xd8>)
 8000b1a:	2202      	movs	r2, #2
 8000b1c:	711a      	strb	r2, [r3, #4]
	handlerTerminal.USART_Config.USART_parity = USART_PARITY_NONE;
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <configPeripherals+0xd8>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	735a      	strb	r2, [r3, #13]
	handlerTerminal.USART_Config.USART_stopbits = USART_STOPBIT_1;
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <configPeripherals+0xd8>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	739a      	strb	r2, [r3, #14]
	handlerTerminal.USART_Config.USART_RX_Int_Ena = ENABLE;
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <configPeripherals+0xd8>)
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	73da      	strb	r2, [r3, #15]

	USART_Config(&handlerTerminal);
 8000b30:	4809      	ldr	r0, [pc, #36]	; (8000b58 <configPeripherals+0xd8>)
 8000b32:	f002 fd69 	bl	8003608 <USART_Config>

	writeChar(&handlerTerminal, 23);
 8000b36:	2117      	movs	r1, #23
 8000b38:	4807      	ldr	r0, [pc, #28]	; (8000b58 <configPeripherals+0xd8>)
 8000b3a:	f003 f931 	bl	8003da0 <writeChar>
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	e000ed00 	.word	0xe000ed00
 8000b48:	2000008c 	.word	0x2000008c
 8000b4c:	40020000 	.word	0x40020000
 8000b50:	200000a4 	.word	0x200000a4
 8000b54:	20000098 	.word	0x20000098
 8000b58:	200000b0 	.word	0x200000b0
 8000b5c:	40004400 	.word	0x40004400

08000b60 <taskCreation>:

void taskCreation(void) {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b088      	sub	sp, #32
 8000b64:	af02      	add	r7, sp, #8
	BaseType_t xReturned;
	TaskHandle_t HandleTask1 = NULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	60bb      	str	r3, [r7, #8]
	TaskHandle_t HandleTask2 = NULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	607b      	str	r3, [r7, #4]

	xReturned = xTaskCreate(vTaskOne, /* Function that implements the task. */
 8000b6e:	f107 0308 	add.w	r3, r7, #8
 8000b72:	9301      	str	r3, [sp, #4]
 8000b74:	2302      	movs	r3, #2
 8000b76:	9300      	str	r3, [sp, #0]
 8000b78:	2300      	movs	r3, #0
 8000b7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b7e:	4918      	ldr	r1, [pc, #96]	; (8000be0 <taskCreation+0x80>)
 8000b80:	4818      	ldr	r0, [pc, #96]	; (8000be4 <taskCreation+0x84>)
 8000b82:	f000 fc93 	bl	80014ac <xTaskCreate>
 8000b86:	6178      	str	r0, [r7, #20]
	512, /* Stack size in words, not bytes. */
	NULL, /* Parameter passed into the task. */
	2,/* Priority at which the task is created. */
	&HandleTask1); /* Used to pass out the created task's handle. */

	configASSERT(xReturned == pdPASS);
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d00a      	beq.n	8000ba4 <taskCreation+0x44>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b92:	f383 8811 	msr	BASEPRI, r3
 8000b96:	f3bf 8f6f 	isb	sy
 8000b9a:	f3bf 8f4f 	dsb	sy
 8000b9e:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000ba0:	bf00      	nop
 8000ba2:	e7fe      	b.n	8000ba2 <taskCreation+0x42>

	xReturned = xTaskCreate(vTaskTwo, /* Function that implements the task. */
 8000ba4:	1d3b      	adds	r3, r7, #4
 8000ba6:	9301      	str	r3, [sp, #4]
 8000ba8:	2302      	movs	r3, #2
 8000baa:	9300      	str	r3, [sp, #0]
 8000bac:	2300      	movs	r3, #0
 8000bae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bb2:	490d      	ldr	r1, [pc, #52]	; (8000be8 <taskCreation+0x88>)
 8000bb4:	480d      	ldr	r0, [pc, #52]	; (8000bec <taskCreation+0x8c>)
 8000bb6:	f000 fc79 	bl	80014ac <xTaskCreate>
 8000bba:	6178      	str	r0, [r7, #20]
	512, /* Stack size in words, not bytes. */
	NULL, /* Parameter passed into the task. */
	2,/* Priority at which the task is created. */
	&HandleTask2); /* Used to pass out the created task's handle. */

	configASSERT(xReturned == pdPASS);
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d00a      	beq.n	8000bd8 <taskCreation+0x78>
        __asm volatile
 8000bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bc6:	f383 8811 	msr	BASEPRI, r3
 8000bca:	f3bf 8f6f 	isb	sy
 8000bce:	f3bf 8f4f 	dsb	sy
 8000bd2:	60fb      	str	r3, [r7, #12]
    }
 8000bd4:	bf00      	nop
 8000bd6:	e7fe      	b.n	8000bd6 <taskCreation+0x76>

}
 8000bd8:	bf00      	nop
 8000bda:	3718      	adds	r7, #24
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	08004904 	.word	0x08004904
 8000be4:	08000bf1 	.word	0x08000bf1
 8000be8:	0800490c 	.word	0x0800490c
 8000bec:	08000c15 	.word	0x08000c15

08000bf0 <vTaskOne>:

/* Fncin que gobierna la tarea 1 */
void vTaskOne(void *pvParameters) {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]

	while (1) {
		printf("toggle\n");
 8000bf8:	4804      	ldr	r0, [pc, #16]	; (8000c0c <vTaskOne+0x1c>)
 8000bfa:	f003 f993 	bl	8003f24 <puts>
		GPIOxTooglePin(&ledUsuario);
 8000bfe:	4804      	ldr	r0, [pc, #16]	; (8000c10 <vTaskOne+0x20>)
 8000c00:	f002 fbbb 	bl	800337a <GPIOxTooglePin>
		vTaskDelay(pdMS_TO_TICKS(250));
 8000c04:	20fa      	movs	r0, #250	; 0xfa
 8000c06:	f000 fdbb 	bl	8001780 <vTaskDelay>
		printf("toggle\n");
 8000c0a:	e7f5      	b.n	8000bf8 <vTaskOne+0x8>
 8000c0c:	08004914 	.word	0x08004914
 8000c10:	2000008c 	.word	0x2000008c

08000c14 <vTaskTwo>:
	}
}

/* Fncin que gobierna la tarea 2 */
void vTaskTwo(void *pvParameters) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]

	while (1) {

		printf("tarea2\n");
 8000c1c:	4801      	ldr	r0, [pc, #4]	; (8000c24 <vTaskTwo+0x10>)
 8000c1e:	f003 f981 	bl	8003f24 <puts>
 8000c22:	e7fb      	b.n	8000c1c <vTaskTwo+0x8>
 8000c24:	0800491c 	.word	0x0800491c

08000c28 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000c32:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <ITM_SendChar+0x48>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a0e      	ldr	r2, [pc, #56]	; (8000c70 <ITM_SendChar+0x48>)
 8000c38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c3c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000c3e:	4b0d      	ldr	r3, [pc, #52]	; (8000c74 <ITM_SendChar+0x4c>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a0c      	ldr	r2, [pc, #48]	; (8000c74 <ITM_SendChar+0x4c>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000c4a:	bf00      	nop
 8000c4c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d0f8      	beq.n	8000c4c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000c5a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	6013      	str	r3, [r2, #0]
}
 8000c62:	bf00      	nop
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	e000edfc 	.word	0xe000edfc
 8000c74:	e0000e00 	.word	0xe0000e00

08000c78 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	60b9      	str	r1, [r7, #8]
 8000c82:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]
 8000c88:	e00a      	b.n	8000ca0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c8a:	f3af 8000 	nop.w
 8000c8e:	4601      	mov	r1, r0
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	1c5a      	adds	r2, r3, #1
 8000c94:	60ba      	str	r2, [r7, #8]
 8000c96:	b2ca      	uxtb	r2, r1
 8000c98:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	617b      	str	r3, [r7, #20]
 8000ca0:	697a      	ldr	r2, [r7, #20]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	dbf0      	blt.n	8000c8a <_read+0x12>
	}

return len;
 8000ca8:	687b      	ldr	r3, [r7, #4]
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3718      	adds	r7, #24
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b086      	sub	sp, #24
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	60f8      	str	r0, [r7, #12]
 8000cba:	60b9      	str	r1, [r7, #8]
 8000cbc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	617b      	str	r3, [r7, #20]
 8000cc2:	e009      	b.n	8000cd8 <_write+0x26>
	{
//		__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	1c5a      	adds	r2, r3, #1
 8000cc8:	60ba      	str	r2, [r7, #8]
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff ffab 	bl	8000c28 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	617b      	str	r3, [r7, #20]
 8000cd8:	697a      	ldr	r2, [r7, #20]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	dbf1      	blt.n	8000cc4 <_write+0x12>
	}
	return len;
 8000ce0:	687b      	ldr	r3, [r7, #4]
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3718      	adds	r7, #24
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <_close>:

int _close(int file)
{
 8000cea:	b480      	push	{r7}
 8000cec:	b083      	sub	sp, #12
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
	return -1;
 8000cf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr

08000d02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d02:	b480      	push	{r7}
 8000d04:	b083      	sub	sp, #12
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
 8000d0a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d12:	605a      	str	r2, [r3, #4]
	return 0;
 8000d14:	2300      	movs	r3, #0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr

08000d22 <_isatty>:

int _isatty(int file)
{
 8000d22:	b480      	push	{r7}
 8000d24:	b083      	sub	sp, #12
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
	return 1;
 8000d2a:	2301      	movs	r3, #1
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
	return 0;
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3714      	adds	r7, #20
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
	...

08000d54 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d54:	480d      	ldr	r0, [pc, #52]	; (8000d8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d56:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d58:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d5c:	480c      	ldr	r0, [pc, #48]	; (8000d90 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d5e:	490d      	ldr	r1, [pc, #52]	; (8000d94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d60:	4a0d      	ldr	r2, [pc, #52]	; (8000d98 <LoopForever+0xe>)
  movs r3, #0
 8000d62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d64:	e002      	b.n	8000d6c <LoopCopyDataInit>

08000d66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d6a:	3304      	adds	r3, #4

08000d6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d70:	d3f9      	bcc.n	8000d66 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d72:	4a0a      	ldr	r2, [pc, #40]	; (8000d9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d74:	4c0a      	ldr	r4, [pc, #40]	; (8000da0 <LoopForever+0x16>)
  movs r3, #0
 8000d76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d78:	e001      	b.n	8000d7e <LoopFillZerobss>

08000d7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d7c:	3204      	adds	r2, #4

08000d7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d80:	d3fb      	bcc.n	8000d7a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d82:	f003 f827 	bl	8003dd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d86:	f7ff fe71 	bl	8000a6c <main>

08000d8a <LoopForever>:

LoopForever:
    b LoopForever
 8000d8a:	e7fe      	b.n	8000d8a <LoopForever>
  ldr   r0, =_estack
 8000d8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d94:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d98:	080049a8 	.word	0x080049a8
  ldr r2, =_sbss
 8000d9c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000da0:	20012f24 	.word	0x20012f24

08000da4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000da4:	e7fe      	b.n	8000da4 <ADC_IRQHandler>

08000da6 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000da6:	b480      	push	{r7}
 8000da8:	b083      	sub	sp, #12
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	f103 0208 	add.w	r2, r3, #8
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000dbe:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f103 0208 	add.w	r2, r3, #8
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	f103 0208 	add.w	r2, r3, #8
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000dda:	bf00      	nop
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr

08000de6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000de6:	b480      	push	{r7}
 8000de8:	b083      	sub	sp, #12
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2200      	movs	r2, #0
 8000df2:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000df4:	bf00      	nop
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e16:	d103      	bne.n	8000e20 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	691b      	ldr	r3, [r3, #16]
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	e00c      	b.n	8000e3a <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3308      	adds	r3, #8
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	e002      	b.n	8000e2e <vListInsert+0x2e>
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	68ba      	ldr	r2, [r7, #8]
 8000e36:	429a      	cmp	r2, r3
 8000e38:	d2f6      	bcs.n	8000e28 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	685a      	ldr	r2, [r3, #4]
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	683a      	ldr	r2, [r7, #0]
 8000e48:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	68fa      	ldr	r2, [r7, #12]
 8000e4e:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	683a      	ldr	r2, [r7, #0]
 8000e54:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	687a      	ldr	r2, [r7, #4]
 8000e5a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	1c5a      	adds	r2, r3, #1
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	601a      	str	r2, [r3, #0]
}
 8000e66:	bf00      	nop
 8000e68:	3714      	adds	r7, #20
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr

08000e72 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000e72:	b480      	push	{r7}
 8000e74:	b085      	sub	sp, #20
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	691b      	ldr	r3, [r3, #16]
 8000e7e:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	6892      	ldr	r2, [r2, #8]
 8000e88:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	6852      	ldr	r2, [r2, #4]
 8000e92:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	d103      	bne.n	8000ea6 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	689a      	ldr	r2, [r3, #8]
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	1e5a      	subs	r2, r3, #1
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	681b      	ldr	r3, [r3, #0]
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3714      	adds	r7, #20
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
	...

08000ec8 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d10a      	bne.n	8000ef6 <xQueueGenericReset+0x2e>
        __asm volatile
 8000ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ee4:	f383 8811 	msr	BASEPRI, r3
 8000ee8:	f3bf 8f6f 	isb	sy
 8000eec:	f3bf 8f4f 	dsb	sy
 8000ef0:	60fb      	str	r3, [r7, #12]
    }
 8000ef2:	bf00      	nop
 8000ef4:	e7fe      	b.n	8000ef4 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d05d      	beq.n	8000fb8 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d059      	beq.n	8000fb8 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	fba3 2302 	umull	r2, r3, r3, r2
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d000      	beq.n	8000f18 <xQueueGenericReset+0x50>
 8000f16:	2101      	movs	r1, #1
 8000f18:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d14c      	bne.n	8000fb8 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8000f1e:	f001 fe0b 	bl	8002b38 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f2a:	6939      	ldr	r1, [r7, #16]
 8000f2c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000f2e:	fb01 f303 	mul.w	r3, r1, r3
 8000f32:	441a      	add	r2, r3
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	6939      	ldr	r1, [r7, #16]
 8000f52:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000f54:	fb01 f303 	mul.w	r3, r1, r3
 8000f58:	441a      	add	r2, r3
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	22ff      	movs	r2, #255	; 0xff
 8000f62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	22ff      	movs	r2, #255	; 0xff
 8000f6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d114      	bne.n	8000f9e <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	691b      	ldr	r3, [r3, #16]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d01a      	beq.n	8000fb2 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	3310      	adds	r3, #16
 8000f80:	4618      	mov	r0, r3
 8000f82:	f000 ff79 	bl	8001e78 <xTaskRemoveFromEventList>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d012      	beq.n	8000fb2 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000f8c:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <xQueueGenericReset+0x11c>)
 8000f8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	f3bf 8f4f 	dsb	sy
 8000f98:	f3bf 8f6f 	isb	sy
 8000f9c:	e009      	b.n	8000fb2 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	3310      	adds	r3, #16
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff feff 	bl	8000da6 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	3324      	adds	r3, #36	; 0x24
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff fefa 	bl	8000da6 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8000fb2:	f001 fdf1 	bl	8002b98 <vPortExitCritical>
 8000fb6:	e001      	b.n	8000fbc <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d10a      	bne.n	8000fd8 <xQueueGenericReset+0x110>
        __asm volatile
 8000fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fc6:	f383 8811 	msr	BASEPRI, r3
 8000fca:	f3bf 8f6f 	isb	sy
 8000fce:	f3bf 8f4f 	dsb	sy
 8000fd2:	60bb      	str	r3, [r7, #8]
    }
 8000fd4:	bf00      	nop
 8000fd6:	e7fe      	b.n	8000fd6 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8000fd8:	697b      	ldr	r3, [r7, #20]
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3718      	adds	r7, #24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	e000ed04 	.word	0xe000ed04

08000fe8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08a      	sub	sp, #40	; 0x28
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d02e      	beq.n	800105e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001000:	2100      	movs	r1, #0
 8001002:	68ba      	ldr	r2, [r7, #8]
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	fba3 2302 	umull	r2, r3, r3, r2
 800100a:	2b00      	cmp	r3, #0
 800100c:	d000      	beq.n	8001010 <xQueueGenericCreate+0x28>
 800100e:	2101      	movs	r1, #1
 8001010:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001012:	2b00      	cmp	r3, #0
 8001014:	d123      	bne.n	800105e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	68ba      	ldr	r2, [r7, #8]
 800101a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800101e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8001022:	d81c      	bhi.n	800105e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	fb02 f303 	mul.w	r3, r2, r3
 800102c:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	3350      	adds	r3, #80	; 0x50
 8001032:	4618      	mov	r0, r3
 8001034:	f001 fe62 	bl	8002cfc <pvPortMalloc>
 8001038:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d01c      	beq.n	800107a <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	3350      	adds	r3, #80	; 0x50
 8001048:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800104a:	79fa      	ldrb	r2, [r7, #7]
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	4613      	mov	r3, r2
 8001052:	697a      	ldr	r2, [r7, #20]
 8001054:	68b9      	ldr	r1, [r7, #8]
 8001056:	68f8      	ldr	r0, [r7, #12]
 8001058:	f000 f814 	bl	8001084 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800105c:	e00d      	b.n	800107a <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d10a      	bne.n	800107a <xQueueGenericCreate+0x92>
        __asm volatile
 8001064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001068:	f383 8811 	msr	BASEPRI, r3
 800106c:	f3bf 8f6f 	isb	sy
 8001070:	f3bf 8f4f 	dsb	sy
 8001074:	613b      	str	r3, [r7, #16]
    }
 8001076:	bf00      	nop
 8001078:	e7fe      	b.n	8001078 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800107a:	69fb      	ldr	r3, [r7, #28]
    }
 800107c:	4618      	mov	r0, r3
 800107e:	3720      	adds	r7, #32
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	607a      	str	r2, [r7, #4]
 8001090:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d103      	bne.n	80010a0 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	e002      	b.n	80010a6 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	68fa      	ldr	r2, [r7, #12]
 80010aa:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	68ba      	ldr	r2, [r7, #8]
 80010b0:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80010b2:	2101      	movs	r1, #1
 80010b4:	69b8      	ldr	r0, [r7, #24]
 80010b6:	f7ff ff07 	bl	8000ec8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	78fa      	ldrb	r2, [r7, #3]
 80010be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80010c2:	bf00      	nop
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
	...

080010cc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08c      	sub	sp, #48	; 0x30
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80010d8:	2300      	movs	r3, #0
 80010da:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80010e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d10a      	bne.n	80010fc <xQueueReceive+0x30>
        __asm volatile
 80010e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010ea:	f383 8811 	msr	BASEPRI, r3
 80010ee:	f3bf 8f6f 	isb	sy
 80010f2:	f3bf 8f4f 	dsb	sy
 80010f6:	623b      	str	r3, [r7, #32]
    }
 80010f8:	bf00      	nop
 80010fa:	e7fe      	b.n	80010fa <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d103      	bne.n	800110a <xQueueReceive+0x3e>
 8001102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001106:	2b00      	cmp	r3, #0
 8001108:	d101      	bne.n	800110e <xQueueReceive+0x42>
 800110a:	2301      	movs	r3, #1
 800110c:	e000      	b.n	8001110 <xQueueReceive+0x44>
 800110e:	2300      	movs	r3, #0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d10a      	bne.n	800112a <xQueueReceive+0x5e>
        __asm volatile
 8001114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001118:	f383 8811 	msr	BASEPRI, r3
 800111c:	f3bf 8f6f 	isb	sy
 8001120:	f3bf 8f4f 	dsb	sy
 8001124:	61fb      	str	r3, [r7, #28]
    }
 8001126:	bf00      	nop
 8001128:	e7fe      	b.n	8001128 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800112a:	f001 f8b5 	bl	8002298 <xTaskGetSchedulerState>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d102      	bne.n	800113a <xQueueReceive+0x6e>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d101      	bne.n	800113e <xQueueReceive+0x72>
 800113a:	2301      	movs	r3, #1
 800113c:	e000      	b.n	8001140 <xQueueReceive+0x74>
 800113e:	2300      	movs	r3, #0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d10a      	bne.n	800115a <xQueueReceive+0x8e>
        __asm volatile
 8001144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001148:	f383 8811 	msr	BASEPRI, r3
 800114c:	f3bf 8f6f 	isb	sy
 8001150:	f3bf 8f4f 	dsb	sy
 8001154:	61bb      	str	r3, [r7, #24]
    }
 8001156:	bf00      	nop
 8001158:	e7fe      	b.n	8001158 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800115a:	f001 fced 	bl	8002b38 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800115e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001162:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001166:	2b00      	cmp	r3, #0
 8001168:	d01f      	beq.n	80011aa <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800116a:	68b9      	ldr	r1, [r7, #8]
 800116c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800116e:	f000 f88d 	bl	800128c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001174:	1e5a      	subs	r2, r3, #1
 8001176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001178:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800117a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800117c:	691b      	ldr	r3, [r3, #16]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d00f      	beq.n	80011a2 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001184:	3310      	adds	r3, #16
 8001186:	4618      	mov	r0, r3
 8001188:	f000 fe76 	bl	8001e78 <xTaskRemoveFromEventList>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d007      	beq.n	80011a2 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001192:	4b3d      	ldr	r3, [pc, #244]	; (8001288 <xQueueReceive+0x1bc>)
 8001194:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	f3bf 8f4f 	dsb	sy
 800119e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80011a2:	f001 fcf9 	bl	8002b98 <vPortExitCritical>
                return pdPASS;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e069      	b.n	800127e <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d103      	bne.n	80011b8 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80011b0:	f001 fcf2 	bl	8002b98 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80011b4:	2300      	movs	r3, #0
 80011b6:	e062      	b.n	800127e <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 80011b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d106      	bne.n	80011cc <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80011be:	f107 0310 	add.w	r3, r7, #16
 80011c2:	4618      	mov	r0, r3
 80011c4:	f000 ff2e 	bl	8002024 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80011c8:	2301      	movs	r3, #1
 80011ca:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80011cc:	f001 fce4 	bl	8002b98 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80011d0:	f000 fb5c 	bl	800188c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80011d4:	f001 fcb0 	bl	8002b38 <vPortEnterCritical>
 80011d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80011de:	b25b      	sxtb	r3, r3
 80011e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011e4:	d103      	bne.n	80011ee <xQueueReceive+0x122>
 80011e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80011ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80011f4:	b25b      	sxtb	r3, r3
 80011f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011fa:	d103      	bne.n	8001204 <xQueueReceive+0x138>
 80011fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011fe:	2200      	movs	r2, #0
 8001200:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001204:	f001 fcc8 	bl	8002b98 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001208:	1d3a      	adds	r2, r7, #4
 800120a:	f107 0310 	add.w	r3, r7, #16
 800120e:	4611      	mov	r1, r2
 8001210:	4618      	mov	r0, r3
 8001212:	f000 ff1d 	bl	8002050 <xTaskCheckForTimeOut>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d123      	bne.n	8001264 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800121c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800121e:	f000 f8ad 	bl	800137c <prvIsQueueEmpty>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d017      	beq.n	8001258 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800122a:	3324      	adds	r3, #36	; 0x24
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	4611      	mov	r1, r2
 8001230:	4618      	mov	r0, r3
 8001232:	f000 fdb7 	bl	8001da4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001236:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001238:	f000 f84e 	bl	80012d8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800123c:	f000 fb34 	bl	80018a8 <xTaskResumeAll>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d189      	bne.n	800115a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8001246:	4b10      	ldr	r3, [pc, #64]	; (8001288 <xQueueReceive+0x1bc>)
 8001248:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	f3bf 8f4f 	dsb	sy
 8001252:	f3bf 8f6f 	isb	sy
 8001256:	e780      	b.n	800115a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8001258:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800125a:	f000 f83d 	bl	80012d8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800125e:	f000 fb23 	bl	80018a8 <xTaskResumeAll>
 8001262:	e77a      	b.n	800115a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8001264:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001266:	f000 f837 	bl	80012d8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800126a:	f000 fb1d 	bl	80018a8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800126e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001270:	f000 f884 	bl	800137c <prvIsQueueEmpty>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	f43f af6f 	beq.w	800115a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800127c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800127e:	4618      	mov	r0, r3
 8001280:	3730      	adds	r7, #48	; 0x30
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	e000ed04 	.word	0xe000ed04

0800128c <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129a:	2b00      	cmp	r3, #0
 800129c:	d018      	beq.n	80012d0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	68da      	ldr	r2, [r3, #12]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	441a      	add	r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	68da      	ldr	r2, [r3, #12]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d303      	bcc.n	80012c0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	68d9      	ldr	r1, [r3, #12]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c8:	461a      	mov	r2, r3
 80012ca:	6838      	ldr	r0, [r7, #0]
 80012cc:	f002 fda6 	bl	8003e1c <memcpy>
    }
}
 80012d0:	bf00      	nop
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80012e0:	f001 fc2a 	bl	8002b38 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80012ea:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80012ec:	e011      	b.n	8001312 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d012      	beq.n	800131c <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	3324      	adds	r3, #36	; 0x24
 80012fa:	4618      	mov	r0, r3
 80012fc:	f000 fdbc 	bl	8001e78 <xTaskRemoveFromEventList>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8001306:	f000 ff09 	bl	800211c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800130a:	7bfb      	ldrb	r3, [r7, #15]
 800130c:	3b01      	subs	r3, #1
 800130e:	b2db      	uxtb	r3, r3
 8001310:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001316:	2b00      	cmp	r3, #0
 8001318:	dce9      	bgt.n	80012ee <prvUnlockQueue+0x16>
 800131a:	e000      	b.n	800131e <prvUnlockQueue+0x46>
                    break;
 800131c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	22ff      	movs	r2, #255	; 0xff
 8001322:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8001326:	f001 fc37 	bl	8002b98 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800132a:	f001 fc05 	bl	8002b38 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001334:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001336:	e011      	b.n	800135c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	691b      	ldr	r3, [r3, #16]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d012      	beq.n	8001366 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3310      	adds	r3, #16
 8001344:	4618      	mov	r0, r3
 8001346:	f000 fd97 	bl	8001e78 <xTaskRemoveFromEventList>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8001350:	f000 fee4 	bl	800211c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8001354:	7bbb      	ldrb	r3, [r7, #14]
 8001356:	3b01      	subs	r3, #1
 8001358:	b2db      	uxtb	r3, r3
 800135a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800135c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001360:	2b00      	cmp	r3, #0
 8001362:	dce9      	bgt.n	8001338 <prvUnlockQueue+0x60>
 8001364:	e000      	b.n	8001368 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8001366:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	22ff      	movs	r2, #255	; 0xff
 800136c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8001370:	f001 fc12 	bl	8002b98 <vPortExitCritical>
}
 8001374:	bf00      	nop
 8001376:	3710      	adds	r7, #16
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001384:	f001 fbd8 	bl	8002b38 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800138c:	2b00      	cmp	r3, #0
 800138e:	d102      	bne.n	8001396 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001390:	2301      	movs	r3, #1
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	e001      	b.n	800139a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800139a:	f001 fbfd 	bl	8002b98 <vPortExitCritical>

    return xReturn;
 800139e:	68fb      	ldr	r3, [r7, #12]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3710      	adds	r7, #16
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80013a8:	b480      	push	{r7}
 80013aa:	b087      	sub	sp, #28
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d10a      	bne.n	80013d2 <vQueueAddToRegistry+0x2a>
        __asm volatile
 80013bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013c0:	f383 8811 	msr	BASEPRI, r3
 80013c4:	f3bf 8f6f 	isb	sy
 80013c8:	f3bf 8f4f 	dsb	sy
 80013cc:	60fb      	str	r3, [r7, #12]
    }
 80013ce:	bf00      	nop
 80013d0:	e7fe      	b.n	80013d0 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d024      	beq.n	8001422 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]
 80013dc:	e01e      	b.n	800141c <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80013de:	4a18      	ldr	r2, [pc, #96]	; (8001440 <vQueueAddToRegistry+0x98>)
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	4413      	add	r3, r2
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d105      	bne.n	80013fa <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	4a13      	ldr	r2, [pc, #76]	; (8001440 <vQueueAddToRegistry+0x98>)
 80013f4:	4413      	add	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]
                    break;
 80013f8:	e013      	b.n	8001422 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d10a      	bne.n	8001416 <vQueueAddToRegistry+0x6e>
 8001400:	4a0f      	ldr	r2, [pc, #60]	; (8001440 <vQueueAddToRegistry+0x98>)
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d104      	bne.n	8001416 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	00db      	lsls	r3, r3, #3
 8001410:	4a0b      	ldr	r2, [pc, #44]	; (8001440 <vQueueAddToRegistry+0x98>)
 8001412:	4413      	add	r3, r2
 8001414:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	3301      	adds	r3, #1
 800141a:	617b      	str	r3, [r7, #20]
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	2b07      	cmp	r3, #7
 8001420:	d9dd      	bls.n	80013de <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d005      	beq.n	8001434 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	683a      	ldr	r2, [r7, #0]
 800142c:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8001434:	bf00      	nop
 8001436:	371c      	adds	r7, #28
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	20000148 	.word	0x20000148

08001444 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8001454:	f001 fb70 	bl	8002b38 <vPortEnterCritical>
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800145e:	b25b      	sxtb	r3, r3
 8001460:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001464:	d103      	bne.n	800146e <vQueueWaitForMessageRestricted+0x2a>
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	2200      	movs	r2, #0
 800146a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001474:	b25b      	sxtb	r3, r3
 8001476:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800147a:	d103      	bne.n	8001484 <vQueueWaitForMessageRestricted+0x40>
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	2200      	movs	r2, #0
 8001480:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001484:	f001 fb88 	bl	8002b98 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800148c:	2b00      	cmp	r3, #0
 800148e:	d106      	bne.n	800149e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	3324      	adds	r3, #36	; 0x24
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	68b9      	ldr	r1, [r7, #8]
 8001498:	4618      	mov	r0, r3
 800149a:	f000 fca7 	bl	8001dec <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800149e:	6978      	ldr	r0, [r7, #20]
 80014a0:	f7ff ff1a 	bl	80012d8 <prvUnlockQueue>
    }
 80014a4:	bf00      	nop
 80014a6:	3718      	adds	r7, #24
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08c      	sub	sp, #48	; 0x30
 80014b0:	af04      	add	r7, sp, #16
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	603b      	str	r3, [r7, #0]
 80014b8:	4613      	mov	r3, r2
 80014ba:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80014bc:	88fb      	ldrh	r3, [r7, #6]
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	4618      	mov	r0, r3
 80014c2:	f001 fc1b 	bl	8002cfc <pvPortMalloc>
 80014c6:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d013      	beq.n	80014f6 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80014ce:	2058      	movs	r0, #88	; 0x58
 80014d0:	f001 fc14 	bl	8002cfc <pvPortMalloc>
 80014d4:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d008      	beq.n	80014ee <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80014dc:	2258      	movs	r2, #88	; 0x58
 80014de:	2100      	movs	r1, #0
 80014e0:	69f8      	ldr	r0, [r7, #28]
 80014e2:	f002 fca9 	bl	8003e38 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	697a      	ldr	r2, [r7, #20]
 80014ea:	631a      	str	r2, [r3, #48]	; 0x30
 80014ec:	e005      	b.n	80014fa <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80014ee:	6978      	ldr	r0, [r7, #20]
 80014f0:	f001 fcbe 	bl	8002e70 <vPortFree>
 80014f4:	e001      	b.n	80014fa <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d013      	beq.n	8001528 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001500:	88fa      	ldrh	r2, [r7, #6]
 8001502:	2300      	movs	r3, #0
 8001504:	9303      	str	r3, [sp, #12]
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	9302      	str	r3, [sp, #8]
 800150a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800150c:	9301      	str	r3, [sp, #4]
 800150e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001510:	9300      	str	r3, [sp, #0]
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	68b9      	ldr	r1, [r7, #8]
 8001516:	68f8      	ldr	r0, [r7, #12]
 8001518:	f000 f80e 	bl	8001538 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800151c:	69f8      	ldr	r0, [r7, #28]
 800151e:	f000 f899 	bl	8001654 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001522:	2301      	movs	r3, #1
 8001524:	61bb      	str	r3, [r7, #24]
 8001526:	e002      	b.n	800152e <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001528:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800152c:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800152e:	69bb      	ldr	r3, [r7, #24]
    }
 8001530:	4618      	mov	r0, r3
 8001532:	3720      	adds	r7, #32
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b088      	sub	sp, #32
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
 8001544:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001548:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	461a      	mov	r2, r3
 8001550:	21a5      	movs	r1, #165	; 0xa5
 8001552:	f002 fc71 	bl	8003e38 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001558:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001560:	3b01      	subs	r3, #1
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4413      	add	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	f023 0307 	bic.w	r3, r3, #7
 800156e:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	2b00      	cmp	r3, #0
 8001578:	d00a      	beq.n	8001590 <prvInitialiseNewTask+0x58>
        __asm volatile
 800157a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800157e:	f383 8811 	msr	BASEPRI, r3
 8001582:	f3bf 8f6f 	isb	sy
 8001586:	f3bf 8f4f 	dsb	sy
 800158a:	617b      	str	r3, [r7, #20]
    }
 800158c:	bf00      	nop
 800158e:	e7fe      	b.n	800158e <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d01e      	beq.n	80015d4 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001596:	2300      	movs	r3, #0
 8001598:	61fb      	str	r3, [r7, #28]
 800159a:	e012      	b.n	80015c2 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800159c:	68ba      	ldr	r2, [r7, #8]
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	4413      	add	r3, r2
 80015a2:	7819      	ldrb	r1, [r3, #0]
 80015a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	4413      	add	r3, r2
 80015aa:	3334      	adds	r3, #52	; 0x34
 80015ac:	460a      	mov	r2, r1
 80015ae:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80015b0:	68ba      	ldr	r2, [r7, #8]
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	4413      	add	r3, r2
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d006      	beq.n	80015ca <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	3301      	adds	r3, #1
 80015c0:	61fb      	str	r3, [r7, #28]
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	2b09      	cmp	r3, #9
 80015c6:	d9e9      	bls.n	800159c <prvInitialiseNewTask+0x64>
 80015c8:	e000      	b.n	80015cc <prvInitialiseNewTask+0x94>
            {
                break;
 80015ca:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80015cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015ce:	2200      	movs	r2, #0
 80015d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80015d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d6:	2b04      	cmp	r3, #4
 80015d8:	d90a      	bls.n	80015f0 <prvInitialiseNewTask+0xb8>
        __asm volatile
 80015da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015de:	f383 8811 	msr	BASEPRI, r3
 80015e2:	f3bf 8f6f 	isb	sy
 80015e6:	f3bf 8f4f 	dsb	sy
 80015ea:	613b      	str	r3, [r7, #16]
    }
 80015ec:	bf00      	nop
 80015ee:	e7fe      	b.n	80015ee <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80015f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015f2:	2b04      	cmp	r3, #4
 80015f4:	d901      	bls.n	80015fa <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80015f6:	2304      	movs	r3, #4
 80015f8:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80015fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015fe:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8001600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001602:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001604:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001608:	3304      	adds	r3, #4
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff fbeb 	bl	8000de6 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001612:	3318      	adds	r3, #24
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff fbe6 	bl	8000de6 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800161a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800161c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800161e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001622:	f1c3 0205 	rsb	r2, r3, #5
 8001626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001628:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800162a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800162c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800162e:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001630:	683a      	ldr	r2, [r7, #0]
 8001632:	68f9      	ldr	r1, [r7, #12]
 8001634:	69b8      	ldr	r0, [r7, #24]
 8001636:	f001 f951 	bl	80028dc <pxPortInitialiseStack>
 800163a:	4602      	mov	r2, r0
 800163c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800163e:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001642:	2b00      	cmp	r3, #0
 8001644:	d002      	beq.n	800164c <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001648:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800164a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800164c:	bf00      	nop
 800164e:	3720      	adds	r7, #32
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800165c:	f001 fa6c 	bl	8002b38 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001660:	4b40      	ldr	r3, [pc, #256]	; (8001764 <prvAddNewTaskToReadyList+0x110>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	3301      	adds	r3, #1
 8001666:	4a3f      	ldr	r2, [pc, #252]	; (8001764 <prvAddNewTaskToReadyList+0x110>)
 8001668:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800166a:	4b3f      	ldr	r3, [pc, #252]	; (8001768 <prvAddNewTaskToReadyList+0x114>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d109      	bne.n	8001686 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001672:	4a3d      	ldr	r2, [pc, #244]	; (8001768 <prvAddNewTaskToReadyList+0x114>)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001678:	4b3a      	ldr	r3, [pc, #232]	; (8001764 <prvAddNewTaskToReadyList+0x110>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d110      	bne.n	80016a2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001680:	f000 fd70 	bl	8002164 <prvInitialiseTaskLists>
 8001684:	e00d      	b.n	80016a2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001686:	4b39      	ldr	r3, [pc, #228]	; (800176c <prvAddNewTaskToReadyList+0x118>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d109      	bne.n	80016a2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800168e:	4b36      	ldr	r3, [pc, #216]	; (8001768 <prvAddNewTaskToReadyList+0x114>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001698:	429a      	cmp	r2, r3
 800169a:	d802      	bhi.n	80016a2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800169c:	4a32      	ldr	r2, [pc, #200]	; (8001768 <prvAddNewTaskToReadyList+0x114>)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80016a2:	4b33      	ldr	r3, [pc, #204]	; (8001770 <prvAddNewTaskToReadyList+0x11c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	3301      	adds	r3, #1
 80016a8:	4a31      	ldr	r2, [pc, #196]	; (8001770 <prvAddNewTaskToReadyList+0x11c>)
 80016aa:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80016ac:	4b30      	ldr	r3, [pc, #192]	; (8001770 <prvAddNewTaskToReadyList+0x11c>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b8:	2201      	movs	r2, #1
 80016ba:	409a      	lsls	r2, r3
 80016bc:	4b2d      	ldr	r3, [pc, #180]	; (8001774 <prvAddNewTaskToReadyList+0x120>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	4a2c      	ldr	r2, [pc, #176]	; (8001774 <prvAddNewTaskToReadyList+0x120>)
 80016c4:	6013      	str	r3, [r2, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016ca:	492b      	ldr	r1, [pc, #172]	; (8001778 <prvAddNewTaskToReadyList+0x124>)
 80016cc:	4613      	mov	r3, r2
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	4413      	add	r3, r2
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	440b      	add	r3, r1
 80016d6:	3304      	adds	r3, #4
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	609a      	str	r2, [r3, #8]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	689a      	ldr	r2, [r3, #8]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	60da      	str	r2, [r3, #12]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	3204      	adds	r2, #4
 80016f2:	605a      	str	r2, [r3, #4]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	1d1a      	adds	r2, r3, #4
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001700:	4613      	mov	r3, r2
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	4413      	add	r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4a1b      	ldr	r2, [pc, #108]	; (8001778 <prvAddNewTaskToReadyList+0x124>)
 800170a:	441a      	add	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	615a      	str	r2, [r3, #20]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001714:	4918      	ldr	r1, [pc, #96]	; (8001778 <prvAddNewTaskToReadyList+0x124>)
 8001716:	4613      	mov	r3, r2
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	4413      	add	r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	440b      	add	r3, r1
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	1c59      	adds	r1, r3, #1
 8001724:	4814      	ldr	r0, [pc, #80]	; (8001778 <prvAddNewTaskToReadyList+0x124>)
 8001726:	4613      	mov	r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	4413      	add	r3, r2
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	4403      	add	r3, r0
 8001730:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001732:	f001 fa31 	bl	8002b98 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001736:	4b0d      	ldr	r3, [pc, #52]	; (800176c <prvAddNewTaskToReadyList+0x118>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d00e      	beq.n	800175c <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800173e:	4b0a      	ldr	r3, [pc, #40]	; (8001768 <prvAddNewTaskToReadyList+0x114>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001748:	429a      	cmp	r2, r3
 800174a:	d207      	bcs.n	800175c <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800174c:	4b0b      	ldr	r3, [pc, #44]	; (800177c <prvAddNewTaskToReadyList+0x128>)
 800174e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	f3bf 8f4f 	dsb	sy
 8001758:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800175c:	bf00      	nop
 800175e:	3710      	adds	r7, #16
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	20000260 	.word	0x20000260
 8001768:	20000188 	.word	0x20000188
 800176c:	2000026c 	.word	0x2000026c
 8001770:	2000027c 	.word	0x2000027c
 8001774:	20000268 	.word	0x20000268
 8001778:	2000018c 	.word	0x2000018c
 800177c:	e000ed04 	.word	0xe000ed04

08001780 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8001788:	2300      	movs	r3, #0
 800178a:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d017      	beq.n	80017c2 <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8001792:	4b13      	ldr	r3, [pc, #76]	; (80017e0 <vTaskDelay+0x60>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d00a      	beq.n	80017b0 <vTaskDelay+0x30>
        __asm volatile
 800179a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800179e:	f383 8811 	msr	BASEPRI, r3
 80017a2:	f3bf 8f6f 	isb	sy
 80017a6:	f3bf 8f4f 	dsb	sy
 80017aa:	60bb      	str	r3, [r7, #8]
    }
 80017ac:	bf00      	nop
 80017ae:	e7fe      	b.n	80017ae <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80017b0:	f000 f86c 	bl	800188c <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80017b4:	2100      	movs	r1, #0
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f000 fd8c 	bl	80022d4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80017bc:	f000 f874 	bl	80018a8 <xTaskResumeAll>
 80017c0:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d107      	bne.n	80017d8 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 80017c8:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <vTaskDelay+0x64>)
 80017ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	f3bf 8f4f 	dsb	sy
 80017d4:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80017d8:	bf00      	nop
 80017da:	3710      	adds	r7, #16
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	20000288 	.word	0x20000288
 80017e4:	e000ed04 	.word	0xe000ed04

080017e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80017ee:	4b20      	ldr	r3, [pc, #128]	; (8001870 <vTaskStartScheduler+0x88>)
 80017f0:	9301      	str	r3, [sp, #4]
 80017f2:	2300      	movs	r3, #0
 80017f4:	9300      	str	r3, [sp, #0]
 80017f6:	2300      	movs	r3, #0
 80017f8:	2282      	movs	r2, #130	; 0x82
 80017fa:	491e      	ldr	r1, [pc, #120]	; (8001874 <vTaskStartScheduler+0x8c>)
 80017fc:	481e      	ldr	r0, [pc, #120]	; (8001878 <vTaskStartScheduler+0x90>)
 80017fe:	f7ff fe55 	bl	80014ac <xTaskCreate>
 8001802:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d102      	bne.n	8001810 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 800180a:	f000 fde3 	bl	80023d4 <xTimerCreateTimerTask>
 800180e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d116      	bne.n	8001844 <vTaskStartScheduler+0x5c>
        __asm volatile
 8001816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800181a:	f383 8811 	msr	BASEPRI, r3
 800181e:	f3bf 8f6f 	isb	sy
 8001822:	f3bf 8f4f 	dsb	sy
 8001826:	60bb      	str	r3, [r7, #8]
    }
 8001828:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800182a:	4b14      	ldr	r3, [pc, #80]	; (800187c <vTaskStartScheduler+0x94>)
 800182c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001830:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001832:	4b13      	ldr	r3, [pc, #76]	; (8001880 <vTaskStartScheduler+0x98>)
 8001834:	2201      	movs	r2, #1
 8001836:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001838:	4b12      	ldr	r3, [pc, #72]	; (8001884 <vTaskStartScheduler+0x9c>)
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800183e:	f001 f8d9 	bl	80029f4 <xPortStartScheduler>
 8001842:	e00e      	b.n	8001862 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800184a:	d10a      	bne.n	8001862 <vTaskStartScheduler+0x7a>
        __asm volatile
 800184c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001850:	f383 8811 	msr	BASEPRI, r3
 8001854:	f3bf 8f6f 	isb	sy
 8001858:	f3bf 8f4f 	dsb	sy
 800185c:	607b      	str	r3, [r7, #4]
    }
 800185e:	bf00      	nop
 8001860:	e7fe      	b.n	8001860 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001862:	4b09      	ldr	r3, [pc, #36]	; (8001888 <vTaskStartScheduler+0xa0>)
 8001864:	681b      	ldr	r3, [r3, #0]
}
 8001866:	bf00      	nop
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20000284 	.word	0x20000284
 8001874:	08004924 	.word	0x08004924
 8001878:	08002135 	.word	0x08002135
 800187c:	20000280 	.word	0x20000280
 8001880:	2000026c 	.word	0x2000026c
 8001884:	20000264 	.word	0x20000264
 8001888:	20000004 	.word	0x20000004

0800188c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001890:	4b04      	ldr	r3, [pc, #16]	; (80018a4 <vTaskSuspendAll+0x18>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	3301      	adds	r3, #1
 8001896:	4a03      	ldr	r2, [pc, #12]	; (80018a4 <vTaskSuspendAll+0x18>)
 8001898:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800189a:	bf00      	nop
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	20000288 	.word	0x20000288

080018a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b088      	sub	sp, #32
 80018ac:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80018ae:	2300      	movs	r3, #0
 80018b0:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80018b2:	2300      	movs	r3, #0
 80018b4:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80018b6:	4b71      	ldr	r3, [pc, #452]	; (8001a7c <xTaskResumeAll+0x1d4>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d10a      	bne.n	80018d4 <xTaskResumeAll+0x2c>
        __asm volatile
 80018be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018c2:	f383 8811 	msr	BASEPRI, r3
 80018c6:	f3bf 8f6f 	isb	sy
 80018ca:	f3bf 8f4f 	dsb	sy
 80018ce:	607b      	str	r3, [r7, #4]
    }
 80018d0:	bf00      	nop
 80018d2:	e7fe      	b.n	80018d2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80018d4:	f001 f930 	bl	8002b38 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80018d8:	4b68      	ldr	r3, [pc, #416]	; (8001a7c <xTaskResumeAll+0x1d4>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	3b01      	subs	r3, #1
 80018de:	4a67      	ldr	r2, [pc, #412]	; (8001a7c <xTaskResumeAll+0x1d4>)
 80018e0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80018e2:	4b66      	ldr	r3, [pc, #408]	; (8001a7c <xTaskResumeAll+0x1d4>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	f040 80c0 	bne.w	8001a6c <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80018ec:	4b64      	ldr	r3, [pc, #400]	; (8001a80 <xTaskResumeAll+0x1d8>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	f000 80bb 	beq.w	8001a6c <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80018f6:	e08a      	b.n	8001a0e <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80018f8:	4b62      	ldr	r3, [pc, #392]	; (8001a84 <xTaskResumeAll+0x1dc>)
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001904:	613b      	str	r3, [r7, #16]
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	69db      	ldr	r3, [r3, #28]
 800190a:	69fa      	ldr	r2, [r7, #28]
 800190c:	6a12      	ldr	r2, [r2, #32]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	6a1b      	ldr	r3, [r3, #32]
 8001914:	69fa      	ldr	r2, [r7, #28]
 8001916:	69d2      	ldr	r2, [r2, #28]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	685a      	ldr	r2, [r3, #4]
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	3318      	adds	r3, #24
 8001922:	429a      	cmp	r2, r3
 8001924:	d103      	bne.n	800192e <xTaskResumeAll+0x86>
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	6a1a      	ldr	r2, [r3, #32]
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	2200      	movs	r2, #0
 8001932:	629a      	str	r2, [r3, #40]	; 0x28
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	1e5a      	subs	r2, r3, #1
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	695b      	ldr	r3, [r3, #20]
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	69fa      	ldr	r2, [r7, #28]
 800194a:	68d2      	ldr	r2, [r2, #12]
 800194c:	609a      	str	r2, [r3, #8]
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	69fa      	ldr	r2, [r7, #28]
 8001954:	6892      	ldr	r2, [r2, #8]
 8001956:	605a      	str	r2, [r3, #4]
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	685a      	ldr	r2, [r3, #4]
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	3304      	adds	r3, #4
 8001960:	429a      	cmp	r2, r3
 8001962:	d103      	bne.n	800196c <xTaskResumeAll+0xc4>
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	68da      	ldr	r2, [r3, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	605a      	str	r2, [r3, #4]
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	2200      	movs	r2, #0
 8001970:	615a      	str	r2, [r3, #20]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	1e5a      	subs	r2, r3, #1
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001980:	2201      	movs	r2, #1
 8001982:	409a      	lsls	r2, r3
 8001984:	4b40      	ldr	r3, [pc, #256]	; (8001a88 <xTaskResumeAll+0x1e0>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4313      	orrs	r3, r2
 800198a:	4a3f      	ldr	r2, [pc, #252]	; (8001a88 <xTaskResumeAll+0x1e0>)
 800198c:	6013      	str	r3, [r2, #0]
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001992:	493e      	ldr	r1, [pc, #248]	; (8001a8c <xTaskResumeAll+0x1e4>)
 8001994:	4613      	mov	r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4413      	add	r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	440b      	add	r3, r1
 800199e:	3304      	adds	r3, #4
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	60bb      	str	r3, [r7, #8]
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	68ba      	ldr	r2, [r7, #8]
 80019a8:	609a      	str	r2, [r3, #8]
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	689a      	ldr	r2, [r3, #8]
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	69fa      	ldr	r2, [r7, #28]
 80019b8:	3204      	adds	r2, #4
 80019ba:	605a      	str	r2, [r3, #4]
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	1d1a      	adds	r2, r3, #4
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019c8:	4613      	mov	r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4413      	add	r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	4a2e      	ldr	r2, [pc, #184]	; (8001a8c <xTaskResumeAll+0x1e4>)
 80019d2:	441a      	add	r2, r3
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	615a      	str	r2, [r3, #20]
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019dc:	492b      	ldr	r1, [pc, #172]	; (8001a8c <xTaskResumeAll+0x1e4>)
 80019de:	4613      	mov	r3, r2
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	4413      	add	r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	440b      	add	r3, r1
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	1c59      	adds	r1, r3, #1
 80019ec:	4827      	ldr	r0, [pc, #156]	; (8001a8c <xTaskResumeAll+0x1e4>)
 80019ee:	4613      	mov	r3, r2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	4413      	add	r3, r2
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	4403      	add	r3, r0
 80019f8:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019fe:	4b24      	ldr	r3, [pc, #144]	; (8001a90 <xTaskResumeAll+0x1e8>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d302      	bcc.n	8001a0e <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8001a08:	4b22      	ldr	r3, [pc, #136]	; (8001a94 <xTaskResumeAll+0x1ec>)
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001a0e:	4b1d      	ldr	r3, [pc, #116]	; (8001a84 <xTaskResumeAll+0x1dc>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f47f af70 	bne.w	80018f8 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001a1e:	f000 fc1f 	bl	8002260 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001a22:	4b1d      	ldr	r3, [pc, #116]	; (8001a98 <xTaskResumeAll+0x1f0>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d010      	beq.n	8001a50 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001a2e:	f000 f847 	bl	8001ac0 <xTaskIncrementTick>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d002      	beq.n	8001a3e <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8001a38:	4b16      	ldr	r3, [pc, #88]	; (8001a94 <xTaskResumeAll+0x1ec>)
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	3b01      	subs	r3, #1
 8001a42:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d1f1      	bne.n	8001a2e <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8001a4a:	4b13      	ldr	r3, [pc, #76]	; (8001a98 <xTaskResumeAll+0x1f0>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001a50:	4b10      	ldr	r3, [pc, #64]	; (8001a94 <xTaskResumeAll+0x1ec>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d009      	beq.n	8001a6c <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001a5c:	4b0f      	ldr	r3, [pc, #60]	; (8001a9c <xTaskResumeAll+0x1f4>)
 8001a5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	f3bf 8f4f 	dsb	sy
 8001a68:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001a6c:	f001 f894 	bl	8002b98 <vPortExitCritical>

    return xAlreadyYielded;
 8001a70:	69bb      	ldr	r3, [r7, #24]
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3720      	adds	r7, #32
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20000288 	.word	0x20000288
 8001a80:	20000260 	.word	0x20000260
 8001a84:	20000220 	.word	0x20000220
 8001a88:	20000268 	.word	0x20000268
 8001a8c:	2000018c 	.word	0x2000018c
 8001a90:	20000188 	.word	0x20000188
 8001a94:	20000274 	.word	0x20000274
 8001a98:	20000270 	.word	0x20000270
 8001a9c:	e000ed04 	.word	0xe000ed04

08001aa0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8001aa6:	4b05      	ldr	r3, [pc, #20]	; (8001abc <xTaskGetTickCount+0x1c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8001aac:	687b      	ldr	r3, [r7, #4]
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	20000264 	.word	0x20000264

08001ac0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08a      	sub	sp, #40	; 0x28
 8001ac4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001aca:	4b7d      	ldr	r3, [pc, #500]	; (8001cc0 <xTaskIncrementTick+0x200>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f040 80ec 	bne.w	8001cac <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001ad4:	4b7b      	ldr	r3, [pc, #492]	; (8001cc4 <xTaskIncrementTick+0x204>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001adc:	4a79      	ldr	r2, [pc, #484]	; (8001cc4 <xTaskIncrementTick+0x204>)
 8001ade:	6a3b      	ldr	r3, [r7, #32]
 8001ae0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001ae2:	6a3b      	ldr	r3, [r7, #32]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d120      	bne.n	8001b2a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8001ae8:	4b77      	ldr	r3, [pc, #476]	; (8001cc8 <xTaskIncrementTick+0x208>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d00a      	beq.n	8001b08 <xTaskIncrementTick+0x48>
        __asm volatile
 8001af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001af6:	f383 8811 	msr	BASEPRI, r3
 8001afa:	f3bf 8f6f 	isb	sy
 8001afe:	f3bf 8f4f 	dsb	sy
 8001b02:	607b      	str	r3, [r7, #4]
    }
 8001b04:	bf00      	nop
 8001b06:	e7fe      	b.n	8001b06 <xTaskIncrementTick+0x46>
 8001b08:	4b6f      	ldr	r3, [pc, #444]	; (8001cc8 <xTaskIncrementTick+0x208>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	61fb      	str	r3, [r7, #28]
 8001b0e:	4b6f      	ldr	r3, [pc, #444]	; (8001ccc <xTaskIncrementTick+0x20c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a6d      	ldr	r2, [pc, #436]	; (8001cc8 <xTaskIncrementTick+0x208>)
 8001b14:	6013      	str	r3, [r2, #0]
 8001b16:	4a6d      	ldr	r2, [pc, #436]	; (8001ccc <xTaskIncrementTick+0x20c>)
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	6013      	str	r3, [r2, #0]
 8001b1c:	4b6c      	ldr	r3, [pc, #432]	; (8001cd0 <xTaskIncrementTick+0x210>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	3301      	adds	r3, #1
 8001b22:	4a6b      	ldr	r2, [pc, #428]	; (8001cd0 <xTaskIncrementTick+0x210>)
 8001b24:	6013      	str	r3, [r2, #0]
 8001b26:	f000 fb9b 	bl	8002260 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001b2a:	4b6a      	ldr	r3, [pc, #424]	; (8001cd4 <xTaskIncrementTick+0x214>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	6a3a      	ldr	r2, [r7, #32]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	f0c0 80a6 	bcc.w	8001c82 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001b36:	4b64      	ldr	r3, [pc, #400]	; (8001cc8 <xTaskIncrementTick+0x208>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d104      	bne.n	8001b4a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b40:	4b64      	ldr	r3, [pc, #400]	; (8001cd4 <xTaskIncrementTick+0x214>)
 8001b42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b46:	601a      	str	r2, [r3, #0]
                    break;
 8001b48:	e09b      	b.n	8001c82 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001b4a:	4b5f      	ldr	r3, [pc, #380]	; (8001cc8 <xTaskIncrementTick+0x208>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8001b5a:	6a3a      	ldr	r2, [r7, #32]
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d203      	bcs.n	8001b6a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001b62:	4a5c      	ldr	r2, [pc, #368]	; (8001cd4 <xTaskIncrementTick+0x214>)
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8001b68:	e08b      	b.n	8001c82 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	695b      	ldr	r3, [r3, #20]
 8001b6e:	613b      	str	r3, [r7, #16]
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	68d2      	ldr	r2, [r2, #12]
 8001b78:	609a      	str	r2, [r3, #8]
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	6892      	ldr	r2, [r2, #8]
 8001b82:	605a      	str	r2, [r3, #4]
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	685a      	ldr	r2, [r3, #4]
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	3304      	adds	r3, #4
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d103      	bne.n	8001b98 <xTaskIncrementTick+0xd8>
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	68da      	ldr	r2, [r3, #12]
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	605a      	str	r2, [r3, #4]
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	615a      	str	r2, [r3, #20]
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	1e5a      	subs	r2, r3, #1
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d01e      	beq.n	8001bee <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb4:	60fb      	str	r3, [r7, #12]
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	69db      	ldr	r3, [r3, #28]
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	6a12      	ldr	r2, [r2, #32]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	69d2      	ldr	r2, [r2, #28]
 8001bc8:	605a      	str	r2, [r3, #4]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	685a      	ldr	r2, [r3, #4]
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	3318      	adds	r3, #24
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d103      	bne.n	8001bde <xTaskIncrementTick+0x11e>
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	6a1a      	ldr	r2, [r3, #32]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	2200      	movs	r2, #0
 8001be2:	629a      	str	r2, [r3, #40]	; 0x28
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	1e5a      	subs	r2, r3, #1
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	409a      	lsls	r2, r3
 8001bf6:	4b38      	ldr	r3, [pc, #224]	; (8001cd8 <xTaskIncrementTick+0x218>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	4a36      	ldr	r2, [pc, #216]	; (8001cd8 <xTaskIncrementTick+0x218>)
 8001bfe:	6013      	str	r3, [r2, #0]
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c04:	4935      	ldr	r1, [pc, #212]	; (8001cdc <xTaskIncrementTick+0x21c>)
 8001c06:	4613      	mov	r3, r2
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	4413      	add	r3, r2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	440b      	add	r3, r1
 8001c10:	3304      	adds	r3, #4
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	60bb      	str	r3, [r7, #8]
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	68ba      	ldr	r2, [r7, #8]
 8001c1a:	609a      	str	r2, [r3, #8]
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	689a      	ldr	r2, [r3, #8]
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	60da      	str	r2, [r3, #12]
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	3204      	adds	r2, #4
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	1d1a      	adds	r2, r3, #4
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	609a      	str	r2, [r3, #8]
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	4413      	add	r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	4a26      	ldr	r2, [pc, #152]	; (8001cdc <xTaskIncrementTick+0x21c>)
 8001c44:	441a      	add	r2, r3
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	615a      	str	r2, [r3, #20]
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c4e:	4923      	ldr	r1, [pc, #140]	; (8001cdc <xTaskIncrementTick+0x21c>)
 8001c50:	4613      	mov	r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	4413      	add	r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	440b      	add	r3, r1
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	1c59      	adds	r1, r3, #1
 8001c5e:	481f      	ldr	r0, [pc, #124]	; (8001cdc <xTaskIncrementTick+0x21c>)
 8001c60:	4613      	mov	r3, r2
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	4413      	add	r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	4403      	add	r3, r0
 8001c6a:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c70:	4b1b      	ldr	r3, [pc, #108]	; (8001ce0 <xTaskIncrementTick+0x220>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c76:	429a      	cmp	r2, r3
 8001c78:	f67f af5d 	bls.w	8001b36 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001c80:	e759      	b.n	8001b36 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001c82:	4b17      	ldr	r3, [pc, #92]	; (8001ce0 <xTaskIncrementTick+0x220>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c88:	4914      	ldr	r1, [pc, #80]	; (8001cdc <xTaskIncrementTick+0x21c>)
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	4413      	add	r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	440b      	add	r3, r1
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d901      	bls.n	8001c9e <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8001c9e:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <xTaskIncrementTick+0x224>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d007      	beq.n	8001cb6 <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	627b      	str	r3, [r7, #36]	; 0x24
 8001caa:	e004      	b.n	8001cb6 <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001cac:	4b0e      	ldr	r3, [pc, #56]	; (8001ce8 <xTaskIncrementTick+0x228>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	4a0d      	ldr	r2, [pc, #52]	; (8001ce8 <xTaskIncrementTick+0x228>)
 8001cb4:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3728      	adds	r7, #40	; 0x28
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	20000288 	.word	0x20000288
 8001cc4:	20000264 	.word	0x20000264
 8001cc8:	20000218 	.word	0x20000218
 8001ccc:	2000021c 	.word	0x2000021c
 8001cd0:	20000278 	.word	0x20000278
 8001cd4:	20000280 	.word	0x20000280
 8001cd8:	20000268 	.word	0x20000268
 8001cdc:	2000018c 	.word	0x2000018c
 8001ce0:	20000188 	.word	0x20000188
 8001ce4:	20000274 	.word	0x20000274
 8001ce8:	20000270 	.word	0x20000270

08001cec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001cec:	b480      	push	{r7}
 8001cee:	b087      	sub	sp, #28
 8001cf0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001cf2:	4b27      	ldr	r3, [pc, #156]	; (8001d90 <vTaskSwitchContext+0xa4>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d003      	beq.n	8001d02 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001cfa:	4b26      	ldr	r3, [pc, #152]	; (8001d94 <vTaskSwitchContext+0xa8>)
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8001d00:	e03f      	b.n	8001d82 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8001d02:	4b24      	ldr	r3, [pc, #144]	; (8001d94 <vTaskSwitchContext+0xa8>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001d08:	4b23      	ldr	r3, [pc, #140]	; (8001d98 <vTaskSwitchContext+0xac>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	fab3 f383 	clz	r3, r3
 8001d14:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8001d16:	7afb      	ldrb	r3, [r7, #11]
 8001d18:	f1c3 031f 	rsb	r3, r3, #31
 8001d1c:	617b      	str	r3, [r7, #20]
 8001d1e:	491f      	ldr	r1, [pc, #124]	; (8001d9c <vTaskSwitchContext+0xb0>)
 8001d20:	697a      	ldr	r2, [r7, #20]
 8001d22:	4613      	mov	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4413      	add	r3, r2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	440b      	add	r3, r1
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d10a      	bne.n	8001d48 <vTaskSwitchContext+0x5c>
        __asm volatile
 8001d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d36:	f383 8811 	msr	BASEPRI, r3
 8001d3a:	f3bf 8f6f 	isb	sy
 8001d3e:	f3bf 8f4f 	dsb	sy
 8001d42:	607b      	str	r3, [r7, #4]
    }
 8001d44:	bf00      	nop
 8001d46:	e7fe      	b.n	8001d46 <vTaskSwitchContext+0x5a>
 8001d48:	697a      	ldr	r2, [r7, #20]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	4413      	add	r3, r2
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	4a12      	ldr	r2, [pc, #72]	; (8001d9c <vTaskSwitchContext+0xb0>)
 8001d54:	4413      	add	r3, r2
 8001d56:	613b      	str	r3, [r7, #16]
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	685a      	ldr	r2, [r3, #4]
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	685a      	ldr	r2, [r3, #4]
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	3308      	adds	r3, #8
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d104      	bne.n	8001d78 <vTaskSwitchContext+0x8c>
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	685a      	ldr	r2, [r3, #4]
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	605a      	str	r2, [r3, #4]
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	4a08      	ldr	r2, [pc, #32]	; (8001da0 <vTaskSwitchContext+0xb4>)
 8001d80:	6013      	str	r3, [r2, #0]
}
 8001d82:	bf00      	nop
 8001d84:	371c      	adds	r7, #28
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	20000288 	.word	0x20000288
 8001d94:	20000274 	.word	0x20000274
 8001d98:	20000268 	.word	0x20000268
 8001d9c:	2000018c 	.word	0x2000018c
 8001da0:	20000188 	.word	0x20000188

08001da4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d10a      	bne.n	8001dca <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8001db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001db8:	f383 8811 	msr	BASEPRI, r3
 8001dbc:	f3bf 8f6f 	isb	sy
 8001dc0:	f3bf 8f4f 	dsb	sy
 8001dc4:	60fb      	str	r3, [r7, #12]
    }
 8001dc6:	bf00      	nop
 8001dc8:	e7fe      	b.n	8001dc8 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001dca:	4b07      	ldr	r3, [pc, #28]	; (8001de8 <vTaskPlaceOnEventList+0x44>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	3318      	adds	r3, #24
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f7ff f814 	bl	8000e00 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001dd8:	2101      	movs	r1, #1
 8001dda:	6838      	ldr	r0, [r7, #0]
 8001ddc:	f000 fa7a 	bl	80022d4 <prvAddCurrentTaskToDelayedList>
}
 8001de0:	bf00      	nop
 8001de2:	3710      	adds	r7, #16
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	20000188 	.word	0x20000188

08001dec <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d10a      	bne.n	8001e14 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8001dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e02:	f383 8811 	msr	BASEPRI, r3
 8001e06:	f3bf 8f6f 	isb	sy
 8001e0a:	f3bf 8f4f 	dsb	sy
 8001e0e:	613b      	str	r3, [r7, #16]
    }
 8001e10:	bf00      	nop
 8001e12:	e7fe      	b.n	8001e12 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	617b      	str	r3, [r7, #20]
 8001e1a:	4b16      	ldr	r3, [pc, #88]	; (8001e74 <vTaskPlaceOnEventListRestricted+0x88>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	697a      	ldr	r2, [r7, #20]
 8001e20:	61da      	str	r2, [r3, #28]
 8001e22:	4b14      	ldr	r3, [pc, #80]	; (8001e74 <vTaskPlaceOnEventListRestricted+0x88>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	697a      	ldr	r2, [r7, #20]
 8001e28:	6892      	ldr	r2, [r2, #8]
 8001e2a:	621a      	str	r2, [r3, #32]
 8001e2c:	4b11      	ldr	r3, [pc, #68]	; (8001e74 <vTaskPlaceOnEventListRestricted+0x88>)
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	3218      	adds	r2, #24
 8001e36:	605a      	str	r2, [r3, #4]
 8001e38:	4b0e      	ldr	r3, [pc, #56]	; (8001e74 <vTaskPlaceOnEventListRestricted+0x88>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f103 0218 	add.w	r2, r3, #24
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	609a      	str	r2, [r3, #8]
 8001e44:	4b0b      	ldr	r3, [pc, #44]	; (8001e74 <vTaskPlaceOnEventListRestricted+0x88>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	68fa      	ldr	r2, [r7, #12]
 8001e4a:	629a      	str	r2, [r3, #40]	; 0x28
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	1c5a      	adds	r2, r3, #1
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d002      	beq.n	8001e62 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8001e5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e60:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001e62:	6879      	ldr	r1, [r7, #4]
 8001e64:	68b8      	ldr	r0, [r7, #8]
 8001e66:	f000 fa35 	bl	80022d4 <prvAddCurrentTaskToDelayedList>
    }
 8001e6a:	bf00      	nop
 8001e6c:	3718      	adds	r7, #24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	20000188 	.word	0x20000188

08001e78 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b08b      	sub	sp, #44	; 0x2c
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8001e88:	6a3b      	ldr	r3, [r7, #32]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d10a      	bne.n	8001ea4 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8001e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e92:	f383 8811 	msr	BASEPRI, r3
 8001e96:	f3bf 8f6f 	isb	sy
 8001e9a:	f3bf 8f4f 	dsb	sy
 8001e9e:	60fb      	str	r3, [r7, #12]
    }
 8001ea0:	bf00      	nop
 8001ea2:	e7fe      	b.n	8001ea2 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8001ea4:	6a3b      	ldr	r3, [r7, #32]
 8001ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea8:	61fb      	str	r3, [r7, #28]
 8001eaa:	6a3b      	ldr	r3, [r7, #32]
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	6a3a      	ldr	r2, [r7, #32]
 8001eb0:	6a12      	ldr	r2, [r2, #32]
 8001eb2:	609a      	str	r2, [r3, #8]
 8001eb4:	6a3b      	ldr	r3, [r7, #32]
 8001eb6:	6a1b      	ldr	r3, [r3, #32]
 8001eb8:	6a3a      	ldr	r2, [r7, #32]
 8001eba:	69d2      	ldr	r2, [r2, #28]
 8001ebc:	605a      	str	r2, [r3, #4]
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	685a      	ldr	r2, [r3, #4]
 8001ec2:	6a3b      	ldr	r3, [r7, #32]
 8001ec4:	3318      	adds	r3, #24
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d103      	bne.n	8001ed2 <xTaskRemoveFromEventList+0x5a>
 8001eca:	6a3b      	ldr	r3, [r7, #32]
 8001ecc:	6a1a      	ldr	r2, [r3, #32]
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	605a      	str	r2, [r3, #4]
 8001ed2:	6a3b      	ldr	r3, [r7, #32]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	629a      	str	r2, [r3, #40]	; 0x28
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	1e5a      	subs	r2, r3, #1
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001ee2:	4b4a      	ldr	r3, [pc, #296]	; (800200c <xTaskRemoveFromEventList+0x194>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d15e      	bne.n	8001fa8 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8001eea:	6a3b      	ldr	r3, [r7, #32]
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	617b      	str	r3, [r7, #20]
 8001ef0:	6a3b      	ldr	r3, [r7, #32]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	6a3a      	ldr	r2, [r7, #32]
 8001ef6:	68d2      	ldr	r2, [r2, #12]
 8001ef8:	609a      	str	r2, [r3, #8]
 8001efa:	6a3b      	ldr	r3, [r7, #32]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	6a3a      	ldr	r2, [r7, #32]
 8001f00:	6892      	ldr	r2, [r2, #8]
 8001f02:	605a      	str	r2, [r3, #4]
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	685a      	ldr	r2, [r3, #4]
 8001f08:	6a3b      	ldr	r3, [r7, #32]
 8001f0a:	3304      	adds	r3, #4
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d103      	bne.n	8001f18 <xTaskRemoveFromEventList+0xa0>
 8001f10:	6a3b      	ldr	r3, [r7, #32]
 8001f12:	68da      	ldr	r2, [r3, #12]
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	605a      	str	r2, [r3, #4]
 8001f18:	6a3b      	ldr	r3, [r7, #32]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	615a      	str	r2, [r3, #20]
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	1e5a      	subs	r2, r3, #1
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001f28:	6a3b      	ldr	r3, [r7, #32]
 8001f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	409a      	lsls	r2, r3
 8001f30:	4b37      	ldr	r3, [pc, #220]	; (8002010 <xTaskRemoveFromEventList+0x198>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	4a36      	ldr	r2, [pc, #216]	; (8002010 <xTaskRemoveFromEventList+0x198>)
 8001f38:	6013      	str	r3, [r2, #0]
 8001f3a:	6a3b      	ldr	r3, [r7, #32]
 8001f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f3e:	4935      	ldr	r1, [pc, #212]	; (8002014 <xTaskRemoveFromEventList+0x19c>)
 8001f40:	4613      	mov	r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	4413      	add	r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	440b      	add	r3, r1
 8001f4a:	3304      	adds	r3, #4
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	613b      	str	r3, [r7, #16]
 8001f50:	6a3b      	ldr	r3, [r7, #32]
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	609a      	str	r2, [r3, #8]
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	689a      	ldr	r2, [r3, #8]
 8001f5a:	6a3b      	ldr	r3, [r7, #32]
 8001f5c:	60da      	str	r2, [r3, #12]
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	6a3a      	ldr	r2, [r7, #32]
 8001f64:	3204      	adds	r2, #4
 8001f66:	605a      	str	r2, [r3, #4]
 8001f68:	6a3b      	ldr	r3, [r7, #32]
 8001f6a:	1d1a      	adds	r2, r3, #4
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	609a      	str	r2, [r3, #8]
 8001f70:	6a3b      	ldr	r3, [r7, #32]
 8001f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f74:	4613      	mov	r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	4413      	add	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	4a25      	ldr	r2, [pc, #148]	; (8002014 <xTaskRemoveFromEventList+0x19c>)
 8001f7e:	441a      	add	r2, r3
 8001f80:	6a3b      	ldr	r3, [r7, #32]
 8001f82:	615a      	str	r2, [r3, #20]
 8001f84:	6a3b      	ldr	r3, [r7, #32]
 8001f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f88:	4922      	ldr	r1, [pc, #136]	; (8002014 <xTaskRemoveFromEventList+0x19c>)
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4413      	add	r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	440b      	add	r3, r1
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	1c59      	adds	r1, r3, #1
 8001f98:	481e      	ldr	r0, [pc, #120]	; (8002014 <xTaskRemoveFromEventList+0x19c>)
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	4413      	add	r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	4403      	add	r3, r0
 8001fa4:	6019      	str	r1, [r3, #0]
 8001fa6:	e01b      	b.n	8001fe0 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001fa8:	4b1b      	ldr	r3, [pc, #108]	; (8002018 <xTaskRemoveFromEventList+0x1a0>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	61bb      	str	r3, [r7, #24]
 8001fae:	6a3b      	ldr	r3, [r7, #32]
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	61da      	str	r2, [r3, #28]
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	689a      	ldr	r2, [r3, #8]
 8001fb8:	6a3b      	ldr	r3, [r7, #32]
 8001fba:	621a      	str	r2, [r3, #32]
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	6a3a      	ldr	r2, [r7, #32]
 8001fc2:	3218      	adds	r2, #24
 8001fc4:	605a      	str	r2, [r3, #4]
 8001fc6:	6a3b      	ldr	r3, [r7, #32]
 8001fc8:	f103 0218 	add.w	r2, r3, #24
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	609a      	str	r2, [r3, #8]
 8001fd0:	6a3b      	ldr	r3, [r7, #32]
 8001fd2:	4a11      	ldr	r2, [pc, #68]	; (8002018 <xTaskRemoveFromEventList+0x1a0>)
 8001fd4:	629a      	str	r2, [r3, #40]	; 0x28
 8001fd6:	4b10      	ldr	r3, [pc, #64]	; (8002018 <xTaskRemoveFromEventList+0x1a0>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	4a0e      	ldr	r2, [pc, #56]	; (8002018 <xTaskRemoveFromEventList+0x1a0>)
 8001fde:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001fe0:	6a3b      	ldr	r3, [r7, #32]
 8001fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fe4:	4b0d      	ldr	r3, [pc, #52]	; (800201c <xTaskRemoveFromEventList+0x1a4>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d905      	bls.n	8001ffa <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001ff2:	4b0b      	ldr	r3, [pc, #44]	; (8002020 <xTaskRemoveFromEventList+0x1a8>)
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	e001      	b.n	8001ffe <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002000:	4618      	mov	r0, r3
 8002002:	372c      	adds	r7, #44	; 0x2c
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	20000288 	.word	0x20000288
 8002010:	20000268 	.word	0x20000268
 8002014:	2000018c 	.word	0x2000018c
 8002018:	20000220 	.word	0x20000220
 800201c:	20000188 	.word	0x20000188
 8002020:	20000274 	.word	0x20000274

08002024 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800202c:	4b06      	ldr	r3, [pc, #24]	; (8002048 <vTaskInternalSetTimeOutState+0x24>)
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002034:	4b05      	ldr	r3, [pc, #20]	; (800204c <vTaskInternalSetTimeOutState+0x28>)
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	605a      	str	r2, [r3, #4]
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	20000278 	.word	0x20000278
 800204c:	20000264 	.word	0x20000264

08002050 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b088      	sub	sp, #32
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d10a      	bne.n	8002076 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8002060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002064:	f383 8811 	msr	BASEPRI, r3
 8002068:	f3bf 8f6f 	isb	sy
 800206c:	f3bf 8f4f 	dsb	sy
 8002070:	613b      	str	r3, [r7, #16]
    }
 8002072:	bf00      	nop
 8002074:	e7fe      	b.n	8002074 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d10a      	bne.n	8002092 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800207c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002080:	f383 8811 	msr	BASEPRI, r3
 8002084:	f3bf 8f6f 	isb	sy
 8002088:	f3bf 8f4f 	dsb	sy
 800208c:	60fb      	str	r3, [r7, #12]
    }
 800208e:	bf00      	nop
 8002090:	e7fe      	b.n	8002090 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8002092:	f000 fd51 	bl	8002b38 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8002096:	4b1f      	ldr	r3, [pc, #124]	; (8002114 <xTaskCheckForTimeOut+0xc4>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020ae:	d102      	bne.n	80020b6 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80020b0:	2300      	movs	r3, #0
 80020b2:	61fb      	str	r3, [r7, #28]
 80020b4:	e026      	b.n	8002104 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	4b17      	ldr	r3, [pc, #92]	; (8002118 <xTaskCheckForTimeOut+0xc8>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d00a      	beq.n	80020d8 <xTaskCheckForTimeOut+0x88>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d305      	bcc.n	80020d8 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80020cc:	2301      	movs	r3, #1
 80020ce:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	2200      	movs	r2, #0
 80020d4:	601a      	str	r2, [r3, #0]
 80020d6:	e015      	b.n	8002104 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	697a      	ldr	r2, [r7, #20]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d20b      	bcs.n	80020fa <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	1ad2      	subs	r2, r2, r3
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f7ff ff98 	bl	8002024 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80020f4:	2300      	movs	r3, #0
 80020f6:	61fb      	str	r3, [r7, #28]
 80020f8:	e004      	b.n	8002104 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002100:	2301      	movs	r3, #1
 8002102:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8002104:	f000 fd48 	bl	8002b98 <vPortExitCritical>

    return xReturn;
 8002108:	69fb      	ldr	r3, [r7, #28]
}
 800210a:	4618      	mov	r0, r3
 800210c:	3720      	adds	r7, #32
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	20000264 	.word	0x20000264
 8002118:	20000278 	.word	0x20000278

0800211c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8002120:	4b03      	ldr	r3, [pc, #12]	; (8002130 <vTaskMissedYield+0x14>)
 8002122:	2201      	movs	r2, #1
 8002124:	601a      	str	r2, [r3, #0]
}
 8002126:	bf00      	nop
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	20000274 	.word	0x20000274

08002134 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800213c:	f000 f852 	bl	80021e4 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002140:	4b06      	ldr	r3, [pc, #24]	; (800215c <prvIdleTask+0x28>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d9f9      	bls.n	800213c <prvIdleTask+0x8>
            {
                taskYIELD();
 8002148:	4b05      	ldr	r3, [pc, #20]	; (8002160 <prvIdleTask+0x2c>)
 800214a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	f3bf 8f4f 	dsb	sy
 8002154:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002158:	e7f0      	b.n	800213c <prvIdleTask+0x8>
 800215a:	bf00      	nop
 800215c:	2000018c 	.word	0x2000018c
 8002160:	e000ed04 	.word	0xe000ed04

08002164 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800216a:	2300      	movs	r3, #0
 800216c:	607b      	str	r3, [r7, #4]
 800216e:	e00c      	b.n	800218a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	4613      	mov	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4413      	add	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	4a12      	ldr	r2, [pc, #72]	; (80021c4 <prvInitialiseTaskLists+0x60>)
 800217c:	4413      	add	r3, r2
 800217e:	4618      	mov	r0, r3
 8002180:	f7fe fe11 	bl	8000da6 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	3301      	adds	r3, #1
 8002188:	607b      	str	r3, [r7, #4]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2b04      	cmp	r3, #4
 800218e:	d9ef      	bls.n	8002170 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002190:	480d      	ldr	r0, [pc, #52]	; (80021c8 <prvInitialiseTaskLists+0x64>)
 8002192:	f7fe fe08 	bl	8000da6 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002196:	480d      	ldr	r0, [pc, #52]	; (80021cc <prvInitialiseTaskLists+0x68>)
 8002198:	f7fe fe05 	bl	8000da6 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800219c:	480c      	ldr	r0, [pc, #48]	; (80021d0 <prvInitialiseTaskLists+0x6c>)
 800219e:	f7fe fe02 	bl	8000da6 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80021a2:	480c      	ldr	r0, [pc, #48]	; (80021d4 <prvInitialiseTaskLists+0x70>)
 80021a4:	f7fe fdff 	bl	8000da6 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80021a8:	480b      	ldr	r0, [pc, #44]	; (80021d8 <prvInitialiseTaskLists+0x74>)
 80021aa:	f7fe fdfc 	bl	8000da6 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80021ae:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <prvInitialiseTaskLists+0x78>)
 80021b0:	4a05      	ldr	r2, [pc, #20]	; (80021c8 <prvInitialiseTaskLists+0x64>)
 80021b2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80021b4:	4b0a      	ldr	r3, [pc, #40]	; (80021e0 <prvInitialiseTaskLists+0x7c>)
 80021b6:	4a05      	ldr	r2, [pc, #20]	; (80021cc <prvInitialiseTaskLists+0x68>)
 80021b8:	601a      	str	r2, [r3, #0]
}
 80021ba:	bf00      	nop
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	2000018c 	.word	0x2000018c
 80021c8:	200001f0 	.word	0x200001f0
 80021cc:	20000204 	.word	0x20000204
 80021d0:	20000220 	.word	0x20000220
 80021d4:	20000234 	.word	0x20000234
 80021d8:	2000024c 	.word	0x2000024c
 80021dc:	20000218 	.word	0x20000218
 80021e0:	2000021c 	.word	0x2000021c

080021e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80021ea:	e019      	b.n	8002220 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80021ec:	f000 fca4 	bl	8002b38 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80021f0:	4b10      	ldr	r3, [pc, #64]	; (8002234 <prvCheckTasksWaitingTermination+0x50>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	3304      	adds	r3, #4
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7fe fe38 	bl	8000e72 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8002202:	4b0d      	ldr	r3, [pc, #52]	; (8002238 <prvCheckTasksWaitingTermination+0x54>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	3b01      	subs	r3, #1
 8002208:	4a0b      	ldr	r2, [pc, #44]	; (8002238 <prvCheckTasksWaitingTermination+0x54>)
 800220a:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 800220c:	4b0b      	ldr	r3, [pc, #44]	; (800223c <prvCheckTasksWaitingTermination+0x58>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	3b01      	subs	r3, #1
 8002212:	4a0a      	ldr	r2, [pc, #40]	; (800223c <prvCheckTasksWaitingTermination+0x58>)
 8002214:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8002216:	f000 fcbf 	bl	8002b98 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 f810 	bl	8002240 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002220:	4b06      	ldr	r3, [pc, #24]	; (800223c <prvCheckTasksWaitingTermination+0x58>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1e1      	bne.n	80021ec <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002228:	bf00      	nop
 800222a:	bf00      	nop
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	20000234 	.word	0x20000234
 8002238:	20000260 	.word	0x20000260
 800223c:	20000248 	.word	0x20000248

08002240 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224c:	4618      	mov	r0, r3
 800224e:	f000 fe0f 	bl	8002e70 <vPortFree>
            vPortFree( pxTCB );
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f000 fe0c 	bl	8002e70 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002258:	bf00      	nop
 800225a:	3708      	adds	r7, #8
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002264:	4b0a      	ldr	r3, [pc, #40]	; (8002290 <prvResetNextTaskUnblockTime+0x30>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d104      	bne.n	8002278 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800226e:	4b09      	ldr	r3, [pc, #36]	; (8002294 <prvResetNextTaskUnblockTime+0x34>)
 8002270:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002274:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002276:	e005      	b.n	8002284 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002278:	4b05      	ldr	r3, [pc, #20]	; (8002290 <prvResetNextTaskUnblockTime+0x30>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a04      	ldr	r2, [pc, #16]	; (8002294 <prvResetNextTaskUnblockTime+0x34>)
 8002282:	6013      	str	r3, [r2, #0]
}
 8002284:	bf00      	nop
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	20000218 	.word	0x20000218
 8002294:	20000280 	.word	0x20000280

08002298 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800229e:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <xTaskGetSchedulerState+0x34>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d102      	bne.n	80022ac <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80022a6:	2301      	movs	r3, #1
 80022a8:	607b      	str	r3, [r7, #4]
 80022aa:	e008      	b.n	80022be <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80022ac:	4b08      	ldr	r3, [pc, #32]	; (80022d0 <xTaskGetSchedulerState+0x38>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d102      	bne.n	80022ba <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80022b4:	2302      	movs	r3, #2
 80022b6:	607b      	str	r3, [r7, #4]
 80022b8:	e001      	b.n	80022be <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80022ba:	2300      	movs	r3, #0
 80022bc:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80022be:	687b      	ldr	r3, [r7, #4]
    }
 80022c0:	4618      	mov	r0, r3
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	2000026c 	.word	0x2000026c
 80022d0:	20000288 	.word	0x20000288

080022d4 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80022de:	4b36      	ldr	r3, [pc, #216]	; (80023b8 <prvAddCurrentTaskToDelayedList+0xe4>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80022e4:	4b35      	ldr	r3, [pc, #212]	; (80023bc <prvAddCurrentTaskToDelayedList+0xe8>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	3304      	adds	r3, #4
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7fe fdc1 	bl	8000e72 <uxListRemove>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d10b      	bne.n	800230e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80022f6:	4b31      	ldr	r3, [pc, #196]	; (80023bc <prvAddCurrentTaskToDelayedList+0xe8>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fc:	2201      	movs	r2, #1
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	43da      	mvns	r2, r3
 8002304:	4b2e      	ldr	r3, [pc, #184]	; (80023c0 <prvAddCurrentTaskToDelayedList+0xec>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4013      	ands	r3, r2
 800230a:	4a2d      	ldr	r2, [pc, #180]	; (80023c0 <prvAddCurrentTaskToDelayedList+0xec>)
 800230c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002314:	d124      	bne.n	8002360 <prvAddCurrentTaskToDelayedList+0x8c>
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d021      	beq.n	8002360 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800231c:	4b29      	ldr	r3, [pc, #164]	; (80023c4 <prvAddCurrentTaskToDelayedList+0xf0>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	613b      	str	r3, [r7, #16]
 8002322:	4b26      	ldr	r3, [pc, #152]	; (80023bc <prvAddCurrentTaskToDelayedList+0xe8>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	609a      	str	r2, [r3, #8]
 800232a:	4b24      	ldr	r3, [pc, #144]	; (80023bc <prvAddCurrentTaskToDelayedList+0xe8>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	6892      	ldr	r2, [r2, #8]
 8002332:	60da      	str	r2, [r3, #12]
 8002334:	4b21      	ldr	r3, [pc, #132]	; (80023bc <prvAddCurrentTaskToDelayedList+0xe8>)
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	3204      	adds	r2, #4
 800233e:	605a      	str	r2, [r3, #4]
 8002340:	4b1e      	ldr	r3, [pc, #120]	; (80023bc <prvAddCurrentTaskToDelayedList+0xe8>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	1d1a      	adds	r2, r3, #4
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	609a      	str	r2, [r3, #8]
 800234a:	4b1c      	ldr	r3, [pc, #112]	; (80023bc <prvAddCurrentTaskToDelayedList+0xe8>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a1d      	ldr	r2, [pc, #116]	; (80023c4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002350:	615a      	str	r2, [r3, #20]
 8002352:	4b1c      	ldr	r3, [pc, #112]	; (80023c4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	3301      	adds	r3, #1
 8002358:	4a1a      	ldr	r2, [pc, #104]	; (80023c4 <prvAddCurrentTaskToDelayedList+0xf0>)
 800235a:	6013      	str	r3, [r2, #0]
 800235c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800235e:	e026      	b.n	80023ae <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8002360:	697a      	ldr	r2, [r7, #20]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4413      	add	r3, r2
 8002366:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002368:	4b14      	ldr	r3, [pc, #80]	; (80023bc <prvAddCurrentTaskToDelayedList+0xe8>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8002370:	68fa      	ldr	r2, [r7, #12]
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	429a      	cmp	r2, r3
 8002376:	d209      	bcs.n	800238c <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002378:	4b13      	ldr	r3, [pc, #76]	; (80023c8 <prvAddCurrentTaskToDelayedList+0xf4>)
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	4b0f      	ldr	r3, [pc, #60]	; (80023bc <prvAddCurrentTaskToDelayedList+0xe8>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	3304      	adds	r3, #4
 8002382:	4619      	mov	r1, r3
 8002384:	4610      	mov	r0, r2
 8002386:	f7fe fd3b 	bl	8000e00 <vListInsert>
}
 800238a:	e010      	b.n	80023ae <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800238c:	4b0f      	ldr	r3, [pc, #60]	; (80023cc <prvAddCurrentTaskToDelayedList+0xf8>)
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	4b0a      	ldr	r3, [pc, #40]	; (80023bc <prvAddCurrentTaskToDelayedList+0xe8>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	3304      	adds	r3, #4
 8002396:	4619      	mov	r1, r3
 8002398:	4610      	mov	r0, r2
 800239a:	f7fe fd31 	bl	8000e00 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800239e:	4b0c      	ldr	r3, [pc, #48]	; (80023d0 <prvAddCurrentTaskToDelayedList+0xfc>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d202      	bcs.n	80023ae <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 80023a8:	4a09      	ldr	r2, [pc, #36]	; (80023d0 <prvAddCurrentTaskToDelayedList+0xfc>)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6013      	str	r3, [r2, #0]
}
 80023ae:	bf00      	nop
 80023b0:	3718      	adds	r7, #24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	20000264 	.word	0x20000264
 80023bc:	20000188 	.word	0x20000188
 80023c0:	20000268 	.word	0x20000268
 80023c4:	2000024c 	.word	0x2000024c
 80023c8:	2000021c 	.word	0x2000021c
 80023cc:	20000218 	.word	0x20000218
 80023d0:	20000280 	.word	0x20000280

080023d4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80023da:	2300      	movs	r3, #0
 80023dc:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80023de:	f000 fa47 	bl	8002870 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80023e2:	4b11      	ldr	r3, [pc, #68]	; (8002428 <xTimerCreateTimerTask+0x54>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00b      	beq.n	8002402 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 80023ea:	4b10      	ldr	r3, [pc, #64]	; (800242c <xTimerCreateTimerTask+0x58>)
 80023ec:	9301      	str	r3, [sp, #4]
 80023ee:	2302      	movs	r3, #2
 80023f0:	9300      	str	r3, [sp, #0]
 80023f2:	2300      	movs	r3, #0
 80023f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80023f8:	490d      	ldr	r1, [pc, #52]	; (8002430 <xTimerCreateTimerTask+0x5c>)
 80023fa:	480e      	ldr	r0, [pc, #56]	; (8002434 <xTimerCreateTimerTask+0x60>)
 80023fc:	f7ff f856 	bl	80014ac <xTaskCreate>
 8002400:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d10a      	bne.n	800241e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8002408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800240c:	f383 8811 	msr	BASEPRI, r3
 8002410:	f3bf 8f6f 	isb	sy
 8002414:	f3bf 8f4f 	dsb	sy
 8002418:	603b      	str	r3, [r7, #0]
    }
 800241a:	bf00      	nop
 800241c:	e7fe      	b.n	800241c <xTimerCreateTimerTask+0x48>
        return xReturn;
 800241e:	687b      	ldr	r3, [r7, #4]
    }
 8002420:	4618      	mov	r0, r3
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	200002bc 	.word	0x200002bc
 800242c:	200002c0 	.word	0x200002c0
 8002430:	0800492c 	.word	0x0800492c
 8002434:	080024dd 	.word	0x080024dd

08002438 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002444:	e008      	b.n	8002458 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	68ba      	ldr	r2, [r7, #8]
 800244c:	4413      	add	r3, r2
 800244e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	68f8      	ldr	r0, [r7, #12]
 8002456:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	699a      	ldr	r2, [r3, #24]
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	18d1      	adds	r1, r2, r3
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	f000 f8dd 	bl	8002624 <prvInsertTimerInActiveList>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1ea      	bne.n	8002446 <prvReloadTimer+0xe>
        }
    }
 8002470:	bf00      	nop
 8002472:	bf00      	nop
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
	...

0800247c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002486:	4b14      	ldr	r3, [pc, #80]	; (80024d8 <prvProcessExpiredTimer+0x5c>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	3304      	adds	r3, #4
 8002494:	4618      	mov	r0, r3
 8002496:	f7fe fcec 	bl	8000e72 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80024a0:	f003 0304 	and.w	r3, r3, #4
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d005      	beq.n	80024b4 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	6879      	ldr	r1, [r7, #4]
 80024ac:	68f8      	ldr	r0, [r7, #12]
 80024ae:	f7ff ffc3 	bl	8002438 <prvReloadTimer>
 80024b2:	e008      	b.n	80024c6 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80024ba:	f023 0301 	bic.w	r3, r3, #1
 80024be:	b2da      	uxtb	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6a1b      	ldr	r3, [r3, #32]
 80024ca:	68f8      	ldr	r0, [r7, #12]
 80024cc:	4798      	blx	r3
    }
 80024ce:	bf00      	nop
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	200002b4 	.word	0x200002b4

080024dc <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80024e4:	f107 0308 	add.w	r3, r7, #8
 80024e8:	4618      	mov	r0, r3
 80024ea:	f000 f857 	bl	800259c <prvGetNextExpireTime>
 80024ee:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	4619      	mov	r1, r3
 80024f4:	68f8      	ldr	r0, [r7, #12]
 80024f6:	f000 f803 	bl	8002500 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80024fa:	f000 f8d5 	bl	80026a8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80024fe:	e7f1      	b.n	80024e4 <prvTimerTask+0x8>

08002500 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800250a:	f7ff f9bf 	bl	800188c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800250e:	f107 0308 	add.w	r3, r7, #8
 8002512:	4618      	mov	r0, r3
 8002514:	f000 f866 	bl	80025e4 <prvSampleTimeNow>
 8002518:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d130      	bne.n	8002582 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d10a      	bne.n	800253c <prvProcessTimerOrBlockTask+0x3c>
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	429a      	cmp	r2, r3
 800252c:	d806      	bhi.n	800253c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800252e:	f7ff f9bb 	bl	80018a8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002532:	68f9      	ldr	r1, [r7, #12]
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f7ff ffa1 	bl	800247c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800253a:	e024      	b.n	8002586 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d008      	beq.n	8002554 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002542:	4b13      	ldr	r3, [pc, #76]	; (8002590 <prvProcessTimerOrBlockTask+0x90>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d101      	bne.n	8002550 <prvProcessTimerOrBlockTask+0x50>
 800254c:	2301      	movs	r3, #1
 800254e:	e000      	b.n	8002552 <prvProcessTimerOrBlockTask+0x52>
 8002550:	2300      	movs	r3, #0
 8002552:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002554:	4b0f      	ldr	r3, [pc, #60]	; (8002594 <prvProcessTimerOrBlockTask+0x94>)
 8002556:	6818      	ldr	r0, [r3, #0]
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	4619      	mov	r1, r3
 8002562:	f7fe ff6f 	bl	8001444 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8002566:	f7ff f99f 	bl	80018a8 <xTaskResumeAll>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d10a      	bne.n	8002586 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8002570:	4b09      	ldr	r3, [pc, #36]	; (8002598 <prvProcessTimerOrBlockTask+0x98>)
 8002572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	f3bf 8f4f 	dsb	sy
 800257c:	f3bf 8f6f 	isb	sy
    }
 8002580:	e001      	b.n	8002586 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8002582:	f7ff f991 	bl	80018a8 <xTaskResumeAll>
    }
 8002586:	bf00      	nop
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	200002b8 	.word	0x200002b8
 8002594:	200002bc 	.word	0x200002bc
 8002598:	e000ed04 	.word	0xe000ed04

0800259c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80025a4:	4b0e      	ldr	r3, [pc, #56]	; (80025e0 <prvGetNextExpireTime+0x44>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <prvGetNextExpireTime+0x16>
 80025ae:	2201      	movs	r2, #1
 80025b0:	e000      	b.n	80025b4 <prvGetNextExpireTime+0x18>
 80025b2:	2200      	movs	r2, #0
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d105      	bne.n	80025cc <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80025c0:	4b07      	ldr	r3, [pc, #28]	; (80025e0 <prvGetNextExpireTime+0x44>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	60fb      	str	r3, [r7, #12]
 80025ca:	e001      	b.n	80025d0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80025cc:	2300      	movs	r3, #0
 80025ce:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80025d0:	68fb      	ldr	r3, [r7, #12]
    }
 80025d2:	4618      	mov	r0, r3
 80025d4:	3714      	adds	r7, #20
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	200002b4 	.word	0x200002b4

080025e4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80025ec:	f7ff fa58 	bl	8001aa0 <xTaskGetTickCount>
 80025f0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80025f2:	4b0b      	ldr	r3, [pc, #44]	; (8002620 <prvSampleTimeNow+0x3c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d205      	bcs.n	8002608 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80025fc:	f000 f912 	bl	8002824 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	601a      	str	r2, [r3, #0]
 8002606:	e002      	b.n	800260e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800260e:	4a04      	ldr	r2, [pc, #16]	; (8002620 <prvSampleTimeNow+0x3c>)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8002614:	68fb      	ldr	r3, [r7, #12]
    }
 8002616:	4618      	mov	r0, r3
 8002618:	3710      	adds	r7, #16
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	200002c4 	.word	0x200002c4

08002624 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
 8002630:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8002632:	2300      	movs	r3, #0
 8002634:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	68ba      	ldr	r2, [r7, #8]
 800263a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8002642:	68ba      	ldr	r2, [r7, #8]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	429a      	cmp	r2, r3
 8002648:	d812      	bhi.n	8002670 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	1ad2      	subs	r2, r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	429a      	cmp	r2, r3
 8002656:	d302      	bcc.n	800265e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8002658:	2301      	movs	r3, #1
 800265a:	617b      	str	r3, [r7, #20]
 800265c:	e01b      	b.n	8002696 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800265e:	4b10      	ldr	r3, [pc, #64]	; (80026a0 <prvInsertTimerInActiveList+0x7c>)
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	3304      	adds	r3, #4
 8002666:	4619      	mov	r1, r3
 8002668:	4610      	mov	r0, r2
 800266a:	f7fe fbc9 	bl	8000e00 <vListInsert>
 800266e:	e012      	b.n	8002696 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	429a      	cmp	r2, r3
 8002676:	d206      	bcs.n	8002686 <prvInsertTimerInActiveList+0x62>
 8002678:	68ba      	ldr	r2, [r7, #8]
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	429a      	cmp	r2, r3
 800267e:	d302      	bcc.n	8002686 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8002680:	2301      	movs	r3, #1
 8002682:	617b      	str	r3, [r7, #20]
 8002684:	e007      	b.n	8002696 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002686:	4b07      	ldr	r3, [pc, #28]	; (80026a4 <prvInsertTimerInActiveList+0x80>)
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	3304      	adds	r3, #4
 800268e:	4619      	mov	r1, r3
 8002690:	4610      	mov	r0, r2
 8002692:	f7fe fbb5 	bl	8000e00 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8002696:	697b      	ldr	r3, [r7, #20]
    }
 8002698:	4618      	mov	r0, r3
 800269a:	3718      	adds	r7, #24
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	200002b8 	.word	0x200002b8
 80026a4:	200002b4 	.word	0x200002b4

080026a8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b088      	sub	sp, #32
 80026ac:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80026ae:	e0a6      	b.n	80027fe <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f2c0 80a2 	blt.w	80027fc <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d004      	beq.n	80026ce <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	3304      	adds	r3, #4
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7fe fbd2 	bl	8000e72 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80026ce:	1d3b      	adds	r3, r7, #4
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff ff87 	bl	80025e4 <prvSampleTimeNow>
 80026d6:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	3b01      	subs	r3, #1
 80026dc:	2b08      	cmp	r3, #8
 80026de:	f200 808e 	bhi.w	80027fe <prvProcessReceivedCommands+0x156>
 80026e2:	a201      	add	r2, pc, #4	; (adr r2, 80026e8 <prvProcessReceivedCommands+0x40>)
 80026e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026e8:	0800270d 	.word	0x0800270d
 80026ec:	0800270d 	.word	0x0800270d
 80026f0:	08002775 	.word	0x08002775
 80026f4:	08002789 	.word	0x08002789
 80026f8:	080027d3 	.word	0x080027d3
 80026fc:	0800270d 	.word	0x0800270d
 8002700:	0800270d 	.word	0x0800270d
 8002704:	08002775 	.word	0x08002775
 8002708:	08002789 	.word	0x08002789
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002712:	f043 0301 	orr.w	r3, r3, #1
 8002716:	b2da      	uxtb	r2, r3
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	18d1      	adds	r1, r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	69f8      	ldr	r0, [r7, #28]
 800272c:	f7ff ff7a 	bl	8002624 <prvInsertTimerInActiveList>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d063      	beq.n	80027fe <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	2b00      	cmp	r3, #0
 8002742:	d009      	beq.n	8002758 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	4413      	add	r3, r2
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	4619      	mov	r1, r3
 8002750:	69f8      	ldr	r0, [r7, #28]
 8002752:	f7ff fe71 	bl	8002438 <prvReloadTimer>
 8002756:	e008      	b.n	800276a <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800275e:	f023 0301 	bic.w	r3, r3, #1
 8002762:	b2da      	uxtb	r2, r3
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	6a1b      	ldr	r3, [r3, #32]
 800276e:	69f8      	ldr	r0, [r7, #28]
 8002770:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8002772:	e044      	b.n	80027fe <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800277a:	f023 0301 	bic.w	r3, r3, #1
 800277e:	b2da      	uxtb	r2, r3
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8002786:	e03a      	b.n	80027fe <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800278e:	f043 0301 	orr.w	r3, r3, #1
 8002792:	b2da      	uxtb	r2, r3
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d10a      	bne.n	80027be <prvProcessReceivedCommands+0x116>
        __asm volatile
 80027a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ac:	f383 8811 	msr	BASEPRI, r3
 80027b0:	f3bf 8f6f 	isb	sy
 80027b4:	f3bf 8f4f 	dsb	sy
 80027b8:	617b      	str	r3, [r7, #20]
    }
 80027ba:	bf00      	nop
 80027bc:	e7fe      	b.n	80027bc <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	699a      	ldr	r2, [r3, #24]
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	18d1      	adds	r1, r2, r3
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	69f8      	ldr	r0, [r7, #28]
 80027cc:	f7ff ff2a 	bl	8002624 <prvInsertTimerInActiveList>
                        break;
 80027d0:	e015      	b.n	80027fe <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d103      	bne.n	80027e8 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 80027e0:	69f8      	ldr	r0, [r7, #28]
 80027e2:	f000 fb45 	bl	8002e70 <vPortFree>
 80027e6:	e00a      	b.n	80027fe <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80027ee:	f023 0301 	bic.w	r3, r3, #1
 80027f2:	b2da      	uxtb	r2, r3
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80027fa:	e000      	b.n	80027fe <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80027fc:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80027fe:	4b08      	ldr	r3, [pc, #32]	; (8002820 <prvProcessReceivedCommands+0x178>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f107 0108 	add.w	r1, r7, #8
 8002806:	2200      	movs	r2, #0
 8002808:	4618      	mov	r0, r3
 800280a:	f7fe fc5f 	bl	80010cc <xQueueReceive>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	f47f af4d 	bne.w	80026b0 <prvProcessReceivedCommands+0x8>
        }
    }
 8002816:	bf00      	nop
 8002818:	bf00      	nop
 800281a:	3720      	adds	r7, #32
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	200002bc 	.word	0x200002bc

08002824 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800282a:	e009      	b.n	8002840 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800282c:	4b0e      	ldr	r3, [pc, #56]	; (8002868 <prvSwitchTimerLists+0x44>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8002836:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800283a:	6838      	ldr	r0, [r7, #0]
 800283c:	f7ff fe1e 	bl	800247c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002840:	4b09      	ldr	r3, [pc, #36]	; (8002868 <prvSwitchTimerLists+0x44>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1f0      	bne.n	800282c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800284a:	4b07      	ldr	r3, [pc, #28]	; (8002868 <prvSwitchTimerLists+0x44>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8002850:	4b06      	ldr	r3, [pc, #24]	; (800286c <prvSwitchTimerLists+0x48>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a04      	ldr	r2, [pc, #16]	; (8002868 <prvSwitchTimerLists+0x44>)
 8002856:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8002858:	4a04      	ldr	r2, [pc, #16]	; (800286c <prvSwitchTimerLists+0x48>)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6013      	str	r3, [r2, #0]
    }
 800285e:	bf00      	nop
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	200002b4 	.word	0x200002b4
 800286c:	200002b8 	.word	0x200002b8

08002870 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002874:	f000 f960 	bl	8002b38 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002878:	4b12      	ldr	r3, [pc, #72]	; (80028c4 <prvCheckForValidListAndQueue+0x54>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d11d      	bne.n	80028bc <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8002880:	4811      	ldr	r0, [pc, #68]	; (80028c8 <prvCheckForValidListAndQueue+0x58>)
 8002882:	f7fe fa90 	bl	8000da6 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8002886:	4811      	ldr	r0, [pc, #68]	; (80028cc <prvCheckForValidListAndQueue+0x5c>)
 8002888:	f7fe fa8d 	bl	8000da6 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800288c:	4b10      	ldr	r3, [pc, #64]	; (80028d0 <prvCheckForValidListAndQueue+0x60>)
 800288e:	4a0e      	ldr	r2, [pc, #56]	; (80028c8 <prvCheckForValidListAndQueue+0x58>)
 8002890:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8002892:	4b10      	ldr	r3, [pc, #64]	; (80028d4 <prvCheckForValidListAndQueue+0x64>)
 8002894:	4a0d      	ldr	r2, [pc, #52]	; (80028cc <prvCheckForValidListAndQueue+0x5c>)
 8002896:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002898:	2200      	movs	r2, #0
 800289a:	210c      	movs	r1, #12
 800289c:	200a      	movs	r0, #10
 800289e:	f7fe fba3 	bl	8000fe8 <xQueueGenericCreate>
 80028a2:	4603      	mov	r3, r0
 80028a4:	4a07      	ldr	r2, [pc, #28]	; (80028c4 <prvCheckForValidListAndQueue+0x54>)
 80028a6:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80028a8:	4b06      	ldr	r3, [pc, #24]	; (80028c4 <prvCheckForValidListAndQueue+0x54>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d005      	beq.n	80028bc <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80028b0:	4b04      	ldr	r3, [pc, #16]	; (80028c4 <prvCheckForValidListAndQueue+0x54>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4908      	ldr	r1, [pc, #32]	; (80028d8 <prvCheckForValidListAndQueue+0x68>)
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7fe fd76 	bl	80013a8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80028bc:	f000 f96c 	bl	8002b98 <vPortExitCritical>
    }
 80028c0:	bf00      	nop
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	200002bc 	.word	0x200002bc
 80028c8:	2000028c 	.word	0x2000028c
 80028cc:	200002a0 	.word	0x200002a0
 80028d0:	200002b4 	.word	0x200002b4
 80028d4:	200002b8 	.word	0x200002b8
 80028d8:	08004934 	.word	0x08004934

080028dc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	3b04      	subs	r3, #4
 80028ec:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80028f4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	3b04      	subs	r3, #4
 80028fa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	f023 0201 	bic.w	r2, r3, #1
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	3b04      	subs	r3, #4
 800290a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800290c:	4a0c      	ldr	r2, [pc, #48]	; (8002940 <pxPortInitialiseStack+0x64>)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	3b14      	subs	r3, #20
 8002916:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	3b04      	subs	r3, #4
 8002922:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f06f 0202 	mvn.w	r2, #2
 800292a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	3b20      	subs	r3, #32
 8002930:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002932:	68fb      	ldr	r3, [r7, #12]
}
 8002934:	4618      	mov	r0, r3
 8002936:	3714      	adds	r7, #20
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	08002945 	.word	0x08002945

08002944 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800294a:	2300      	movs	r3, #0
 800294c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800294e:	4b12      	ldr	r3, [pc, #72]	; (8002998 <prvTaskExitError+0x54>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002956:	d00a      	beq.n	800296e <prvTaskExitError+0x2a>
        __asm volatile
 8002958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800295c:	f383 8811 	msr	BASEPRI, r3
 8002960:	f3bf 8f6f 	isb	sy
 8002964:	f3bf 8f4f 	dsb	sy
 8002968:	60fb      	str	r3, [r7, #12]
    }
 800296a:	bf00      	nop
 800296c:	e7fe      	b.n	800296c <prvTaskExitError+0x28>
        __asm volatile
 800296e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002972:	f383 8811 	msr	BASEPRI, r3
 8002976:	f3bf 8f6f 	isb	sy
 800297a:	f3bf 8f4f 	dsb	sy
 800297e:	60bb      	str	r3, [r7, #8]
    }
 8002980:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002982:	bf00      	nop
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d0fc      	beq.n	8002984 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800298a:	bf00      	nop
 800298c:	bf00      	nop
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	20000008 	.word	0x20000008
 800299c:	00000000 	.word	0x00000000

080029a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80029a0:	4b07      	ldr	r3, [pc, #28]	; (80029c0 <pxCurrentTCBConst2>)
 80029a2:	6819      	ldr	r1, [r3, #0]
 80029a4:	6808      	ldr	r0, [r1, #0]
 80029a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029aa:	f380 8809 	msr	PSP, r0
 80029ae:	f3bf 8f6f 	isb	sy
 80029b2:	f04f 0000 	mov.w	r0, #0
 80029b6:	f380 8811 	msr	BASEPRI, r0
 80029ba:	4770      	bx	lr
 80029bc:	f3af 8000 	nop.w

080029c0 <pxCurrentTCBConst2>:
 80029c0:	20000188 	.word	0x20000188
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80029c4:	bf00      	nop
 80029c6:	bf00      	nop

080029c8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80029c8:	4808      	ldr	r0, [pc, #32]	; (80029ec <prvPortStartFirstTask+0x24>)
 80029ca:	6800      	ldr	r0, [r0, #0]
 80029cc:	6800      	ldr	r0, [r0, #0]
 80029ce:	f380 8808 	msr	MSP, r0
 80029d2:	f04f 0000 	mov.w	r0, #0
 80029d6:	f380 8814 	msr	CONTROL, r0
 80029da:	b662      	cpsie	i
 80029dc:	b661      	cpsie	f
 80029de:	f3bf 8f4f 	dsb	sy
 80029e2:	f3bf 8f6f 	isb	sy
 80029e6:	df00      	svc	0
 80029e8:	bf00      	nop
 80029ea:	0000      	.short	0x0000
 80029ec:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80029f0:	bf00      	nop
 80029f2:	bf00      	nop

080029f4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80029fa:	4b46      	ldr	r3, [pc, #280]	; (8002b14 <xPortStartScheduler+0x120>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a46      	ldr	r2, [pc, #280]	; (8002b18 <xPortStartScheduler+0x124>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d10a      	bne.n	8002a1a <xPortStartScheduler+0x26>
        __asm volatile
 8002a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a08:	f383 8811 	msr	BASEPRI, r3
 8002a0c:	f3bf 8f6f 	isb	sy
 8002a10:	f3bf 8f4f 	dsb	sy
 8002a14:	613b      	str	r3, [r7, #16]
    }
 8002a16:	bf00      	nop
 8002a18:	e7fe      	b.n	8002a18 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002a1a:	4b3e      	ldr	r3, [pc, #248]	; (8002b14 <xPortStartScheduler+0x120>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a3f      	ldr	r2, [pc, #252]	; (8002b1c <xPortStartScheduler+0x128>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d10a      	bne.n	8002a3a <xPortStartScheduler+0x46>
        __asm volatile
 8002a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a28:	f383 8811 	msr	BASEPRI, r3
 8002a2c:	f3bf 8f6f 	isb	sy
 8002a30:	f3bf 8f4f 	dsb	sy
 8002a34:	60fb      	str	r3, [r7, #12]
    }
 8002a36:	bf00      	nop
 8002a38:	e7fe      	b.n	8002a38 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002a3a:	4b39      	ldr	r3, [pc, #228]	; (8002b20 <xPortStartScheduler+0x12c>)
 8002a3c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	22ff      	movs	r2, #255	; 0xff
 8002a4a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002a54:	78fb      	ldrb	r3, [r7, #3]
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002a5c:	b2da      	uxtb	r2, r3
 8002a5e:	4b31      	ldr	r3, [pc, #196]	; (8002b24 <xPortStartScheduler+0x130>)
 8002a60:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002a62:	4b31      	ldr	r3, [pc, #196]	; (8002b28 <xPortStartScheduler+0x134>)
 8002a64:	2207      	movs	r2, #7
 8002a66:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002a68:	e009      	b.n	8002a7e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 8002a6a:	4b2f      	ldr	r3, [pc, #188]	; (8002b28 <xPortStartScheduler+0x134>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	4a2d      	ldr	r2, [pc, #180]	; (8002b28 <xPortStartScheduler+0x134>)
 8002a72:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002a74:	78fb      	ldrb	r3, [r7, #3]
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002a7e:	78fb      	ldrb	r3, [r7, #3]
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a86:	2b80      	cmp	r3, #128	; 0x80
 8002a88:	d0ef      	beq.n	8002a6a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002a8a:	4b27      	ldr	r3, [pc, #156]	; (8002b28 <xPortStartScheduler+0x134>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f1c3 0307 	rsb	r3, r3, #7
 8002a92:	2b04      	cmp	r3, #4
 8002a94:	d00a      	beq.n	8002aac <xPortStartScheduler+0xb8>
        __asm volatile
 8002a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a9a:	f383 8811 	msr	BASEPRI, r3
 8002a9e:	f3bf 8f6f 	isb	sy
 8002aa2:	f3bf 8f4f 	dsb	sy
 8002aa6:	60bb      	str	r3, [r7, #8]
    }
 8002aa8:	bf00      	nop
 8002aaa:	e7fe      	b.n	8002aaa <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002aac:	4b1e      	ldr	r3, [pc, #120]	; (8002b28 <xPortStartScheduler+0x134>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	021b      	lsls	r3, r3, #8
 8002ab2:	4a1d      	ldr	r2, [pc, #116]	; (8002b28 <xPortStartScheduler+0x134>)
 8002ab4:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002ab6:	4b1c      	ldr	r3, [pc, #112]	; (8002b28 <xPortStartScheduler+0x134>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002abe:	4a1a      	ldr	r2, [pc, #104]	; (8002b28 <xPortStartScheduler+0x134>)
 8002ac0:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002aca:	4b18      	ldr	r3, [pc, #96]	; (8002b2c <xPortStartScheduler+0x138>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a17      	ldr	r2, [pc, #92]	; (8002b2c <xPortStartScheduler+0x138>)
 8002ad0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ad4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002ad6:	4b15      	ldr	r3, [pc, #84]	; (8002b2c <xPortStartScheduler+0x138>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a14      	ldr	r2, [pc, #80]	; (8002b2c <xPortStartScheduler+0x138>)
 8002adc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002ae0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002ae2:	f000 f8db 	bl	8002c9c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002ae6:	4b12      	ldr	r3, [pc, #72]	; (8002b30 <xPortStartScheduler+0x13c>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002aec:	f000 f8fa 	bl	8002ce4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002af0:	4b10      	ldr	r3, [pc, #64]	; (8002b34 <xPortStartScheduler+0x140>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a0f      	ldr	r2, [pc, #60]	; (8002b34 <xPortStartScheduler+0x140>)
 8002af6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002afa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002afc:	f7ff ff64 	bl	80029c8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002b00:	f7ff f8f4 	bl	8001cec <vTaskSwitchContext>
    prvTaskExitError();
 8002b04:	f7ff ff1e 	bl	8002944 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3718      	adds	r7, #24
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	e000ed00 	.word	0xe000ed00
 8002b18:	410fc271 	.word	0x410fc271
 8002b1c:	410fc270 	.word	0x410fc270
 8002b20:	e000e400 	.word	0xe000e400
 8002b24:	200002c8 	.word	0x200002c8
 8002b28:	200002cc 	.word	0x200002cc
 8002b2c:	e000ed20 	.word	0xe000ed20
 8002b30:	20000008 	.word	0x20000008
 8002b34:	e000ef34 	.word	0xe000ef34

08002b38 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
        __asm volatile
 8002b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b42:	f383 8811 	msr	BASEPRI, r3
 8002b46:	f3bf 8f6f 	isb	sy
 8002b4a:	f3bf 8f4f 	dsb	sy
 8002b4e:	607b      	str	r3, [r7, #4]
    }
 8002b50:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002b52:	4b0f      	ldr	r3, [pc, #60]	; (8002b90 <vPortEnterCritical+0x58>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	3301      	adds	r3, #1
 8002b58:	4a0d      	ldr	r2, [pc, #52]	; (8002b90 <vPortEnterCritical+0x58>)
 8002b5a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002b5c:	4b0c      	ldr	r3, [pc, #48]	; (8002b90 <vPortEnterCritical+0x58>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d10f      	bne.n	8002b84 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002b64:	4b0b      	ldr	r3, [pc, #44]	; (8002b94 <vPortEnterCritical+0x5c>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00a      	beq.n	8002b84 <vPortEnterCritical+0x4c>
        __asm volatile
 8002b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b72:	f383 8811 	msr	BASEPRI, r3
 8002b76:	f3bf 8f6f 	isb	sy
 8002b7a:	f3bf 8f4f 	dsb	sy
 8002b7e:	603b      	str	r3, [r7, #0]
    }
 8002b80:	bf00      	nop
 8002b82:	e7fe      	b.n	8002b82 <vPortEnterCritical+0x4a>
    }
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr
 8002b90:	20000008 	.word	0x20000008
 8002b94:	e000ed04 	.word	0xe000ed04

08002b98 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002b9e:	4b12      	ldr	r3, [pc, #72]	; (8002be8 <vPortExitCritical+0x50>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d10a      	bne.n	8002bbc <vPortExitCritical+0x24>
        __asm volatile
 8002ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002baa:	f383 8811 	msr	BASEPRI, r3
 8002bae:	f3bf 8f6f 	isb	sy
 8002bb2:	f3bf 8f4f 	dsb	sy
 8002bb6:	607b      	str	r3, [r7, #4]
    }
 8002bb8:	bf00      	nop
 8002bba:	e7fe      	b.n	8002bba <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002bbc:	4b0a      	ldr	r3, [pc, #40]	; (8002be8 <vPortExitCritical+0x50>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	4a09      	ldr	r2, [pc, #36]	; (8002be8 <vPortExitCritical+0x50>)
 8002bc4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002bc6:	4b08      	ldr	r3, [pc, #32]	; (8002be8 <vPortExitCritical+0x50>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d105      	bne.n	8002bda <vPortExitCritical+0x42>
 8002bce:	2300      	movs	r3, #0
 8002bd0:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002bd8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	20000008 	.word	0x20000008
 8002bec:	00000000 	.word	0x00000000

08002bf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002bf0:	f3ef 8009 	mrs	r0, PSP
 8002bf4:	f3bf 8f6f 	isb	sy
 8002bf8:	4b15      	ldr	r3, [pc, #84]	; (8002c50 <pxCurrentTCBConst>)
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	f01e 0f10 	tst.w	lr, #16
 8002c00:	bf08      	it	eq
 8002c02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002c06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c0a:	6010      	str	r0, [r2, #0]
 8002c0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002c10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002c14:	f380 8811 	msr	BASEPRI, r0
 8002c18:	f3bf 8f4f 	dsb	sy
 8002c1c:	f3bf 8f6f 	isb	sy
 8002c20:	f7ff f864 	bl	8001cec <vTaskSwitchContext>
 8002c24:	f04f 0000 	mov.w	r0, #0
 8002c28:	f380 8811 	msr	BASEPRI, r0
 8002c2c:	bc09      	pop	{r0, r3}
 8002c2e:	6819      	ldr	r1, [r3, #0]
 8002c30:	6808      	ldr	r0, [r1, #0]
 8002c32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c36:	f01e 0f10 	tst.w	lr, #16
 8002c3a:	bf08      	it	eq
 8002c3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002c40:	f380 8809 	msr	PSP, r0
 8002c44:	f3bf 8f6f 	isb	sy
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	f3af 8000 	nop.w

08002c50 <pxCurrentTCBConst>:
 8002c50:	20000188 	.word	0x20000188
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002c54:	bf00      	nop
 8002c56:	bf00      	nop

08002c58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
        __asm volatile
 8002c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c62:	f383 8811 	msr	BASEPRI, r3
 8002c66:	f3bf 8f6f 	isb	sy
 8002c6a:	f3bf 8f4f 	dsb	sy
 8002c6e:	607b      	str	r3, [r7, #4]
    }
 8002c70:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002c72:	f7fe ff25 	bl	8001ac0 <xTaskIncrementTick>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d003      	beq.n	8002c84 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002c7c:	4b06      	ldr	r3, [pc, #24]	; (8002c98 <SysTick_Handler+0x40>)
 8002c7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c82:	601a      	str	r2, [r3, #0]
 8002c84:	2300      	movs	r3, #0
 8002c86:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	f383 8811 	msr	BASEPRI, r3
    }
 8002c8e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8002c90:	bf00      	nop
 8002c92:	3708      	adds	r7, #8
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	e000ed04 	.word	0xe000ed04

08002c9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002ca0:	4b0b      	ldr	r3, [pc, #44]	; (8002cd0 <vPortSetupTimerInterrupt+0x34>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002ca6:	4b0b      	ldr	r3, [pc, #44]	; (8002cd4 <vPortSetupTimerInterrupt+0x38>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002cac:	4b0a      	ldr	r3, [pc, #40]	; (8002cd8 <vPortSetupTimerInterrupt+0x3c>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a0a      	ldr	r2, [pc, #40]	; (8002cdc <vPortSetupTimerInterrupt+0x40>)
 8002cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb6:	099b      	lsrs	r3, r3, #6
 8002cb8:	4a09      	ldr	r2, [pc, #36]	; (8002ce0 <vPortSetupTimerInterrupt+0x44>)
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002cbe:	4b04      	ldr	r3, [pc, #16]	; (8002cd0 <vPortSetupTimerInterrupt+0x34>)
 8002cc0:	2207      	movs	r2, #7
 8002cc2:	601a      	str	r2, [r3, #0]
}
 8002cc4:	bf00      	nop
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	e000e010 	.word	0xe000e010
 8002cd4:	e000e018 	.word	0xe000e018
 8002cd8:	20000000 	.word	0x20000000
 8002cdc:	10624dd3 	.word	0x10624dd3
 8002ce0:	e000e014 	.word	0xe000e014

08002ce4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002ce4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002cf4 <vPortEnableVFP+0x10>
 8002ce8:	6801      	ldr	r1, [r0, #0]
 8002cea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002cee:	6001      	str	r1, [r0, #0]
 8002cf0:	4770      	bx	lr
 8002cf2:	0000      	.short	0x0000
 8002cf4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002cf8:	bf00      	nop
 8002cfa:	bf00      	nop

08002cfc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b08a      	sub	sp, #40	; 0x28
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8002d04:	2300      	movs	r3, #0
 8002d06:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8002d08:	f7fe fdc0 	bl	800188c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002d0c:	4b53      	ldr	r3, [pc, #332]	; (8002e5c <pvPortMalloc+0x160>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d101      	bne.n	8002d18 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002d14:	f000 f908 	bl	8002f28 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d012      	beq.n	8002d44 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8002d1e:	2208      	movs	r2, #8
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f003 0307 	and.w	r3, r3, #7
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	3308      	adds	r3, #8
 8002d2a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	43db      	mvns	r3, r3
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d804      	bhi.n	8002d40 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	607b      	str	r3, [r7, #4]
 8002d3e:	e001      	b.n	8002d44 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8002d40:	2300      	movs	r3, #0
 8002d42:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	db70      	blt.n	8002e2c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d06d      	beq.n	8002e2c <pvPortMalloc+0x130>
 8002d50:	4b43      	ldr	r3, [pc, #268]	; (8002e60 <pvPortMalloc+0x164>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d868      	bhi.n	8002e2c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002d5a:	4b42      	ldr	r3, [pc, #264]	; (8002e64 <pvPortMalloc+0x168>)
 8002d5c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8002d5e:	4b41      	ldr	r3, [pc, #260]	; (8002e64 <pvPortMalloc+0x168>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002d64:	e004      	b.n	8002d70 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8002d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d68:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d903      	bls.n	8002d82 <pvPortMalloc+0x86>
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1f1      	bne.n	8002d66 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002d82:	4b36      	ldr	r3, [pc, #216]	; (8002e5c <pvPortMalloc+0x160>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d04f      	beq.n	8002e2c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002d8c:	6a3b      	ldr	r3, [r7, #32]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2208      	movs	r2, #8
 8002d92:	4413      	add	r3, r2
 8002d94:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	6a3b      	ldr	r3, [r7, #32]
 8002d9c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	1ad2      	subs	r2, r2, r3
 8002da6:	2308      	movs	r3, #8
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d91f      	bls.n	8002dee <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4413      	add	r3, r2
 8002db4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	f003 0307 	and.w	r3, r3, #7
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00a      	beq.n	8002dd6 <pvPortMalloc+0xda>
        __asm volatile
 8002dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc4:	f383 8811 	msr	BASEPRI, r3
 8002dc8:	f3bf 8f6f 	isb	sy
 8002dcc:	f3bf 8f4f 	dsb	sy
 8002dd0:	613b      	str	r3, [r7, #16]
    }
 8002dd2:	bf00      	nop
 8002dd4:	e7fe      	b.n	8002dd4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd8:	685a      	ldr	r2, [r3, #4]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	1ad2      	subs	r2, r2, r3
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002de8:	6978      	ldr	r0, [r7, #20]
 8002dea:	f000 f8f9 	bl	8002fe0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002dee:	4b1c      	ldr	r3, [pc, #112]	; (8002e60 <pvPortMalloc+0x164>)
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	4a19      	ldr	r2, [pc, #100]	; (8002e60 <pvPortMalloc+0x164>)
 8002dfa:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002dfc:	4b18      	ldr	r3, [pc, #96]	; (8002e60 <pvPortMalloc+0x164>)
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	4b19      	ldr	r3, [pc, #100]	; (8002e68 <pvPortMalloc+0x16c>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d203      	bcs.n	8002e10 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002e08:	4b15      	ldr	r3, [pc, #84]	; (8002e60 <pvPortMalloc+0x164>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a16      	ldr	r2, [pc, #88]	; (8002e68 <pvPortMalloc+0x16c>)
 8002e0e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8002e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1e:	2200      	movs	r2, #0
 8002e20:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002e22:	4b12      	ldr	r3, [pc, #72]	; (8002e6c <pvPortMalloc+0x170>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	3301      	adds	r3, #1
 8002e28:	4a10      	ldr	r2, [pc, #64]	; (8002e6c <pvPortMalloc+0x170>)
 8002e2a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002e2c:	f7fe fd3c 	bl	80018a8 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	f003 0307 	and.w	r3, r3, #7
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00a      	beq.n	8002e50 <pvPortMalloc+0x154>
        __asm volatile
 8002e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e3e:	f383 8811 	msr	BASEPRI, r3
 8002e42:	f3bf 8f6f 	isb	sy
 8002e46:	f3bf 8f4f 	dsb	sy
 8002e4a:	60fb      	str	r3, [r7, #12]
    }
 8002e4c:	bf00      	nop
 8002e4e:	e7fe      	b.n	8002e4e <pvPortMalloc+0x152>
    return pvReturn;
 8002e50:	69fb      	ldr	r3, [r7, #28]
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3728      	adds	r7, #40	; 0x28
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	20012ed8 	.word	0x20012ed8
 8002e60:	20012edc 	.word	0x20012edc
 8002e64:	20012ed0 	.word	0x20012ed0
 8002e68:	20012ee0 	.word	0x20012ee0
 8002e6c:	20012ee4 	.word	0x20012ee4

08002e70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d049      	beq.n	8002f16 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002e82:	2308      	movs	r3, #8
 8002e84:	425b      	negs	r3, r3
 8002e86:	697a      	ldr	r2, [r7, #20]
 8002e88:	4413      	add	r3, r2
 8002e8a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	db0a      	blt.n	8002eae <vPortFree+0x3e>
        __asm volatile
 8002e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e9c:	f383 8811 	msr	BASEPRI, r3
 8002ea0:	f3bf 8f6f 	isb	sy
 8002ea4:	f3bf 8f4f 	dsb	sy
 8002ea8:	60fb      	str	r3, [r7, #12]
    }
 8002eaa:	bf00      	nop
 8002eac:	e7fe      	b.n	8002eac <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00a      	beq.n	8002ecc <vPortFree+0x5c>
        __asm volatile
 8002eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eba:	f383 8811 	msr	BASEPRI, r3
 8002ebe:	f3bf 8f6f 	isb	sy
 8002ec2:	f3bf 8f4f 	dsb	sy
 8002ec6:	60bb      	str	r3, [r7, #8]
    }
 8002ec8:	bf00      	nop
 8002eca:	e7fe      	b.n	8002eca <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	0fdb      	lsrs	r3, r3, #31
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d01c      	beq.n	8002f16 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d118      	bne.n	8002f16 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8002ef0:	f7fe fccc 	bl	800188c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	4b09      	ldr	r3, [pc, #36]	; (8002f20 <vPortFree+0xb0>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4413      	add	r3, r2
 8002efe:	4a08      	ldr	r2, [pc, #32]	; (8002f20 <vPortFree+0xb0>)
 8002f00:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002f02:	6938      	ldr	r0, [r7, #16]
 8002f04:	f000 f86c 	bl	8002fe0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002f08:	4b06      	ldr	r3, [pc, #24]	; (8002f24 <vPortFree+0xb4>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	4a05      	ldr	r2, [pc, #20]	; (8002f24 <vPortFree+0xb4>)
 8002f10:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8002f12:	f7fe fcc9 	bl	80018a8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002f16:	bf00      	nop
 8002f18:	3718      	adds	r7, #24
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	20012edc 	.word	0x20012edc
 8002f24:	20012ee8 	.word	0x20012ee8

08002f28 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002f2e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8002f32:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002f34:	4b25      	ldr	r3, [pc, #148]	; (8002fcc <prvHeapInit+0xa4>)
 8002f36:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f003 0307 	and.w	r3, r3, #7
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00c      	beq.n	8002f5c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	3307      	adds	r3, #7
 8002f46:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f023 0307 	bic.w	r3, r3, #7
 8002f4e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002f50:	68ba      	ldr	r2, [r7, #8]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	4a1d      	ldr	r2, [pc, #116]	; (8002fcc <prvHeapInit+0xa4>)
 8002f58:	4413      	add	r3, r2
 8002f5a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002f60:	4a1b      	ldr	r2, [pc, #108]	; (8002fd0 <prvHeapInit+0xa8>)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8002f66:	4b1a      	ldr	r3, [pc, #104]	; (8002fd0 <prvHeapInit+0xa8>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	68ba      	ldr	r2, [r7, #8]
 8002f70:	4413      	add	r3, r2
 8002f72:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8002f74:	2208      	movs	r2, #8
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	1a9b      	subs	r3, r3, r2
 8002f7a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f023 0307 	bic.w	r3, r3, #7
 8002f82:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	4a13      	ldr	r2, [pc, #76]	; (8002fd4 <prvHeapInit+0xac>)
 8002f88:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8002f8a:	4b12      	ldr	r3, [pc, #72]	; (8002fd4 <prvHeapInit+0xac>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8002f92:	4b10      	ldr	r3, [pc, #64]	; (8002fd4 <prvHeapInit+0xac>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2200      	movs	r2, #0
 8002f98:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	1ad2      	subs	r2, r2, r3
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002fa8:	4b0a      	ldr	r3, [pc, #40]	; (8002fd4 <prvHeapInit+0xac>)
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	4a08      	ldr	r2, [pc, #32]	; (8002fd8 <prvHeapInit+0xb0>)
 8002fb6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	4a07      	ldr	r2, [pc, #28]	; (8002fdc <prvHeapInit+0xb4>)
 8002fbe:	6013      	str	r3, [r2, #0]
}
 8002fc0:	bf00      	nop
 8002fc2:	3714      	adds	r7, #20
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	200002d0 	.word	0x200002d0
 8002fd0:	20012ed0 	.word	0x20012ed0
 8002fd4:	20012ed8 	.word	0x20012ed8
 8002fd8:	20012ee0 	.word	0x20012ee0
 8002fdc:	20012edc 	.word	0x20012edc

08002fe0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002fe8:	4b28      	ldr	r3, [pc, #160]	; (800308c <prvInsertBlockIntoFreeList+0xac>)
 8002fea:	60fb      	str	r3, [r7, #12]
 8002fec:	e002      	b.n	8002ff4 <prvInsertBlockIntoFreeList+0x14>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	60fb      	str	r3, [r7, #12]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d8f7      	bhi.n	8002fee <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	68ba      	ldr	r2, [r7, #8]
 8003008:	4413      	add	r3, r2
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	429a      	cmp	r2, r3
 800300e:	d108      	bne.n	8003022 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	685a      	ldr	r2, [r3, #4]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	441a      	add	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	68ba      	ldr	r2, [r7, #8]
 800302c:	441a      	add	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	429a      	cmp	r2, r3
 8003034:	d118      	bne.n	8003068 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	4b15      	ldr	r3, [pc, #84]	; (8003090 <prvInsertBlockIntoFreeList+0xb0>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	429a      	cmp	r2, r3
 8003040:	d00d      	beq.n	800305e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685a      	ldr	r2, [r3, #4]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	441a      	add	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	601a      	str	r2, [r3, #0]
 800305c:	e008      	b.n	8003070 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800305e:	4b0c      	ldr	r3, [pc, #48]	; (8003090 <prvInsertBlockIntoFreeList+0xb0>)
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	e003      	b.n	8003070 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	429a      	cmp	r2, r3
 8003076:	d002      	beq.n	800307e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800307e:	bf00      	nop
 8003080:	3714      	adds	r7, #20
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	20012ed0 	.word	0x20012ed0
 8003090:	20012ed8 	.word	0x20012ed8

08003094 <GPIO_Config>:
 * Para cualquier prefierico hay unos pasos estrictos que siempre
 * se tienen que seguir en un orden. Lo primero sería activar la señal
 * de reloj
 */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 8003094:	b480      	push	{r7}
 8003096:	b085      	sub	sp, #20
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
	//Variable para hacer  paso a paso.
	uint32_t auxConfig = 	0;
 800309c:	2300      	movs	r3, #0
 800309e:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 	0;
 80030a0:	2300      	movs	r3, #0
 80030a2:	60bb      	str	r3, [r7, #8]
	// 1) activar el periferico.
	//Verificar que pin.
	if(pGPIOHandler -> pGPIOx == GPIOA){
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a88      	ldr	r2, [pc, #544]	; (80032cc <GPIO_Config+0x238>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d106      	bne.n	80030bc <GPIO_Config+0x28>
		RCC -> AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80030ae:	4b88      	ldr	r3, [pc, #544]	; (80032d0 <GPIO_Config+0x23c>)
 80030b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b2:	4a87      	ldr	r2, [pc, #540]	; (80032d0 <GPIO_Config+0x23c>)
 80030b4:	f043 0301 	orr.w	r3, r3, #1
 80030b8:	6313      	str	r3, [r2, #48]	; 0x30
 80030ba:	e03a      	b.n	8003132 <GPIO_Config+0x9e>
	}
	else if(pGPIOHandler -> pGPIOx == GPIOB){
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a84      	ldr	r2, [pc, #528]	; (80032d4 <GPIO_Config+0x240>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d106      	bne.n	80030d4 <GPIO_Config+0x40>
		RCC -> AHB1ENR |=  RCC_AHB1ENR_GPIOBEN;
 80030c6:	4b82      	ldr	r3, [pc, #520]	; (80032d0 <GPIO_Config+0x23c>)
 80030c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ca:	4a81      	ldr	r2, [pc, #516]	; (80032d0 <GPIO_Config+0x23c>)
 80030cc:	f043 0302 	orr.w	r3, r3, #2
 80030d0:	6313      	str	r3, [r2, #48]	; 0x30
 80030d2:	e02e      	b.n	8003132 <GPIO_Config+0x9e>
	}
	else if(pGPIOHandler -> pGPIOx == GPIOC){
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a7f      	ldr	r2, [pc, #508]	; (80032d8 <GPIO_Config+0x244>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d106      	bne.n	80030ec <GPIO_Config+0x58>
		RCC -> AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 80030de:	4b7c      	ldr	r3, [pc, #496]	; (80032d0 <GPIO_Config+0x23c>)
 80030e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e2:	4a7b      	ldr	r2, [pc, #492]	; (80032d0 <GPIO_Config+0x23c>)
 80030e4:	f043 0304 	orr.w	r3, r3, #4
 80030e8:	6313      	str	r3, [r2, #48]	; 0x30
 80030ea:	e022      	b.n	8003132 <GPIO_Config+0x9e>
	}
	else if(pGPIOHandler -> pGPIOx == GPIOD){
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a7a      	ldr	r2, [pc, #488]	; (80032dc <GPIO_Config+0x248>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d106      	bne.n	8003104 <GPIO_Config+0x70>
		RCC -> AHB1ENR |=  RCC_AHB1ENR_GPIODEN;
 80030f6:	4b76      	ldr	r3, [pc, #472]	; (80032d0 <GPIO_Config+0x23c>)
 80030f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fa:	4a75      	ldr	r2, [pc, #468]	; (80032d0 <GPIO_Config+0x23c>)
 80030fc:	f043 0308 	orr.w	r3, r3, #8
 8003100:	6313      	str	r3, [r2, #48]	; 0x30
 8003102:	e016      	b.n	8003132 <GPIO_Config+0x9e>
	}
	else if(pGPIOHandler -> pGPIOx == GPIOE){
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a75      	ldr	r2, [pc, #468]	; (80032e0 <GPIO_Config+0x24c>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d106      	bne.n	800311c <GPIO_Config+0x88>
		RCC -> AHB1ENR |=  RCC_AHB1ENR_GPIOEEN;
 800310e:	4b70      	ldr	r3, [pc, #448]	; (80032d0 <GPIO_Config+0x23c>)
 8003110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003112:	4a6f      	ldr	r2, [pc, #444]	; (80032d0 <GPIO_Config+0x23c>)
 8003114:	f043 0310 	orr.w	r3, r3, #16
 8003118:	6313      	str	r3, [r2, #48]	; 0x30
 800311a:	e00a      	b.n	8003132 <GPIO_Config+0x9e>
	}
	else if(pGPIOHandler -> pGPIOx == GPIOH){
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a70      	ldr	r2, [pc, #448]	; (80032e4 <GPIO_Config+0x250>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d105      	bne.n	8003132 <GPIO_Config+0x9e>
		RCC -> AHB1ENR |= RCC_AHB1ENR_GPIOHEN;
 8003126:	4b6a      	ldr	r3, [pc, #424]	; (80032d0 <GPIO_Config+0x23c>)
 8003128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312a:	4a69      	ldr	r2, [pc, #420]	; (80032d0 <GPIO_Config+0x23c>)
 800312c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003130:	6313      	str	r3, [r2, #48]	; 0x30
	}

	//Despues de activado podemos comenzar a configurar.
	// 2) Configurar el registro GPIOx_MODER
	auxConfig = (pGPIOHandler -> GPIO_PinConfig_t.GPIO_PinMode << 2 * pGPIOHandler -> GPIO_PinConfig_t.GPIO_PinNumber);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	795b      	ldrb	r3, [r3, #5]
 8003136:	461a      	mov	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	791b      	ldrb	r3, [r3, #4]
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	fa02 f303 	lsl.w	r3, r2, r3
 8003142:	60fb      	str	r3, [r7, #12]
	//Antes de cargar el nuevo valor, limpiamos los bits especificos de ese registro
	//para lo cual aplicamos.
	pGPIOHandler -> pGPIOx -> MODER &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig_t.GPIO_PinNumber);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	791b      	ldrb	r3, [r3, #4]
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	2103      	movs	r1, #3
 8003152:	fa01 f303 	lsl.w	r3, r1, r3
 8003156:	43db      	mvns	r3, r3
 8003158:	4619      	mov	r1, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	400a      	ands	r2, r1
 8003160:	601a      	str	r2, [r3, #0]

	//Cargamos a auxConfig en el registro MODER
	pGPIOHandler -> pGPIOx -> MODER |= auxConfig;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	6819      	ldr	r1, [r3, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	430a      	orrs	r2, r1
 8003170:	601a      	str	r2, [r3, #0]

	// 3)configurando el registro OTYPER
	auxConfig = (pGPIOHandler -> GPIO_PinConfig_t.GPIO_PinOPType << pGPIOHandler -> GPIO_PinConfig_t.GPIO_PinNumber);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	7a1b      	ldrb	r3, [r3, #8]
 8003176:	461a      	mov	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	791b      	ldrb	r3, [r3, #4]
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	60fb      	str	r3, [r7, #12]
	//limpiamos
	pGPIOHandler -> pGPIOx -> OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig_t.GPIO_PinNumber);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	685a      	ldr	r2, [r3, #4]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	791b      	ldrb	r3, [r3, #4]
 800318c:	4619      	mov	r1, r3
 800318e:	2301      	movs	r3, #1
 8003190:	408b      	lsls	r3, r1
 8003192:	43db      	mvns	r3, r3
 8003194:	4619      	mov	r1, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	400a      	ands	r2, r1
 800319c:	605a      	str	r2, [r3, #4]
	// cargamos el resultado
	pGPIOHandler -> pGPIOx -> OTYPER |= auxConfig;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	6859      	ldr	r1, [r3, #4]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	430a      	orrs	r2, r1
 80031ac:	605a      	str	r2, [r3, #4]

	// 4) Configurando ahora la velocidad.
	//Realizando el mismo proceso
	auxConfig = (pGPIOHandler -> GPIO_PinConfig_t.GPIO_PinSpeed << 2 * pGPIOHandler -> GPIO_PinConfig_t.GPIO_PinNumber);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	799b      	ldrb	r3, [r3, #6]
 80031b2:	461a      	mov	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	791b      	ldrb	r3, [r3, #4]
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	fa02 f303 	lsl.w	r3, r2, r3
 80031be:	60fb      	str	r3, [r7, #12]
	pGPIOHandler -> pGPIOx -> OSPEEDR &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig_t.GPIO_PinNumber);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689a      	ldr	r2, [r3, #8]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	791b      	ldrb	r3, [r3, #4]
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	2103      	movs	r1, #3
 80031ce:	fa01 f303 	lsl.w	r3, r1, r3
 80031d2:	43db      	mvns	r3, r3
 80031d4:	4619      	mov	r1, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	400a      	ands	r2, r1
 80031dc:	609a      	str	r2, [r3, #8]
	pGPIOHandler -> pGPIOx -> OSPEEDR |= auxConfig;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	6899      	ldr	r1, [r3, #8]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	430a      	orrs	r2, r1
 80031ec:	609a      	str	r2, [r3, #8]

	// 5) confiurando si se desea pull-up, pull-down o flotante.
	auxConfig = (pGPIOHandler -> GPIO_PinConfig_t.GPIO_PinPuPdControl << 2 * pGPIOHandler -> GPIO_PinConfig_t.GPIO_PinNumber);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	79db      	ldrb	r3, [r3, #7]
 80031f2:	461a      	mov	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	791b      	ldrb	r3, [r3, #4]
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	fa02 f303 	lsl.w	r3, r2, r3
 80031fe:	60fb      	str	r3, [r7, #12]
	pGPIOHandler -> pGPIOx -> PUPDR &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig_t.GPIO_PinNumber);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68da      	ldr	r2, [r3, #12]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	791b      	ldrb	r3, [r3, #4]
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	2103      	movs	r1, #3
 800320e:	fa01 f303 	lsl.w	r3, r1, r3
 8003212:	43db      	mvns	r3, r3
 8003214:	4619      	mov	r1, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	400a      	ands	r2, r1
 800321c:	60da      	str	r2, [r3, #12]
	pGPIOHandler -> pGPIOx -> PUPDR |= auxConfig;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68d9      	ldr	r1, [r3, #12]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	430a      	orrs	r2, r1
 800322c:	60da      	str	r2, [r3, #12]

	//Esta es la parte para la configuración de las funciones alternativs
	if(pGPIOHandler->GPIO_PinConfig_t.GPIO_PinMode == GPIO_MODE_ALTFN){
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	795b      	ldrb	r3, [r3, #5]
 8003232:	2b02      	cmp	r3, #2
 8003234:	d143      	bne.n	80032be <GPIO_Config+0x22a>

		//Seleccionamos primero si se debe utilizar el registro bajo (AFRL) o alto (AFRH)
		if(pGPIOHandler->GPIO_PinConfig_t.GPIO_PinNumber < 8){
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	791b      	ldrb	r3, [r3, #4]
 800323a:	2b07      	cmp	r3, #7
 800323c:	d81f      	bhi.n	800327e <GPIO_Config+0x1ea>
			//Estamos en el registro AFRL, que controla los pines del 0 al 7
			auxPosition = 4 * pGPIOHandler->GPIO_PinConfig_t.GPIO_PinNumber;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	791b      	ldrb	r3, [r3, #4]
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	60bb      	str	r3, [r7, #8]

			//limpiamos
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b111<<auxPosition);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	6a1a      	ldr	r2, [r3, #32]
 800324c:	2107      	movs	r1, #7
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	fa01 f303 	lsl.w	r3, r1, r3
 8003254:	43db      	mvns	r3, r3
 8003256:	4619      	mov	r1, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	400a      	ands	r2, r1
 800325e:	621a      	str	r2, [r3, #32]

			// Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig_t.GPIO_PinAltFunMode << auxPosition);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	6a1a      	ldr	r2, [r3, #32]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	7a5b      	ldrb	r3, [r3, #9]
 800326a:	4619      	mov	r1, r3
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	fa01 f303 	lsl.w	r3, r1, r3
 8003272:	4619      	mov	r1, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	430a      	orrs	r2, r1
 800327a:	621a      	str	r2, [r3, #32]

			// Y escribimos el valor configurado en la posicion seleccionada
						pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig_t.GPIO_PinAltFunMode << auxPosition);
		}
	}
} //Fin del GPIO_config
 800327c:	e01f      	b.n	80032be <GPIO_Config+0x22a>
			auxPosition = 4 * (pGPIOHandler->GPIO_PinConfig_t.GPIO_PinNumber - 8);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	791b      	ldrb	r3, [r3, #4]
 8003282:	3b08      	subs	r3, #8
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b111<<auxPosition);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800328e:	2107      	movs	r1, #7
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	fa01 f303 	lsl.w	r3, r1, r3
 8003296:	43db      	mvns	r3, r3
 8003298:	4619      	mov	r1, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	400a      	ands	r2, r1
 80032a0:	625a      	str	r2, [r3, #36]	; 0x24
						pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig_t.GPIO_PinAltFunMode << auxPosition);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	7a5b      	ldrb	r3, [r3, #9]
 80032ac:	4619      	mov	r1, r3
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	fa01 f303 	lsl.w	r3, r1, r3
 80032b4:	4619      	mov	r1, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	430a      	orrs	r2, r1
 80032bc:	625a      	str	r2, [r3, #36]	; 0x24
} //Fin del GPIO_config
 80032be:	bf00      	nop
 80032c0:	3714      	adds	r7, #20
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	40020000 	.word	0x40020000
 80032d0:	40023800 	.word	0x40023800
 80032d4:	40020400 	.word	0x40020400
 80032d8:	40020800 	.word	0x40020800
 80032dc:	40020c00 	.word	0x40020c00
 80032e0:	40021000 	.word	0x40021000
 80032e4:	40021c00 	.word	0x40021c00

080032e8 <GPIO_WritePin>:
/**
 * Funcion utilizada para cambiar el estado el pin enregado en el hander, asignando
 * el valor entregado en el variable newState
 */

void GPIO_WritePin(GPIO_Handler_t *pPinHandler, uint8_t newState){
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	460b      	mov	r3, r1
 80032f2:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
//	pPinHandler -> pGPIOx -> ODR &= ~(SET << pPinHandler->GPIO_PinConfig_t.GPIO_PinNumber);
	if(newState == SET){
 80032f4:	78fb      	ldrb	r3, [r7, #3]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d10d      	bne.n	8003316 <GPIO_WritePin+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << pPinHandler->GPIO_PinConfig_t.GPIO_PinNumber);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	699a      	ldr	r2, [r3, #24]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	791b      	ldrb	r3, [r3, #4]
 8003304:	4619      	mov	r1, r3
 8003306:	2301      	movs	r3, #1
 8003308:	408b      	lsls	r3, r1
 800330a:	4619      	mov	r1, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	430a      	orrs	r2, r1
 8003312:	619a      	str	r2, [r3, #24]
	} else{
		//trabajando con la parte alta del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler->GPIO_PinConfig_t.GPIO_PinNumber + 16));
	}
}
 8003314:	e00d      	b.n	8003332 <GPIO_WritePin+0x4a>
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler->GPIO_PinConfig_t.GPIO_PinNumber + 16));
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	699a      	ldr	r2, [r3, #24]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	791b      	ldrb	r3, [r3, #4]
 8003320:	3310      	adds	r3, #16
 8003322:	2101      	movs	r1, #1
 8003324:	fa01 f303 	lsl.w	r3, r1, r3
 8003328:	4619      	mov	r1, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	430a      	orrs	r2, r1
 8003330:	619a      	str	r2, [r3, #24]
}
 8003332:	bf00      	nop
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr

0800333e <GPIO_ReadPin>:
//Funcion para leer el estado de un pin.
uint32_t GPIO_ReadPin(GPIO_Handler_t *pPinHandler){
 800333e:	b480      	push	{r7}
 8003340:	b085      	sub	sp, #20
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
	// creamos variable auxiliar para retornarla
	uint32_t pinValue = pPinHandler->pGPIOx->IDR;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	691b      	ldr	r3, [r3, #16]
 800334c:	60fb      	str	r3, [r7, #12]
	//Cargamos el valor del registro IDR, desplzadado a derecha tantas veces como la ubicacion del pin
	//especifico
	//limpiar los demas valores
	//Antes:
	// pinValue = (pPinHandler->pGPIOx->IDR>>pPinHandler->GPIO_PinConfig_t.GPIO_PinNumber);
	pinValue &= (SET<<pPinHandler->GPIO_PinConfig_t.GPIO_PinNumber);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	791b      	ldrb	r3, [r3, #4]
 8003352:	461a      	mov	r2, r3
 8003354:	2301      	movs	r3, #1
 8003356:	4093      	lsls	r3, r2
 8003358:	461a      	mov	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	4013      	ands	r3, r2
 800335e:	60fb      	str	r3, [r7, #12]
	pinValue >>= pPinHandler->GPIO_PinConfig_t.GPIO_PinNumber;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	791b      	ldrb	r3, [r3, #4]
 8003364:	461a      	mov	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	40d3      	lsrs	r3, r2
 800336a:	60fb      	str	r3, [r7, #12]
	return pinValue;
 800336c:	68fb      	ldr	r3, [r7, #12]
}
 800336e:	4618      	mov	r0, r3
 8003370:	3714      	adds	r7, #20
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr

0800337a <GPIOxTooglePin>:
 * 		1	  |  1	|		 0
 * 		0	  |  1	| 	 	 1
 */


void GPIOxTooglePin(GPIO_Handler_t *pPinHandler){
 800337a:	b580      	push	{r7, lr}
 800337c:	b082      	sub	sp, #8
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
	GPIO_WritePin(pPinHandler,SET^GPIO_ReadPin(pPinHandler));
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f7ff ffdb 	bl	800333e <GPIO_ReadPin>
 8003388:	4603      	mov	r3, r0
 800338a:	b2db      	uxtb	r3, r3
 800338c:	f083 0301 	eor.w	r3, r3, #1
 8003390:	b2db      	uxtb	r3, r3
 8003392:	4619      	mov	r1, r3
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f7ff ffa7 	bl	80032e8 <GPIO_WritePin>
}
 800339a:	bf00      	nop
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
	...

080033a4 <configPLL>:
 */

#include <stm32f4xx.h>
#include "PLLDriver.h"

int configPLL(uint16_t freqPLL){
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	4603      	mov	r3, r0
 80033ac:	80fb      	strh	r3, [r7, #6]
	if (freqPLL == 16){
 80033ae:	88fb      	ldrh	r3, [r7, #6]
 80033b0:	2b10      	cmp	r3, #16
 80033b2:	d101      	bne.n	80033b8 <configPLL+0x14>
		return 0;
 80033b4:	2300      	movs	r3, #0
 80033b6:	e0c2      	b.n	800353e <configPLL+0x19a>
	}
	//Selecionamos HSI como la fuente para el PLL
	RCC -> PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC);
 80033b8:	4b64      	ldr	r3, [pc, #400]	; (800354c <configPLL+0x1a8>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	4a63      	ldr	r2, [pc, #396]	; (800354c <configPLL+0x1a8>)
 80033be:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80033c2:	6053      	str	r3, [r2, #4]

	//Asignamos el divisor para la señal de entrada que sea facil de manipular
	//Por lo que la pondremos en 2MHz colocando en el registro 8.
	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLM); // Limpiamos
 80033c4:	4b61      	ldr	r3, [pc, #388]	; (800354c <configPLL+0x1a8>)
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	4a60      	ldr	r2, [pc, #384]	; (800354c <configPLL+0x1a8>)
 80033ca:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80033ce:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (RCC_PLLCFGR_PLLM_3); // Ponemos un 8 en el PLLM
 80033d0:	4b5e      	ldr	r3, [pc, #376]	; (800354c <configPLL+0x1a8>)
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	4a5d      	ldr	r2, [pc, #372]	; (800354c <configPLL+0x1a8>)
 80033d6:	f043 0308 	orr.w	r3, r3, #8
 80033da:	6053      	str	r3, [r2, #4]

	//Ahora conifugraremos la multiplicación
	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLN); // Limpiamos
 80033dc:	4b5b      	ldr	r3, [pc, #364]	; (800354c <configPLL+0x1a8>)
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	4a5a      	ldr	r2, [pc, #360]	; (800354c <configPLL+0x1a8>)
 80033e2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80033e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033ea:	6053      	str	r3, [r2, #4]

	//ponemos el PLLN en 80 para conseguir 160MHz
	RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_2);
 80033ec:	4b57      	ldr	r3, [pc, #348]	; (800354c <configPLL+0x1a8>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	4a56      	ldr	r2, [pc, #344]	; (800354c <configPLL+0x1a8>)
 80033f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033f6:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_5);
 80033f8:	4b54      	ldr	r3, [pc, #336]	; (800354c <configPLL+0x1a8>)
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	4a53      	ldr	r2, [pc, #332]	; (800354c <configPLL+0x1a8>)
 80033fe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003402:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_6);
 8003404:	4b51      	ldr	r3, [pc, #324]	; (800354c <configPLL+0x1a8>)
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	4a50      	ldr	r2, [pc, #320]	; (800354c <configPLL+0x1a8>)
 800340a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800340e:	6053      	str	r3, [r2, #4]

	//  Borro el posible valor configurado
	RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLN_Pos);
 8003410:	4b4e      	ldr	r3, [pc, #312]	; (800354c <configPLL+0x1a8>)
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	4a4d      	ldr	r2, [pc, #308]	; (800354c <configPLL+0x1a8>)
 8003416:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800341a:	6053      	str	r3, [r2, #4]

	// Cargamos el valor del multiplicador el cual al final terminaria siendo la frecuencia
	//Esto teniendo en cuenta que se utilizamos el PLLp para dividir entre 2
	if(freqPLL <= 100 && 50 < freqPLL)
 800341c:	88fb      	ldrh	r3, [r7, #6]
 800341e:	2b64      	cmp	r3, #100	; 0x64
 8003420:	d80b      	bhi.n	800343a <configPLL+0x96>
 8003422:	88fb      	ldrh	r3, [r7, #6]
 8003424:	2b32      	cmp	r3, #50	; 0x32
 8003426:	d908      	bls.n	800343a <configPLL+0x96>
		RCC->PLLCFGR |= (freqPLL << RCC_PLLCFGR_PLLN_Pos);
 8003428:	4b48      	ldr	r3, [pc, #288]	; (800354c <configPLL+0x1a8>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	88fa      	ldrh	r2, [r7, #6]
 800342e:	0192      	lsls	r2, r2, #6
 8003430:	4611      	mov	r1, r2
 8003432:	4a46      	ldr	r2, [pc, #280]	; (800354c <configPLL+0x1a8>)
 8003434:	430b      	orrs	r3, r1
 8003436:	6053      	str	r3, [r2, #4]
 8003438:	e005      	b.n	8003446 <configPLL+0xa2>
	else
		RCC->PLLCFGR |= (PLL_STANDARD_FREQ << RCC_PLLCFGR_PLLN_Pos);
 800343a:	4b44      	ldr	r3, [pc, #272]	; (800354c <configPLL+0x1a8>)
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	4a43      	ldr	r2, [pc, #268]	; (800354c <configPLL+0x1a8>)
 8003440:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8003444:	6053      	str	r3, [r2, #4]

	// La salida del PLL depende del valor VCO y del preescaler PLLP, el cual
	// su minimo valor es de 2 con esto configuramos siempre la frecuencia que le entreguemos
	// entre 50 a 100
	RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos); // Salida DIV2
 8003446:	4b41      	ldr	r3, [pc, #260]	; (800354c <configPLL+0x1a8>)
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	4a40      	ldr	r2, [pc, #256]	; (800354c <configPLL+0x1a8>)
 800344c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003450:	6053      	str	r3, [r2, #4]

	// Cambio el valor VOS (regulador de voltaje) para que se tenga el
	// rendimiento adecuado Esto se debe hacer antes de encender el PLL

	if(freqPLL <= 64)
 8003452:	88fb      	ldrh	r3, [r7, #6]
 8003454:	2b40      	cmp	r3, #64	; 0x40
 8003456:	d806      	bhi.n	8003466 <configPLL+0xc2>
		PWR->CR |= (0x1 << PWR_CR_VOS_Pos);
 8003458:	4b3d      	ldr	r3, [pc, #244]	; (8003550 <configPLL+0x1ac>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a3c      	ldr	r2, [pc, #240]	; (8003550 <configPLL+0x1ac>)
 800345e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003462:	6013      	str	r3, [r2, #0]
 8003464:	e012      	b.n	800348c <configPLL+0xe8>
	else if(freqPLL <= 84)
 8003466:	88fb      	ldrh	r3, [r7, #6]
 8003468:	2b54      	cmp	r3, #84	; 0x54
 800346a:	d806      	bhi.n	800347a <configPLL+0xd6>
		PWR->CR |= (0x2 << PWR_CR_VOS_Pos);
 800346c:	4b38      	ldr	r3, [pc, #224]	; (8003550 <configPLL+0x1ac>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a37      	ldr	r2, [pc, #220]	; (8003550 <configPLL+0x1ac>)
 8003472:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003476:	6013      	str	r3, [r2, #0]
 8003478:	e008      	b.n	800348c <configPLL+0xe8>
	else if(freqPLL <= 100)
 800347a:	88fb      	ldrh	r3, [r7, #6]
 800347c:	2b64      	cmp	r3, #100	; 0x64
 800347e:	d805      	bhi.n	800348c <configPLL+0xe8>
		PWR->CR |= (0x3 << PWR_CR_VOS_Pos);
 8003480:	4b33      	ldr	r3, [pc, #204]	; (8003550 <configPLL+0x1ac>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a32      	ldr	r2, [pc, #200]	; (8003550 <configPLL+0x1ac>)
 8003486:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800348a:	6013      	str	r3, [r2, #0]

	// Activamos el PLL en el control register del RCC
	RCC->CR |= RCC_CR_PLLON;
 800348c:	4b2f      	ldr	r3, [pc, #188]	; (800354c <configPLL+0x1a8>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a2e      	ldr	r2, [pc, #184]	; (800354c <configPLL+0x1a8>)
 8003492:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003496:	6013      	str	r3, [r2, #0]

	// Esperamos a que el PLL se cierre (se estabilice)
	while (!(RCC->CR & RCC_CR_PLLRDY)){
 8003498:	e000      	b.n	800349c <configPLL+0xf8>
		__NOP();
 800349a:	bf00      	nop
	while (!(RCC->CR & RCC_CR_PLLRDY)){
 800349c:	4b2b      	ldr	r3, [pc, #172]	; (800354c <configPLL+0x1a8>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d0f8      	beq.n	800349a <configPLL+0xf6>
	/* ---- Configuración de Preescalers para velocidad de los Buses ---- */
	//  Organizamos los preescalers del hardware, de forma que funcionen
	// a la velocidad maxima permitida
	// Preescaler del hardware del procesador, el valor en 0 significa
	// 	 sin preescaler
	RCC->CFGR &= ~(0xF << RCC_CFGR_HPRE_Pos);
 80034a8:	4b28      	ldr	r3, [pc, #160]	; (800354c <configPLL+0x1a8>)
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	4a27      	ldr	r2, [pc, #156]	; (800354c <configPLL+0x1a8>)
 80034ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034b2:	6093      	str	r3, [r2, #8]

	// Preescaler para el APB2 (high speed), el valor en 0 significa
	// sin preescaler
	RCC->CFGR &= ~(0x7 << RCC_CFGR_PPRE2_Pos);
 80034b4:	4b25      	ldr	r3, [pc, #148]	; (800354c <configPLL+0x1a8>)
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	4a24      	ldr	r2, [pc, #144]	; (800354c <configPLL+0x1a8>)
 80034ba:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80034be:	6093      	str	r3, [r2, #8]

	// Preescaler para el APB1 (low speed). Se debe poner un preescaler
	// de 2:1, para que la velocidad
	// sea la máxima permitida. Primero lo limpio, luego lo configuro
	RCC->CFGR &= ~(0x7 << RCC_CFGR_PPRE1_Pos); // Limpiar
 80034c0:	4b22      	ldr	r3, [pc, #136]	; (800354c <configPLL+0x1a8>)
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	4a21      	ldr	r2, [pc, #132]	; (800354c <configPLL+0x1a8>)
 80034c6:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80034ca:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (0x4 << RCC_CFGR_PPRE1_Pos);  // Preescaler 2:1
 80034cc:	4b1f      	ldr	r3, [pc, #124]	; (800354c <configPLL+0x1a8>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	4a1e      	ldr	r2, [pc, #120]	; (800354c <configPLL+0x1a8>)
 80034d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80034d6:	6093      	str	r3, [r2, #8]

	// Ahora debemos configurar el periodo de espera para leer la
	// memoria flash (Lantency), tal cual como esta descrito en la seccion
	// 3.4.1, tabla 5, pag 45.

	FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos); // Limpiamos la posicion
 80034d8:	4b1e      	ldr	r3, [pc, #120]	; (8003554 <configPLL+0x1b0>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a1d      	ldr	r2, [pc, #116]	; (8003554 <configPLL+0x1b0>)
 80034de:	f023 030f 	bic.w	r3, r3, #15
 80034e2:	6013      	str	r3, [r2, #0]

	if(50 <= freqPLL && freqPLL <= 64)
 80034e4:	88fb      	ldrh	r3, [r7, #6]
 80034e6:	2b31      	cmp	r3, #49	; 0x31
 80034e8:	d909      	bls.n	80034fe <configPLL+0x15a>
 80034ea:	88fb      	ldrh	r3, [r7, #6]
 80034ec:	2b40      	cmp	r3, #64	; 0x40
 80034ee:	d806      	bhi.n	80034fe <configPLL+0x15a>
		FLASH -> ACR |= (0x1 << FLASH_ACR_LATENCY_Pos); // Configurando 1 WS
 80034f0:	4b18      	ldr	r3, [pc, #96]	; (8003554 <configPLL+0x1b0>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a17      	ldr	r2, [pc, #92]	; (8003554 <configPLL+0x1b0>)
 80034f6:	f043 0301 	orr.w	r3, r3, #1
 80034fa:	6013      	str	r3, [r2, #0]
 80034fc:	e012      	b.n	8003524 <configPLL+0x180>
	else if(90 <= freqPLL && freqPLL <= 100)
 80034fe:	88fb      	ldrh	r3, [r7, #6]
 8003500:	2b59      	cmp	r3, #89	; 0x59
 8003502:	d909      	bls.n	8003518 <configPLL+0x174>
 8003504:	88fb      	ldrh	r3, [r7, #6]
 8003506:	2b64      	cmp	r3, #100	; 0x64
 8003508:	d806      	bhi.n	8003518 <configPLL+0x174>
		FLASH -> ACR |= (0x3 << FLASH_ACR_LATENCY_Pos); // Configurando 3 WS
 800350a:	4b12      	ldr	r3, [pc, #72]	; (8003554 <configPLL+0x1b0>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a11      	ldr	r2, [pc, #68]	; (8003554 <configPLL+0x1b0>)
 8003510:	f043 0303 	orr.w	r3, r3, #3
 8003514:	6013      	str	r3, [r2, #0]
 8003516:	e005      	b.n	8003524 <configPLL+0x180>
	else // Default State: (64 <= freqPLL && freqPLL <= 90)
		FLASH -> ACR |= (0x2 << FLASH_ACR_LATENCY_Pos); // Configurando 2 WS
 8003518:	4b0e      	ldr	r3, [pc, #56]	; (8003554 <configPLL+0x1b0>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a0d      	ldr	r2, [pc, #52]	; (8003554 <configPLL+0x1b0>)
 800351e:	f043 0302 	orr.w	r3, r3, #2
 8003522:	6013      	str	r3, [r2, #0]

	//  Ahora falta hacer el cambio del sistema a que funcione en la nueva frecuencia
	RCC->CFGR &= ~RCC_CFGR_SW_1;  // Borramos la posicion
 8003524:	4b09      	ldr	r3, [pc, #36]	; (800354c <configPLL+0x1a8>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	4a08      	ldr	r2, [pc, #32]	; (800354c <configPLL+0x1a8>)
 800352a:	f023 0302 	bic.w	r3, r3, #2
 800352e:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_1;   // PLL como reloj principal
 8003530:	4b06      	ldr	r3, [pc, #24]	; (800354c <configPLL+0x1a8>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	4a05      	ldr	r2, [pc, #20]	; (800354c <configPLL+0x1a8>)
 8003536:	f043 0302 	orr.w	r3, r3, #2
 800353a:	6093      	str	r3, [r2, #8]

	return 1;
 800353c:	2301      	movs	r3, #1
}
 800353e:	4618      	mov	r0, r3
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	40023800 	.word	0x40023800
 8003550:	40007000 	.word	0x40007000
 8003554:	40023c00 	.word	0x40023c00

08003558 <getConfigPLL>:

// Obtener  la configuración
uint8_t getConfigPLL(void){
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0

	// Seleccion de los dos valores SWS1 y SWS0, que indican cual es la
	// fuente del reloj principal

	uint32_t auxClockState = (RCC->CFGR & 0b1100) >> 2;
 800355e:	4b10      	ldr	r3, [pc, #64]	; (80035a0 <getConfigPLL+0x48>)
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	089b      	lsrs	r3, r3, #2
 8003564:	f003 0303 	and.w	r3, r3, #3
 8003568:	607b      	str	r3, [r7, #4]

	switch(auxClockState){
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2b02      	cmp	r3, #2
 800356e:	d00d      	beq.n	800358c <getConfigPLL+0x34>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b02      	cmp	r3, #2
 8003574:	d80c      	bhi.n	8003590 <getConfigPLL+0x38>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d003      	beq.n	8003584 <getConfigPLL+0x2c>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d002      	beq.n	8003588 <getConfigPLL+0x30>
 8003582:	e005      	b.n	8003590 <getConfigPLL+0x38>
	case HSI_CLOCK_CONFIGURED:
		return 0;
 8003584:	2300      	movs	r3, #0
 8003586:	e004      	b.n	8003592 <getConfigPLL+0x3a>
		break;

	case HSE_CLOCK_CONFIGURED:
		return 1;
 8003588:	2301      	movs	r3, #1
 800358a:	e002      	b.n	8003592 <getConfigPLL+0x3a>
		break;

	case PLL_CLOCK_CONFIGURED:
		return 2;
 800358c:	2302      	movs	r3, #2
 800358e:	e000      	b.n	8003592 <getConfigPLL+0x3a>
		break;

	default:
		return 0;
 8003590:	2300      	movs	r3, #0
		break;

	}
}
 8003592:	4618      	mov	r0, r3
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	40023800 	.word	0x40023800

080035a4 <getFreqPLL>:

// Obtener la frecuencia función importante para cualquier aplicaciom.
uint16_t getFreqPLL(void){
 80035a4:	b580      	push	{r7, lr}
 80035a6:	af00      	add	r7, sp, #0

	// Retorno del valor actual de PLL, discriminación del valor actual
	switch(getConfigPLL()){
 80035a8:	f7ff ffd6 	bl	8003558 <getConfigPLL>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d001      	beq.n	80035b6 <getFreqPLL+0x12>

	default:
	case HSI_CLOCK_CONFIGURED:
		return 16;
 80035b2:	2310      	movs	r3, #16
 80035b4:	e006      	b.n	80035c4 <getFreqPLL+0x20>
		break;

	case PLL_CLOCK_CONFIGURED:

		return (RCC->PLLCFGR & 0b111111111000000) >> RCC_PLLCFGR_PLLN_Pos;
 80035b6:	4b04      	ldr	r3, [pc, #16]	; (80035c8 <getFreqPLL+0x24>)
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	099b      	lsrs	r3, r3, #6
 80035bc:	b29b      	uxth	r3, r3
 80035be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035c2:	b29b      	uxth	r3, r3
		break;

	}
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	40023800 	.word	0x40023800

080035cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	4603      	mov	r3, r0
 80035d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	db0b      	blt.n	80035f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035de:	79fb      	ldrb	r3, [r7, #7]
 80035e0:	f003 021f 	and.w	r2, r3, #31
 80035e4:	4907      	ldr	r1, [pc, #28]	; (8003604 <__NVIC_EnableIRQ+0x38>)
 80035e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ea:	095b      	lsrs	r3, r3, #5
 80035ec:	2001      	movs	r0, #1
 80035ee:	fa00 f202 	lsl.w	r2, r0, r2
 80035f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80035f6:	bf00      	nop
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	e000e100 	.word	0xe000e100

08003608 <USART_Config>:
/**
 * Configurando el puerto Serial...
 * Recordar que siempre se debe comenzar con activar la señal de reloj
 * del periferico que se está utilizando.
 */
void USART_Config(USART_Handler_t *ptrUsartHandler) {
 8003608:	b5b0      	push	{r4, r5, r7, lr}
 800360a:	b090      	sub	sp, #64	; 0x40
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003610:	b672      	cpsid	i
}
 8003612:	bf00      	nop
	__disable_irq();

	/* 1. Activamos la señal de reloj que viene desde el BUS al que pertenece el periferico */
	/* Lo debemos hacer para cada uno de las pisbles opciones que tengamos (USART1, USART2, USART6) */
	/* 1.1 Configuramos el USART1 */
	if (ptrUsartHandler->ptrUSARTx == USART1) {
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a85      	ldr	r2, [pc, #532]	; (8003830 <USART_Config+0x228>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d106      	bne.n	800362c <USART_Config+0x24>
		RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 800361e:	4b85      	ldr	r3, [pc, #532]	; (8003834 <USART_Config+0x22c>)
 8003620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003622:	4a84      	ldr	r2, [pc, #528]	; (8003834 <USART_Config+0x22c>)
 8003624:	f043 0310 	orr.w	r3, r3, #16
 8003628:	6453      	str	r3, [r2, #68]	; 0x44
 800362a:	e016      	b.n	800365a <USART_Config+0x52>
	}

	/* 1.2 Configuramos el USART2 */
	else if (ptrUsartHandler->ptrUSARTx == USART2) {
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a81      	ldr	r2, [pc, #516]	; (8003838 <USART_Config+0x230>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d106      	bne.n	8003644 <USART_Config+0x3c>
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8003636:	4b7f      	ldr	r3, [pc, #508]	; (8003834 <USART_Config+0x22c>)
 8003638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363a:	4a7e      	ldr	r2, [pc, #504]	; (8003834 <USART_Config+0x22c>)
 800363c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003640:	6413      	str	r3, [r2, #64]	; 0x40
 8003642:	e00a      	b.n	800365a <USART_Config+0x52>
	}

	/* 1.3 Configuramos el USART6 */
	else if (ptrUsartHandler->ptrUSARTx == USART6) {
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a7c      	ldr	r2, [pc, #496]	; (800383c <USART_Config+0x234>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d105      	bne.n	800365a <USART_Config+0x52>
		RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 800364e:	4b79      	ldr	r3, [pc, #484]	; (8003834 <USART_Config+0x22c>)
 8003650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003652:	4a78      	ldr	r2, [pc, #480]	; (8003834 <USART_Config+0x22c>)
 8003654:	f043 0320 	orr.w	r3, r3, #32
 8003658:	6453      	str	r3, [r2, #68]	; 0x44
	/* Configuracion del Baudrate (registro BRR) */
	/* Configuramos el modo: only TX, only RX, o RXTX */
	/* Por ultimo activamos el modulo USART cuando todos esta correctamente configurado */

	// 2.1 Comienzo por limpiar los registros, para cargar la configuración desde cero
	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2200      	movs	r2, #0
 8003660:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2200      	movs	r2, #0
 8003668:	611a      	str	r2, [r3, #16]

	// 2.2 Configuracion del Parity:
	// Verificamos si el parity esta activado o no
	// Tenga cuidado, el parity hace parte del tamaño de los datos...
	if (ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE) {
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	7b5b      	ldrb	r3, [r3, #13]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d01d      	beq.n	80036ae <USART_Config+0xa6>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PCE; // Activamos la seleccion de paridad
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68da      	ldr	r2, [r3, #12]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003680:	60da      	str	r2, [r3, #12]
		// Verificamos si se ha seleccionado ODD or EVEN
		if (ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_EVEN) {
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	7b5b      	ldrb	r3, [r3, #13]
 8003686:	2b02      	cmp	r3, #2
 8003688:	d108      	bne.n	800369c <USART_Config+0x94>
			// Es even, entonces cargamos la configuracion adecuada
			// Escriba acá su código
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_PS); //Queremos que sea 0
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68da      	ldr	r2, [r3, #12]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003698:	60da      	str	r2, [r3, #12]
 800369a:	e010      	b.n	80036be <USART_Config+0xb6>
		} else {
			// Si es "else" significa que la paridad seleccionada es ODD, y cargamos esta configuracion
			// Escriba acá su código
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS; //Queremos que sea 1
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68da      	ldr	r2, [r3, #12]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036aa:	60da      	str	r2, [r3, #12]
 80036ac:	e007      	b.n	80036be <USART_Config+0xb6>
		}
	} else {
		// Si llegamos aca, es porque no deseamos tener el parity-check
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_PCE); // Activamos la seleccion de paridad
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68da      	ldr	r2, [r3, #12]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036bc:	60da      	str	r2, [r3, #12]

	}

	// 2.3 Configuramos el tamaño del dato
	if (ptrUsartHandler->USART_Config.USART_datasize == USART_DATASIZE_8BIT) {
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	7b1b      	ldrb	r3, [r3, #12]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d108      	bne.n	80036d8 <USART_Config+0xd0>
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_M); // Lo ponemos en 8 bits
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68da      	ldr	r2, [r3, #12]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80036d4:	60da      	str	r2, [r3, #12]
 80036d6:	e007      	b.n	80036e8 <USART_Config+0xe0>
	} else {
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M; // Lo ponemos en 9 bits
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68da      	ldr	r2, [r3, #12]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80036e6:	60da      	str	r2, [r3, #12]
	}

	// 2.4 Configuramos los stop bits (SFR USART_CR2)
	switch (ptrUsartHandler->USART_Config.USART_stopbits) {
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	7b9b      	ldrb	r3, [r3, #14]
 80036ec:	2b03      	cmp	r3, #3
 80036ee:	d82f      	bhi.n	8003750 <USART_Config+0x148>
 80036f0:	a201      	add	r2, pc, #4	; (adr r2, 80036f8 <USART_Config+0xf0>)
 80036f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f6:	bf00      	nop
 80036f8:	08003709 	.word	0x08003709
 80036fc:	0800371b 	.word	0x0800371b
 8003700:	0800372d 	.word	0x0800372d
 8003704:	0800373f 	.word	0x0800373f
	case USART_STOPBIT_1: {
		// Debemoscargar el valor 0b00 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00 < USART_CR2_STOP_Pos);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	691a      	ldr	r2, [r3, #16]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f042 0201 	orr.w	r2, r2, #1
 8003716:	611a      	str	r2, [r3, #16]
		break;
 8003718:	e023      	b.n	8003762 <USART_Config+0x15a>
	}
	case USART_STOPBIT_0_5: {
		// Debemoscargar el valor 0b01 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b01 < USART_CR2_STOP_Pos);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	691a      	ldr	r2, [r3, #16]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f042 0201 	orr.w	r2, r2, #1
 8003728:	611a      	str	r2, [r3, #16]
		break;
 800372a:	e01a      	b.n	8003762 <USART_Config+0x15a>
	}
	case USART_STOPBIT_2: {
		// Debemoscargar el valor 0b10 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b10 < USART_CR2_STOP_Pos);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	691a      	ldr	r2, [r3, #16]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f042 0201 	orr.w	r2, r2, #1
 800373a:	611a      	str	r2, [r3, #16]
		break;
 800373c:	e011      	b.n	8003762 <USART_Config+0x15a>
	}
	case USART_STOPBIT_1_5: {
		// Debemoscargar el valor 0b11 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b11 < USART_CR2_STOP_Pos);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	691a      	ldr	r2, [r3, #16]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f042 0201 	orr.w	r2, r2, #1
 800374c:	611a      	str	r2, [r3, #16]
		break;
 800374e:	e008      	b.n	8003762 <USART_Config+0x15a>
	}
	default: {
		// En el casopor defecto seleccionamos 1 bit de parada
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00 < USART_CR2_STOP_Pos);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	691a      	ldr	r2, [r3, #16]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f042 0201 	orr.w	r2, r2, #1
 800375e:	611a      	str	r2, [r3, #16]
		break;
 8003760:	bf00      	nop
	}
	}
	//Obtenes la frecuencia actual desde el PLL, si estamos en usart2 toca dividirla entre 2
	uint16_t freckClock = getFreqPLL();
 8003762:	f7ff ff1f 	bl	80035a4 <getFreqPLL>
 8003766:	4603      	mov	r3, r0
 8003768:	87fb      	strh	r3, [r7, #62]	; 0x3e
	if (ptrUsartHandler->ptrUSARTx == USART2 && freckClock > 50) {
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a32      	ldr	r2, [pc, #200]	; (8003838 <USART_Config+0x230>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d107      	bne.n	8003784 <USART_Config+0x17c>
 8003774:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003776:	2b32      	cmp	r3, #50	; 0x32
 8003778:	d904      	bls.n	8003784 <USART_Config+0x17c>
		freckClock = getFreqPLL() / 2;
 800377a:	f7ff ff13 	bl	80035a4 <getFreqPLL>
 800377e:	4603      	mov	r3, r0
 8003780:	085b      	lsrs	r3, r3, #1
 8003782:	87fb      	strh	r3, [r7, #62]	; 0x3e
	}
	// 2.5 Configuracion del Baudrate (SFR USART_BRR)
	// Ver tabla de valores (Tabla 73), Frec = 16MHz, overr = 0;
	//Se dejan los comentarios antiguos pero ahora se utilizan formulas
	//matematicas para calcular los resultados automaticamente.
	if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600) {
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d15b      	bne.n	8003844 <USART_Config+0x23c>
		float div = (freckClock * 1E6) / (16 * 9600);
 800378c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800378e:	4618      	mov	r0, r3
 8003790:	f7fc fe78 	bl	8000484 <__aeabi_i2d>
 8003794:	a324      	add	r3, pc, #144	; (adr r3, 8003828 <USART_Config+0x220>)
 8003796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800379a:	f7fc fedd 	bl	8000558 <__aeabi_dmul>
 800379e:	4602      	mov	r2, r0
 80037a0:	460b      	mov	r3, r1
 80037a2:	4610      	mov	r0, r2
 80037a4:	4619      	mov	r1, r3
 80037a6:	f04f 0200 	mov.w	r2, #0
 80037aa:	4b25      	ldr	r3, [pc, #148]	; (8003840 <USART_Config+0x238>)
 80037ac:	f7fc fffe 	bl	80007ac <__aeabi_ddiv>
 80037b0:	4602      	mov	r2, r0
 80037b2:	460b      	mov	r3, r1
 80037b4:	4610      	mov	r0, r2
 80037b6:	4619      	mov	r1, r3
 80037b8:	f7fd f908 	bl	80009cc <__aeabi_d2f>
 80037bc:	4603      	mov	r3, r0
 80037be:	617b      	str	r3, [r7, #20]
		uint16_t mantissa = (int) div;
 80037c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80037c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80037c8:	ee17 3a90 	vmov	r3, s15
 80037cc:	827b      	strh	r3, [r7, #18]
		uint16_t fraction = (int) round((div - mantissa) * 16);
 80037ce:	8a7b      	ldrh	r3, [r7, #18]
 80037d0:	ee07 3a90 	vmov	s15, r3
 80037d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037d8:	ed97 7a05 	vldr	s14, [r7, #20]
 80037dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037e0:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80037e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037e8:	ee17 0a90 	vmov	r0, s15
 80037ec:	f7fc fe5c 	bl	80004a8 <__aeabi_f2d>
 80037f0:	4602      	mov	r2, r0
 80037f2:	460b      	mov	r3, r1
 80037f4:	ec43 2b10 	vmov	d0, r2, r3
 80037f8:	f001 f824 	bl	8004844 <round>
 80037fc:	ec53 2b10 	vmov	r2, r3, d0
 8003800:	4610      	mov	r0, r2
 8003802:	4619      	mov	r1, r3
 8003804:	f7fd f8ba 	bl	800097c <__aeabi_d2iz>
 8003808:	4603      	mov	r3, r0
 800380a:	823b      	strh	r3, [r7, #16]
		uint16_t result = mantissa << 4 | fraction;
 800380c:	8a7b      	ldrh	r3, [r7, #18]
 800380e:	011b      	lsls	r3, r3, #4
 8003810:	b21a      	sxth	r2, r3
 8003812:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003816:	4313      	orrs	r3, r2
 8003818:	b21b      	sxth	r3, r3
 800381a:	81fb      	strh	r3, [r7, #14]
		ptrUsartHandler->ptrUSARTx->BRR = result;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	89fa      	ldrh	r2, [r7, #14]
 8003822:	609a      	str	r2, [r3, #8]
 8003824:	e103      	b.n	8003a2e <USART_Config+0x426>
 8003826:	bf00      	nop
 8003828:	00000000 	.word	0x00000000
 800382c:	412e8480 	.word	0x412e8480
 8003830:	40011000 	.word	0x40011000
 8003834:	40023800 	.word	0x40023800
 8003838:	40004400 	.word	0x40004400
 800383c:	40011400 	.word	0x40011400
 8003840:	4102c000 	.word	0x4102c000
		// Valor a cargar 0x0683
		// Configurando el Baudrate generator para una velocidad de 9600bps

	}

	else if (ptrUsartHandler->USART_Config.USART_baudrate
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d14c      	bne.n	80038e6 <USART_Config+0x2de>
			== USART_BAUDRATE_19200) {
		float div = (freckClock * 1E6) / (16 * 19200);
 800384c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800384e:	4618      	mov	r0, r3
 8003850:	f7fc fe18 	bl	8000484 <__aeabi_i2d>
 8003854:	a39c      	add	r3, pc, #624	; (adr r3, 8003ac8 <USART_Config+0x4c0>)
 8003856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800385a:	f7fc fe7d 	bl	8000558 <__aeabi_dmul>
 800385e:	4602      	mov	r2, r0
 8003860:	460b      	mov	r3, r1
 8003862:	4610      	mov	r0, r2
 8003864:	4619      	mov	r1, r3
 8003866:	f04f 0200 	mov.w	r2, #0
 800386a:	4b9b      	ldr	r3, [pc, #620]	; (8003ad8 <USART_Config+0x4d0>)
 800386c:	f7fc ff9e 	bl	80007ac <__aeabi_ddiv>
 8003870:	4602      	mov	r2, r0
 8003872:	460b      	mov	r3, r1
 8003874:	4610      	mov	r0, r2
 8003876:	4619      	mov	r1, r3
 8003878:	f7fd f8a8 	bl	80009cc <__aeabi_d2f>
 800387c:	4603      	mov	r3, r0
 800387e:	623b      	str	r3, [r7, #32]
		uint16_t mantissa = (int) div;
 8003880:	edd7 7a08 	vldr	s15, [r7, #32]
 8003884:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003888:	ee17 3a90 	vmov	r3, s15
 800388c:	83fb      	strh	r3, [r7, #30]
		uint16_t fraction = (int) round((div - mantissa) * 16);
 800388e:	8bfb      	ldrh	r3, [r7, #30]
 8003890:	ee07 3a90 	vmov	s15, r3
 8003894:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003898:	ed97 7a08 	vldr	s14, [r7, #32]
 800389c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038a0:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80038a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038a8:	ee17 0a90 	vmov	r0, s15
 80038ac:	f7fc fdfc 	bl	80004a8 <__aeabi_f2d>
 80038b0:	4602      	mov	r2, r0
 80038b2:	460b      	mov	r3, r1
 80038b4:	ec43 2b10 	vmov	d0, r2, r3
 80038b8:	f000 ffc4 	bl	8004844 <round>
 80038bc:	ec53 2b10 	vmov	r2, r3, d0
 80038c0:	4610      	mov	r0, r2
 80038c2:	4619      	mov	r1, r3
 80038c4:	f7fd f85a 	bl	800097c <__aeabi_d2iz>
 80038c8:	4603      	mov	r3, r0
 80038ca:	83bb      	strh	r3, [r7, #28]
		uint16_t result = mantissa << 4 | fraction;
 80038cc:	8bfb      	ldrh	r3, [r7, #30]
 80038ce:	011b      	lsls	r3, r3, #4
 80038d0:	b21a      	sxth	r2, r3
 80038d2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	b21b      	sxth	r3, r3
 80038da:	837b      	strh	r3, [r7, #26]
		ptrUsartHandler->ptrUSARTx->BRR = result;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	8b7a      	ldrh	r2, [r7, #26]
 80038e2:	609a      	str	r2, [r3, #8]
 80038e4:	e0a3      	b.n	8003a2e <USART_Config+0x426>
		// Mantiza = 52 = 0x34, fraction = 16 * 0.1875 = 1
		// Valor a cargar 0x0341
		// Escriba acá su código y los comentarios que faltan
	}

	else if (ptrUsartHandler->USART_Config.USART_baudrate
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d14c      	bne.n	8003988 <USART_Config+0x380>
			== USART_BAUDRATE_115200) {
		float div = (freckClock * 1E6) / (16 * 115200);
 80038ee:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80038f0:	4618      	mov	r0, r3
 80038f2:	f7fc fdc7 	bl	8000484 <__aeabi_i2d>
 80038f6:	a374      	add	r3, pc, #464	; (adr r3, 8003ac8 <USART_Config+0x4c0>)
 80038f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038fc:	f7fc fe2c 	bl	8000558 <__aeabi_dmul>
 8003900:	4602      	mov	r2, r0
 8003902:	460b      	mov	r3, r1
 8003904:	4610      	mov	r0, r2
 8003906:	4619      	mov	r1, r3
 8003908:	a371      	add	r3, pc, #452	; (adr r3, 8003ad0 <USART_Config+0x4c8>)
 800390a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800390e:	f7fc ff4d 	bl	80007ac <__aeabi_ddiv>
 8003912:	4602      	mov	r2, r0
 8003914:	460b      	mov	r3, r1
 8003916:	4610      	mov	r0, r2
 8003918:	4619      	mov	r1, r3
 800391a:	f7fd f857 	bl	80009cc <__aeabi_d2f>
 800391e:	4603      	mov	r3, r0
 8003920:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint16_t mantissa = (int) div;
 8003922:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003926:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800392a:	ee17 3a90 	vmov	r3, s15
 800392e:	857b      	strh	r3, [r7, #42]	; 0x2a
		uint16_t fraction = (int) round((div - mantissa) * 16);
 8003930:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003932:	ee07 3a90 	vmov	s15, r3
 8003936:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800393a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800393e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003942:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8003946:	ee67 7a87 	vmul.f32	s15, s15, s14
 800394a:	ee17 0a90 	vmov	r0, s15
 800394e:	f7fc fdab 	bl	80004a8 <__aeabi_f2d>
 8003952:	4602      	mov	r2, r0
 8003954:	460b      	mov	r3, r1
 8003956:	ec43 2b10 	vmov	d0, r2, r3
 800395a:	f000 ff73 	bl	8004844 <round>
 800395e:	ec53 2b10 	vmov	r2, r3, d0
 8003962:	4610      	mov	r0, r2
 8003964:	4619      	mov	r1, r3
 8003966:	f7fd f809 	bl	800097c <__aeabi_d2iz>
 800396a:	4603      	mov	r3, r0
 800396c:	853b      	strh	r3, [r7, #40]	; 0x28
		uint16_t result = mantissa << 4 | fraction;
 800396e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003970:	011b      	lsls	r3, r3, #4
 8003972:	b21a      	sxth	r2, r3
 8003974:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8003978:	4313      	orrs	r3, r2
 800397a:	b21b      	sxth	r3, r3
 800397c:	84fb      	strh	r3, [r7, #38]	; 0x26
		ptrUsartHandler->ptrUSARTx->BRR = result;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003984:	609a      	str	r2, [r3, #8]
 8003986:	e052      	b.n	8003a2e <USART_Config+0x426>
		// Valor a cargar 0x008B
		// Escriba acá su código y los comentarios que faltan
	}

	else {
		float div = (freckClock * 1E6) / (16 * ptrUsartHandler->USART_Config.USART_baudrate);
 8003988:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800398a:	4618      	mov	r0, r3
 800398c:	f7fc fd7a 	bl	8000484 <__aeabi_i2d>
 8003990:	a34d      	add	r3, pc, #308	; (adr r3, 8003ac8 <USART_Config+0x4c0>)
 8003992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003996:	f7fc fddf 	bl	8000558 <__aeabi_dmul>
 800399a:	4602      	mov	r2, r0
 800399c:	460b      	mov	r3, r1
 800399e:	4614      	mov	r4, r2
 80039a0:	461d      	mov	r5, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	011b      	lsls	r3, r3, #4
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7fc fd5b 	bl	8000464 <__aeabi_ui2d>
 80039ae:	4602      	mov	r2, r0
 80039b0:	460b      	mov	r3, r1
 80039b2:	4620      	mov	r0, r4
 80039b4:	4629      	mov	r1, r5
 80039b6:	f7fc fef9 	bl	80007ac <__aeabi_ddiv>
 80039ba:	4602      	mov	r2, r0
 80039bc:	460b      	mov	r3, r1
 80039be:	4610      	mov	r0, r2
 80039c0:	4619      	mov	r1, r3
 80039c2:	f7fd f803 	bl	80009cc <__aeabi_d2f>
 80039c6:	4603      	mov	r3, r0
 80039c8:	63bb      	str	r3, [r7, #56]	; 0x38
		uint16_t mantissa = (int) div;
 80039ca:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80039ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80039d2:	ee17 3a90 	vmov	r3, s15
 80039d6:	86fb      	strh	r3, [r7, #54]	; 0x36
		uint16_t fraction = (int) round((div - mantissa) * 16);
 80039d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80039da:	ee07 3a90 	vmov	s15, r3
 80039de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039e2:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80039e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039ea:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80039ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80039f2:	ee17 0a90 	vmov	r0, s15
 80039f6:	f7fc fd57 	bl	80004a8 <__aeabi_f2d>
 80039fa:	4602      	mov	r2, r0
 80039fc:	460b      	mov	r3, r1
 80039fe:	ec43 2b10 	vmov	d0, r2, r3
 8003a02:	f000 ff1f 	bl	8004844 <round>
 8003a06:	ec53 2b10 	vmov	r2, r3, d0
 8003a0a:	4610      	mov	r0, r2
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	f7fc ffb5 	bl	800097c <__aeabi_d2iz>
 8003a12:	4603      	mov	r3, r0
 8003a14:	86bb      	strh	r3, [r7, #52]	; 0x34
		uint16_t result = mantissa << 4 | fraction;
 8003a16:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003a18:	011b      	lsls	r3, r3, #4
 8003a1a:	b21a      	sxth	r2, r3
 8003a1c:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8003a20:	4313      	orrs	r3, r2
 8003a22:	b21b      	sxth	r3, r3
 8003a24:	867b      	strh	r3, [r7, #50]	; 0x32
		ptrUsartHandler->ptrUSARTx->BRR = result;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8003a2c:	609a      	str	r2, [r3, #8]




	// 2.6 Configuramos el modo: TX only, RX only, RXTX, disable
	switch (ptrUsartHandler->USART_Config.USART_mode) {
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	791b      	ldrb	r3, [r3, #4]
 8003a32:	2b03      	cmp	r3, #3
 8003a34:	d852      	bhi.n	8003adc <USART_Config+0x4d4>
 8003a36:	a201      	add	r2, pc, #4	; (adr r2, 8003a3c <USART_Config+0x434>)
 8003a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a3c:	08003a4d 	.word	0x08003a4d
 8003a40:	08003a5f 	.word	0x08003a5f
 8003a44:	08003a71 	.word	0x08003a71
 8003a48:	08003a93 	.word	0x08003a93
	case USART_MODE_TX: {
		// Activamos la parte del sistema encargada de enviar
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68da      	ldr	r2, [r3, #12]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f042 0208 	orr.w	r2, r2, #8
 8003a5a:	60da      	str	r2, [r3, #12]
		break;
 8003a5c:	e057      	b.n	8003b0e <USART_Config+0x506>
	}
	case USART_MODE_RX: {
		// Activamos la parte del sistema encargada de recibir
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68da      	ldr	r2, [r3, #12]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f042 0204 	orr.w	r2, r2, #4
 8003a6c:	60da      	str	r2, [r3, #12]
		break;
 8003a6e:	e04e      	b.n	8003b0e <USART_Config+0x506>
	}
	case USART_MODE_RXTX: {
		// Activamos ambas partes, tanto transmision como recepcion
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68da      	ldr	r2, [r3, #12]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f042 0208 	orr.w	r2, r2, #8
 8003a7e:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68da      	ldr	r2, [r3, #12]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f042 0204 	orr.w	r2, r2, #4
 8003a8e:	60da      	str	r2, [r3, #12]
		break;
 8003a90:	e03d      	b.n	8003b0e <USART_Config+0x506>
	}
	case USART_MODE_DISABLE: {
		// Desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68da      	ldr	r2, [r3, #12]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003aa0:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68da      	ldr	r2, [r3, #12]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f022 0208 	bic.w	r2, r2, #8
 8003ab0:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	68da      	ldr	r2, [r3, #12]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 0204 	bic.w	r2, r2, #4
 8003ac0:	60da      	str	r2, [r3, #12]
		break;
 8003ac2:	e024      	b.n	8003b0e <USART_Config+0x506>
 8003ac4:	f3af 8000 	nop.w
 8003ac8:	00000000 	.word	0x00000000
 8003acc:	412e8480 	.word	0x412e8480
 8003ad0:	00000000 	.word	0x00000000
 8003ad4:	413c2000 	.word	0x413c2000
 8003ad8:	4112c000 	.word	0x4112c000
	}

	default: {
		// Actuando por defecto, desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68da      	ldr	r2, [r3, #12]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003aea:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68da      	ldr	r2, [r3, #12]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f022 0208 	bic.w	r2, r2, #8
 8003afa:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68da      	ldr	r2, [r3, #12]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f022 0204 	bic.w	r2, r2, #4
 8003b0a:	60da      	str	r2, [r3, #12]
		break;
 8003b0c:	bf00      	nop
	}
	}

	// 2.7 Activamos el modulo serial.
	if (ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE) {
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	791b      	ldrb	r3, [r3, #4]
 8003b12:	2b03      	cmp	r3, #3
 8003b14:	d007      	beq.n	8003b26 <USART_Config+0x51e>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68da      	ldr	r2, [r3, #12]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b24:	60da      	str	r2, [r3, #12]
	}

	//3.Activamos la interrupcion para el rx USART_RX_Int_Ena y el TX
	ptrUsartHandler->ptrUSARTx->CR1 |=
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68da      	ldr	r2, [r3, #12]
			(ptrUsartHandler->USART_Config.USART_RX_Int_Ena
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	7bdb      	ldrb	r3, [r3, #15]
					<< USART_CR1_RXNEIE_Pos);
 8003b30:	015b      	lsls	r3, r3, #5
 8003b32:	4619      	mov	r1, r3
	ptrUsartHandler->ptrUSARTx->CR1 |=
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	60da      	str	r2, [r3, #12]

	/* 4.. Activamos el canal del sistema NVIC para que lea la interrupción*/
	if (ptrUsartHandler->ptrUSARTx == USART1) {
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a0f      	ldr	r2, [pc, #60]	; (8003b80 <USART_Config+0x578>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d103      	bne.n	8003b4e <USART_Config+0x546>
		// Activando en NVIC para la interrupción del USART1 USART1_IRQHandler
		NVIC_EnableIRQ(USART1_IRQn);
 8003b46:	2025      	movs	r0, #37	; 0x25
 8003b48:	f7ff fd40 	bl	80035cc <__NVIC_EnableIRQ>
 8003b4c:	e012      	b.n	8003b74 <USART_Config+0x56c>
	} else if (ptrUsartHandler->ptrUSARTx == USART2) {
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a0c      	ldr	r2, [pc, #48]	; (8003b84 <USART_Config+0x57c>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d103      	bne.n	8003b60 <USART_Config+0x558>
		// Activando en NVIC para la interrupción del USART2 USART1_IRQHandler
		NVIC_EnableIRQ(USART2_IRQn);
 8003b58:	2026      	movs	r0, #38	; 0x26
 8003b5a:	f7ff fd37 	bl	80035cc <__NVIC_EnableIRQ>
 8003b5e:	e009      	b.n	8003b74 <USART_Config+0x56c>
	} else if (ptrUsartHandler->ptrUSARTx == USART6) {
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a08      	ldr	r2, [pc, #32]	; (8003b88 <USART_Config+0x580>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d103      	bne.n	8003b72 <USART_Config+0x56a>
		// Activando en NVIC para la interrupción del USART6 USART1_IRQHandler
		NVIC_EnableIRQ(USART6_IRQn);
 8003b6a:	2047      	movs	r0, #71	; 0x47
 8003b6c:	f7ff fd2e 	bl	80035cc <__NVIC_EnableIRQ>
 8003b70:	e000      	b.n	8003b74 <USART_Config+0x56c>
	}

	else {
		__NOP();
 8003b72:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8003b74:	b662      	cpsie	i
}
 8003b76:	bf00      	nop
	}

	/* 5. Volvemos a activar las interrupciones del sistema */
	__enable_irq();
}
 8003b78:	bf00      	nop
 8003b7a:	3740      	adds	r7, #64	; 0x40
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bdb0      	pop	{r4, r5, r7, pc}
 8003b80:	40011000 	.word	0x40011000
 8003b84:	40004400 	.word	0x40004400
 8003b88:	40011400 	.word	0x40011400

08003b8c <USART1Rx_Callback>:

__attribute__((weak)) void USART1Rx_Callback(void) {
 8003b8c:	b480      	push	{r7}
 8003b8e:	af00      	add	r7, sp, #0
	/* NOTE : This function should not be modified, when the callback is needed,
	 the USART1_Callback could be implemented in the main file
	 */
	__NOP();
 8003b90:	bf00      	nop
}
 8003b92:	bf00      	nop
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <USART1Tx_Char>:

/*
 * Se crean este par de funciones en cada usart para el envio de datos
 * donde se utilizan las interrupciones.
 */
void USART1Tx_Char(void) {
 8003b9c:	b480      	push	{r7}
 8003b9e:	af00      	add	r7, sp, #0
	USART1->DR = dataToSend1;
 8003ba0:	4b07      	ldr	r3, [pc, #28]	; (8003bc0 <USART1Tx_Char+0x24>)
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	4b07      	ldr	r3, [pc, #28]	; (8003bc4 <USART1Tx_Char+0x28>)
 8003ba6:	605a      	str	r2, [r3, #4]
	USART1->CR1 &= ~(USART_CR1_TXEIE);
 8003ba8:	4b06      	ldr	r3, [pc, #24]	; (8003bc4 <USART1Tx_Char+0x28>)
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	4a05      	ldr	r2, [pc, #20]	; (8003bc4 <USART1Tx_Char+0x28>)
 8003bae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bb2:	60d3      	str	r3, [r2, #12]

}
 8003bb4:	bf00      	nop
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	20012ef0 	.word	0x20012ef0
 8003bc4:	40011000 	.word	0x40011000

08003bc8 <USART1Tx_String>:

void USART1Tx_String(void) {
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
	char auxData = stringToSend1[posicionActual1];
 8003bce:	4b12      	ldr	r3, [pc, #72]	; (8003c18 <USART1Tx_String+0x50>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a12      	ldr	r2, [pc, #72]	; (8003c1c <USART1Tx_String+0x54>)
 8003bd4:	6812      	ldr	r2, [r2, #0]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	71fb      	strb	r3, [r7, #7]
	if (auxData != 0) {
 8003bdc:	79fb      	ldrb	r3, [r7, #7]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d008      	beq.n	8003bf4 <USART1Tx_String+0x2c>
		USART1->DR = auxData;
 8003be2:	4a0f      	ldr	r2, [pc, #60]	; (8003c20 <USART1Tx_String+0x58>)
 8003be4:	79fb      	ldrb	r3, [r7, #7]
 8003be6:	6053      	str	r3, [r2, #4]
		posicionActual1++;
 8003be8:	4b0c      	ldr	r3, [pc, #48]	; (8003c1c <USART1Tx_String+0x54>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	3301      	adds	r3, #1
 8003bee:	4a0b      	ldr	r2, [pc, #44]	; (8003c1c <USART1Tx_String+0x54>)
 8003bf0:	6013      	str	r3, [r2, #0]
		USART1->CR1 &= ~(USART_CR1_TXEIE);
		posicionActual6 = 0;
		flagNewData = 0;
	}

}
 8003bf2:	e00b      	b.n	8003c0c <USART1Tx_String+0x44>
		USART1->CR1 &= ~(USART_CR1_TXEIE);
 8003bf4:	4b0a      	ldr	r3, [pc, #40]	; (8003c20 <USART1Tx_String+0x58>)
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	4a09      	ldr	r2, [pc, #36]	; (8003c20 <USART1Tx_String+0x58>)
 8003bfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bfe:	60d3      	str	r3, [r2, #12]
		posicionActual6 = 0;
 8003c00:	4b08      	ldr	r3, [pc, #32]	; (8003c24 <USART1Tx_String+0x5c>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	601a      	str	r2, [r3, #0]
		flagNewData = 0;
 8003c06:	4b08      	ldr	r3, [pc, #32]	; (8003c28 <USART1Tx_String+0x60>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	701a      	strb	r2, [r3, #0]
}
 8003c0c:	bf00      	nop
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr
 8003c18:	20012ef4 	.word	0x20012ef4
 8003c1c:	20012efc 	.word	0x20012efc
 8003c20:	40011000 	.word	0x40011000
 8003c24:	20012f0c 	.word	0x20012f0c
 8003c28:	20012eed 	.word	0x20012eed

08003c2c <USART6Rx_Callback>:
		posicionActual2 = 0;
		flagNewData = 0;
	}

}
__attribute__((weak)) void USART6Rx_Callback(void) {
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0
	/* NOTE : This function should not be modified, when the callback is needed,
	 the USART1_Callback could be implemented in the main file
	 */
	__NOP();
 8003c30:	bf00      	nop
}
 8003c32:	bf00      	nop
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <USART6Tx_Char>:
/*
 * Se crean este par de funciones en cada usart para el envio de datos
 * donde se utilizan las interrupciones.
 */
void USART6Tx_Char(void) {
 8003c3c:	b480      	push	{r7}
 8003c3e:	af00      	add	r7, sp, #0
	USART6->DR = dataToSend6;
 8003c40:	4b07      	ldr	r3, [pc, #28]	; (8003c60 <USART6Tx_Char+0x24>)
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	4b07      	ldr	r3, [pc, #28]	; (8003c64 <USART6Tx_Char+0x28>)
 8003c46:	605a      	str	r2, [r3, #4]
	USART6->CR1 &= ~(USART_CR1_TXEIE);
 8003c48:	4b06      	ldr	r3, [pc, #24]	; (8003c64 <USART6Tx_Char+0x28>)
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	4a05      	ldr	r2, [pc, #20]	; (8003c64 <USART6Tx_Char+0x28>)
 8003c4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c52:	60d3      	str	r3, [r2, #12]

}
 8003c54:	bf00      	nop
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	20012f00 	.word	0x20012f00
 8003c64:	40011400 	.word	0x40011400

08003c68 <USART6Tx_String>:

void USART6Tx_String(void) {
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
	char auxData = stringToSend6[posicionActual6];//se apagan las interrupciones por transmision
 8003c6e:	4b12      	ldr	r3, [pc, #72]	; (8003cb8 <USART6Tx_String+0x50>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a12      	ldr	r2, [pc, #72]	; (8003cbc <USART6Tx_String+0x54>)
 8003c74:	6812      	ldr	r2, [r2, #0]
 8003c76:	4413      	add	r3, r2
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	71fb      	strb	r3, [r7, #7]
	if (auxData != 0) {
 8003c7c:	79fb      	ldrb	r3, [r7, #7]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d008      	beq.n	8003c94 <USART6Tx_String+0x2c>
		USART6->DR = auxData;
 8003c82:	4a0f      	ldr	r2, [pc, #60]	; (8003cc0 <USART6Tx_String+0x58>)
 8003c84:	79fb      	ldrb	r3, [r7, #7]
 8003c86:	6053      	str	r3, [r2, #4]
		posicionActual6++;
 8003c88:	4b0c      	ldr	r3, [pc, #48]	; (8003cbc <USART6Tx_String+0x54>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	4a0b      	ldr	r2, [pc, #44]	; (8003cbc <USART6Tx_String+0x54>)
 8003c90:	6013      	str	r3, [r2, #0]
		USART6->CR1 &= ~(USART_CR1_TXEIE); //se apagan las interrupciones por transmision
		posicionActual6 = 0; //Se reinicia el contador global
		flagNewData = 0;	//Se permite el ingreso de nueva data.
	}

}
 8003c92:	e00b      	b.n	8003cac <USART6Tx_String+0x44>
		USART6->CR1 &= ~(USART_CR1_TXEIE); //se apagan las interrupciones por transmision
 8003c94:	4b0a      	ldr	r3, [pc, #40]	; (8003cc0 <USART6Tx_String+0x58>)
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	4a09      	ldr	r2, [pc, #36]	; (8003cc0 <USART6Tx_String+0x58>)
 8003c9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c9e:	60d3      	str	r3, [r2, #12]
		posicionActual6 = 0; //Se reinicia el contador global
 8003ca0:	4b06      	ldr	r3, [pc, #24]	; (8003cbc <USART6Tx_String+0x54>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	601a      	str	r2, [r3, #0]
		flagNewData = 0;	//Se permite el ingreso de nueva data.
 8003ca6:	4b07      	ldr	r3, [pc, #28]	; (8003cc4 <USART6Tx_String+0x5c>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	701a      	strb	r2, [r3, #0]
}
 8003cac:	bf00      	nop
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr
 8003cb8:	20012f04 	.word	0x20012f04
 8003cbc:	20012f0c 	.word	0x20012f0c
 8003cc0:	40011400 	.word	0x40011400
 8003cc4:	20012eed 	.word	0x20012eed

08003cc8 <USART1_IRQHandler>:
 * el sistema inmediatamente salta a este lugar en la memoria
 *
 * Además de esto ahora se agrega una parte donde se verifica si la interrupcion es de transmisión
 * donde se envia a la función correspondiente para que se haga el envio
 */
void USART1_IRQHandler(void) {
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	af00      	add	r7, sp, #0
	if (USART1->SR & USART_SR_RXNE) {
 8003ccc:	4b16      	ldr	r3, [pc, #88]	; (8003d28 <USART1_IRQHandler+0x60>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0320 	and.w	r3, r3, #32
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d00d      	beq.n	8003cf4 <USART1_IRQHandler+0x2c>
		/* Limpiamos la bandera que indica que la interrupción se ha generado */
		USART1->SR &= ~USART_SR_RXNE;
 8003cd8:	4b13      	ldr	r3, [pc, #76]	; (8003d28 <USART1_IRQHandler+0x60>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a12      	ldr	r2, [pc, #72]	; (8003d28 <USART1_IRQHandler+0x60>)
 8003cde:	f023 0320 	bic.w	r3, r3, #32
 8003ce2:	6013      	str	r3, [r2, #0]
		//Auxiliar
		auxRxData = (uint8_t) USART1->DR;
 8003ce4:	4b10      	ldr	r3, [pc, #64]	; (8003d28 <USART1_IRQHandler+0x60>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	b2da      	uxtb	r2, r3
 8003cea:	4b10      	ldr	r3, [pc, #64]	; (8003d2c <USART1_IRQHandler+0x64>)
 8003cec:	701a      	strb	r2, [r3, #0]

		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		USART1Rx_Callback();
 8003cee:	f7ff ff4d 	bl	8003b8c <USART1Rx_Callback>
			USART1Tx_String();
		}

	}

}
 8003cf2:	e017      	b.n	8003d24 <USART1_IRQHandler+0x5c>
	else if (USART1->SR & USART_SR_TXE) {
 8003cf4:	4b0c      	ldr	r3, [pc, #48]	; (8003d28 <USART1_IRQHandler+0x60>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d011      	beq.n	8003d24 <USART1_IRQHandler+0x5c>
		USART1->SR &= ~USART_SR_TXE;
 8003d00:	4b09      	ldr	r3, [pc, #36]	; (8003d28 <USART1_IRQHandler+0x60>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a08      	ldr	r2, [pc, #32]	; (8003d28 <USART1_IRQHandler+0x60>)
 8003d06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d0a:	6013      	str	r3, [r2, #0]
		if (tipo1 == 0) {
 8003d0c:	4b08      	ldr	r3, [pc, #32]	; (8003d30 <USART1_IRQHandler+0x68>)
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	f083 0301 	eor.w	r3, r3, #1
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d002      	beq.n	8003d20 <USART1_IRQHandler+0x58>
			USART1Tx_Char();
 8003d1a:	f7ff ff3f 	bl	8003b9c <USART1Tx_Char>
}
 8003d1e:	e001      	b.n	8003d24 <USART1_IRQHandler+0x5c>
			USART1Tx_String();
 8003d20:	f7ff ff52 	bl	8003bc8 <USART1Tx_String>
}
 8003d24:	bf00      	nop
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	40011000 	.word	0x40011000
 8003d2c:	20012eec 	.word	0x20012eec
 8003d30:	20012ef8 	.word	0x20012ef8

08003d34 <USART6_IRQHandler>:

	}

}

void USART6_IRQHandler(void) {
 8003d34:	b580      	push	{r7, lr}
 8003d36:	af00      	add	r7, sp, #0
	if (USART6->SR & USART_SR_RXNE) {
 8003d38:	4b16      	ldr	r3, [pc, #88]	; (8003d94 <USART6_IRQHandler+0x60>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0320 	and.w	r3, r3, #32
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00d      	beq.n	8003d60 <USART6_IRQHandler+0x2c>
		/* Limpiamos la bandera que indica que la interrupción se ha generado */
		USART6->SR &= ~USART_SR_RXNE;
 8003d44:	4b13      	ldr	r3, [pc, #76]	; (8003d94 <USART6_IRQHandler+0x60>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a12      	ldr	r2, [pc, #72]	; (8003d94 <USART6_IRQHandler+0x60>)
 8003d4a:	f023 0320 	bic.w	r3, r3, #32
 8003d4e:	6013      	str	r3, [r2, #0]
		//Auxiliar
		auxRxData = (uint8_t) USART6->DR;
 8003d50:	4b10      	ldr	r3, [pc, #64]	; (8003d94 <USART6_IRQHandler+0x60>)
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	b2da      	uxtb	r2, r3
 8003d56:	4b10      	ldr	r3, [pc, #64]	; (8003d98 <USART6_IRQHandler+0x64>)
 8003d58:	701a      	strb	r2, [r3, #0]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		USART6Rx_Callback();
 8003d5a:	f7ff ff67 	bl	8003c2c <USART6Rx_Callback>
			USART6Tx_String();
		}

	}

}
 8003d5e:	e017      	b.n	8003d90 <USART6_IRQHandler+0x5c>
	else if (USART6->SR & USART_SR_TXE) {
 8003d60:	4b0c      	ldr	r3, [pc, #48]	; (8003d94 <USART6_IRQHandler+0x60>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d011      	beq.n	8003d90 <USART6_IRQHandler+0x5c>
		USART6->SR &= ~USART_SR_TXE;
 8003d6c:	4b09      	ldr	r3, [pc, #36]	; (8003d94 <USART6_IRQHandler+0x60>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a08      	ldr	r2, [pc, #32]	; (8003d94 <USART6_IRQHandler+0x60>)
 8003d72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d76:	6013      	str	r3, [r2, #0]
		if (tipo6 == 0) {
 8003d78:	4b08      	ldr	r3, [pc, #32]	; (8003d9c <USART6_IRQHandler+0x68>)
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	f083 0301 	eor.w	r3, r3, #1
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d002      	beq.n	8003d8c <USART6_IRQHandler+0x58>
			USART6Tx_Char();
 8003d86:	f7ff ff59 	bl	8003c3c <USART6Tx_Char>
}
 8003d8a:	e001      	b.n	8003d90 <USART6_IRQHandler+0x5c>
			USART6Tx_String();
 8003d8c:	f7ff ff6c 	bl	8003c68 <USART6Tx_String>
}
 8003d90:	bf00      	nop
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	40011400 	.word	0x40011400
 8003d98:	20012eec 	.word	0x20012eec
 8003d9c:	20012f08 	.word	0x20012f08

08003da0 <writeChar>:

/* funcion para escribir un solo char */
int writeChar(USART_Handler_t *ptrUsartHandler, int dataToSend) {
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
	while (!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)) {
 8003daa:	e000      	b.n	8003dae <writeChar+0xe>
		__NOP();
 8003dac:	bf00      	nop
	while (!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)) {
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d0f7      	beq.n	8003dac <writeChar+0xc>
	}

	ptrUsartHandler->ptrUSARTx->DR = dataToSend;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	605a      	str	r2, [r3, #4]

	return dataToSend;
 8003dc4:	683b      	ldr	r3, [r7, #0]
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
	...

08003dd4 <__libc_init_array>:
 8003dd4:	b570      	push	{r4, r5, r6, lr}
 8003dd6:	4d0d      	ldr	r5, [pc, #52]	; (8003e0c <__libc_init_array+0x38>)
 8003dd8:	4c0d      	ldr	r4, [pc, #52]	; (8003e10 <__libc_init_array+0x3c>)
 8003dda:	1b64      	subs	r4, r4, r5
 8003ddc:	10a4      	asrs	r4, r4, #2
 8003dde:	2600      	movs	r6, #0
 8003de0:	42a6      	cmp	r6, r4
 8003de2:	d109      	bne.n	8003df8 <__libc_init_array+0x24>
 8003de4:	4d0b      	ldr	r5, [pc, #44]	; (8003e14 <__libc_init_array+0x40>)
 8003de6:	4c0c      	ldr	r4, [pc, #48]	; (8003e18 <__libc_init_array+0x44>)
 8003de8:	f000 fd80 	bl	80048ec <_init>
 8003dec:	1b64      	subs	r4, r4, r5
 8003dee:	10a4      	asrs	r4, r4, #2
 8003df0:	2600      	movs	r6, #0
 8003df2:	42a6      	cmp	r6, r4
 8003df4:	d105      	bne.n	8003e02 <__libc_init_array+0x2e>
 8003df6:	bd70      	pop	{r4, r5, r6, pc}
 8003df8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dfc:	4798      	blx	r3
 8003dfe:	3601      	adds	r6, #1
 8003e00:	e7ee      	b.n	8003de0 <__libc_init_array+0xc>
 8003e02:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e06:	4798      	blx	r3
 8003e08:	3601      	adds	r6, #1
 8003e0a:	e7f2      	b.n	8003df2 <__libc_init_array+0x1e>
 8003e0c:	080049a0 	.word	0x080049a0
 8003e10:	080049a0 	.word	0x080049a0
 8003e14:	080049a0 	.word	0x080049a0
 8003e18:	080049a4 	.word	0x080049a4

08003e1c <memcpy>:
 8003e1c:	440a      	add	r2, r1
 8003e1e:	4291      	cmp	r1, r2
 8003e20:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003e24:	d100      	bne.n	8003e28 <memcpy+0xc>
 8003e26:	4770      	bx	lr
 8003e28:	b510      	push	{r4, lr}
 8003e2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e32:	4291      	cmp	r1, r2
 8003e34:	d1f9      	bne.n	8003e2a <memcpy+0xe>
 8003e36:	bd10      	pop	{r4, pc}

08003e38 <memset>:
 8003e38:	4402      	add	r2, r0
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d100      	bne.n	8003e42 <memset+0xa>
 8003e40:	4770      	bx	lr
 8003e42:	f803 1b01 	strb.w	r1, [r3], #1
 8003e46:	e7f9      	b.n	8003e3c <memset+0x4>

08003e48 <_puts_r>:
 8003e48:	b570      	push	{r4, r5, r6, lr}
 8003e4a:	460e      	mov	r6, r1
 8003e4c:	4605      	mov	r5, r0
 8003e4e:	b118      	cbz	r0, 8003e58 <_puts_r+0x10>
 8003e50:	6983      	ldr	r3, [r0, #24]
 8003e52:	b90b      	cbnz	r3, 8003e58 <_puts_r+0x10>
 8003e54:	f000 fa48 	bl	80042e8 <__sinit>
 8003e58:	69ab      	ldr	r3, [r5, #24]
 8003e5a:	68ac      	ldr	r4, [r5, #8]
 8003e5c:	b913      	cbnz	r3, 8003e64 <_puts_r+0x1c>
 8003e5e:	4628      	mov	r0, r5
 8003e60:	f000 fa42 	bl	80042e8 <__sinit>
 8003e64:	4b2c      	ldr	r3, [pc, #176]	; (8003f18 <_puts_r+0xd0>)
 8003e66:	429c      	cmp	r4, r3
 8003e68:	d120      	bne.n	8003eac <_puts_r+0x64>
 8003e6a:	686c      	ldr	r4, [r5, #4]
 8003e6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e6e:	07db      	lsls	r3, r3, #31
 8003e70:	d405      	bmi.n	8003e7e <_puts_r+0x36>
 8003e72:	89a3      	ldrh	r3, [r4, #12]
 8003e74:	0598      	lsls	r0, r3, #22
 8003e76:	d402      	bmi.n	8003e7e <_puts_r+0x36>
 8003e78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e7a:	f000 fad3 	bl	8004424 <__retarget_lock_acquire_recursive>
 8003e7e:	89a3      	ldrh	r3, [r4, #12]
 8003e80:	0719      	lsls	r1, r3, #28
 8003e82:	d51d      	bpl.n	8003ec0 <_puts_r+0x78>
 8003e84:	6923      	ldr	r3, [r4, #16]
 8003e86:	b1db      	cbz	r3, 8003ec0 <_puts_r+0x78>
 8003e88:	3e01      	subs	r6, #1
 8003e8a:	68a3      	ldr	r3, [r4, #8]
 8003e8c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003e90:	3b01      	subs	r3, #1
 8003e92:	60a3      	str	r3, [r4, #8]
 8003e94:	bb39      	cbnz	r1, 8003ee6 <_puts_r+0x9e>
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	da38      	bge.n	8003f0c <_puts_r+0xc4>
 8003e9a:	4622      	mov	r2, r4
 8003e9c:	210a      	movs	r1, #10
 8003e9e:	4628      	mov	r0, r5
 8003ea0:	f000 f848 	bl	8003f34 <__swbuf_r>
 8003ea4:	3001      	adds	r0, #1
 8003ea6:	d011      	beq.n	8003ecc <_puts_r+0x84>
 8003ea8:	250a      	movs	r5, #10
 8003eaa:	e011      	b.n	8003ed0 <_puts_r+0x88>
 8003eac:	4b1b      	ldr	r3, [pc, #108]	; (8003f1c <_puts_r+0xd4>)
 8003eae:	429c      	cmp	r4, r3
 8003eb0:	d101      	bne.n	8003eb6 <_puts_r+0x6e>
 8003eb2:	68ac      	ldr	r4, [r5, #8]
 8003eb4:	e7da      	b.n	8003e6c <_puts_r+0x24>
 8003eb6:	4b1a      	ldr	r3, [pc, #104]	; (8003f20 <_puts_r+0xd8>)
 8003eb8:	429c      	cmp	r4, r3
 8003eba:	bf08      	it	eq
 8003ebc:	68ec      	ldreq	r4, [r5, #12]
 8003ebe:	e7d5      	b.n	8003e6c <_puts_r+0x24>
 8003ec0:	4621      	mov	r1, r4
 8003ec2:	4628      	mov	r0, r5
 8003ec4:	f000 f888 	bl	8003fd8 <__swsetup_r>
 8003ec8:	2800      	cmp	r0, #0
 8003eca:	d0dd      	beq.n	8003e88 <_puts_r+0x40>
 8003ecc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003ed0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ed2:	07da      	lsls	r2, r3, #31
 8003ed4:	d405      	bmi.n	8003ee2 <_puts_r+0x9a>
 8003ed6:	89a3      	ldrh	r3, [r4, #12]
 8003ed8:	059b      	lsls	r3, r3, #22
 8003eda:	d402      	bmi.n	8003ee2 <_puts_r+0x9a>
 8003edc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ede:	f000 faa2 	bl	8004426 <__retarget_lock_release_recursive>
 8003ee2:	4628      	mov	r0, r5
 8003ee4:	bd70      	pop	{r4, r5, r6, pc}
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	da04      	bge.n	8003ef4 <_puts_r+0xac>
 8003eea:	69a2      	ldr	r2, [r4, #24]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	dc06      	bgt.n	8003efe <_puts_r+0xb6>
 8003ef0:	290a      	cmp	r1, #10
 8003ef2:	d004      	beq.n	8003efe <_puts_r+0xb6>
 8003ef4:	6823      	ldr	r3, [r4, #0]
 8003ef6:	1c5a      	adds	r2, r3, #1
 8003ef8:	6022      	str	r2, [r4, #0]
 8003efa:	7019      	strb	r1, [r3, #0]
 8003efc:	e7c5      	b.n	8003e8a <_puts_r+0x42>
 8003efe:	4622      	mov	r2, r4
 8003f00:	4628      	mov	r0, r5
 8003f02:	f000 f817 	bl	8003f34 <__swbuf_r>
 8003f06:	3001      	adds	r0, #1
 8003f08:	d1bf      	bne.n	8003e8a <_puts_r+0x42>
 8003f0a:	e7df      	b.n	8003ecc <_puts_r+0x84>
 8003f0c:	6823      	ldr	r3, [r4, #0]
 8003f0e:	250a      	movs	r5, #10
 8003f10:	1c5a      	adds	r2, r3, #1
 8003f12:	6022      	str	r2, [r4, #0]
 8003f14:	701d      	strb	r5, [r3, #0]
 8003f16:	e7db      	b.n	8003ed0 <_puts_r+0x88>
 8003f18:	08004960 	.word	0x08004960
 8003f1c:	08004980 	.word	0x08004980
 8003f20:	08004940 	.word	0x08004940

08003f24 <puts>:
 8003f24:	4b02      	ldr	r3, [pc, #8]	; (8003f30 <puts+0xc>)
 8003f26:	4601      	mov	r1, r0
 8003f28:	6818      	ldr	r0, [r3, #0]
 8003f2a:	f7ff bf8d 	b.w	8003e48 <_puts_r>
 8003f2e:	bf00      	nop
 8003f30:	2000000c 	.word	0x2000000c

08003f34 <__swbuf_r>:
 8003f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f36:	460e      	mov	r6, r1
 8003f38:	4614      	mov	r4, r2
 8003f3a:	4605      	mov	r5, r0
 8003f3c:	b118      	cbz	r0, 8003f46 <__swbuf_r+0x12>
 8003f3e:	6983      	ldr	r3, [r0, #24]
 8003f40:	b90b      	cbnz	r3, 8003f46 <__swbuf_r+0x12>
 8003f42:	f000 f9d1 	bl	80042e8 <__sinit>
 8003f46:	4b21      	ldr	r3, [pc, #132]	; (8003fcc <__swbuf_r+0x98>)
 8003f48:	429c      	cmp	r4, r3
 8003f4a:	d12b      	bne.n	8003fa4 <__swbuf_r+0x70>
 8003f4c:	686c      	ldr	r4, [r5, #4]
 8003f4e:	69a3      	ldr	r3, [r4, #24]
 8003f50:	60a3      	str	r3, [r4, #8]
 8003f52:	89a3      	ldrh	r3, [r4, #12]
 8003f54:	071a      	lsls	r2, r3, #28
 8003f56:	d52f      	bpl.n	8003fb8 <__swbuf_r+0x84>
 8003f58:	6923      	ldr	r3, [r4, #16]
 8003f5a:	b36b      	cbz	r3, 8003fb8 <__swbuf_r+0x84>
 8003f5c:	6923      	ldr	r3, [r4, #16]
 8003f5e:	6820      	ldr	r0, [r4, #0]
 8003f60:	1ac0      	subs	r0, r0, r3
 8003f62:	6963      	ldr	r3, [r4, #20]
 8003f64:	b2f6      	uxtb	r6, r6
 8003f66:	4283      	cmp	r3, r0
 8003f68:	4637      	mov	r7, r6
 8003f6a:	dc04      	bgt.n	8003f76 <__swbuf_r+0x42>
 8003f6c:	4621      	mov	r1, r4
 8003f6e:	4628      	mov	r0, r5
 8003f70:	f000 f926 	bl	80041c0 <_fflush_r>
 8003f74:	bb30      	cbnz	r0, 8003fc4 <__swbuf_r+0x90>
 8003f76:	68a3      	ldr	r3, [r4, #8]
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	60a3      	str	r3, [r4, #8]
 8003f7c:	6823      	ldr	r3, [r4, #0]
 8003f7e:	1c5a      	adds	r2, r3, #1
 8003f80:	6022      	str	r2, [r4, #0]
 8003f82:	701e      	strb	r6, [r3, #0]
 8003f84:	6963      	ldr	r3, [r4, #20]
 8003f86:	3001      	adds	r0, #1
 8003f88:	4283      	cmp	r3, r0
 8003f8a:	d004      	beq.n	8003f96 <__swbuf_r+0x62>
 8003f8c:	89a3      	ldrh	r3, [r4, #12]
 8003f8e:	07db      	lsls	r3, r3, #31
 8003f90:	d506      	bpl.n	8003fa0 <__swbuf_r+0x6c>
 8003f92:	2e0a      	cmp	r6, #10
 8003f94:	d104      	bne.n	8003fa0 <__swbuf_r+0x6c>
 8003f96:	4621      	mov	r1, r4
 8003f98:	4628      	mov	r0, r5
 8003f9a:	f000 f911 	bl	80041c0 <_fflush_r>
 8003f9e:	b988      	cbnz	r0, 8003fc4 <__swbuf_r+0x90>
 8003fa0:	4638      	mov	r0, r7
 8003fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fa4:	4b0a      	ldr	r3, [pc, #40]	; (8003fd0 <__swbuf_r+0x9c>)
 8003fa6:	429c      	cmp	r4, r3
 8003fa8:	d101      	bne.n	8003fae <__swbuf_r+0x7a>
 8003faa:	68ac      	ldr	r4, [r5, #8]
 8003fac:	e7cf      	b.n	8003f4e <__swbuf_r+0x1a>
 8003fae:	4b09      	ldr	r3, [pc, #36]	; (8003fd4 <__swbuf_r+0xa0>)
 8003fb0:	429c      	cmp	r4, r3
 8003fb2:	bf08      	it	eq
 8003fb4:	68ec      	ldreq	r4, [r5, #12]
 8003fb6:	e7ca      	b.n	8003f4e <__swbuf_r+0x1a>
 8003fb8:	4621      	mov	r1, r4
 8003fba:	4628      	mov	r0, r5
 8003fbc:	f000 f80c 	bl	8003fd8 <__swsetup_r>
 8003fc0:	2800      	cmp	r0, #0
 8003fc2:	d0cb      	beq.n	8003f5c <__swbuf_r+0x28>
 8003fc4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003fc8:	e7ea      	b.n	8003fa0 <__swbuf_r+0x6c>
 8003fca:	bf00      	nop
 8003fcc:	08004960 	.word	0x08004960
 8003fd0:	08004980 	.word	0x08004980
 8003fd4:	08004940 	.word	0x08004940

08003fd8 <__swsetup_r>:
 8003fd8:	4b32      	ldr	r3, [pc, #200]	; (80040a4 <__swsetup_r+0xcc>)
 8003fda:	b570      	push	{r4, r5, r6, lr}
 8003fdc:	681d      	ldr	r5, [r3, #0]
 8003fde:	4606      	mov	r6, r0
 8003fe0:	460c      	mov	r4, r1
 8003fe2:	b125      	cbz	r5, 8003fee <__swsetup_r+0x16>
 8003fe4:	69ab      	ldr	r3, [r5, #24]
 8003fe6:	b913      	cbnz	r3, 8003fee <__swsetup_r+0x16>
 8003fe8:	4628      	mov	r0, r5
 8003fea:	f000 f97d 	bl	80042e8 <__sinit>
 8003fee:	4b2e      	ldr	r3, [pc, #184]	; (80040a8 <__swsetup_r+0xd0>)
 8003ff0:	429c      	cmp	r4, r3
 8003ff2:	d10f      	bne.n	8004014 <__swsetup_r+0x3c>
 8003ff4:	686c      	ldr	r4, [r5, #4]
 8003ff6:	89a3      	ldrh	r3, [r4, #12]
 8003ff8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003ffc:	0719      	lsls	r1, r3, #28
 8003ffe:	d42c      	bmi.n	800405a <__swsetup_r+0x82>
 8004000:	06dd      	lsls	r5, r3, #27
 8004002:	d411      	bmi.n	8004028 <__swsetup_r+0x50>
 8004004:	2309      	movs	r3, #9
 8004006:	6033      	str	r3, [r6, #0]
 8004008:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800400c:	81a3      	strh	r3, [r4, #12]
 800400e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004012:	e03e      	b.n	8004092 <__swsetup_r+0xba>
 8004014:	4b25      	ldr	r3, [pc, #148]	; (80040ac <__swsetup_r+0xd4>)
 8004016:	429c      	cmp	r4, r3
 8004018:	d101      	bne.n	800401e <__swsetup_r+0x46>
 800401a:	68ac      	ldr	r4, [r5, #8]
 800401c:	e7eb      	b.n	8003ff6 <__swsetup_r+0x1e>
 800401e:	4b24      	ldr	r3, [pc, #144]	; (80040b0 <__swsetup_r+0xd8>)
 8004020:	429c      	cmp	r4, r3
 8004022:	bf08      	it	eq
 8004024:	68ec      	ldreq	r4, [r5, #12]
 8004026:	e7e6      	b.n	8003ff6 <__swsetup_r+0x1e>
 8004028:	0758      	lsls	r0, r3, #29
 800402a:	d512      	bpl.n	8004052 <__swsetup_r+0x7a>
 800402c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800402e:	b141      	cbz	r1, 8004042 <__swsetup_r+0x6a>
 8004030:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004034:	4299      	cmp	r1, r3
 8004036:	d002      	beq.n	800403e <__swsetup_r+0x66>
 8004038:	4630      	mov	r0, r6
 800403a:	f000 fa5b 	bl	80044f4 <_free_r>
 800403e:	2300      	movs	r3, #0
 8004040:	6363      	str	r3, [r4, #52]	; 0x34
 8004042:	89a3      	ldrh	r3, [r4, #12]
 8004044:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004048:	81a3      	strh	r3, [r4, #12]
 800404a:	2300      	movs	r3, #0
 800404c:	6063      	str	r3, [r4, #4]
 800404e:	6923      	ldr	r3, [r4, #16]
 8004050:	6023      	str	r3, [r4, #0]
 8004052:	89a3      	ldrh	r3, [r4, #12]
 8004054:	f043 0308 	orr.w	r3, r3, #8
 8004058:	81a3      	strh	r3, [r4, #12]
 800405a:	6923      	ldr	r3, [r4, #16]
 800405c:	b94b      	cbnz	r3, 8004072 <__swsetup_r+0x9a>
 800405e:	89a3      	ldrh	r3, [r4, #12]
 8004060:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004064:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004068:	d003      	beq.n	8004072 <__swsetup_r+0x9a>
 800406a:	4621      	mov	r1, r4
 800406c:	4630      	mov	r0, r6
 800406e:	f000 fa01 	bl	8004474 <__smakebuf_r>
 8004072:	89a0      	ldrh	r0, [r4, #12]
 8004074:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004078:	f010 0301 	ands.w	r3, r0, #1
 800407c:	d00a      	beq.n	8004094 <__swsetup_r+0xbc>
 800407e:	2300      	movs	r3, #0
 8004080:	60a3      	str	r3, [r4, #8]
 8004082:	6963      	ldr	r3, [r4, #20]
 8004084:	425b      	negs	r3, r3
 8004086:	61a3      	str	r3, [r4, #24]
 8004088:	6923      	ldr	r3, [r4, #16]
 800408a:	b943      	cbnz	r3, 800409e <__swsetup_r+0xc6>
 800408c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004090:	d1ba      	bne.n	8004008 <__swsetup_r+0x30>
 8004092:	bd70      	pop	{r4, r5, r6, pc}
 8004094:	0781      	lsls	r1, r0, #30
 8004096:	bf58      	it	pl
 8004098:	6963      	ldrpl	r3, [r4, #20]
 800409a:	60a3      	str	r3, [r4, #8]
 800409c:	e7f4      	b.n	8004088 <__swsetup_r+0xb0>
 800409e:	2000      	movs	r0, #0
 80040a0:	e7f7      	b.n	8004092 <__swsetup_r+0xba>
 80040a2:	bf00      	nop
 80040a4:	2000000c 	.word	0x2000000c
 80040a8:	08004960 	.word	0x08004960
 80040ac:	08004980 	.word	0x08004980
 80040b0:	08004940 	.word	0x08004940

080040b4 <__sflush_r>:
 80040b4:	898a      	ldrh	r2, [r1, #12]
 80040b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040ba:	4605      	mov	r5, r0
 80040bc:	0710      	lsls	r0, r2, #28
 80040be:	460c      	mov	r4, r1
 80040c0:	d458      	bmi.n	8004174 <__sflush_r+0xc0>
 80040c2:	684b      	ldr	r3, [r1, #4]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	dc05      	bgt.n	80040d4 <__sflush_r+0x20>
 80040c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	dc02      	bgt.n	80040d4 <__sflush_r+0x20>
 80040ce:	2000      	movs	r0, #0
 80040d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80040d6:	2e00      	cmp	r6, #0
 80040d8:	d0f9      	beq.n	80040ce <__sflush_r+0x1a>
 80040da:	2300      	movs	r3, #0
 80040dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80040e0:	682f      	ldr	r7, [r5, #0]
 80040e2:	602b      	str	r3, [r5, #0]
 80040e4:	d032      	beq.n	800414c <__sflush_r+0x98>
 80040e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80040e8:	89a3      	ldrh	r3, [r4, #12]
 80040ea:	075a      	lsls	r2, r3, #29
 80040ec:	d505      	bpl.n	80040fa <__sflush_r+0x46>
 80040ee:	6863      	ldr	r3, [r4, #4]
 80040f0:	1ac0      	subs	r0, r0, r3
 80040f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80040f4:	b10b      	cbz	r3, 80040fa <__sflush_r+0x46>
 80040f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80040f8:	1ac0      	subs	r0, r0, r3
 80040fa:	2300      	movs	r3, #0
 80040fc:	4602      	mov	r2, r0
 80040fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004100:	6a21      	ldr	r1, [r4, #32]
 8004102:	4628      	mov	r0, r5
 8004104:	47b0      	blx	r6
 8004106:	1c43      	adds	r3, r0, #1
 8004108:	89a3      	ldrh	r3, [r4, #12]
 800410a:	d106      	bne.n	800411a <__sflush_r+0x66>
 800410c:	6829      	ldr	r1, [r5, #0]
 800410e:	291d      	cmp	r1, #29
 8004110:	d82c      	bhi.n	800416c <__sflush_r+0xb8>
 8004112:	4a2a      	ldr	r2, [pc, #168]	; (80041bc <__sflush_r+0x108>)
 8004114:	40ca      	lsrs	r2, r1
 8004116:	07d6      	lsls	r6, r2, #31
 8004118:	d528      	bpl.n	800416c <__sflush_r+0xb8>
 800411a:	2200      	movs	r2, #0
 800411c:	6062      	str	r2, [r4, #4]
 800411e:	04d9      	lsls	r1, r3, #19
 8004120:	6922      	ldr	r2, [r4, #16]
 8004122:	6022      	str	r2, [r4, #0]
 8004124:	d504      	bpl.n	8004130 <__sflush_r+0x7c>
 8004126:	1c42      	adds	r2, r0, #1
 8004128:	d101      	bne.n	800412e <__sflush_r+0x7a>
 800412a:	682b      	ldr	r3, [r5, #0]
 800412c:	b903      	cbnz	r3, 8004130 <__sflush_r+0x7c>
 800412e:	6560      	str	r0, [r4, #84]	; 0x54
 8004130:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004132:	602f      	str	r7, [r5, #0]
 8004134:	2900      	cmp	r1, #0
 8004136:	d0ca      	beq.n	80040ce <__sflush_r+0x1a>
 8004138:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800413c:	4299      	cmp	r1, r3
 800413e:	d002      	beq.n	8004146 <__sflush_r+0x92>
 8004140:	4628      	mov	r0, r5
 8004142:	f000 f9d7 	bl	80044f4 <_free_r>
 8004146:	2000      	movs	r0, #0
 8004148:	6360      	str	r0, [r4, #52]	; 0x34
 800414a:	e7c1      	b.n	80040d0 <__sflush_r+0x1c>
 800414c:	6a21      	ldr	r1, [r4, #32]
 800414e:	2301      	movs	r3, #1
 8004150:	4628      	mov	r0, r5
 8004152:	47b0      	blx	r6
 8004154:	1c41      	adds	r1, r0, #1
 8004156:	d1c7      	bne.n	80040e8 <__sflush_r+0x34>
 8004158:	682b      	ldr	r3, [r5, #0]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d0c4      	beq.n	80040e8 <__sflush_r+0x34>
 800415e:	2b1d      	cmp	r3, #29
 8004160:	d001      	beq.n	8004166 <__sflush_r+0xb2>
 8004162:	2b16      	cmp	r3, #22
 8004164:	d101      	bne.n	800416a <__sflush_r+0xb6>
 8004166:	602f      	str	r7, [r5, #0]
 8004168:	e7b1      	b.n	80040ce <__sflush_r+0x1a>
 800416a:	89a3      	ldrh	r3, [r4, #12]
 800416c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004170:	81a3      	strh	r3, [r4, #12]
 8004172:	e7ad      	b.n	80040d0 <__sflush_r+0x1c>
 8004174:	690f      	ldr	r7, [r1, #16]
 8004176:	2f00      	cmp	r7, #0
 8004178:	d0a9      	beq.n	80040ce <__sflush_r+0x1a>
 800417a:	0793      	lsls	r3, r2, #30
 800417c:	680e      	ldr	r6, [r1, #0]
 800417e:	bf08      	it	eq
 8004180:	694b      	ldreq	r3, [r1, #20]
 8004182:	600f      	str	r7, [r1, #0]
 8004184:	bf18      	it	ne
 8004186:	2300      	movne	r3, #0
 8004188:	eba6 0807 	sub.w	r8, r6, r7
 800418c:	608b      	str	r3, [r1, #8]
 800418e:	f1b8 0f00 	cmp.w	r8, #0
 8004192:	dd9c      	ble.n	80040ce <__sflush_r+0x1a>
 8004194:	6a21      	ldr	r1, [r4, #32]
 8004196:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004198:	4643      	mov	r3, r8
 800419a:	463a      	mov	r2, r7
 800419c:	4628      	mov	r0, r5
 800419e:	47b0      	blx	r6
 80041a0:	2800      	cmp	r0, #0
 80041a2:	dc06      	bgt.n	80041b2 <__sflush_r+0xfe>
 80041a4:	89a3      	ldrh	r3, [r4, #12]
 80041a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041aa:	81a3      	strh	r3, [r4, #12]
 80041ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041b0:	e78e      	b.n	80040d0 <__sflush_r+0x1c>
 80041b2:	4407      	add	r7, r0
 80041b4:	eba8 0800 	sub.w	r8, r8, r0
 80041b8:	e7e9      	b.n	800418e <__sflush_r+0xda>
 80041ba:	bf00      	nop
 80041bc:	20400001 	.word	0x20400001

080041c0 <_fflush_r>:
 80041c0:	b538      	push	{r3, r4, r5, lr}
 80041c2:	690b      	ldr	r3, [r1, #16]
 80041c4:	4605      	mov	r5, r0
 80041c6:	460c      	mov	r4, r1
 80041c8:	b913      	cbnz	r3, 80041d0 <_fflush_r+0x10>
 80041ca:	2500      	movs	r5, #0
 80041cc:	4628      	mov	r0, r5
 80041ce:	bd38      	pop	{r3, r4, r5, pc}
 80041d0:	b118      	cbz	r0, 80041da <_fflush_r+0x1a>
 80041d2:	6983      	ldr	r3, [r0, #24]
 80041d4:	b90b      	cbnz	r3, 80041da <_fflush_r+0x1a>
 80041d6:	f000 f887 	bl	80042e8 <__sinit>
 80041da:	4b14      	ldr	r3, [pc, #80]	; (800422c <_fflush_r+0x6c>)
 80041dc:	429c      	cmp	r4, r3
 80041de:	d11b      	bne.n	8004218 <_fflush_r+0x58>
 80041e0:	686c      	ldr	r4, [r5, #4]
 80041e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d0ef      	beq.n	80041ca <_fflush_r+0xa>
 80041ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80041ec:	07d0      	lsls	r0, r2, #31
 80041ee:	d404      	bmi.n	80041fa <_fflush_r+0x3a>
 80041f0:	0599      	lsls	r1, r3, #22
 80041f2:	d402      	bmi.n	80041fa <_fflush_r+0x3a>
 80041f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80041f6:	f000 f915 	bl	8004424 <__retarget_lock_acquire_recursive>
 80041fa:	4628      	mov	r0, r5
 80041fc:	4621      	mov	r1, r4
 80041fe:	f7ff ff59 	bl	80040b4 <__sflush_r>
 8004202:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004204:	07da      	lsls	r2, r3, #31
 8004206:	4605      	mov	r5, r0
 8004208:	d4e0      	bmi.n	80041cc <_fflush_r+0xc>
 800420a:	89a3      	ldrh	r3, [r4, #12]
 800420c:	059b      	lsls	r3, r3, #22
 800420e:	d4dd      	bmi.n	80041cc <_fflush_r+0xc>
 8004210:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004212:	f000 f908 	bl	8004426 <__retarget_lock_release_recursive>
 8004216:	e7d9      	b.n	80041cc <_fflush_r+0xc>
 8004218:	4b05      	ldr	r3, [pc, #20]	; (8004230 <_fflush_r+0x70>)
 800421a:	429c      	cmp	r4, r3
 800421c:	d101      	bne.n	8004222 <_fflush_r+0x62>
 800421e:	68ac      	ldr	r4, [r5, #8]
 8004220:	e7df      	b.n	80041e2 <_fflush_r+0x22>
 8004222:	4b04      	ldr	r3, [pc, #16]	; (8004234 <_fflush_r+0x74>)
 8004224:	429c      	cmp	r4, r3
 8004226:	bf08      	it	eq
 8004228:	68ec      	ldreq	r4, [r5, #12]
 800422a:	e7da      	b.n	80041e2 <_fflush_r+0x22>
 800422c:	08004960 	.word	0x08004960
 8004230:	08004980 	.word	0x08004980
 8004234:	08004940 	.word	0x08004940

08004238 <std>:
 8004238:	2300      	movs	r3, #0
 800423a:	b510      	push	{r4, lr}
 800423c:	4604      	mov	r4, r0
 800423e:	e9c0 3300 	strd	r3, r3, [r0]
 8004242:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004246:	6083      	str	r3, [r0, #8]
 8004248:	8181      	strh	r1, [r0, #12]
 800424a:	6643      	str	r3, [r0, #100]	; 0x64
 800424c:	81c2      	strh	r2, [r0, #14]
 800424e:	6183      	str	r3, [r0, #24]
 8004250:	4619      	mov	r1, r3
 8004252:	2208      	movs	r2, #8
 8004254:	305c      	adds	r0, #92	; 0x5c
 8004256:	f7ff fdef 	bl	8003e38 <memset>
 800425a:	4b05      	ldr	r3, [pc, #20]	; (8004270 <std+0x38>)
 800425c:	6263      	str	r3, [r4, #36]	; 0x24
 800425e:	4b05      	ldr	r3, [pc, #20]	; (8004274 <std+0x3c>)
 8004260:	62a3      	str	r3, [r4, #40]	; 0x28
 8004262:	4b05      	ldr	r3, [pc, #20]	; (8004278 <std+0x40>)
 8004264:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004266:	4b05      	ldr	r3, [pc, #20]	; (800427c <std+0x44>)
 8004268:	6224      	str	r4, [r4, #32]
 800426a:	6323      	str	r3, [r4, #48]	; 0x30
 800426c:	bd10      	pop	{r4, pc}
 800426e:	bf00      	nop
 8004270:	080046d5 	.word	0x080046d5
 8004274:	080046f7 	.word	0x080046f7
 8004278:	0800472f 	.word	0x0800472f
 800427c:	08004753 	.word	0x08004753

08004280 <_cleanup_r>:
 8004280:	4901      	ldr	r1, [pc, #4]	; (8004288 <_cleanup_r+0x8>)
 8004282:	f000 b8af 	b.w	80043e4 <_fwalk_reent>
 8004286:	bf00      	nop
 8004288:	080041c1 	.word	0x080041c1

0800428c <__sfmoreglue>:
 800428c:	b570      	push	{r4, r5, r6, lr}
 800428e:	2268      	movs	r2, #104	; 0x68
 8004290:	1e4d      	subs	r5, r1, #1
 8004292:	4355      	muls	r5, r2
 8004294:	460e      	mov	r6, r1
 8004296:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800429a:	f000 f997 	bl	80045cc <_malloc_r>
 800429e:	4604      	mov	r4, r0
 80042a0:	b140      	cbz	r0, 80042b4 <__sfmoreglue+0x28>
 80042a2:	2100      	movs	r1, #0
 80042a4:	e9c0 1600 	strd	r1, r6, [r0]
 80042a8:	300c      	adds	r0, #12
 80042aa:	60a0      	str	r0, [r4, #8]
 80042ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80042b0:	f7ff fdc2 	bl	8003e38 <memset>
 80042b4:	4620      	mov	r0, r4
 80042b6:	bd70      	pop	{r4, r5, r6, pc}

080042b8 <__sfp_lock_acquire>:
 80042b8:	4801      	ldr	r0, [pc, #4]	; (80042c0 <__sfp_lock_acquire+0x8>)
 80042ba:	f000 b8b3 	b.w	8004424 <__retarget_lock_acquire_recursive>
 80042be:	bf00      	nop
 80042c0:	20012f11 	.word	0x20012f11

080042c4 <__sfp_lock_release>:
 80042c4:	4801      	ldr	r0, [pc, #4]	; (80042cc <__sfp_lock_release+0x8>)
 80042c6:	f000 b8ae 	b.w	8004426 <__retarget_lock_release_recursive>
 80042ca:	bf00      	nop
 80042cc:	20012f11 	.word	0x20012f11

080042d0 <__sinit_lock_acquire>:
 80042d0:	4801      	ldr	r0, [pc, #4]	; (80042d8 <__sinit_lock_acquire+0x8>)
 80042d2:	f000 b8a7 	b.w	8004424 <__retarget_lock_acquire_recursive>
 80042d6:	bf00      	nop
 80042d8:	20012f12 	.word	0x20012f12

080042dc <__sinit_lock_release>:
 80042dc:	4801      	ldr	r0, [pc, #4]	; (80042e4 <__sinit_lock_release+0x8>)
 80042de:	f000 b8a2 	b.w	8004426 <__retarget_lock_release_recursive>
 80042e2:	bf00      	nop
 80042e4:	20012f12 	.word	0x20012f12

080042e8 <__sinit>:
 80042e8:	b510      	push	{r4, lr}
 80042ea:	4604      	mov	r4, r0
 80042ec:	f7ff fff0 	bl	80042d0 <__sinit_lock_acquire>
 80042f0:	69a3      	ldr	r3, [r4, #24]
 80042f2:	b11b      	cbz	r3, 80042fc <__sinit+0x14>
 80042f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042f8:	f7ff bff0 	b.w	80042dc <__sinit_lock_release>
 80042fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004300:	6523      	str	r3, [r4, #80]	; 0x50
 8004302:	4b13      	ldr	r3, [pc, #76]	; (8004350 <__sinit+0x68>)
 8004304:	4a13      	ldr	r2, [pc, #76]	; (8004354 <__sinit+0x6c>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	62a2      	str	r2, [r4, #40]	; 0x28
 800430a:	42a3      	cmp	r3, r4
 800430c:	bf04      	itt	eq
 800430e:	2301      	moveq	r3, #1
 8004310:	61a3      	streq	r3, [r4, #24]
 8004312:	4620      	mov	r0, r4
 8004314:	f000 f820 	bl	8004358 <__sfp>
 8004318:	6060      	str	r0, [r4, #4]
 800431a:	4620      	mov	r0, r4
 800431c:	f000 f81c 	bl	8004358 <__sfp>
 8004320:	60a0      	str	r0, [r4, #8]
 8004322:	4620      	mov	r0, r4
 8004324:	f000 f818 	bl	8004358 <__sfp>
 8004328:	2200      	movs	r2, #0
 800432a:	60e0      	str	r0, [r4, #12]
 800432c:	2104      	movs	r1, #4
 800432e:	6860      	ldr	r0, [r4, #4]
 8004330:	f7ff ff82 	bl	8004238 <std>
 8004334:	68a0      	ldr	r0, [r4, #8]
 8004336:	2201      	movs	r2, #1
 8004338:	2109      	movs	r1, #9
 800433a:	f7ff ff7d 	bl	8004238 <std>
 800433e:	68e0      	ldr	r0, [r4, #12]
 8004340:	2202      	movs	r2, #2
 8004342:	2112      	movs	r1, #18
 8004344:	f7ff ff78 	bl	8004238 <std>
 8004348:	2301      	movs	r3, #1
 800434a:	61a3      	str	r3, [r4, #24]
 800434c:	e7d2      	b.n	80042f4 <__sinit+0xc>
 800434e:	bf00      	nop
 8004350:	0800493c 	.word	0x0800493c
 8004354:	08004281 	.word	0x08004281

08004358 <__sfp>:
 8004358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800435a:	4607      	mov	r7, r0
 800435c:	f7ff ffac 	bl	80042b8 <__sfp_lock_acquire>
 8004360:	4b1e      	ldr	r3, [pc, #120]	; (80043dc <__sfp+0x84>)
 8004362:	681e      	ldr	r6, [r3, #0]
 8004364:	69b3      	ldr	r3, [r6, #24]
 8004366:	b913      	cbnz	r3, 800436e <__sfp+0x16>
 8004368:	4630      	mov	r0, r6
 800436a:	f7ff ffbd 	bl	80042e8 <__sinit>
 800436e:	3648      	adds	r6, #72	; 0x48
 8004370:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004374:	3b01      	subs	r3, #1
 8004376:	d503      	bpl.n	8004380 <__sfp+0x28>
 8004378:	6833      	ldr	r3, [r6, #0]
 800437a:	b30b      	cbz	r3, 80043c0 <__sfp+0x68>
 800437c:	6836      	ldr	r6, [r6, #0]
 800437e:	e7f7      	b.n	8004370 <__sfp+0x18>
 8004380:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004384:	b9d5      	cbnz	r5, 80043bc <__sfp+0x64>
 8004386:	4b16      	ldr	r3, [pc, #88]	; (80043e0 <__sfp+0x88>)
 8004388:	60e3      	str	r3, [r4, #12]
 800438a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800438e:	6665      	str	r5, [r4, #100]	; 0x64
 8004390:	f000 f847 	bl	8004422 <__retarget_lock_init_recursive>
 8004394:	f7ff ff96 	bl	80042c4 <__sfp_lock_release>
 8004398:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800439c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80043a0:	6025      	str	r5, [r4, #0]
 80043a2:	61a5      	str	r5, [r4, #24]
 80043a4:	2208      	movs	r2, #8
 80043a6:	4629      	mov	r1, r5
 80043a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80043ac:	f7ff fd44 	bl	8003e38 <memset>
 80043b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80043b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80043b8:	4620      	mov	r0, r4
 80043ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043bc:	3468      	adds	r4, #104	; 0x68
 80043be:	e7d9      	b.n	8004374 <__sfp+0x1c>
 80043c0:	2104      	movs	r1, #4
 80043c2:	4638      	mov	r0, r7
 80043c4:	f7ff ff62 	bl	800428c <__sfmoreglue>
 80043c8:	4604      	mov	r4, r0
 80043ca:	6030      	str	r0, [r6, #0]
 80043cc:	2800      	cmp	r0, #0
 80043ce:	d1d5      	bne.n	800437c <__sfp+0x24>
 80043d0:	f7ff ff78 	bl	80042c4 <__sfp_lock_release>
 80043d4:	230c      	movs	r3, #12
 80043d6:	603b      	str	r3, [r7, #0]
 80043d8:	e7ee      	b.n	80043b8 <__sfp+0x60>
 80043da:	bf00      	nop
 80043dc:	0800493c 	.word	0x0800493c
 80043e0:	ffff0001 	.word	0xffff0001

080043e4 <_fwalk_reent>:
 80043e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043e8:	4606      	mov	r6, r0
 80043ea:	4688      	mov	r8, r1
 80043ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80043f0:	2700      	movs	r7, #0
 80043f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80043f6:	f1b9 0901 	subs.w	r9, r9, #1
 80043fa:	d505      	bpl.n	8004408 <_fwalk_reent+0x24>
 80043fc:	6824      	ldr	r4, [r4, #0]
 80043fe:	2c00      	cmp	r4, #0
 8004400:	d1f7      	bne.n	80043f2 <_fwalk_reent+0xe>
 8004402:	4638      	mov	r0, r7
 8004404:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004408:	89ab      	ldrh	r3, [r5, #12]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d907      	bls.n	800441e <_fwalk_reent+0x3a>
 800440e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004412:	3301      	adds	r3, #1
 8004414:	d003      	beq.n	800441e <_fwalk_reent+0x3a>
 8004416:	4629      	mov	r1, r5
 8004418:	4630      	mov	r0, r6
 800441a:	47c0      	blx	r8
 800441c:	4307      	orrs	r7, r0
 800441e:	3568      	adds	r5, #104	; 0x68
 8004420:	e7e9      	b.n	80043f6 <_fwalk_reent+0x12>

08004422 <__retarget_lock_init_recursive>:
 8004422:	4770      	bx	lr

08004424 <__retarget_lock_acquire_recursive>:
 8004424:	4770      	bx	lr

08004426 <__retarget_lock_release_recursive>:
 8004426:	4770      	bx	lr

08004428 <__swhatbuf_r>:
 8004428:	b570      	push	{r4, r5, r6, lr}
 800442a:	460e      	mov	r6, r1
 800442c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004430:	2900      	cmp	r1, #0
 8004432:	b096      	sub	sp, #88	; 0x58
 8004434:	4614      	mov	r4, r2
 8004436:	461d      	mov	r5, r3
 8004438:	da08      	bge.n	800444c <__swhatbuf_r+0x24>
 800443a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800443e:	2200      	movs	r2, #0
 8004440:	602a      	str	r2, [r5, #0]
 8004442:	061a      	lsls	r2, r3, #24
 8004444:	d410      	bmi.n	8004468 <__swhatbuf_r+0x40>
 8004446:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800444a:	e00e      	b.n	800446a <__swhatbuf_r+0x42>
 800444c:	466a      	mov	r2, sp
 800444e:	f000 f9a7 	bl	80047a0 <_fstat_r>
 8004452:	2800      	cmp	r0, #0
 8004454:	dbf1      	blt.n	800443a <__swhatbuf_r+0x12>
 8004456:	9a01      	ldr	r2, [sp, #4]
 8004458:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800445c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004460:	425a      	negs	r2, r3
 8004462:	415a      	adcs	r2, r3
 8004464:	602a      	str	r2, [r5, #0]
 8004466:	e7ee      	b.n	8004446 <__swhatbuf_r+0x1e>
 8004468:	2340      	movs	r3, #64	; 0x40
 800446a:	2000      	movs	r0, #0
 800446c:	6023      	str	r3, [r4, #0]
 800446e:	b016      	add	sp, #88	; 0x58
 8004470:	bd70      	pop	{r4, r5, r6, pc}
	...

08004474 <__smakebuf_r>:
 8004474:	898b      	ldrh	r3, [r1, #12]
 8004476:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004478:	079d      	lsls	r5, r3, #30
 800447a:	4606      	mov	r6, r0
 800447c:	460c      	mov	r4, r1
 800447e:	d507      	bpl.n	8004490 <__smakebuf_r+0x1c>
 8004480:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004484:	6023      	str	r3, [r4, #0]
 8004486:	6123      	str	r3, [r4, #16]
 8004488:	2301      	movs	r3, #1
 800448a:	6163      	str	r3, [r4, #20]
 800448c:	b002      	add	sp, #8
 800448e:	bd70      	pop	{r4, r5, r6, pc}
 8004490:	ab01      	add	r3, sp, #4
 8004492:	466a      	mov	r2, sp
 8004494:	f7ff ffc8 	bl	8004428 <__swhatbuf_r>
 8004498:	9900      	ldr	r1, [sp, #0]
 800449a:	4605      	mov	r5, r0
 800449c:	4630      	mov	r0, r6
 800449e:	f000 f895 	bl	80045cc <_malloc_r>
 80044a2:	b948      	cbnz	r0, 80044b8 <__smakebuf_r+0x44>
 80044a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044a8:	059a      	lsls	r2, r3, #22
 80044aa:	d4ef      	bmi.n	800448c <__smakebuf_r+0x18>
 80044ac:	f023 0303 	bic.w	r3, r3, #3
 80044b0:	f043 0302 	orr.w	r3, r3, #2
 80044b4:	81a3      	strh	r3, [r4, #12]
 80044b6:	e7e3      	b.n	8004480 <__smakebuf_r+0xc>
 80044b8:	4b0d      	ldr	r3, [pc, #52]	; (80044f0 <__smakebuf_r+0x7c>)
 80044ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80044bc:	89a3      	ldrh	r3, [r4, #12]
 80044be:	6020      	str	r0, [r4, #0]
 80044c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044c4:	81a3      	strh	r3, [r4, #12]
 80044c6:	9b00      	ldr	r3, [sp, #0]
 80044c8:	6163      	str	r3, [r4, #20]
 80044ca:	9b01      	ldr	r3, [sp, #4]
 80044cc:	6120      	str	r0, [r4, #16]
 80044ce:	b15b      	cbz	r3, 80044e8 <__smakebuf_r+0x74>
 80044d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80044d4:	4630      	mov	r0, r6
 80044d6:	f000 f975 	bl	80047c4 <_isatty_r>
 80044da:	b128      	cbz	r0, 80044e8 <__smakebuf_r+0x74>
 80044dc:	89a3      	ldrh	r3, [r4, #12]
 80044de:	f023 0303 	bic.w	r3, r3, #3
 80044e2:	f043 0301 	orr.w	r3, r3, #1
 80044e6:	81a3      	strh	r3, [r4, #12]
 80044e8:	89a0      	ldrh	r0, [r4, #12]
 80044ea:	4305      	orrs	r5, r0
 80044ec:	81a5      	strh	r5, [r4, #12]
 80044ee:	e7cd      	b.n	800448c <__smakebuf_r+0x18>
 80044f0:	08004281 	.word	0x08004281

080044f4 <_free_r>:
 80044f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80044f6:	2900      	cmp	r1, #0
 80044f8:	d044      	beq.n	8004584 <_free_r+0x90>
 80044fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044fe:	9001      	str	r0, [sp, #4]
 8004500:	2b00      	cmp	r3, #0
 8004502:	f1a1 0404 	sub.w	r4, r1, #4
 8004506:	bfb8      	it	lt
 8004508:	18e4      	addlt	r4, r4, r3
 800450a:	f000 f97d 	bl	8004808 <__malloc_lock>
 800450e:	4a1e      	ldr	r2, [pc, #120]	; (8004588 <_free_r+0x94>)
 8004510:	9801      	ldr	r0, [sp, #4]
 8004512:	6813      	ldr	r3, [r2, #0]
 8004514:	b933      	cbnz	r3, 8004524 <_free_r+0x30>
 8004516:	6063      	str	r3, [r4, #4]
 8004518:	6014      	str	r4, [r2, #0]
 800451a:	b003      	add	sp, #12
 800451c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004520:	f000 b978 	b.w	8004814 <__malloc_unlock>
 8004524:	42a3      	cmp	r3, r4
 8004526:	d908      	bls.n	800453a <_free_r+0x46>
 8004528:	6825      	ldr	r5, [r4, #0]
 800452a:	1961      	adds	r1, r4, r5
 800452c:	428b      	cmp	r3, r1
 800452e:	bf01      	itttt	eq
 8004530:	6819      	ldreq	r1, [r3, #0]
 8004532:	685b      	ldreq	r3, [r3, #4]
 8004534:	1949      	addeq	r1, r1, r5
 8004536:	6021      	streq	r1, [r4, #0]
 8004538:	e7ed      	b.n	8004516 <_free_r+0x22>
 800453a:	461a      	mov	r2, r3
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	b10b      	cbz	r3, 8004544 <_free_r+0x50>
 8004540:	42a3      	cmp	r3, r4
 8004542:	d9fa      	bls.n	800453a <_free_r+0x46>
 8004544:	6811      	ldr	r1, [r2, #0]
 8004546:	1855      	adds	r5, r2, r1
 8004548:	42a5      	cmp	r5, r4
 800454a:	d10b      	bne.n	8004564 <_free_r+0x70>
 800454c:	6824      	ldr	r4, [r4, #0]
 800454e:	4421      	add	r1, r4
 8004550:	1854      	adds	r4, r2, r1
 8004552:	42a3      	cmp	r3, r4
 8004554:	6011      	str	r1, [r2, #0]
 8004556:	d1e0      	bne.n	800451a <_free_r+0x26>
 8004558:	681c      	ldr	r4, [r3, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	6053      	str	r3, [r2, #4]
 800455e:	4421      	add	r1, r4
 8004560:	6011      	str	r1, [r2, #0]
 8004562:	e7da      	b.n	800451a <_free_r+0x26>
 8004564:	d902      	bls.n	800456c <_free_r+0x78>
 8004566:	230c      	movs	r3, #12
 8004568:	6003      	str	r3, [r0, #0]
 800456a:	e7d6      	b.n	800451a <_free_r+0x26>
 800456c:	6825      	ldr	r5, [r4, #0]
 800456e:	1961      	adds	r1, r4, r5
 8004570:	428b      	cmp	r3, r1
 8004572:	bf04      	itt	eq
 8004574:	6819      	ldreq	r1, [r3, #0]
 8004576:	685b      	ldreq	r3, [r3, #4]
 8004578:	6063      	str	r3, [r4, #4]
 800457a:	bf04      	itt	eq
 800457c:	1949      	addeq	r1, r1, r5
 800457e:	6021      	streq	r1, [r4, #0]
 8004580:	6054      	str	r4, [r2, #4]
 8004582:	e7ca      	b.n	800451a <_free_r+0x26>
 8004584:	b003      	add	sp, #12
 8004586:	bd30      	pop	{r4, r5, pc}
 8004588:	20012f14 	.word	0x20012f14

0800458c <sbrk_aligned>:
 800458c:	b570      	push	{r4, r5, r6, lr}
 800458e:	4e0e      	ldr	r6, [pc, #56]	; (80045c8 <sbrk_aligned+0x3c>)
 8004590:	460c      	mov	r4, r1
 8004592:	6831      	ldr	r1, [r6, #0]
 8004594:	4605      	mov	r5, r0
 8004596:	b911      	cbnz	r1, 800459e <sbrk_aligned+0x12>
 8004598:	f000 f88c 	bl	80046b4 <_sbrk_r>
 800459c:	6030      	str	r0, [r6, #0]
 800459e:	4621      	mov	r1, r4
 80045a0:	4628      	mov	r0, r5
 80045a2:	f000 f887 	bl	80046b4 <_sbrk_r>
 80045a6:	1c43      	adds	r3, r0, #1
 80045a8:	d00a      	beq.n	80045c0 <sbrk_aligned+0x34>
 80045aa:	1cc4      	adds	r4, r0, #3
 80045ac:	f024 0403 	bic.w	r4, r4, #3
 80045b0:	42a0      	cmp	r0, r4
 80045b2:	d007      	beq.n	80045c4 <sbrk_aligned+0x38>
 80045b4:	1a21      	subs	r1, r4, r0
 80045b6:	4628      	mov	r0, r5
 80045b8:	f000 f87c 	bl	80046b4 <_sbrk_r>
 80045bc:	3001      	adds	r0, #1
 80045be:	d101      	bne.n	80045c4 <sbrk_aligned+0x38>
 80045c0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80045c4:	4620      	mov	r0, r4
 80045c6:	bd70      	pop	{r4, r5, r6, pc}
 80045c8:	20012f18 	.word	0x20012f18

080045cc <_malloc_r>:
 80045cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045d0:	1ccd      	adds	r5, r1, #3
 80045d2:	f025 0503 	bic.w	r5, r5, #3
 80045d6:	3508      	adds	r5, #8
 80045d8:	2d0c      	cmp	r5, #12
 80045da:	bf38      	it	cc
 80045dc:	250c      	movcc	r5, #12
 80045de:	2d00      	cmp	r5, #0
 80045e0:	4607      	mov	r7, r0
 80045e2:	db01      	blt.n	80045e8 <_malloc_r+0x1c>
 80045e4:	42a9      	cmp	r1, r5
 80045e6:	d905      	bls.n	80045f4 <_malloc_r+0x28>
 80045e8:	230c      	movs	r3, #12
 80045ea:	603b      	str	r3, [r7, #0]
 80045ec:	2600      	movs	r6, #0
 80045ee:	4630      	mov	r0, r6
 80045f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045f4:	4e2e      	ldr	r6, [pc, #184]	; (80046b0 <_malloc_r+0xe4>)
 80045f6:	f000 f907 	bl	8004808 <__malloc_lock>
 80045fa:	6833      	ldr	r3, [r6, #0]
 80045fc:	461c      	mov	r4, r3
 80045fe:	bb34      	cbnz	r4, 800464e <_malloc_r+0x82>
 8004600:	4629      	mov	r1, r5
 8004602:	4638      	mov	r0, r7
 8004604:	f7ff ffc2 	bl	800458c <sbrk_aligned>
 8004608:	1c43      	adds	r3, r0, #1
 800460a:	4604      	mov	r4, r0
 800460c:	d14d      	bne.n	80046aa <_malloc_r+0xde>
 800460e:	6834      	ldr	r4, [r6, #0]
 8004610:	4626      	mov	r6, r4
 8004612:	2e00      	cmp	r6, #0
 8004614:	d140      	bne.n	8004698 <_malloc_r+0xcc>
 8004616:	6823      	ldr	r3, [r4, #0]
 8004618:	4631      	mov	r1, r6
 800461a:	4638      	mov	r0, r7
 800461c:	eb04 0803 	add.w	r8, r4, r3
 8004620:	f000 f848 	bl	80046b4 <_sbrk_r>
 8004624:	4580      	cmp	r8, r0
 8004626:	d13a      	bne.n	800469e <_malloc_r+0xd2>
 8004628:	6821      	ldr	r1, [r4, #0]
 800462a:	3503      	adds	r5, #3
 800462c:	1a6d      	subs	r5, r5, r1
 800462e:	f025 0503 	bic.w	r5, r5, #3
 8004632:	3508      	adds	r5, #8
 8004634:	2d0c      	cmp	r5, #12
 8004636:	bf38      	it	cc
 8004638:	250c      	movcc	r5, #12
 800463a:	4629      	mov	r1, r5
 800463c:	4638      	mov	r0, r7
 800463e:	f7ff ffa5 	bl	800458c <sbrk_aligned>
 8004642:	3001      	adds	r0, #1
 8004644:	d02b      	beq.n	800469e <_malloc_r+0xd2>
 8004646:	6823      	ldr	r3, [r4, #0]
 8004648:	442b      	add	r3, r5
 800464a:	6023      	str	r3, [r4, #0]
 800464c:	e00e      	b.n	800466c <_malloc_r+0xa0>
 800464e:	6822      	ldr	r2, [r4, #0]
 8004650:	1b52      	subs	r2, r2, r5
 8004652:	d41e      	bmi.n	8004692 <_malloc_r+0xc6>
 8004654:	2a0b      	cmp	r2, #11
 8004656:	d916      	bls.n	8004686 <_malloc_r+0xba>
 8004658:	1961      	adds	r1, r4, r5
 800465a:	42a3      	cmp	r3, r4
 800465c:	6025      	str	r5, [r4, #0]
 800465e:	bf18      	it	ne
 8004660:	6059      	strne	r1, [r3, #4]
 8004662:	6863      	ldr	r3, [r4, #4]
 8004664:	bf08      	it	eq
 8004666:	6031      	streq	r1, [r6, #0]
 8004668:	5162      	str	r2, [r4, r5]
 800466a:	604b      	str	r3, [r1, #4]
 800466c:	4638      	mov	r0, r7
 800466e:	f104 060b 	add.w	r6, r4, #11
 8004672:	f000 f8cf 	bl	8004814 <__malloc_unlock>
 8004676:	f026 0607 	bic.w	r6, r6, #7
 800467a:	1d23      	adds	r3, r4, #4
 800467c:	1af2      	subs	r2, r6, r3
 800467e:	d0b6      	beq.n	80045ee <_malloc_r+0x22>
 8004680:	1b9b      	subs	r3, r3, r6
 8004682:	50a3      	str	r3, [r4, r2]
 8004684:	e7b3      	b.n	80045ee <_malloc_r+0x22>
 8004686:	6862      	ldr	r2, [r4, #4]
 8004688:	42a3      	cmp	r3, r4
 800468a:	bf0c      	ite	eq
 800468c:	6032      	streq	r2, [r6, #0]
 800468e:	605a      	strne	r2, [r3, #4]
 8004690:	e7ec      	b.n	800466c <_malloc_r+0xa0>
 8004692:	4623      	mov	r3, r4
 8004694:	6864      	ldr	r4, [r4, #4]
 8004696:	e7b2      	b.n	80045fe <_malloc_r+0x32>
 8004698:	4634      	mov	r4, r6
 800469a:	6876      	ldr	r6, [r6, #4]
 800469c:	e7b9      	b.n	8004612 <_malloc_r+0x46>
 800469e:	230c      	movs	r3, #12
 80046a0:	603b      	str	r3, [r7, #0]
 80046a2:	4638      	mov	r0, r7
 80046a4:	f000 f8b6 	bl	8004814 <__malloc_unlock>
 80046a8:	e7a1      	b.n	80045ee <_malloc_r+0x22>
 80046aa:	6025      	str	r5, [r4, #0]
 80046ac:	e7de      	b.n	800466c <_malloc_r+0xa0>
 80046ae:	bf00      	nop
 80046b0:	20012f14 	.word	0x20012f14

080046b4 <_sbrk_r>:
 80046b4:	b538      	push	{r3, r4, r5, lr}
 80046b6:	4d06      	ldr	r5, [pc, #24]	; (80046d0 <_sbrk_r+0x1c>)
 80046b8:	2300      	movs	r3, #0
 80046ba:	4604      	mov	r4, r0
 80046bc:	4608      	mov	r0, r1
 80046be:	602b      	str	r3, [r5, #0]
 80046c0:	f000 f906 	bl	80048d0 <_sbrk>
 80046c4:	1c43      	adds	r3, r0, #1
 80046c6:	d102      	bne.n	80046ce <_sbrk_r+0x1a>
 80046c8:	682b      	ldr	r3, [r5, #0]
 80046ca:	b103      	cbz	r3, 80046ce <_sbrk_r+0x1a>
 80046cc:	6023      	str	r3, [r4, #0]
 80046ce:	bd38      	pop	{r3, r4, r5, pc}
 80046d0:	20012f1c 	.word	0x20012f1c

080046d4 <__sread>:
 80046d4:	b510      	push	{r4, lr}
 80046d6:	460c      	mov	r4, r1
 80046d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046dc:	f000 f8a0 	bl	8004820 <_read_r>
 80046e0:	2800      	cmp	r0, #0
 80046e2:	bfab      	itete	ge
 80046e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80046e6:	89a3      	ldrhlt	r3, [r4, #12]
 80046e8:	181b      	addge	r3, r3, r0
 80046ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80046ee:	bfac      	ite	ge
 80046f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80046f2:	81a3      	strhlt	r3, [r4, #12]
 80046f4:	bd10      	pop	{r4, pc}

080046f6 <__swrite>:
 80046f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046fa:	461f      	mov	r7, r3
 80046fc:	898b      	ldrh	r3, [r1, #12]
 80046fe:	05db      	lsls	r3, r3, #23
 8004700:	4605      	mov	r5, r0
 8004702:	460c      	mov	r4, r1
 8004704:	4616      	mov	r6, r2
 8004706:	d505      	bpl.n	8004714 <__swrite+0x1e>
 8004708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800470c:	2302      	movs	r3, #2
 800470e:	2200      	movs	r2, #0
 8004710:	f000 f868 	bl	80047e4 <_lseek_r>
 8004714:	89a3      	ldrh	r3, [r4, #12]
 8004716:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800471a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800471e:	81a3      	strh	r3, [r4, #12]
 8004720:	4632      	mov	r2, r6
 8004722:	463b      	mov	r3, r7
 8004724:	4628      	mov	r0, r5
 8004726:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800472a:	f000 b817 	b.w	800475c <_write_r>

0800472e <__sseek>:
 800472e:	b510      	push	{r4, lr}
 8004730:	460c      	mov	r4, r1
 8004732:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004736:	f000 f855 	bl	80047e4 <_lseek_r>
 800473a:	1c43      	adds	r3, r0, #1
 800473c:	89a3      	ldrh	r3, [r4, #12]
 800473e:	bf15      	itete	ne
 8004740:	6560      	strne	r0, [r4, #84]	; 0x54
 8004742:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004746:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800474a:	81a3      	strheq	r3, [r4, #12]
 800474c:	bf18      	it	ne
 800474e:	81a3      	strhne	r3, [r4, #12]
 8004750:	bd10      	pop	{r4, pc}

08004752 <__sclose>:
 8004752:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004756:	f000 b813 	b.w	8004780 <_close_r>
	...

0800475c <_write_r>:
 800475c:	b538      	push	{r3, r4, r5, lr}
 800475e:	4d07      	ldr	r5, [pc, #28]	; (800477c <_write_r+0x20>)
 8004760:	4604      	mov	r4, r0
 8004762:	4608      	mov	r0, r1
 8004764:	4611      	mov	r1, r2
 8004766:	2200      	movs	r2, #0
 8004768:	602a      	str	r2, [r5, #0]
 800476a:	461a      	mov	r2, r3
 800476c:	f7fc faa1 	bl	8000cb2 <_write>
 8004770:	1c43      	adds	r3, r0, #1
 8004772:	d102      	bne.n	800477a <_write_r+0x1e>
 8004774:	682b      	ldr	r3, [r5, #0]
 8004776:	b103      	cbz	r3, 800477a <_write_r+0x1e>
 8004778:	6023      	str	r3, [r4, #0]
 800477a:	bd38      	pop	{r3, r4, r5, pc}
 800477c:	20012f1c 	.word	0x20012f1c

08004780 <_close_r>:
 8004780:	b538      	push	{r3, r4, r5, lr}
 8004782:	4d06      	ldr	r5, [pc, #24]	; (800479c <_close_r+0x1c>)
 8004784:	2300      	movs	r3, #0
 8004786:	4604      	mov	r4, r0
 8004788:	4608      	mov	r0, r1
 800478a:	602b      	str	r3, [r5, #0]
 800478c:	f7fc faad 	bl	8000cea <_close>
 8004790:	1c43      	adds	r3, r0, #1
 8004792:	d102      	bne.n	800479a <_close_r+0x1a>
 8004794:	682b      	ldr	r3, [r5, #0]
 8004796:	b103      	cbz	r3, 800479a <_close_r+0x1a>
 8004798:	6023      	str	r3, [r4, #0]
 800479a:	bd38      	pop	{r3, r4, r5, pc}
 800479c:	20012f1c 	.word	0x20012f1c

080047a0 <_fstat_r>:
 80047a0:	b538      	push	{r3, r4, r5, lr}
 80047a2:	4d07      	ldr	r5, [pc, #28]	; (80047c0 <_fstat_r+0x20>)
 80047a4:	2300      	movs	r3, #0
 80047a6:	4604      	mov	r4, r0
 80047a8:	4608      	mov	r0, r1
 80047aa:	4611      	mov	r1, r2
 80047ac:	602b      	str	r3, [r5, #0]
 80047ae:	f7fc faa8 	bl	8000d02 <_fstat>
 80047b2:	1c43      	adds	r3, r0, #1
 80047b4:	d102      	bne.n	80047bc <_fstat_r+0x1c>
 80047b6:	682b      	ldr	r3, [r5, #0]
 80047b8:	b103      	cbz	r3, 80047bc <_fstat_r+0x1c>
 80047ba:	6023      	str	r3, [r4, #0]
 80047bc:	bd38      	pop	{r3, r4, r5, pc}
 80047be:	bf00      	nop
 80047c0:	20012f1c 	.word	0x20012f1c

080047c4 <_isatty_r>:
 80047c4:	b538      	push	{r3, r4, r5, lr}
 80047c6:	4d06      	ldr	r5, [pc, #24]	; (80047e0 <_isatty_r+0x1c>)
 80047c8:	2300      	movs	r3, #0
 80047ca:	4604      	mov	r4, r0
 80047cc:	4608      	mov	r0, r1
 80047ce:	602b      	str	r3, [r5, #0]
 80047d0:	f7fc faa7 	bl	8000d22 <_isatty>
 80047d4:	1c43      	adds	r3, r0, #1
 80047d6:	d102      	bne.n	80047de <_isatty_r+0x1a>
 80047d8:	682b      	ldr	r3, [r5, #0]
 80047da:	b103      	cbz	r3, 80047de <_isatty_r+0x1a>
 80047dc:	6023      	str	r3, [r4, #0]
 80047de:	bd38      	pop	{r3, r4, r5, pc}
 80047e0:	20012f1c 	.word	0x20012f1c

080047e4 <_lseek_r>:
 80047e4:	b538      	push	{r3, r4, r5, lr}
 80047e6:	4d07      	ldr	r5, [pc, #28]	; (8004804 <_lseek_r+0x20>)
 80047e8:	4604      	mov	r4, r0
 80047ea:	4608      	mov	r0, r1
 80047ec:	4611      	mov	r1, r2
 80047ee:	2200      	movs	r2, #0
 80047f0:	602a      	str	r2, [r5, #0]
 80047f2:	461a      	mov	r2, r3
 80047f4:	f7fc faa0 	bl	8000d38 <_lseek>
 80047f8:	1c43      	adds	r3, r0, #1
 80047fa:	d102      	bne.n	8004802 <_lseek_r+0x1e>
 80047fc:	682b      	ldr	r3, [r5, #0]
 80047fe:	b103      	cbz	r3, 8004802 <_lseek_r+0x1e>
 8004800:	6023      	str	r3, [r4, #0]
 8004802:	bd38      	pop	{r3, r4, r5, pc}
 8004804:	20012f1c 	.word	0x20012f1c

08004808 <__malloc_lock>:
 8004808:	4801      	ldr	r0, [pc, #4]	; (8004810 <__malloc_lock+0x8>)
 800480a:	f7ff be0b 	b.w	8004424 <__retarget_lock_acquire_recursive>
 800480e:	bf00      	nop
 8004810:	20012f10 	.word	0x20012f10

08004814 <__malloc_unlock>:
 8004814:	4801      	ldr	r0, [pc, #4]	; (800481c <__malloc_unlock+0x8>)
 8004816:	f7ff be06 	b.w	8004426 <__retarget_lock_release_recursive>
 800481a:	bf00      	nop
 800481c:	20012f10 	.word	0x20012f10

08004820 <_read_r>:
 8004820:	b538      	push	{r3, r4, r5, lr}
 8004822:	4d07      	ldr	r5, [pc, #28]	; (8004840 <_read_r+0x20>)
 8004824:	4604      	mov	r4, r0
 8004826:	4608      	mov	r0, r1
 8004828:	4611      	mov	r1, r2
 800482a:	2200      	movs	r2, #0
 800482c:	602a      	str	r2, [r5, #0]
 800482e:	461a      	mov	r2, r3
 8004830:	f7fc fa22 	bl	8000c78 <_read>
 8004834:	1c43      	adds	r3, r0, #1
 8004836:	d102      	bne.n	800483e <_read_r+0x1e>
 8004838:	682b      	ldr	r3, [r5, #0]
 800483a:	b103      	cbz	r3, 800483e <_read_r+0x1e>
 800483c:	6023      	str	r3, [r4, #0]
 800483e:	bd38      	pop	{r3, r4, r5, pc}
 8004840:	20012f1c 	.word	0x20012f1c

08004844 <round>:
 8004844:	ec51 0b10 	vmov	r0, r1, d0
 8004848:	b570      	push	{r4, r5, r6, lr}
 800484a:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800484e:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8004852:	2c13      	cmp	r4, #19
 8004854:	ee10 2a10 	vmov	r2, s0
 8004858:	460b      	mov	r3, r1
 800485a:	dc19      	bgt.n	8004890 <round+0x4c>
 800485c:	2c00      	cmp	r4, #0
 800485e:	da09      	bge.n	8004874 <round+0x30>
 8004860:	3401      	adds	r4, #1
 8004862:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8004866:	d103      	bne.n	8004870 <round+0x2c>
 8004868:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800486c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004870:	2200      	movs	r2, #0
 8004872:	e028      	b.n	80048c6 <round+0x82>
 8004874:	4d15      	ldr	r5, [pc, #84]	; (80048cc <round+0x88>)
 8004876:	4125      	asrs	r5, r4
 8004878:	ea01 0605 	and.w	r6, r1, r5
 800487c:	4332      	orrs	r2, r6
 800487e:	d00e      	beq.n	800489e <round+0x5a>
 8004880:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004884:	fa42 f404 	asr.w	r4, r2, r4
 8004888:	4423      	add	r3, r4
 800488a:	ea23 0305 	bic.w	r3, r3, r5
 800488e:	e7ef      	b.n	8004870 <round+0x2c>
 8004890:	2c33      	cmp	r4, #51	; 0x33
 8004892:	dd07      	ble.n	80048a4 <round+0x60>
 8004894:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8004898:	d101      	bne.n	800489e <round+0x5a>
 800489a:	f7fb fca7 	bl	80001ec <__adddf3>
 800489e:	ec41 0b10 	vmov	d0, r0, r1
 80048a2:	bd70      	pop	{r4, r5, r6, pc}
 80048a4:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 80048a8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80048ac:	40f5      	lsrs	r5, r6
 80048ae:	4228      	tst	r0, r5
 80048b0:	d0f5      	beq.n	800489e <round+0x5a>
 80048b2:	2101      	movs	r1, #1
 80048b4:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80048b8:	fa01 f404 	lsl.w	r4, r1, r4
 80048bc:	1912      	adds	r2, r2, r4
 80048be:	bf28      	it	cs
 80048c0:	185b      	addcs	r3, r3, r1
 80048c2:	ea22 0205 	bic.w	r2, r2, r5
 80048c6:	4619      	mov	r1, r3
 80048c8:	4610      	mov	r0, r2
 80048ca:	e7e8      	b.n	800489e <round+0x5a>
 80048cc:	000fffff 	.word	0x000fffff

080048d0 <_sbrk>:
 80048d0:	4a04      	ldr	r2, [pc, #16]	; (80048e4 <_sbrk+0x14>)
 80048d2:	6811      	ldr	r1, [r2, #0]
 80048d4:	4603      	mov	r3, r0
 80048d6:	b909      	cbnz	r1, 80048dc <_sbrk+0xc>
 80048d8:	4903      	ldr	r1, [pc, #12]	; (80048e8 <_sbrk+0x18>)
 80048da:	6011      	str	r1, [r2, #0]
 80048dc:	6810      	ldr	r0, [r2, #0]
 80048de:	4403      	add	r3, r0
 80048e0:	6013      	str	r3, [r2, #0]
 80048e2:	4770      	bx	lr
 80048e4:	20012f20 	.word	0x20012f20
 80048e8:	20012f28 	.word	0x20012f28

080048ec <_init>:
 80048ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ee:	bf00      	nop
 80048f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048f2:	bc08      	pop	{r3}
 80048f4:	469e      	mov	lr, r3
 80048f6:	4770      	bx	lr

080048f8 <_fini>:
 80048f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048fa:	bf00      	nop
 80048fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048fe:	bc08      	pop	{r3}
 8004900:	469e      	mov	lr, r3
 8004902:	4770      	bx	lr
